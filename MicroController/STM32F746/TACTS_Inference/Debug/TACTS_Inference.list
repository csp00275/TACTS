
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018378  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000384d8  08018560  08018560  00028560  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08050a38  08050a38  00071578  2**0
                  CONTENTS
  4 .ARM          00000008  08050a38  08050a38  00060a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08050a40  08050a40  00071578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08050a40  08050a40  00060a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08050a44  08050a44  00060a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001578  20000000  08050a48  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008534  20001580  08051fc0  00071580  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20009ab4  08051fc0  00079ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00071578  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f07  00000000  00000000  000715a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048f8  00000000  00000000  000984af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  0009cda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  0009e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd1f  00000000  00000000  0009fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000239e1  00000000  00000000  000cbb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105f52  00000000  00000000  000ef540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f5492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008508  00000000  00000000  001f54e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001fd9ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001fdab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001580 	.word	0x20001580
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018530 	.word	0x08018530

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001584 	.word	0x20001584
 800020c:	08018530 	.word	0x08018530

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <aiInit>:
#endif

ai_buffer *ai_input;
ai_buffer *ai_output;

int aiInit(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
    ai_error err;
    const ai_handle acts[] = { activations };
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <aiInit+0x64>)
 8001060:	603b      	str	r3, [r7, #0]
	#if  NUM_SENSOR == 24
    err = ai_twoline_create_and_init(&allLine, acts, NULL);
	#elif  NUM_SENSOR == 36
    err = ai_threeline_create_and_init(&allLine, acts, NULL);
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <aiInit+0x68>)
 800106a:	f00d ffc9 	bl	800f000 <ai_threeline_create_and_init>
 800106e:	4603      	mov	r3, r0
 8001070:	607b      	str	r3, [r7, #4]
	#elif  NUM_SENSOR == 48
    err = ai_fourline_create_and_init(&allLine, acts, NULL);
	#endif
    if (err.type != AI_ERROR_NONE) {
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00a      	beq.n	800108e <aiInit+0x36>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiInit Error \n"), 100);
 8001078:	4912      	ldr	r1, [pc, #72]	; (80010c4 <aiInit+0x6c>)
 800107a:	4813      	ldr	r0, [pc, #76]	; (80010c8 <aiInit+0x70>)
 800107c:	f012 f94a 	bl	8013314 <siprintf>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	4910      	ldr	r1, [pc, #64]	; (80010c8 <aiInit+0x70>)
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <aiInit+0x74>)
 800108a:	f007 fc11 	bl	80088b0 <HAL_UART_Transmit>
    }
#if NUM_SENSOR == 24
    ai_input = ai_twoline_inputs_get(allLine, NULL);
    ai_output = ai_twoline_outputs_get(allLine, NULL);
#elif NUM_SENSOR == 36
    ai_input = ai_threeline_inputs_get(allLine, NULL);
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <aiInit+0x68>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f00e f827 	bl	800f0e8 <ai_threeline_inputs_get>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <aiInit+0x78>)
 800109e:	6013      	str	r3, [r2, #0]
    ai_output= ai_threeline_outputs_get(allLine, NULL);
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <aiInit+0x68>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00e f838 	bl	800f11c <ai_threeline_outputs_get>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <aiInit+0x7c>)
 80010b0:	6013      	str	r3, [r2, #0]
    ai_output = ai_fourline_outputs_get(allLine, NULL);
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200015a0 	.word	0x200015a0
 80010c0:	2000159c 	.word	0x2000159c
 80010c4:	08018560 	.word	0x08018560
 80010c8:	20005fc0 	.word	0x20005fc0
 80010cc:	20005f38 	.word	0x20005f38
 80010d0:	20002110 	.word	0x20002110
 80010d4:	20002114 	.word	0x20002114

080010d8 <aiRun>:


int aiRun(const ai_float *in_data, ai_float *out_data) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;

    // 1 - Update IO handlers with the data payload
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <aiRun+0x5c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <aiRun+0x60>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	605a      	str	r2, [r3, #4]

#if NUM_SENSOR == 24
    n_batch = ai_twoline_run(allLine, &ai_input[0], &ai_output[0]);
#elif NUM_SENSOR == 36
    n_batch = ai_threeline_run(allLine, &ai_input[0], &ai_output[0]);
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <aiRun+0x64>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <aiRun+0x5c>)
 80010f8:	6811      	ldr	r1, [r2, #0]
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <aiRun+0x60>)
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f00e f862 	bl	800f1c8 <ai_threeline_run>
 8001104:	60f8      	str	r0, [r7, #12]
    n_batch = ai_fourline_run(allLine, &ai_input[0], &ai_output[0]);
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    if (n_batch != 1) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d00d      	beq.n	8001128 <aiRun+0x50>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiRun Error \n"), 100);
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <aiRun+0x68>)
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <aiRun+0x6c>)
 8001110:	f012 f900 	bl	8013314 <siprintf>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	2364      	movs	r3, #100	; 0x64
 800111a:	490a      	ldr	r1, [pc, #40]	; (8001144 <aiRun+0x6c>)
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <aiRun+0x70>)
 800111e:	f007 fbc7 	bl	80088b0 <HAL_UART_Transmit>
        return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e000      	b.n	800112a <aiRun+0x52>
    };
    return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20002110 	.word	0x20002110
 8001138:	20002114 	.word	0x20002114
 800113c:	2000159c 	.word	0x2000159c
 8001140:	08018570 	.word	0x08018570
 8001144:	20005fc0 	.word	0x20005fc0
 8001148:	20005f38 	.word	0x20005f38
 800114c:	00000000 	.word	0x00000000

08001150 <CalculateStats>:
float sensorValues[NUM_SENSOR][NUM_READINGS-throwSomenumber] = {0};
float sensorAverages[NUM_SENSOR] = {0};
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

void CalculateStats(int sensorIndex) {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 800116a:	4a49      	ldr	r2, [pc, #292]	; (8001290 <CalculateStats+0x140>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	e013      	b.n	80011a2 <CalculateStats+0x52>
 800117a:	4946      	ldr	r1, [pc, #280]	; (8001294 <CalculateStats+0x144>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2264      	movs	r2, #100	; 0x64
 8001180:	fb03 f202 	mul.w	r2, r3, r2
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ed97 7a07 	vldr	s14, [r7, #28]
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	edc7 7a07 	vstr	s15, [r7, #28]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbe7      	blt.n	800117a <CalculateStats+0x2a>
    mean = sum / count;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80011b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011bc:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 80011c0:	4a35      	ldr	r2, [pc, #212]	; (8001298 <CalculateStats+0x148>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = 0; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	e030      	b.n	8001234 <CalculateStats+0xe4>
 80011d2:	4930      	ldr	r1, [pc, #192]	; (8001294 <CalculateStats+0x144>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2264      	movs	r2, #100	; 0x64
 80011d8:	fb03 f202 	mul.w	r2, r3, r2
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	ed93 7a00 	vldr	s14, [r3]
 80011e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	ee17 0a90 	vmov	r0, s15
 80011f4:	f7ff f9d8 	bl	80005a8 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001288 <CalculateStats+0x138>
 8001200:	ec43 2b10 	vmov	d0, r2, r3
 8001204:	f016 fa0c 	bl	8017620 <pow>
 8001208:	ec55 4b10 	vmov	r4, r5, d0
 800120c:	69b8      	ldr	r0, [r7, #24]
 800120e:	f7ff f9cb 	bl	80005a8 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff f867 	bl	80002ec <__adddf3>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fd0f 	bl	8000c48 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	3301      	adds	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbca      	blt.n	80011d2 <CalculateStats+0x82>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	ed97 7a06 	vldr	s14, [r7, #24]
 800124a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800124e:	ee16 0a90 	vmov	r0, s13
 8001252:	f7ff f9a9 	bl	80005a8 <__aeabi_f2d>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	ec43 2b10 	vmov	d0, r2, r3
 800125e:	f016 fa4f 	bl	8017700 <sqrt>
 8001262:	ec53 2b10 	vmov	r2, r3, d0
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fced 	bl	8000c48 <__aeabi_d2f>
 800126e:	4602      	mov	r2, r0
 8001270:	490a      	ldr	r1, [pc, #40]	; (800129c <CalculateStats+0x14c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	601a      	str	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bdb0      	pop	{r4, r5, r7, pc}
 8001282:	bf00      	nop
 8001284:	f3af 8000 	nop.w
 8001288:	00000000 	.word	0x00000000
 800128c:	40000000 	.word	0x40000000
 8001290:	20005a78 	.word	0x20005a78
 8001294:	20002118 	.word	0x20002118
 8001298:	20005958 	.word	0x20005958
 800129c:	200059e8 	.word	0x200059e8

080012a0 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Sensor Avg Std\r\n"), 100);
 80012a6:	4920      	ldr	r1, [pc, #128]	; (8001328 <TransmitStats+0x88>)
 80012a8:	4820      	ldr	r0, [pc, #128]	; (800132c <TransmitStats+0x8c>)
 80012aa:	f012 f833 	bl	8013314 <siprintf>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	2364      	movs	r3, #100	; 0x64
 80012b4:	491d      	ldr	r1, [pc, #116]	; (800132c <TransmitStats+0x8c>)
 80012b6:	481e      	ldr	r0, [pc, #120]	; (8001330 <TransmitStats+0x90>)
 80012b8:	f007 fafa 	bl	80088b0 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	e029      	b.n	8001316 <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff44 	bl	8001150 <CalculateStats>
    	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "%d %.2f %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]), 100);
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <TransmitStats+0x94>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f968 	bl	80005a8 <__aeabi_f2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <TransmitStats+0x98>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f95e 	bl	80005a8 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012f4:	e9cd 4500 	strd	r4, r5, [sp]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4910      	ldr	r1, [pc, #64]	; (800133c <TransmitStats+0x9c>)
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <TransmitStats+0x8c>)
 80012fe:	f012 f809 	bl	8013314 <siprintf>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	4908      	ldr	r1, [pc, #32]	; (800132c <TransmitStats+0x8c>)
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <TransmitStats+0x90>)
 800130c:	f007 fad0 	bl	80088b0 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b23      	cmp	r3, #35	; 0x23
 800131a:	ddd2      	ble.n	80012c2 <TransmitStats+0x22>
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bdb0      	pop	{r4, r5, r7, pc}
 8001326:	bf00      	nop
 8001328:	08018580 	.word	0x08018580
 800132c:	20005fc0 	.word	0x20005fc0
 8001330:	20005f38 	.word	0x20005f38
 8001334:	20005958 	.word	0x20005958
 8001338:	200059e8 	.word	0x200059e8
 800133c:	08018594 	.word	0x08018594

08001340 <ResetSensorData>:

void ResetSensorData() {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	e014      	b.n	8001376 <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <ResetSensorData+0x48>)
 8001358:	4413      	add	r3, r2
 800135a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f011 f85f 	bl	8012424 <memset>
        readingCount[i] = 0;
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <ResetSensorData+0x4c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2100      	movs	r1, #0
 800136c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3301      	adds	r3, #1
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b23      	cmp	r3, #35	; 0x23
 800137a:	dde7      	ble.n	800134c <ResetSensorData+0xc>
    }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20002118 	.word	0x20002118
 800138c:	20005a78 	.word	0x20005a78

08001390 <InitStats>:

void InitStats(){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
	for(int i; i<NUM_SENSOR;i++){
 8001396:	e010      	b.n	80013ba <InitStats+0x2a>
		sensorAverages[i] = 0;
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <InitStats+0x40>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
		sensorStdDevs[i] = 0;
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <InitStats+0x44>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
	for(int i; i<NUM_SENSOR;i++){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b23      	cmp	r3, #35	; 0x23
 80013be:	ddeb      	ble.n	8001398 <InitStats+0x8>
	}
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20005958 	.word	0x20005958
 80013d4:	200059e8 	.word	0x200059e8

080013d8 <ProcessCommand>:

extern TIM_HandleTypeDef htim2;


void ProcessCommand(uint8_t *commandBuffer)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

    if (command_in_progress) {
 80013e0:	4b5c      	ldr	r3, [pc, #368]	; (8001554 <ProcessCommand+0x17c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <ProcessCommand+0x20>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Command is currently executing, please wait...\n", 48, 100);
 80013ea:	2364      	movs	r3, #100	; 0x64
 80013ec:	2230      	movs	r2, #48	; 0x30
 80013ee:	495a      	ldr	r1, [pc, #360]	; (8001558 <ProcessCommand+0x180>)
 80013f0:	485a      	ldr	r0, [pc, #360]	; (800155c <ProcessCommand+0x184>)
 80013f2:	f007 fa5d 	bl	80088b0 <HAL_UART_Transmit>
        return;
 80013f6:	e0a9      	b.n	800154c <ProcessCommand+0x174>
    }

    command_in_progress = 1; // 명령 실행 상태 설정
 80013f8:	4b56      	ldr	r3, [pc, #344]	; (8001554 <ProcessCommand+0x17c>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]

    char *command = strtok((char*)commandBuffer, " "); // Command separation
 80013fe:	4958      	ldr	r1, [pc, #352]	; (8001560 <ProcessCommand+0x188>)
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f012 fe49 	bl	8014098 <strtok>
 8001406:	60f8      	str	r0, [r7, #12]
    char *argument = strtok(NULL, " "); // argument seperation
 8001408:	4955      	ldr	r1, [pc, #340]	; (8001560 <ProcessCommand+0x188>)
 800140a:	2000      	movs	r0, #0
 800140c:	f012 fe44 	bl	8014098 <strtok>
 8001410:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 8001412:	4954      	ldr	r1, [pc, #336]	; (8001564 <ProcessCommand+0x18c>)
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7fe fefb 	bl	8000210 <strcmp>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10b      	bne.n	8001438 <ProcessCommand+0x60>
 8001420:	4951      	ldr	r1, [pc, #324]	; (8001568 <ProcessCommand+0x190>)
 8001422:	4852      	ldr	r0, [pc, #328]	; (800156c <ProcessCommand+0x194>)
 8001424:	f011 ff76 	bl	8013314 <siprintf>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	494f      	ldr	r1, [pc, #316]	; (800156c <ProcessCommand+0x194>)
 8001430:	484a      	ldr	r0, [pc, #296]	; (800155c <ProcessCommand+0x184>)
 8001432:	f007 fa3d 	bl	80088b0 <HAL_UART_Transmit>
 8001436:	e086      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "sensori2c") == 0) {SensorI2CCommand();} //sensori2c
 8001438:	494d      	ldr	r1, [pc, #308]	; (8001570 <ProcessCommand+0x198>)
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7fe fee8 	bl	8000210 <strcmp>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <ProcessCommand+0x74>
 8001446:	f000 f8ad 	bl	80015a4 <SensorI2CCommand>
 800144a:	e07c      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "seti2c") == 0) {SetI2CCommand();} //seti2c
 800144c:	4949      	ldr	r1, [pc, #292]	; (8001574 <ProcessCommand+0x19c>)
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7fe fede 	bl	8000210 <strcmp>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <ProcessCommand+0x88>
 800145a:	f000 f951 	bl	8001700 <SetI2CCommand>
 800145e:	e072      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "rev") == 0) {RevCommand(argument);}
 8001460:	4945      	ldr	r1, [pc, #276]	; (8001578 <ProcessCommand+0x1a0>)
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7fe fed4 	bl	8000210 <strcmp>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <ProcessCommand+0x9e>
 800146e:	68b8      	ldr	r0, [r7, #8]
 8001470:	f000 fa6c 	bl	800194c <RevCommand>
 8001474:	e067      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "lin") == 0) {LinCommand(argument);}
 8001476:	4941      	ldr	r1, [pc, #260]	; (800157c <ProcessCommand+0x1a4>)
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7fe fec9 	bl	8000210 <strcmp>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <ProcessCommand+0xb4>
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f000 fac5 	bl	8001a14 <LinCommand>
 800148a:	e05c      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "servo") == 0) {ServoCommand(argument);}
 800148c:	493c      	ldr	r1, [pc, #240]	; (8001580 <ProcessCommand+0x1a8>)
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f7fe febe 	bl	8000210 <strcmp>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <ProcessCommand+0xca>
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f000 fb20 	bl	8001ae0 <ServoCommand>
 80014a0:	e051      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "servo2") == 0) {Servo2Command(argument);}
 80014a2:	4938      	ldr	r1, [pc, #224]	; (8001584 <ProcessCommand+0x1ac>)
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7fe feb3 	bl	8000210 <strcmp>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d103      	bne.n	80014b8 <ProcessCommand+0xe0>
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f000 fb79 	bl	8001ba8 <Servo2Command>
 80014b6:	e046      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "avg") == 0) {AvgStdCommand();}
 80014b8:	4933      	ldr	r1, [pc, #204]	; (8001588 <ProcessCommand+0x1b0>)
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7fe fea8 	bl	8000210 <strcmp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <ProcessCommand+0xf4>
 80014c6:	f000 fbcb 	bl	8001c60 <AvgStdCommand>
 80014ca:	e03c      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "inferheati2c") == 0) {InferenceHeatI2CCommand();} //infercnni2c
 80014cc:	492f      	ldr	r1, [pc, #188]	; (800158c <ProcessCommand+0x1b4>)
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7fe fe9e 	bl	8000210 <strcmp>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <ProcessCommand+0x108>
 80014da:	f000 fcb5 	bl	8001e48 <InferenceHeatI2CCommand>
 80014de:	e032      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "pointv") == 0) {PointingVertical();} // (0,20) -> (0,140)
 80014e0:	492b      	ldr	r1, [pc, #172]	; (8001590 <ProcessCommand+0x1b8>)
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7fe fe94 	bl	8000210 <strcmp>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <ProcessCommand+0x11c>
 80014ee:	f000 ff7b 	bl	80023e8 <PointingVertical>
 80014f2:	e028      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "pointr") == 0) {PointingRadial();} // (0,20) -> (0,140)
 80014f4:	4927      	ldr	r1, [pc, #156]	; (8001594 <ProcessCommand+0x1bc>)
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7fe fe8a 	bl	8000210 <strcmp>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <ProcessCommand+0x130>
 8001502:	f001 fa5b 	bl	80029bc <PointingRadial>
 8001506:	e01e      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "ini") == 0) {InitializaionCalibrationCommand();}
 8001508:	4923      	ldr	r1, [pc, #140]	; (8001598 <ProcessCommand+0x1c0>)
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f7fe fe80 	bl	8000210 <strcmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <ProcessCommand+0x144>
 8001516:	f001 fa79 	bl	8002a0c <InitializaionCalibrationCommand>
 800151a:	e014      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "autoi2c") == 0) {AutoI2CCommand();}
 800151c:	491f      	ldr	r1, [pc, #124]	; (800159c <ProcessCommand+0x1c4>)
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7fe fe76 	bl	8000210 <strcmp>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <ProcessCommand+0x158>
 800152a:	f001 fcbf 	bl	8002eac <AutoI2CCommand>
 800152e:	e00a      	b.n	8001546 <ProcessCommand+0x16e>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 8001530:	491b      	ldr	r1, [pc, #108]	; (80015a0 <ProcessCommand+0x1c8>)
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <ProcessCommand+0x194>)
 8001534:	f011 feee 	bl	8013314 <siprintf>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	2364      	movs	r3, #100	; 0x64
 800153e:	490b      	ldr	r1, [pc, #44]	; (800156c <ProcessCommand+0x194>)
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <ProcessCommand+0x184>)
 8001542:	f007 f9b5 	bl	80088b0 <HAL_UART_Transmit>

    command_in_progress = 0; // 명령 실행 완료 상태 해제
 8001546:	4b03      	ldr	r3, [pc, #12]	; (8001554 <ProcessCommand+0x17c>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
}
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20005b08 	.word	0x20005b08
 8001558:	080185a4 	.word	0x080185a4
 800155c:	20005f38 	.word	0x20005f38
 8001560:	080185d4 	.word	0x080185d4
 8001564:	080185d8 	.word	0x080185d8
 8001568:	080185e0 	.word	0x080185e0
 800156c:	20005fc0 	.word	0x20005fc0
 8001570:	080185e8 	.word	0x080185e8
 8001574:	080185f4 	.word	0x080185f4
 8001578:	080185fc 	.word	0x080185fc
 800157c:	08018600 	.word	0x08018600
 8001580:	08018604 	.word	0x08018604
 8001584:	0801860c 	.word	0x0801860c
 8001588:	08018614 	.word	0x08018614
 800158c:	08018618 	.word	0x08018618
 8001590:	08018628 	.word	0x08018628
 8001594:	08018630 	.word	0x08018630
 8001598:	08018638 	.word	0x08018638
 800159c:	0801863c 	.word	0x0801863c
 80015a0:	08018644 	.word	0x08018644

080015a4 <SensorI2CCommand>:


void SensorI2CCommand(){
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
	ResetAllDevices();
 80015aa:	f002 fdf7 	bl	800419c <ResetAllDevices>
	setOnAllDevices();
 80015ae:	f002 fe75 	bl	800429c <setOnAllDevices>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 80015b2:	4949      	ldr	r1, [pc, #292]	; (80016d8 <SensorI2CCommand+0x134>)
 80015b4:	4849      	ldr	r0, [pc, #292]	; (80016dc <SensorI2CCommand+0x138>)
 80015b6:	f011 fead 	bl	8013314 <siprintf>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b29a      	uxth	r2, r3
 80015be:	2364      	movs	r3, #100	; 0x64
 80015c0:	4946      	ldr	r1, [pc, #280]	; (80016dc <SensorI2CCommand+0x138>)
 80015c2:	4847      	ldr	r0, [pc, #284]	; (80016e0 <SensorI2CCommand+0x13c>)
 80015c4:	f007 f974 	bl	80088b0 <HAL_UART_Transmit>
	uint32_t startTime = 0, endTime = 0, diffTime = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]

    for(int count =0; count < NUM_READINGS; count++){
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e072      	b.n	80016c0 <SensorI2CCommand+0x11c>
    	uint8_t sensorCount = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	74fb      	strb	r3, [r7, #19]
    	startTime = HAL_GetTick();
 80015de:	f002 ff03 	bl	80043e8 <HAL_GetTick>
 80015e2:	60b8      	str	r0, [r7, #8]
		for (int i = 0; i < NUM_SENSOR; i++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e054      	b.n	8001694 <SensorI2CCommand+0xf0>
			Dev = &vl53l0x_s[i];
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4a3b      	ldr	r2, [pc, #236]	; (80016e4 <SensorI2CCommand+0x140>)
 80015f6:	4413      	add	r3, r2
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <SensorI2CCommand+0x144>)
 80015fa:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <SensorI2CCommand+0x144>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	493a      	ldr	r1, [pc, #232]	; (80016ec <SensorI2CCommand+0x148>)
 8001602:	4618      	mov	r0, r3
 8001604:	f009 ff38 	bl	800b478 <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <SensorI2CCommand+0x148>)
 800160a:	7e1b      	ldrb	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d13e      	bne.n	800168e <SensorI2CCommand+0xea>
			  if (RangingData.RangeMilliMeter < 100) {
 8001610:	4b36      	ldr	r3, [pc, #216]	; (80016ec <SensorI2CCommand+0x148>)
 8001612:	891b      	ldrh	r3, [r3, #8]
 8001614:	2b63      	cmp	r3, #99	; 0x63
 8001616:	d83a      	bhi.n	800168e <SensorI2CCommand+0xea>
				  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <SensorI2CCommand+0x14c>)
 8001624:	4413      	add	r3, r2
 8001626:	4a31      	ldr	r2, [pc, #196]	; (80016ec <SensorI2CCommand+0x148>)
 8001628:	8912      	ldrh	r2, [r2, #8]
 800162a:	ee07 2a90 	vmov	s15, r2
 800162e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	4618      	mov	r0, r3
 8001638:	f001 feb2 	bl	80033a0 <Kalman_Estimate>
 800163c:	eef0 7a40 	vmov.f32	s15, s0
 8001640:	4a2c      	ldr	r2, [pc, #176]	; (80016f4 <SensorI2CCommand+0x150>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	edc3 7a00 	vstr	s15, [r3]
				  //filteredValue[i] = RangingData.RangeMilliMeter;
				  sensorValues[i][readingCount[i]] = filteredValue[i];
 800164c:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <SensorI2CCommand+0x154>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	4927      	ldr	r1, [pc, #156]	; (80016f4 <SensorI2CCommand+0x150>)
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	440a      	add	r2, r1
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4827      	ldr	r0, [pc, #156]	; (80016fc <SensorI2CCommand+0x158>)
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	2464      	movs	r4, #100	; 0x64
 8001664:	fb04 f101 	mul.w	r1, r4, r1
 8001668:	440b      	add	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4403      	add	r3, r0
 800166e:	601a      	str	r2, [r3, #0]
				  if(count>throwSomenumber){
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b14      	cmp	r3, #20
 8001674:	dd08      	ble.n	8001688 <SensorI2CCommand+0xe4>
				  readingCount[i]++;}
 8001676:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <SensorI2CCommand+0x154>)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	491d      	ldr	r1, [pc, #116]	; (80016f8 <SensorI2CCommand+0x154>)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 8001688:	7cfb      	ldrb	r3, [r7, #19]
 800168a:	3301      	adds	r3, #1
 800168c:	74fb      	strb	r3, [r7, #19]
		for (int i = 0; i < NUM_SENSOR; i++) {
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3301      	adds	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b23      	cmp	r3, #35	; 0x23
 8001698:	dda7      	ble.n	80015ea <SensorI2CCommand+0x46>
				  //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}
		do {
		    endTime = HAL_GetTick();
 800169a:	f002 fea5 	bl	80043e8 <HAL_GetTick>
 800169e:	6078      	str	r0, [r7, #4]
		    diffTime = endTime - startTime;
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	603b      	str	r3, [r7, #0]
		} while (diffTime <= TIMBUDGET);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d9f5      	bls.n	800169a <SensorI2CCommand+0xf6>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", NUM_READINGS), 100);
				HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", sensorCount), 100);

		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu\n", diffTime), 100);
		#endif
		startTime = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
		endTime = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
		diffTime = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
    for(int count =0; count < NUM_READINGS; count++){
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b77      	cmp	r3, #119	; 0x77
 80016c4:	dd89      	ble.n	80015da <SensorI2CCommand+0x36>
    }
    TransmitStats();
 80016c6:	f7ff fdeb 	bl	80012a0 <TransmitStats>
    ResetSensorData();
 80016ca:	f7ff fe39 	bl	8001340 <ResetSensorData>
}
 80016ce:	bf00      	nop
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08018664 	.word	0x08018664
 80016dc:	20005fc0 	.word	0x20005fc0
 80016e0:	20005f38 	.word	0x20005f38
 80016e4:	2000615c 	.word	0x2000615c
 80016e8:	2000999c 	.word	0x2000999c
 80016ec:	20006044 	.word	0x20006044
 80016f0:	20005b64 	.word	0x20005b64
 80016f4:	20005e34 	.word	0x20005e34
 80016f8:	20005a78 	.word	0x20005a78
 80016fc:	20002118 	.word	0x20002118

08001700 <SetI2CCommand>:

void SetI2CCommand(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 8001706:	4980      	ldr	r1, [pc, #512]	; (8001908 <SetI2CCommand+0x208>)
 8001708:	4880      	ldr	r0, [pc, #512]	; (800190c <SetI2CCommand+0x20c>)
 800170a:	f011 fe03 	bl	8013314 <siprintf>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	2364      	movs	r3, #100	; 0x64
 8001714:	497d      	ldr	r1, [pc, #500]	; (800190c <SetI2CCommand+0x20c>)
 8001716:	487e      	ldr	r0, [pc, #504]	; (8001910 <SetI2CCommand+0x210>)
 8001718:	f007 f8ca 	bl	80088b0 <HAL_UART_Transmit>

	ResetAllDevices();
 800171c:	f002 fd3e 	bl	800419c <ResetAllDevices>
	memset(vl53l0x_s, 0, sizeof(VL53L0X_Dev_t));
 8001720:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001724:	2100      	movs	r1, #0
 8001726:	487b      	ldr	r0, [pc, #492]	; (8001914 <SetI2CCommand+0x214>)
 8001728:	f010 fe7c 	bl	8012424 <memset>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e0e0      	b.n	80018f4 <SetI2CCommand+0x1f4>
  	    uint8_t q = i / 12;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4a78      	ldr	r2, [pc, #480]	; (8001918 <SetI2CCommand+0x218>)
 8001736:	fb82 1203 	smull	r1, r2, r2, r3
 800173a:	1052      	asrs	r2, r2, #1
 800173c:	17db      	asrs	r3, r3, #31
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	72fb      	strb	r3, [r7, #11]
  	    uint8_t r = i % 12;
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4b74      	ldr	r3, [pc, #464]	; (8001918 <SetI2CCommand+0x218>)
 8001746:	fb83 1302 	smull	r1, r3, r3, r2
 800174a:	1059      	asrs	r1, r3, #1
 800174c:	17d3      	asrs	r3, r2, #31
 800174e:	1ac9      	subs	r1, r1, r3
 8001750:	460b      	mov	r3, r1
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	440b      	add	r3, r1
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	1ad1      	subs	r1, r2, r3
 800175a:	460b      	mov	r3, r1
 800175c:	72bb      	strb	r3, [r7, #10]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 800175e:	7afb      	ldrb	r3, [r7, #11]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	7aba      	ldrb	r2, [r7, #10]
 8001766:	2a07      	cmp	r2, #7
 8001768:	bf8c      	ite	hi
 800176a:	2201      	movhi	r2, #1
 800176c:	2200      	movls	r2, #0
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	4413      	add	r3, r2
 8001772:	727b      	strb	r3, [r7, #9]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001774:	7abb      	ldrb	r3, [r7, #10]
 8001776:	2b07      	cmp	r3, #7
 8001778:	d903      	bls.n	8001782 <SetI2CCommand+0x82>
 800177a:	7abb      	ldrb	r3, [r7, #10]
 800177c:	3b08      	subs	r3, #8
 800177e:	b2db      	uxtb	r3, r3
 8001780:	e000      	b.n	8001784 <SetI2CCommand+0x84>
 8001782:	7abb      	ldrb	r3, [r7, #10]
 8001784:	723b      	strb	r3, [r7, #8]

        ResetDevicesExcept(active_device);
 8001786:	7a7b      	ldrb	r3, [r7, #9]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fd33 	bl	80041f4 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 800178e:	7a3a      	ldrb	r2, [r7, #8]
 8001790:	7a7b      	ldrb	r3, [r7, #9]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f002 fd5f 	bl	8004258 <setActiveTcaChannel>
  		Dev = &vl53l0x_s[i];
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	4a5b      	ldr	r2, [pc, #364]	; (8001914 <SetI2CCommand+0x214>)
 80017a6:	4413      	add	r3, r2
 80017a8:	4a5c      	ldr	r2, [pc, #368]	; (800191c <SetI2CCommand+0x21c>)
 80017aa:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 80017ac:	4b5b      	ldr	r3, [pc, #364]	; (800191c <SetI2CCommand+0x21c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a5b      	ldr	r2, [pc, #364]	; (8001920 <SetI2CCommand+0x220>)
 80017b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 80017b6:	4b59      	ldr	r3, [pc, #356]	; (800191c <SetI2CCommand+0x21c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2252      	movs	r2, #82	; 0x52
 80017bc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  		Dev->comms_type = 1;
 80017c0:	4b56      	ldr	r3, [pc, #344]	; (800191c <SetI2CCommand+0x21c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
  		Dev->comms_speed_khz = 100;
 80017ca:	4b54      	ldr	r3, [pc, #336]	; (800191c <SetI2CCommand+0x21c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2264      	movs	r2, #100	; 0x64
 80017d0:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
  		uint8_t newadd = 0x52 + 2*i;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3329      	adds	r3, #41	; 0x29
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	71fb      	strb	r3, [r7, #7]
  		VL53L0X_SetDeviceAddress(Dev, newadd);
 80017de:	4b4f      	ldr	r3, [pc, #316]	; (800191c <SetI2CCommand+0x21c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f008 f956 	bl	8009a98 <VL53L0X_SetDeviceAddress>
  		Dev->I2cDevAddr = newadd;
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <SetI2CCommand+0x21c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <SetI2CCommand+0x21c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f008 fc4a 	bl	800a094 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8001800:	4b46      	ldr	r3, [pc, #280]	; (800191c <SetI2CCommand+0x21c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f008 f95f 	bl	8009ac8 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 800180a:	4b44      	ldr	r3, [pc, #272]	; (800191c <SetI2CCommand+0x21c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f008 fabe 	bl	8009d90 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <SetI2CCommand+0x21c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	4618      	mov	r0, r3
 800181c:	f008 fcd8 	bl	800a1d0 <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 8001820:	4b3e      	ldr	r3, [pc, #248]	; (800191c <SetI2CCommand+0x21c>)
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <SetI2CCommand+0x224>)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800182c:	4a3e      	ldr	r2, [pc, #248]	; (8001928 <SetI2CCommand+0x228>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	f009 fdf3 	bl	800b420 <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <SetI2CCommand+0x21c>)
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	4a3b      	ldr	r2, [pc, #236]	; (800192c <SetI2CCommand+0x22c>)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	7819      	ldrb	r1, [r3, #0]
 8001846:	4a3a      	ldr	r2, [pc, #232]	; (8001930 <SetI2CCommand+0x230>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	f008 ff3a 	bl	800a6c8 <VL53L0X_SetRefCalibration>

  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001854:	4b31      	ldr	r3, [pc, #196]	; (800191c <SetI2CCommand+0x21c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f008 ff4b 	bl	800a6f8 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001862:	4b2e      	ldr	r3, [pc, #184]	; (800191c <SetI2CCommand+0x21c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2201      	movs	r2, #1
 8001868:	2101      	movs	r1, #1
 800186a:	4618      	mov	r0, r3
 800186c:	f008 ff44 	bl	800a6f8 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <SetI2CCommand+0x21c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f641 1299 	movw	r2, #6553	; 0x1999
 8001878:	2101      	movs	r1, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f008 ffec 	bl	800a858 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <SetI2CCommand+0x21c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f008 ffe4 	bl	800a858 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 100000);
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <SetI2CCommand+0x21c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4927      	ldr	r1, [pc, #156]	; (8001934 <SetI2CCommand+0x234>)
 8001896:	4618      	mov	r0, r3
 8001898:	f008 fcf8 	bl	800a28c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <SetI2CCommand+0x21c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2212      	movs	r2, #18
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f008 fd17 	bl	800a2d8 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <SetI2CCommand+0x21c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	220e      	movs	r2, #14
 80018b0:	2101      	movs	r1, #1
 80018b2:	4618      	mov	r0, r3
 80018b4:	f008 fd10 	bl	800a2d8 <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <SetI2CCommand+0x238>)
 80018c4:	4413      	add	r3, r2
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <SetI2CCommand+0x23c>)
 80018c8:	edd2 7a00 	vldr	s15, [r2]
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <SetI2CCommand+0x240>)
 80018ce:	ed92 7a00 	vldr	s14, [r2]
 80018d2:	4a1c      	ldr	r2, [pc, #112]	; (8001944 <SetI2CCommand+0x244>)
 80018d4:	edd2 6a00 	vldr	s13, [r2]
 80018d8:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8001948 <SetI2CCommand+0x248>
 80018dc:	eeb0 1a66 	vmov.f32	s2, s13
 80018e0:	eef0 0a47 	vmov.f32	s1, s14
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 fd3b 	bl	8003364 <Kalman_Init>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b23      	cmp	r3, #35	; 0x23
 80018f8:	f77f af1b 	ble.w	8001732 <SetI2CCommand+0x32>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
		#endif
  	}
  	InitStats();
 80018fc:	f7ff fd48 	bl	8001390 <InitStats>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08018674 	.word	0x08018674
 800190c:	20005fc0 	.word	0x20005fc0
 8001910:	20005f38 	.word	0x20005f38
 8001914:	2000615c 	.word	0x2000615c
 8001918:	2aaaaaab 	.word	0x2aaaaaab
 800191c:	2000999c 	.word	0x2000999c
 8001920:	20005b10 	.word	0x20005b10
 8001924:	20000010 	.word	0x20000010
 8001928:	200000a0 	.word	0x200000a0
 800192c:	200000c4 	.word	0x200000c4
 8001930:	200000e8 	.word	0x200000e8
 8001934:	000186a0 	.word	0x000186a0
 8001938:	20005b64 	.word	0x20005b64
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004
 8001944:	20000008 	.word	0x20000008
 8001948:	00000000 	.word	0x00000000

0800194c <RevCommand>:

void RevCommand(char *arg){
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    uint32_t startTime, endTime, elapsedTime;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	461a      	mov	r2, r3
 800195a:	4927      	ldr	r1, [pc, #156]	; (80019f8 <RevCommand+0xac>)
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f011 fcf9 	bl	8013354 <siscanf>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d134      	bne.n	80019d2 <RevCommand+0x86>
        startTime = HAL_GetTick();
 8001968:	f002 fd3e 	bl	80043e8 <HAL_GetTick>
 800196c:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution Start \n\r",step_rev_angle), 100);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	461a      	mov	r2, r3
 8001972:	4922      	ldr	r1, [pc, #136]	; (80019fc <RevCommand+0xb0>)
 8001974:	4822      	ldr	r0, [pc, #136]	; (8001a00 <RevCommand+0xb4>)
 8001976:	f011 fccd 	bl	8013314 <siprintf>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	2364      	movs	r3, #100	; 0x64
 8001980:	491f      	ldr	r1, [pc, #124]	; (8001a00 <RevCommand+0xb4>)
 8001982:	4820      	ldr	r0, [pc, #128]	; (8001a04 <RevCommand+0xb8>)
 8001984:	f006 ff94 	bl	80088b0 <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4618      	mov	r0, r3
 800198c:	f001 fffe 	bl	800398c <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution End \n\r",step_rev_angle), 100);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	461a      	mov	r2, r3
 8001994:	491c      	ldr	r1, [pc, #112]	; (8001a08 <RevCommand+0xbc>)
 8001996:	481a      	ldr	r0, [pc, #104]	; (8001a00 <RevCommand+0xb4>)
 8001998:	f011 fcbc 	bl	8013314 <siprintf>
 800199c:	4603      	mov	r3, r0
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2364      	movs	r3, #100	; 0x64
 80019a2:	4917      	ldr	r1, [pc, #92]	; (8001a00 <RevCommand+0xb4>)
 80019a4:	4817      	ldr	r0, [pc, #92]	; (8001a04 <RevCommand+0xb8>)
 80019a6:	f006 ff83 	bl	80088b0 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 80019aa:	f002 fd1d 	bl	80043e8 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4914      	ldr	r1, [pc, #80]	; (8001a0c <RevCommand+0xc0>)
 80019bc:	4810      	ldr	r0, [pc, #64]	; (8001a00 <RevCommand+0xb4>)
 80019be:	f011 fca9 	bl	8013314 <siprintf>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	2364      	movs	r3, #100	; 0x64
 80019c8:	490d      	ldr	r1, [pc, #52]	; (8001a00 <RevCommand+0xb4>)
 80019ca:	480e      	ldr	r0, [pc, #56]	; (8001a04 <RevCommand+0xb8>)
 80019cc:	f006 ff70 	bl	80088b0 <HAL_UART_Transmit>
 80019d0:	e00a      	b.n	80019e8 <RevCommand+0x9c>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 80019d2:	490f      	ldr	r1, [pc, #60]	; (8001a10 <RevCommand+0xc4>)
 80019d4:	480a      	ldr	r0, [pc, #40]	; (8001a00 <RevCommand+0xb4>)
 80019d6:	f011 fc9d 	bl	8013314 <siprintf>
 80019da:	4603      	mov	r3, r0
 80019dc:	b29a      	uxth	r2, r3
 80019de:	2364      	movs	r3, #100	; 0x64
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <RevCommand+0xb4>)
 80019e2:	4808      	ldr	r0, [pc, #32]	; (8001a04 <RevCommand+0xb8>)
 80019e4:	f006 ff64 	bl	80088b0 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 80019e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ec:	f002 fd08 	bl	8004400 <HAL_Delay>
}
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	08018684 	.word	0x08018684
 80019fc:	08018688 	.word	0x08018688
 8001a00:	20005fc0 	.word	0x20005fc0
 8001a04:	20005f38 	.word	0x20005f38
 8001a08:	080186a4 	.word	0x080186a4
 8001a0c:	080186c0 	.word	0x080186c0
 8001a10:	080186d8 	.word	0x080186d8

08001a14 <LinCommand>:

void LinCommand(char *arg){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
    uint32_t startTime, endTime, elapsedTime;
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	461a      	mov	r2, r3
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <LinCommand+0xb0>)
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f011 fc93 	bl	8013354 <siscanf>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d134      	bne.n	8001a9e <LinCommand+0x8a>
        startTime = HAL_GetTick();
 8001a34:	f002 fcd8 	bl	80043e8 <HAL_GetTick>
 8001a38:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4922      	ldr	r1, [pc, #136]	; (8001ac8 <LinCommand+0xb4>)
 8001a40:	4822      	ldr	r0, [pc, #136]	; (8001acc <LinCommand+0xb8>)
 8001a42:	f011 fc67 	bl	8013314 <siprintf>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	2364      	movs	r3, #100	; 0x64
 8001a4c:	491f      	ldr	r1, [pc, #124]	; (8001acc <LinCommand+0xb8>)
 8001a4e:	4820      	ldr	r0, [pc, #128]	; (8001ad0 <LinCommand+0xbc>)
 8001a50:	f006 ff2e 	bl	80088b0 <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 f800 	bl	8003a5c <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	491c      	ldr	r1, [pc, #112]	; (8001ad4 <LinCommand+0xc0>)
 8001a62:	481a      	ldr	r0, [pc, #104]	; (8001acc <LinCommand+0xb8>)
 8001a64:	f011 fc56 	bl	8013314 <siprintf>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2364      	movs	r3, #100	; 0x64
 8001a6e:	4917      	ldr	r1, [pc, #92]	; (8001acc <LinCommand+0xb8>)
 8001a70:	4817      	ldr	r0, [pc, #92]	; (8001ad0 <LinCommand+0xbc>)
 8001a72:	f006 ff1d 	bl	80088b0 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 8001a76:	f002 fcb7 	bl	80043e8 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4914      	ldr	r1, [pc, #80]	; (8001ad8 <LinCommand+0xc4>)
 8001a88:	4810      	ldr	r0, [pc, #64]	; (8001acc <LinCommand+0xb8>)
 8001a8a:	f011 fc43 	bl	8013314 <siprintf>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	2364      	movs	r3, #100	; 0x64
 8001a94:	490d      	ldr	r1, [pc, #52]	; (8001acc <LinCommand+0xb8>)
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <LinCommand+0xbc>)
 8001a98:	f006 ff0a 	bl	80088b0 <HAL_UART_Transmit>
 8001a9c:	e00a      	b.n	8001ab4 <LinCommand+0xa0>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001a9e:	490f      	ldr	r1, [pc, #60]	; (8001adc <LinCommand+0xc8>)
 8001aa0:	480a      	ldr	r0, [pc, #40]	; (8001acc <LinCommand+0xb8>)
 8001aa2:	f011 fc37 	bl	8013314 <siprintf>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	2364      	movs	r3, #100	; 0x64
 8001aac:	4907      	ldr	r1, [pc, #28]	; (8001acc <LinCommand+0xb8>)
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <LinCommand+0xbc>)
 8001ab0:	f006 fefe 	bl	80088b0 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 8001ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ab8:	f002 fca2 	bl	8004400 <HAL_Delay>
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	08018684 	.word	0x08018684
 8001ac8:	080186e8 	.word	0x080186e8
 8001acc:	20005fc0 	.word	0x20005fc0
 8001ad0:	20005f38 	.word	0x20005f38
 8001ad4:	08018704 	.word	0x08018704
 8001ad8:	080186c0 	.word	0x080186c0
 8001adc:	080186d8 	.word	0x080186d8

08001ae0 <ServoCommand>:

void ServoCommand(char *arg){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	461a      	mov	r2, r3
 8001af4:	4925      	ldr	r1, [pc, #148]	; (8001b8c <ServoCommand+0xac>)
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f011 fc2c 	bl	8013354 <siscanf>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d135      	bne.n	8001b6e <ServoCommand+0x8e>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fd4f 	bl	80005a8 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4920      	ldr	r1, [pc, #128]	; (8001b90 <ServoCommand+0xb0>)
 8001b10:	4820      	ldr	r0, [pc, #128]	; (8001b94 <ServoCommand+0xb4>)
 8001b12:	f011 fbff 	bl	8013314 <siprintf>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	2364      	movs	r3, #100	; 0x64
 8001b1c:	491d      	ldr	r1, [pc, #116]	; (8001b94 <ServoCommand+0xb4>)
 8001b1e:	481e      	ldr	r0, [pc, #120]	; (8001b98 <ServoCommand+0xb8>)
 8001b20:	f006 fec6 	bl	80088b0 <HAL_UART_Transmit>
    	servo_angle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001b24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2c:	ee17 2a90 	vmov	r2, s15
 8001b30:	2100      	movs	r1, #0
 8001b32:	481a      	ldr	r0, [pc, #104]	; (8001b9c <ServoCommand+0xbc>)
 8001b34:	f001 ffee 	bl	8003b14 <servo_angle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd34 	bl	80005a8 <__aeabi_f2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4916      	ldr	r1, [pc, #88]	; (8001ba0 <ServoCommand+0xc0>)
 8001b46:	4813      	ldr	r0, [pc, #76]	; (8001b94 <ServoCommand+0xb4>)
 8001b48:	f011 fbe4 	bl	8013314 <siprintf>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	4910      	ldr	r1, [pc, #64]	; (8001b94 <ServoCommand+0xb4>)
 8001b54:	4810      	ldr	r0, [pc, #64]	; (8001b98 <ServoCommand+0xb8>)
 8001b56:	f006 feab 	bl	80088b0 <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 8001b5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b5e:	f002 fc4f 	bl	8004400 <HAL_Delay>
        servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <ServoCommand+0xbc>)
 8001b68:	f001 ffd4 	bl	8003b14 <servo_angle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001b6c:	e00a      	b.n	8001b84 <ServoCommand+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001b6e:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <ServoCommand+0xc4>)
 8001b70:	4808      	ldr	r0, [pc, #32]	; (8001b94 <ServoCommand+0xb4>)
 8001b72:	f011 fbcf 	bl	8013314 <siprintf>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	2364      	movs	r3, #100	; 0x64
 8001b7c:	4905      	ldr	r1, [pc, #20]	; (8001b94 <ServoCommand+0xb4>)
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <ServoCommand+0xb8>)
 8001b80:	f006 fe96 	bl	80088b0 <HAL_UART_Transmit>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	08018714 	.word	0x08018714
 8001b90:	08018718 	.word	0x08018718
 8001b94:	20005fc0 	.word	0x20005fc0
 8001b98:	20005f38 	.word	0x20005f38
 8001b9c:	20005ee8 	.word	0x20005ee8
 8001ba0:	08018734 	.word	0x08018734
 8001ba4:	080186d8 	.word	0x080186d8

08001ba8 <Servo2Command>:

void Servo2Command(char *arg){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4921      	ldr	r1, [pc, #132]	; (8001c44 <Servo2Command+0x9c>)
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f011 fbc8 	bl	8013354 <siscanf>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d12c      	bne.n	8001c24 <Servo2Command+0x7c>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fceb 	bl	80005a8 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	491c      	ldr	r1, [pc, #112]	; (8001c48 <Servo2Command+0xa0>)
 8001bd8:	481c      	ldr	r0, [pc, #112]	; (8001c4c <Servo2Command+0xa4>)
 8001bda:	f011 fb9b 	bl	8013314 <siprintf>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	2364      	movs	r3, #100	; 0x64
 8001be4:	4919      	ldr	r1, [pc, #100]	; (8001c4c <Servo2Command+0xa4>)
 8001be6:	481a      	ldr	r0, [pc, #104]	; (8001c50 <Servo2Command+0xa8>)
 8001be8:	f006 fe62 	bl	80088b0 <HAL_UART_Transmit>
    	servo_angle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf4:	ee17 2a90 	vmov	r2, s15
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4816      	ldr	r0, [pc, #88]	; (8001c54 <Servo2Command+0xac>)
 8001bfc:	f001 ff8a 	bl	8003b14 <servo_angle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcd0 	bl	80005a8 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4912      	ldr	r1, [pc, #72]	; (8001c58 <Servo2Command+0xb0>)
 8001c0e:	480f      	ldr	r0, [pc, #60]	; (8001c4c <Servo2Command+0xa4>)
 8001c10:	f011 fb80 	bl	8013314 <siprintf>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	2364      	movs	r3, #100	; 0x64
 8001c1a:	490c      	ldr	r1, [pc, #48]	; (8001c4c <Servo2Command+0xa4>)
 8001c1c:	480c      	ldr	r0, [pc, #48]	; (8001c50 <Servo2Command+0xa8>)
 8001c1e:	f006 fe47 	bl	80088b0 <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001c22:	e00a      	b.n	8001c3a <Servo2Command+0x92>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001c24:	490d      	ldr	r1, [pc, #52]	; (8001c5c <Servo2Command+0xb4>)
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <Servo2Command+0xa4>)
 8001c28:	f011 fb74 	bl	8013314 <siprintf>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	2364      	movs	r3, #100	; 0x64
 8001c32:	4906      	ldr	r1, [pc, #24]	; (8001c4c <Servo2Command+0xa4>)
 8001c34:	4806      	ldr	r0, [pc, #24]	; (8001c50 <Servo2Command+0xa8>)
 8001c36:	f006 fe3b 	bl	80088b0 <HAL_UART_Transmit>
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08018714 	.word	0x08018714
 8001c48:	08018718 	.word	0x08018718
 8001c4c:	20005fc0 	.word	0x20005fc0
 8001c50:	20005f38 	.word	0x20005f38
 8001c54:	20005ee8 	.word	0x20005ee8
 8001c58:	08018734 	.word	0x08018734
 8001c5c:	080186d8 	.word	0x080186d8

08001c60 <AvgStdCommand>:

void AvgStdCommand(){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Avg Std Force Z\n" ), 1000);
 8001c66:	496f      	ldr	r1, [pc, #444]	; (8001e24 <AvgStdCommand+0x1c4>)
 8001c68:	486f      	ldr	r0, [pc, #444]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001c6a:	f011 fb53 	bl	8013314 <siprintf>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c76:	496c      	ldr	r1, [pc, #432]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001c78:	486c      	ldr	r0, [pc, #432]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001c7a:	f006 fe19 	bl	80088b0 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	e02e      	b.n	8001ce2 <AvgStdCommand+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xmean[i]), 1000);
 8001c84:	4a6a      	ldr	r2, [pc, #424]	; (8001e30 <AvgStdCommand+0x1d0>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc8a 	bl	80005a8 <__aeabi_f2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4966      	ldr	r1, [pc, #408]	; (8001e34 <AvgStdCommand+0x1d4>)
 8001c9a:	4863      	ldr	r0, [pc, #396]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001c9c:	f011 fb3a 	bl	8013314 <siprintf>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca8:	495f      	ldr	r1, [pc, #380]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001caa:	4860      	ldr	r0, [pc, #384]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001cac:	f006 fe00 	bl	80088b0 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	425a      	negs	r2, r3
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	f002 0207 	and.w	r2, r2, #7
 8001cbc:	bf58      	it	pl
 8001cbe:	4253      	negpl	r3, r2
 8001cc0:	2b07      	cmp	r3, #7
 8001cc2:	d10b      	bne.n	8001cdc <AvgStdCommand+0x7c>
 8001cc4:	495c      	ldr	r1, [pc, #368]	; (8001e38 <AvgStdCommand+0x1d8>)
 8001cc6:	4858      	ldr	r0, [pc, #352]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001cc8:	f011 fb24 	bl	8013314 <siprintf>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd4:	4954      	ldr	r1, [pc, #336]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001cd6:	4855      	ldr	r0, [pc, #340]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001cd8:	f006 fdea 	bl	80088b0 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b23      	cmp	r3, #35	; 0x23
 8001ce6:	d9cd      	bls.n	8001c84 <AvgStdCommand+0x24>
    }
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	e02e      	b.n	8001d4c <AvgStdCommand+0xec>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xstd[i]), 1000);
 8001cee:	4a53      	ldr	r2, [pc, #332]	; (8001e3c <AvgStdCommand+0x1dc>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc55 	bl	80005a8 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	494c      	ldr	r1, [pc, #304]	; (8001e34 <AvgStdCommand+0x1d4>)
 8001d04:	4848      	ldr	r0, [pc, #288]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001d06:	f011 fb05 	bl	8013314 <siprintf>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	4945      	ldr	r1, [pc, #276]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001d14:	4845      	ldr	r0, [pc, #276]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001d16:	f006 fdcb 	bl	80088b0 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	425a      	negs	r2, r3
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	f002 0207 	and.w	r2, r2, #7
 8001d26:	bf58      	it	pl
 8001d28:	4253      	negpl	r3, r2
 8001d2a:	2b07      	cmp	r3, #7
 8001d2c:	d10b      	bne.n	8001d46 <AvgStdCommand+0xe6>
 8001d2e:	4942      	ldr	r1, [pc, #264]	; (8001e38 <AvgStdCommand+0x1d8>)
 8001d30:	483d      	ldr	r0, [pc, #244]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001d32:	f011 faef 	bl	8013314 <siprintf>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3e:	493a      	ldr	r1, [pc, #232]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001d40:	483a      	ldr	r0, [pc, #232]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001d42:	f006 fdb5 	bl	80088b0 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b23      	cmp	r3, #35	; 0x23
 8001d50:	d9cd      	bls.n	8001cee <AvgStdCommand+0x8e>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[0]), 1000);
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <AvgStdCommand+0x1e0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fc26 	bl	80005a8 <__aeabi_f2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4934      	ldr	r1, [pc, #208]	; (8001e34 <AvgStdCommand+0x1d4>)
 8001d62:	4831      	ldr	r0, [pc, #196]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001d64:	f011 fad6 	bl	8013314 <siprintf>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d70:	492d      	ldr	r1, [pc, #180]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001d72:	482e      	ldr	r0, [pc, #184]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001d74:	f006 fd9c 	bl	80088b0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[1]), 1000);
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <AvgStdCommand+0x1e0>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fc13 	bl	80005a8 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	492b      	ldr	r1, [pc, #172]	; (8001e34 <AvgStdCommand+0x1d4>)
 8001d88:	4827      	ldr	r0, [pc, #156]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001d8a:	f011 fac3 	bl	8013314 <siprintf>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	4924      	ldr	r1, [pc, #144]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001d98:	4824      	ldr	r0, [pc, #144]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001d9a:	f006 fd89 	bl	80088b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001d9e:	4926      	ldr	r1, [pc, #152]	; (8001e38 <AvgStdCommand+0x1d8>)
 8001da0:	4821      	ldr	r0, [pc, #132]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001da2:	f011 fab7 	bl	8013314 <siprintf>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	491e      	ldr	r1, [pc, #120]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001db0:	481e      	ldr	r0, [pc, #120]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001db2:	f006 fd7d 	bl	80088b0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[0]), 1000);
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <AvgStdCommand+0x1e4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbf4 	bl	80005a8 <__aeabi_f2d>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	491b      	ldr	r1, [pc, #108]	; (8001e34 <AvgStdCommand+0x1d4>)
 8001dc6:	4818      	ldr	r0, [pc, #96]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001dc8:	f011 faa4 	bl	8013314 <siprintf>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd4:	4914      	ldr	r1, [pc, #80]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001dd6:	4815      	ldr	r0, [pc, #84]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001dd8:	f006 fd6a 	bl	80088b0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[1]), 1000);
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <AvgStdCommand+0x1e4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fbe1 	bl	80005a8 <__aeabi_f2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4912      	ldr	r1, [pc, #72]	; (8001e34 <AvgStdCommand+0x1d4>)
 8001dec:	480e      	ldr	r0, [pc, #56]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001dee:	f011 fa91 	bl	8013314 <siprintf>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfa:	490b      	ldr	r1, [pc, #44]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001dfc:	480b      	ldr	r0, [pc, #44]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001dfe:	f006 fd57 	bl	80088b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <AvgStdCommand+0x1d8>)
 8001e04:	4808      	ldr	r0, [pc, #32]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001e06:	f011 fa85 	bl	8013314 <siprintf>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e12:	4905      	ldr	r1, [pc, #20]	; (8001e28 <AvgStdCommand+0x1c8>)
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <AvgStdCommand+0x1cc>)
 8001e16:	f006 fd4b 	bl	80088b0 <HAL_UART_Transmit>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	08018748 	.word	0x08018748
 8001e28:	20005fc0 	.word	0x20005fc0
 8001e2c:	20005f38 	.word	0x20005f38
 8001e30:	20000120 	.word	0x20000120
 8001e34:	0801875c 	.word	0x0801875c
 8001e38:	08018764 	.word	0x08018764
 8001e3c:	200001b0 	.word	0x200001b0
 8001e40:	20000240 	.word	0x20000240
 8001e44:	20000248 	.word	0x20000248

08001e48 <InferenceHeatI2CCommand>:


void InferenceHeatI2CCommand()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0
	SetI2CCommand();
 8001e4e:	f7ff fc57 	bl	8001700 <SetI2CCommand>
	SensorI2CCommand();
 8001e52:	f7ff fba7 	bl	80015a4 <SensorI2CCommand>
	ResetAllDevices();
 8001e56:	f002 f9a1 	bl	800419c <ResetAllDevices>
	setOnAllDevices();
 8001e5a:	f002 fa1f 	bl	800429c <setOnAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001e5e:	490b      	ldr	r1, [pc, #44]	; (8001e8c <InferenceHeatI2CCommand+0x44>)
 8001e60:	480b      	ldr	r0, [pc, #44]	; (8001e90 <InferenceHeatI2CCommand+0x48>)
 8001e62:	f011 fa57 	bl	8013314 <siprintf>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	2364      	movs	r3, #100	; 0x64
 8001e6c:	4908      	ldr	r1, [pc, #32]	; (8001e90 <InferenceHeatI2CCommand+0x48>)
 8001e6e:	4809      	ldr	r0, [pc, #36]	; (8001e94 <InferenceHeatI2CCommand+0x4c>)
 8001e70:	f006 fd1e 	bl	80088b0 <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    for (int count =0; count <50000;count ++){
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e78:	e289      	b.n	800238e <InferenceHeatI2CCommand+0x546>
    	uint8_t tofCount =0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	startTime = HAL_GetTick();
 8001e80:	f002 fab2 	bl	80043e8 <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	e077      	b.n	8001f7c <InferenceHeatI2CCommand+0x134>
 8001e8c:	08018664 	.word	0x08018664
 8001e90:	20005fc0 	.word	0x20005fc0
 8001e94:	20005f38 	.word	0x20005f38
            Dev = &vl53l0x_s[i];
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	4a8f      	ldr	r2, [pc, #572]	; (80020e0 <InferenceHeatI2CCommand+0x298>)
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a8f      	ldr	r2, [pc, #572]	; (80020e4 <InferenceHeatI2CCommand+0x29c>)
 8001ea8:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 8001eaa:	4b8e      	ldr	r3, [pc, #568]	; (80020e4 <InferenceHeatI2CCommand+0x29c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	498e      	ldr	r1, [pc, #568]	; (80020e8 <InferenceHeatI2CCommand+0x2a0>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f009 fae1 	bl	800b478 <VL53L0X_PerformContinuousRangingMeasurement>
            if (RangingData.RangeStatus == 0) {
 8001eb6:	4b8c      	ldr	r3, [pc, #560]	; (80020e8 <InferenceHeatI2CCommand+0x2a0>)
 8001eb8:	7e1b      	ldrb	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d15b      	bne.n	8001f76 <InferenceHeatI2CCommand+0x12e>
  			  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 8001ebe:	4b8a      	ldr	r3, [pc, #552]	; (80020e8 <InferenceHeatI2CCommand+0x2a0>)
 8001ec0:	891b      	ldrh	r3, [r3, #8]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eca:	4a88      	ldr	r2, [pc, #544]	; (80020ec <InferenceHeatI2CCommand+0x2a4>)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d546      	bpl.n	8001f76 <InferenceHeatI2CCommand+0x12e>
            	filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4a7f      	ldr	r2, [pc, #508]	; (80020f0 <InferenceHeatI2CCommand+0x2a8>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a7c      	ldr	r2, [pc, #496]	; (80020e8 <InferenceHeatI2CCommand+0x2a0>)
 8001ef8:	8912      	ldrh	r2, [r2, #8]
 8001efa:	ee07 2a90 	vmov	s15, r2
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	eeb0 0a67 	vmov.f32	s0, s15
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fa4a 	bl	80033a0 <Kalman_Estimate>
 8001f0c:	eef0 7a40 	vmov.f32	s15, s0
 8001f10:	4a78      	ldr	r2, [pc, #480]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	edc3 7a00 	vstr	s15, [r3]
                filteredValue[i] -= sensorAverages[i];
 8001f1c:	4a75      	ldr	r2, [pc, #468]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	4a70      	ldr	r2, [pc, #448]	; (80020ec <InferenceHeatI2CCommand+0x2a4>)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f38:	4a6e      	ldr	r2, [pc, #440]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	edc3 7a00 	vstr	s15, [r3]
                //filteredValue[i] -= Xmean[i];
                filteredValue[i] /= Xstd[i];
 8001f44:	4a6b      	ldr	r2, [pc, #428]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	edd3 6a00 	vldr	s13, [r3]
 8001f50:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <InferenceHeatI2CCommand+0x2b0>)
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f60:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 8001f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f70:	3301      	adds	r3, #1
 8001f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	3301      	adds	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	2b23      	cmp	r3, #35	; 0x23
 8001f80:	dd8a      	ble.n	8001e98 <InferenceHeatI2CCommand+0x50>
  			  }
            }
        }

        in_data[0] = filteredValue[0];
 8001f82:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a5d      	ldr	r2, [pc, #372]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001f88:	6013      	str	r3, [r2, #0]
        in_data[1] = filteredValue[1];
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a5b      	ldr	r2, [pc, #364]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001f90:	6053      	str	r3, [r2, #4]
        in_data[2] = filteredValue[2];
 8001f92:	4b58      	ldr	r3, [pc, #352]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4a59      	ldr	r2, [pc, #356]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001f98:	6093      	str	r3, [r2, #8]
        in_data[3] = filteredValue[3];
 8001f9a:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	4a57      	ldr	r2, [pc, #348]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fa0:	60d3      	str	r3, [r2, #12]
        in_data[4] = filteredValue[4];
 8001fa2:	4b54      	ldr	r3, [pc, #336]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	4a55      	ldr	r2, [pc, #340]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fa8:	6113      	str	r3, [r2, #16]
        in_data[5] = filteredValue[5];
 8001faa:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4a53      	ldr	r2, [pc, #332]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fb0:	6153      	str	r3, [r2, #20]
        in_data[6] = filteredValue[6];
 8001fb2:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	4a51      	ldr	r2, [pc, #324]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fb8:	6193      	str	r3, [r2, #24]
        in_data[7] = filteredValue[7];
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a4f      	ldr	r2, [pc, #316]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fc0:	61d3      	str	r3, [r2, #28]
        in_data[8] = filteredValue[8];
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a4d      	ldr	r2, [pc, #308]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fc8:	6213      	str	r3, [r2, #32]
        in_data[9] = filteredValue[9];
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fd0:	6253      	str	r3, [r2, #36]	; 0x24
        in_data[10] = filteredValue[10];
 8001fd2:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	4a49      	ldr	r2, [pc, #292]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fd8:	6293      	str	r3, [r2, #40]	; 0x28
        in_data[11] = filteredValue[11];
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	4a47      	ldr	r2, [pc, #284]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fe0:	62d3      	str	r3, [r2, #44]	; 0x2c
        in_data[12] = filteredValue[0];
 8001fe2:	4b44      	ldr	r3, [pc, #272]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a45      	ldr	r2, [pc, #276]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30

        in_data[13] = filteredValue[12];
 8001fea:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a43      	ldr	r2, [pc, #268]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001ff0:	6353      	str	r3, [r2, #52]	; 0x34
        in_data[14] = filteredValue[13];
 8001ff2:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	4a41      	ldr	r2, [pc, #260]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8001ff8:	6393      	str	r3, [r2, #56]	; 0x38
        in_data[15] = filteredValue[14];
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	4a3f      	ldr	r2, [pc, #252]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002000:	63d3      	str	r3, [r2, #60]	; 0x3c
        in_data[16] = filteredValue[15];
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
        in_data[17] = filteredValue[16];
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
        in_data[18] = filteredValue[17];
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a39      	ldr	r2, [pc, #228]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002018:	6493      	str	r3, [r2, #72]	; 0x48
        in_data[19] = filteredValue[18];
 800201a:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 800201c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201e:	4a37      	ldr	r2, [pc, #220]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002020:	64d3      	str	r3, [r2, #76]	; 0x4c
        in_data[20] = filteredValue[19];
 8002022:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	4a35      	ldr	r2, [pc, #212]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002028:	6513      	str	r3, [r2, #80]	; 0x50
        in_data[21] = filteredValue[20];
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 800202c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202e:	4a33      	ldr	r2, [pc, #204]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002030:	6553      	str	r3, [r2, #84]	; 0x54
        in_data[22] = filteredValue[21];
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	4a31      	ldr	r2, [pc, #196]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
        in_data[23] = filteredValue[22];
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002040:	65d3      	str	r3, [r2, #92]	; 0x5c
        in_data[24] = filteredValue[23];
 8002042:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	4a2d      	ldr	r2, [pc, #180]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002048:	6613      	str	r3, [r2, #96]	; 0x60
        in_data[25] = filteredValue[12];
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002050:	6653      	str	r3, [r2, #100]	; 0x64
		#if NUM_SENSOR >= 36
        in_data[26] = filteredValue[24];
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	4a29      	ldr	r2, [pc, #164]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002058:	6693      	str	r3, [r2, #104]	; 0x68
        in_data[27] = filteredValue[25];
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 800205c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800205e:	4a27      	ldr	r2, [pc, #156]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002060:	66d3      	str	r3, [r2, #108]	; 0x6c
        in_data[28] = filteredValue[26];
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002066:	4a25      	ldr	r2, [pc, #148]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
        in_data[29] = filteredValue[27];
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 800206c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800206e:	4a23      	ldr	r2, [pc, #140]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002070:	6753      	str	r3, [r2, #116]	; 0x74
        in_data[30] = filteredValue[28];
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002078:	6793      	str	r3, [r2, #120]	; 0x78
        in_data[31] = filteredValue[29];
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 800207c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207e:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002080:	67d3      	str	r3, [r2, #124]	; 0x7c
        in_data[32] = filteredValue[30];
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002086:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        in_data[33] = filteredValue[31];
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 800208e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002090:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 8002092:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        in_data[34] = filteredValue[32];
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 8002098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 800209e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        in_data[35] = filteredValue[33];
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 80020a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 80020aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        in_data[36] = filteredValue[34];
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b4:	4a11      	ldr	r2, [pc, #68]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 80020b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        in_data[37] = filteredValue[35];
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 80020bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c0:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 80020c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        in_data[38] = filteredValue[24];
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <InferenceHeatI2CCommand+0x2ac>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <InferenceHeatI2CCommand+0x2b4>)
 80020cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
		in_data[49] = filteredValue[46];
		in_data[50] = filteredValue[47];
		in_data[51] = filteredValue[36];
		#endif

		if(tofCount == NUM_SENSOR){
 80020d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020d4:	2b24      	cmp	r3, #36	; 0x24
 80020d6:	f040 8142 	bne.w	800235e <InferenceHeatI2CCommand+0x516>
	        for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
 80020de:	e027      	b.n	8002130 <InferenceHeatI2CCommand+0x2e8>
 80020e0:	2000615c 	.word	0x2000615c
 80020e4:	2000999c 	.word	0x2000999c
 80020e8:	20006044 	.word	0x20006044
 80020ec:	20005958 	.word	0x20005958
 80020f0:	20005b64 	.word	0x20005b64
 80020f4:	20005e34 	.word	0x20005e34
 80020f8:	200001b0 	.word	0x200001b0
 80020fc:	20002060 	.word	0x20002060
 8002100:	4aab      	ldr	r2, [pc, #684]	; (80023b0 <InferenceHeatI2CCommand+0x568>)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fa4c 	bl	80005a8 <__aeabi_f2d>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	49a7      	ldr	r1, [pc, #668]	; (80023b4 <InferenceHeatI2CCommand+0x56c>)
 8002116:	48a8      	ldr	r0, [pc, #672]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002118:	f011 f8fc 	bl	8013314 <siprintf>
 800211c:	4603      	mov	r3, r0
 800211e:	b29a      	uxth	r2, r3
 8002120:	2364      	movs	r3, #100	; 0x64
 8002122:	49a5      	ldr	r1, [pc, #660]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002124:	48a5      	ldr	r0, [pc, #660]	; (80023bc <InferenceHeatI2CCommand+0x574>)
 8002126:	f006 fbc3 	bl	80088b0 <HAL_UART_Transmit>
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	3301      	adds	r3, #1
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	2b23      	cmp	r3, #35	; 0x23
 8002134:	dde4      	ble.n	8002100 <InferenceHeatI2CCommand+0x2b8>
	        int a =0;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
			aiRun(in_data,out_data);
 800213a:	49a1      	ldr	r1, [pc, #644]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 800213c:	48a1      	ldr	r0, [pc, #644]	; (80023c4 <InferenceHeatI2CCommand+0x57c>)
 800213e:	f7fe ffcb 	bl	80010d8 <aiRun>
			float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 8002142:	4b9f      	ldr	r3, [pc, #636]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 8002144:	ed93 7a02 	vldr	s14, [r3, #8]
 8002148:	4b9d      	ldr	r3, [pc, #628]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 800214a:	edd3 7a02 	vldr	s15, [r3, #8]
 800214e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002152:	4b9b      	ldr	r3, [pc, #620]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 8002154:	edd3 6a03 	vldr	s13, [r3, #12]
 8002158:	4b99      	ldr	r3, [pc, #612]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 800215a:	edd3 7a03 	vldr	s15, [r3, #12]
 800215e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002166:	edc7 7a03 	vstr	s15, [r7, #12]
			//float sqrange = 0.08;
		    uint32_t timestamp = HAL_GetTick();
 800216a:	f002 f93d 	bl	80043e8 <HAL_GetTick>
 800216e:	60b8      	str	r0, [r7, #8]
			if(sqSum>=0.97){
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7fe fa19 	bl	80005a8 <__aeabi_f2d>
 8002176:	a38c      	add	r3, pc, #560	; (adr r3, 80023a8 <InferenceHeatI2CCommand+0x560>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fcf2 	bl	8000b64 <__aeabi_dcmpge>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 809f 	beq.w	80022c6 <InferenceHeatI2CCommand+0x47e>
				out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 8002188:	4b8d      	ldr	r3, [pc, #564]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002196:	4b8c      	ldr	r3, [pc, #560]	; (80023c8 <InferenceHeatI2CCommand+0x580>)
 8002198:	edd3 6a01 	vldr	s13, [r3, #4]
 800219c:	4b8a      	ldr	r3, [pc, #552]	; (80023c8 <InferenceHeatI2CCommand+0x580>)
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021b2:	4b85      	ldr	r3, [pc, #532]	; (80023c8 <InferenceHeatI2CCommand+0x580>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 80021be:	edc3 7a00 	vstr	s15, [r3]
				out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 80021c2:	4b7f      	ldr	r3, [pc, #508]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 80021c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80021d0:	4b7e      	ldr	r3, [pc, #504]	; (80023cc <InferenceHeatI2CCommand+0x584>)
 80021d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80021d6:	4b7d      	ldr	r3, [pc, #500]	; (80023cc <InferenceHeatI2CCommand+0x584>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021ec:	4b77      	ldr	r3, [pc, #476]	; (80023cc <InferenceHeatI2CCommand+0x584>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f6:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 80021f8:	edc3 7a01 	vstr	s15, [r3, #4]
				if(out_data[1] >=144){out_data[1]=144;}
 80021fc:	4b70      	ldr	r3, [pc, #448]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 80021fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002202:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80023d0 <InferenceHeatI2CCommand+0x588>
 8002206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	db02      	blt.n	8002216 <InferenceHeatI2CCommand+0x3ce>
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 8002212:	4a70      	ldr	r2, [pc, #448]	; (80023d4 <InferenceHeatI2CCommand+0x58c>)
 8002214:	605a      	str	r2, [r3, #4]
				if(out_data[1] <=16){out_data[1]=16;}
 8002216:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 8002218:	edd3 7a01 	vldr	s15, [r3, #4]
 800221c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002228:	d803      	bhi.n	8002232 <InferenceHeatI2CCommand+0x3ea>
 800222a:	4b65      	ldr	r3, [pc, #404]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 800222c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002230:	605a      	str	r2, [r3, #4]
				if(out_data[0]>=Fminmax[0]){
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 8002234:	ed93 7a00 	vldr	s14, [r3]
 8002238:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <InferenceHeatI2CCommand+0x580>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	f2c0 808a 	blt.w	800235e <InferenceHeatI2CCommand+0x516>
					for(int k=0; k<4;k++){
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e018      	b.n	8002282 <InferenceHeatI2CCommand+0x43a>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002250:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f9a4 	bl	80005a8 <__aeabi_f2d>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	495c      	ldr	r1, [pc, #368]	; (80023d8 <InferenceHeatI2CCommand+0x590>)
 8002266:	4854      	ldr	r0, [pc, #336]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002268:	f011 f854 	bl	8013314 <siprintf>
 800226c:	4603      	mov	r3, r0
 800226e:	b29a      	uxth	r2, r3
 8002270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002274:	4950      	ldr	r1, [pc, #320]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002276:	4851      	ldr	r0, [pc, #324]	; (80023bc <InferenceHeatI2CCommand+0x574>)
 8002278:	f006 fb1a 	bl	80088b0 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3301      	adds	r3, #1
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	2b03      	cmp	r3, #3
 8002286:	dde3      	ble.n	8002250 <InferenceHeatI2CCommand+0x408>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7fe f98d 	bl	80005a8 <__aeabi_f2d>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4951      	ldr	r1, [pc, #324]	; (80023d8 <InferenceHeatI2CCommand+0x590>)
 8002294:	4848      	ldr	r0, [pc, #288]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002296:	f011 f83d 	bl	8013314 <siprintf>
 800229a:	4603      	mov	r3, r0
 800229c:	b29a      	uxth	r2, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	4945      	ldr	r1, [pc, #276]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 80022a4:	4845      	ldr	r0, [pc, #276]	; (80023bc <InferenceHeatI2CCommand+0x574>)
 80022a6:	f006 fb03 	bl	80088b0 <HAL_UART_Transmit>
				    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	494b      	ldr	r1, [pc, #300]	; (80023dc <InferenceHeatI2CCommand+0x594>)
 80022ae:	4842      	ldr	r0, [pc, #264]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 80022b0:	f011 f830 	bl	8013314 <siprintf>
 80022b4:	4603      	mov	r3, r0
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022bc:	493e      	ldr	r1, [pc, #248]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 80022be:	483f      	ldr	r0, [pc, #252]	; (80023bc <InferenceHeatI2CCommand+0x574>)
 80022c0:	f006 faf6 	bl	80088b0 <HAL_UART_Transmit>
 80022c4:	e04b      	b.n	800235e <InferenceHeatI2CCommand+0x516>
				    //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "1"), 1000);
				}
			}else if(a==1){
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d148      	bne.n	800235e <InferenceHeatI2CCommand+0x516>
				for(int k=0; k<4;k++){
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	e018      	b.n	8002304 <InferenceHeatI2CCommand+0x4bc>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 80022d2:	4a3b      	ldr	r2, [pc, #236]	; (80023c0 <InferenceHeatI2CCommand+0x578>)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f963 	bl	80005a8 <__aeabi_f2d>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	493c      	ldr	r1, [pc, #240]	; (80023d8 <InferenceHeatI2CCommand+0x590>)
 80022e8:	4833      	ldr	r0, [pc, #204]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 80022ea:	f011 f813 	bl	8013314 <siprintf>
 80022ee:	4603      	mov	r3, r0
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	4930      	ldr	r1, [pc, #192]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 80022f8:	4830      	ldr	r0, [pc, #192]	; (80023bc <InferenceHeatI2CCommand+0x574>)
 80022fa:	f006 fad9 	bl	80088b0 <HAL_UART_Transmit>
				for(int k=0; k<4;k++){
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	3301      	adds	r3, #1
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b03      	cmp	r3, #3
 8002308:	dde3      	ble.n	80022d2 <InferenceHeatI2CCommand+0x48a>
				}
				HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7fe f94c 	bl	80005a8 <__aeabi_f2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4930      	ldr	r1, [pc, #192]	; (80023d8 <InferenceHeatI2CCommand+0x590>)
 8002316:	4828      	ldr	r0, [pc, #160]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002318:	f010 fffc 	bl	8013314 <siprintf>
 800231c:	4603      	mov	r3, r0
 800231e:	b29a      	uxth	r2, r3
 8002320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002324:	4924      	ldr	r1, [pc, #144]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002326:	4825      	ldr	r0, [pc, #148]	; (80023bc <InferenceHeatI2CCommand+0x574>)
 8002328:	f006 fac2 	bl	80088b0 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	492b      	ldr	r1, [pc, #172]	; (80023dc <InferenceHeatI2CCommand+0x594>)
 8002330:	4821      	ldr	r0, [pc, #132]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002332:	f010 ffef 	bl	8013314 <siprintf>
 8002336:	4603      	mov	r3, r0
 8002338:	b29a      	uxth	r2, r3
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	491e      	ldr	r1, [pc, #120]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002340:	481e      	ldr	r0, [pc, #120]	; (80023bc <InferenceHeatI2CCommand+0x574>)
 8002342:	f006 fab5 	bl	80088b0 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "0"), 1000);
 8002346:	4926      	ldr	r1, [pc, #152]	; (80023e0 <InferenceHeatI2CCommand+0x598>)
 8002348:	481b      	ldr	r0, [pc, #108]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 800234a:	f010 ffe3 	bl	8013314 <siprintf>
 800234e:	4603      	mov	r3, r0
 8002350:	b29a      	uxth	r2, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	4918      	ldr	r1, [pc, #96]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002358:	4818      	ldr	r0, [pc, #96]	; (80023bc <InferenceHeatI2CCommand+0x574>)
 800235a:	f006 faa9 	bl	80088b0 <HAL_UART_Transmit>
			}
		}
		do{
			endTime = HAL_GetTick();
 800235e:	f002 f843 	bl	80043e8 <HAL_GetTick>
 8002362:	6078      	str	r0, [r7, #4]
			diffTime = endTime - startTime;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	603b      	str	r3, [r7, #0]
		}while (diffTime <= TIMBUDGET);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d9f5      	bls.n	800235e <InferenceHeatI2CCommand+0x516>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8002372:	491c      	ldr	r1, [pc, #112]	; (80023e4 <InferenceHeatI2CCommand+0x59c>)
 8002374:	4810      	ldr	r0, [pc, #64]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002376:	f010 ffcd 	bl	8013314 <siprintf>
 800237a:	4603      	mov	r3, r0
 800237c:	b29a      	uxth	r2, r3
 800237e:	2364      	movs	r3, #100	; 0x64
 8002380:	490d      	ldr	r1, [pc, #52]	; (80023b8 <InferenceHeatI2CCommand+0x570>)
 8002382:	480e      	ldr	r0, [pc, #56]	; (80023bc <InferenceHeatI2CCommand+0x574>)
 8002384:	f006 fa94 	bl	80088b0 <HAL_UART_Transmit>
    for (int count =0; count <50000;count ++){
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	3301      	adds	r3, #1
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002394:	4293      	cmp	r3, r2
 8002396:	f77f ad70 	ble.w	8001e7a <InferenceHeatI2CCommand+0x32>
    }
}
 800239a:	bf00      	nop
 800239c:	bf00      	nop
 800239e:	3730      	adds	r7, #48	; 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	f3af 8000 	nop.w
 80023a8:	70a3d70a 	.word	0x70a3d70a
 80023ac:	3fef0a3d 	.word	0x3fef0a3d
 80023b0:	20005e34 	.word	0x20005e34
 80023b4:	08018768 	.word	0x08018768
 80023b8:	20005fc0 	.word	0x20005fc0
 80023bc:	20005f38 	.word	0x20005f38
 80023c0:	20002100 	.word	0x20002100
 80023c4:	20002060 	.word	0x20002060
 80023c8:	20000240 	.word	0x20000240
 80023cc:	20000248 	.word	0x20000248
 80023d0:	43100000 	.word	0x43100000
 80023d4:	43100000 	.word	0x43100000
 80023d8:	0801875c 	.word	0x0801875c
 80023dc:	08018770 	.word	0x08018770
 80023e0:	08018778 	.word	0x08018778
 80023e4:	08018764 	.word	0x08018764

080023e8 <PointingVertical>:

void PointingVertical(){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	; 0x38
 80023ec:	af00      	add	r7, sp, #0

	SetI2CCommand();
 80023ee:	f7ff f987 	bl	8001700 <SetI2CCommand>
	SensorI2CCommand();
 80023f2:	f7ff f8d7 	bl	80015a4 <SensorI2CCommand>
	ResetAllDevices();
 80023f6:	f001 fed1 	bl	800419c <ResetAllDevices>
	setOnAllDevices();
 80023fa:	f001 ff4f 	bl	800429c <setOnAllDevices>


	for(int i = 0; i < 5; i++) {
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
 8002402:	e2ad      	b.n	8002960 <PointingVertical+0x578>

	    uint32_t ServoStartTime = HAL_GetTick(); // 시작 시간 기록
 8002404:	f001 fff0 	bl	80043e8 <HAL_GetTick>
 8002408:	61f8      	str	r0, [r7, #28]
	        servo_angle(&htim2, TIM_CHANNEL_1, 10);
 800240a:	220a      	movs	r2, #10
 800240c:	2100      	movs	r1, #0
 800240e:	489a      	ldr	r0, [pc, #616]	; (8002678 <PointingVertical+0x290>)
 8002410:	f001 fb80 	bl	8003b14 <servo_angle>
	        HAL_Delay(1000);
 8002414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002418:	f001 fff2 	bl	8004400 <HAL_Delay>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 800241c:	e282      	b.n	8002924 <PointingVertical+0x53c>
	        uint32_t startTime, endTime, diffTime;
	        uint8_t tofCount =0;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			startTime = HAL_GetTick();
 8002424:	f001 ffe0 	bl	80043e8 <HAL_GetTick>
 8002428:	61b8      	str	r0, [r7, #24]
			for (int i = 0; i < NUM_SENSOR; i++) {
 800242a:	2300      	movs	r3, #0
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242e:	e071      	b.n	8002514 <PointingVertical+0x12c>
				Dev = &vl53l0x_s[i];
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	4a90      	ldr	r2, [pc, #576]	; (800267c <PointingVertical+0x294>)
 800243c:	4413      	add	r3, r2
 800243e:	4a90      	ldr	r2, [pc, #576]	; (8002680 <PointingVertical+0x298>)
 8002440:	6013      	str	r3, [r2, #0]
				VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 8002442:	4b8f      	ldr	r3, [pc, #572]	; (8002680 <PointingVertical+0x298>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	498f      	ldr	r1, [pc, #572]	; (8002684 <PointingVertical+0x29c>)
 8002448:	4618      	mov	r0, r3
 800244a:	f009 f815 	bl	800b478 <VL53L0X_PerformContinuousRangingMeasurement>
				if (RangingData.RangeStatus == 0) {
 800244e:	4b8d      	ldr	r3, [pc, #564]	; (8002684 <PointingVertical+0x29c>)
 8002450:	7e1b      	ldrb	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d15b      	bne.n	800250e <PointingVertical+0x126>
				  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 8002456:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <PointingVertical+0x29c>)
 8002458:	891b      	ldrh	r3, [r3, #8]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002462:	4a89      	ldr	r2, [pc, #548]	; (8002688 <PointingVertical+0x2a0>)
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247e:	d546      	bpl.n	800250e <PointingVertical+0x126>
					filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8002480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4a80      	ldr	r2, [pc, #512]	; (800268c <PointingVertical+0x2a4>)
 800248c:	4413      	add	r3, r2
 800248e:	4a7d      	ldr	r2, [pc, #500]	; (8002684 <PointingVertical+0x29c>)
 8002490:	8912      	ldrh	r2, [r2, #8]
 8002492:	ee07 2a90 	vmov	s15, r2
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	eeb0 0a67 	vmov.f32	s0, s15
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 ff7e 	bl	80033a0 <Kalman_Estimate>
 80024a4:	eef0 7a40 	vmov.f32	s15, s0
 80024a8:	4a79      	ldr	r2, [pc, #484]	; (8002690 <PointingVertical+0x2a8>)
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	edc3 7a00 	vstr	s15, [r3]
					filteredValue[i] -= sensorAverages[i];
 80024b4:	4a76      	ldr	r2, [pc, #472]	; (8002690 <PointingVertical+0x2a8>)
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	ed93 7a00 	vldr	s14, [r3]
 80024c0:	4a71      	ldr	r2, [pc, #452]	; (8002688 <PointingVertical+0x2a0>)
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d0:	4a6f      	ldr	r2, [pc, #444]	; (8002690 <PointingVertical+0x2a8>)
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	edc3 7a00 	vstr	s15, [r3]
					//filteredValue[i] -= Xmean[i];
					filteredValue[i] /= Xstd[i];
 80024dc:	4a6c      	ldr	r2, [pc, #432]	; (8002690 <PointingVertical+0x2a8>)
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	edd3 6a00 	vldr	s13, [r3]
 80024e8:	4a6a      	ldr	r2, [pc, #424]	; (8002694 <PointingVertical+0x2ac>)
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024f8:	4a65      	ldr	r2, [pc, #404]	; (8002690 <PointingVertical+0x2a8>)
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edc3 7a00 	vstr	s15, [r3]
					tofCount++;
 8002504:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002508:	3301      	adds	r3, #1
 800250a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			for (int i = 0; i < NUM_SENSOR; i++) {
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	3301      	adds	r3, #1
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2b23      	cmp	r3, #35	; 0x23
 8002518:	dd8a      	ble.n	8002430 <PointingVertical+0x48>
				  }
				}
			}

			in_data[0] = filteredValue[0];
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <PointingVertical+0x2a8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a5e      	ldr	r2, [pc, #376]	; (8002698 <PointingVertical+0x2b0>)
 8002520:	6013      	str	r3, [r2, #0]
			in_data[1] = filteredValue[1];
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <PointingVertical+0x2a8>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a5c      	ldr	r2, [pc, #368]	; (8002698 <PointingVertical+0x2b0>)
 8002528:	6053      	str	r3, [r2, #4]
			in_data[2] = filteredValue[2];
 800252a:	4b59      	ldr	r3, [pc, #356]	; (8002690 <PointingVertical+0x2a8>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4a5a      	ldr	r2, [pc, #360]	; (8002698 <PointingVertical+0x2b0>)
 8002530:	6093      	str	r3, [r2, #8]
			in_data[3] = filteredValue[3];
 8002532:	4b57      	ldr	r3, [pc, #348]	; (8002690 <PointingVertical+0x2a8>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4a58      	ldr	r2, [pc, #352]	; (8002698 <PointingVertical+0x2b0>)
 8002538:	60d3      	str	r3, [r2, #12]
			in_data[4] = filteredValue[4];
 800253a:	4b55      	ldr	r3, [pc, #340]	; (8002690 <PointingVertical+0x2a8>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	4a56      	ldr	r2, [pc, #344]	; (8002698 <PointingVertical+0x2b0>)
 8002540:	6113      	str	r3, [r2, #16]
			in_data[5] = filteredValue[5];
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <PointingVertical+0x2a8>)
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	4a54      	ldr	r2, [pc, #336]	; (8002698 <PointingVertical+0x2b0>)
 8002548:	6153      	str	r3, [r2, #20]
			in_data[6] = filteredValue[6];
 800254a:	4b51      	ldr	r3, [pc, #324]	; (8002690 <PointingVertical+0x2a8>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4a52      	ldr	r2, [pc, #328]	; (8002698 <PointingVertical+0x2b0>)
 8002550:	6193      	str	r3, [r2, #24]
			in_data[7] = filteredValue[7];
 8002552:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <PointingVertical+0x2a8>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4a50      	ldr	r2, [pc, #320]	; (8002698 <PointingVertical+0x2b0>)
 8002558:	61d3      	str	r3, [r2, #28]
			in_data[8] = filteredValue[8];
 800255a:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <PointingVertical+0x2a8>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a4e      	ldr	r2, [pc, #312]	; (8002698 <PointingVertical+0x2b0>)
 8002560:	6213      	str	r3, [r2, #32]
			in_data[9] = filteredValue[9];
 8002562:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <PointingVertical+0x2a8>)
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	4a4c      	ldr	r2, [pc, #304]	; (8002698 <PointingVertical+0x2b0>)
 8002568:	6253      	str	r3, [r2, #36]	; 0x24
			in_data[10] = filteredValue[10];
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <PointingVertical+0x2a8>)
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <PointingVertical+0x2b0>)
 8002570:	6293      	str	r3, [r2, #40]	; 0x28
			in_data[11] = filteredValue[11];
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <PointingVertical+0x2a8>)
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	4a48      	ldr	r2, [pc, #288]	; (8002698 <PointingVertical+0x2b0>)
 8002578:	62d3      	str	r3, [r2, #44]	; 0x2c
			in_data[12] = filteredValue[0];
 800257a:	4b45      	ldr	r3, [pc, #276]	; (8002690 <PointingVertical+0x2a8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a46      	ldr	r2, [pc, #280]	; (8002698 <PointingVertical+0x2b0>)
 8002580:	6313      	str	r3, [r2, #48]	; 0x30

			in_data[13] = filteredValue[12];
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <PointingVertical+0x2a8>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a44      	ldr	r2, [pc, #272]	; (8002698 <PointingVertical+0x2b0>)
 8002588:	6353      	str	r3, [r2, #52]	; 0x34
			in_data[14] = filteredValue[13];
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <PointingVertical+0x2a8>)
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	4a42      	ldr	r2, [pc, #264]	; (8002698 <PointingVertical+0x2b0>)
 8002590:	6393      	str	r3, [r2, #56]	; 0x38
			in_data[15] = filteredValue[14];
 8002592:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <PointingVertical+0x2a8>)
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4a40      	ldr	r2, [pc, #256]	; (8002698 <PointingVertical+0x2b0>)
 8002598:	63d3      	str	r3, [r2, #60]	; 0x3c
			in_data[16] = filteredValue[15];
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <PointingVertical+0x2a8>)
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	4a3e      	ldr	r2, [pc, #248]	; (8002698 <PointingVertical+0x2b0>)
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
			in_data[17] = filteredValue[16];
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <PointingVertical+0x2a8>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a3c      	ldr	r2, [pc, #240]	; (8002698 <PointingVertical+0x2b0>)
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
			in_data[18] = filteredValue[17];
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <PointingVertical+0x2a8>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a3a      	ldr	r2, [pc, #232]	; (8002698 <PointingVertical+0x2b0>)
 80025b0:	6493      	str	r3, [r2, #72]	; 0x48
			in_data[19] = filteredValue[18];
 80025b2:	4b37      	ldr	r3, [pc, #220]	; (8002690 <PointingVertical+0x2a8>)
 80025b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b6:	4a38      	ldr	r2, [pc, #224]	; (8002698 <PointingVertical+0x2b0>)
 80025b8:	64d3      	str	r3, [r2, #76]	; 0x4c
			in_data[20] = filteredValue[19];
 80025ba:	4b35      	ldr	r3, [pc, #212]	; (8002690 <PointingVertical+0x2a8>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	4a36      	ldr	r2, [pc, #216]	; (8002698 <PointingVertical+0x2b0>)
 80025c0:	6513      	str	r3, [r2, #80]	; 0x50
			in_data[21] = filteredValue[20];
 80025c2:	4b33      	ldr	r3, [pc, #204]	; (8002690 <PointingVertical+0x2a8>)
 80025c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c6:	4a34      	ldr	r2, [pc, #208]	; (8002698 <PointingVertical+0x2b0>)
 80025c8:	6553      	str	r3, [r2, #84]	; 0x54
			in_data[22] = filteredValue[21];
 80025ca:	4b31      	ldr	r3, [pc, #196]	; (8002690 <PointingVertical+0x2a8>)
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	4a32      	ldr	r2, [pc, #200]	; (8002698 <PointingVertical+0x2b0>)
 80025d0:	6593      	str	r3, [r2, #88]	; 0x58
			in_data[23] = filteredValue[22];
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <PointingVertical+0x2a8>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	4a30      	ldr	r2, [pc, #192]	; (8002698 <PointingVertical+0x2b0>)
 80025d8:	65d3      	str	r3, [r2, #92]	; 0x5c
			in_data[24] = filteredValue[23];
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <PointingVertical+0x2a8>)
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	4a2e      	ldr	r2, [pc, #184]	; (8002698 <PointingVertical+0x2b0>)
 80025e0:	6613      	str	r3, [r2, #96]	; 0x60
			in_data[25] = filteredValue[12];
 80025e2:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <PointingVertical+0x2a8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <PointingVertical+0x2b0>)
 80025e8:	6653      	str	r3, [r2, #100]	; 0x64
			#if NUM_SENSOR >= 36
			in_data[26] = filteredValue[24];
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <PointingVertical+0x2a8>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ee:	4a2a      	ldr	r2, [pc, #168]	; (8002698 <PointingVertical+0x2b0>)
 80025f0:	6693      	str	r3, [r2, #104]	; 0x68
			in_data[27] = filteredValue[25];
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <PointingVertical+0x2a8>)
 80025f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f6:	4a28      	ldr	r2, [pc, #160]	; (8002698 <PointingVertical+0x2b0>)
 80025f8:	66d3      	str	r3, [r2, #108]	; 0x6c
			in_data[28] = filteredValue[26];
 80025fa:	4b25      	ldr	r3, [pc, #148]	; (8002690 <PointingVertical+0x2a8>)
 80025fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025fe:	4a26      	ldr	r2, [pc, #152]	; (8002698 <PointingVertical+0x2b0>)
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
			in_data[29] = filteredValue[27];
 8002602:	4b23      	ldr	r3, [pc, #140]	; (8002690 <PointingVertical+0x2a8>)
 8002604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002606:	4a24      	ldr	r2, [pc, #144]	; (8002698 <PointingVertical+0x2b0>)
 8002608:	6753      	str	r3, [r2, #116]	; 0x74
			in_data[30] = filteredValue[28];
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <PointingVertical+0x2a8>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a22      	ldr	r2, [pc, #136]	; (8002698 <PointingVertical+0x2b0>)
 8002610:	6793      	str	r3, [r2, #120]	; 0x78
			in_data[31] = filteredValue[29];
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <PointingVertical+0x2a8>)
 8002614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002616:	4a20      	ldr	r2, [pc, #128]	; (8002698 <PointingVertical+0x2b0>)
 8002618:	67d3      	str	r3, [r2, #124]	; 0x7c
			in_data[32] = filteredValue[30];
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <PointingVertical+0x2a8>)
 800261c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <PointingVertical+0x2b0>)
 8002620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			in_data[33] = filteredValue[31];
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <PointingVertical+0x2a8>)
 8002626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002628:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <PointingVertical+0x2b0>)
 800262a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
			in_data[34] = filteredValue[32];
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <PointingVertical+0x2a8>)
 8002630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002634:	4a18      	ldr	r2, [pc, #96]	; (8002698 <PointingVertical+0x2b0>)
 8002636:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
			in_data[35] = filteredValue[33];
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <PointingVertical+0x2a8>)
 800263c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002640:	4a15      	ldr	r2, [pc, #84]	; (8002698 <PointingVertical+0x2b0>)
 8002642:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
			in_data[36] = filteredValue[34];
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <PointingVertical+0x2a8>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	4a12      	ldr	r2, [pc, #72]	; (8002698 <PointingVertical+0x2b0>)
 800264e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			in_data[37] = filteredValue[35];
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <PointingVertical+0x2a8>)
 8002654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002658:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <PointingVertical+0x2b0>)
 800265a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
			in_data[38] = filteredValue[24];
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <PointingVertical+0x2a8>)
 8002660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002662:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <PointingVertical+0x2b0>)
 8002664:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			in_data[49] = filteredValue[46];
			in_data[50] = filteredValue[47];
			in_data[51] = filteredValue[36];
			#endif

			if(tofCount == NUM_SENSOR){
 8002668:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800266c:	2b24      	cmp	r3, #36	; 0x24
 800266e:	f040 8144 	bne.w	80028fa <PointingVertical+0x512>
				for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 8002672:	2300      	movs	r3, #0
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
 8002676:	e029      	b.n	80026cc <PointingVertical+0x2e4>
 8002678:	20005ee8 	.word	0x20005ee8
 800267c:	2000615c 	.word	0x2000615c
 8002680:	2000999c 	.word	0x2000999c
 8002684:	20006044 	.word	0x20006044
 8002688:	20005958 	.word	0x20005958
 800268c:	20005b64 	.word	0x20005b64
 8002690:	20005e34 	.word	0x20005e34
 8002694:	200001b0 	.word	0x200001b0
 8002698:	20002060 	.word	0x20002060
 800269c:	4ab8      	ldr	r2, [pc, #736]	; (8002980 <PointingVertical+0x598>)
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff7e 	bl	80005a8 <__aeabi_f2d>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	49b4      	ldr	r1, [pc, #720]	; (8002984 <PointingVertical+0x59c>)
 80026b2:	48b5      	ldr	r0, [pc, #724]	; (8002988 <PointingVertical+0x5a0>)
 80026b4:	f010 fe2e 	bl	8013314 <siprintf>
 80026b8:	4603      	mov	r3, r0
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	2364      	movs	r3, #100	; 0x64
 80026be:	49b2      	ldr	r1, [pc, #712]	; (8002988 <PointingVertical+0x5a0>)
 80026c0:	48b2      	ldr	r0, [pc, #712]	; (800298c <PointingVertical+0x5a4>)
 80026c2:	f006 f8f5 	bl	80088b0 <HAL_UART_Transmit>
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	3301      	adds	r3, #1
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	2b23      	cmp	r3, #35	; 0x23
 80026d0:	dde4      	ble.n	800269c <PointingVertical+0x2b4>
				int a =0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
				aiRun(in_data,out_data);
 80026d6:	49ae      	ldr	r1, [pc, #696]	; (8002990 <PointingVertical+0x5a8>)
 80026d8:	48ae      	ldr	r0, [pc, #696]	; (8002994 <PointingVertical+0x5ac>)
 80026da:	f7fe fcfd 	bl	80010d8 <aiRun>
				float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 80026de:	4bac      	ldr	r3, [pc, #688]	; (8002990 <PointingVertical+0x5a8>)
 80026e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80026e4:	4baa      	ldr	r3, [pc, #680]	; (8002990 <PointingVertical+0x5a8>)
 80026e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ee:	4ba8      	ldr	r3, [pc, #672]	; (8002990 <PointingVertical+0x5a8>)
 80026f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80026f4:	4ba6      	ldr	r3, [pc, #664]	; (8002990 <PointingVertical+0x5a8>)
 80026f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80026fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002702:	edc7 7a04 	vstr	s15, [r7, #16]
				//float sqrange = 0.08;
				uint32_t timestamp = HAL_GetTick();
 8002706:	f001 fe6f 	bl	80043e8 <HAL_GetTick>
 800270a:	60f8      	str	r0, [r7, #12]
				if(sqSum>=0.97){
 800270c:	6938      	ldr	r0, [r7, #16]
 800270e:	f7fd ff4b 	bl	80005a8 <__aeabi_f2d>
 8002712:	a399      	add	r3, pc, #612	; (adr r3, 8002978 <PointingVertical+0x590>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fe fa24 	bl	8000b64 <__aeabi_dcmpge>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 809f 	beq.w	8002862 <PointingVertical+0x47a>
					out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 8002724:	4b9a      	ldr	r3, [pc, #616]	; (8002990 <PointingVertical+0x5a8>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800272e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002732:	4b99      	ldr	r3, [pc, #612]	; (8002998 <PointingVertical+0x5b0>)
 8002734:	edd3 6a01 	vldr	s13, [r3, #4]
 8002738:	4b97      	ldr	r3, [pc, #604]	; (8002998 <PointingVertical+0x5b0>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002746:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800274a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800274e:	4b92      	ldr	r3, [pc, #584]	; (8002998 <PointingVertical+0x5b0>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002758:	4b8d      	ldr	r3, [pc, #564]	; (8002990 <PointingVertical+0x5a8>)
 800275a:	edc3 7a00 	vstr	s15, [r3]
					out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <PointingVertical+0x5a8>)
 8002760:	edd3 7a01 	vldr	s15, [r3, #4]
 8002764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800276c:	4b8b      	ldr	r3, [pc, #556]	; (800299c <PointingVertical+0x5b4>)
 800276e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002772:	4b8a      	ldr	r3, [pc, #552]	; (800299c <PointingVertical+0x5b4>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800277c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002780:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002784:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002788:	4b84      	ldr	r3, [pc, #528]	; (800299c <PointingVertical+0x5b4>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	4b7f      	ldr	r3, [pc, #508]	; (8002990 <PointingVertical+0x5a8>)
 8002794:	edc3 7a01 	vstr	s15, [r3, #4]
					if(out_data[1] >=144){out_data[1]=144;}
 8002798:	4b7d      	ldr	r3, [pc, #500]	; (8002990 <PointingVertical+0x5a8>)
 800279a:	edd3 7a01 	vldr	s15, [r3, #4]
 800279e:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80029a0 <PointingVertical+0x5b8>
 80027a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027aa:	db02      	blt.n	80027b2 <PointingVertical+0x3ca>
 80027ac:	4b78      	ldr	r3, [pc, #480]	; (8002990 <PointingVertical+0x5a8>)
 80027ae:	4a7d      	ldr	r2, [pc, #500]	; (80029a4 <PointingVertical+0x5bc>)
 80027b0:	605a      	str	r2, [r3, #4]
					if(out_data[1] <=16){out_data[1]=16;}
 80027b2:	4b77      	ldr	r3, [pc, #476]	; (8002990 <PointingVertical+0x5a8>)
 80027b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80027b8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80027bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c4:	d803      	bhi.n	80027ce <PointingVertical+0x3e6>
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <PointingVertical+0x5a8>)
 80027c8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80027cc:	605a      	str	r2, [r3, #4]
					if(out_data[0]>=Fminmax[0]){
 80027ce:	4b70      	ldr	r3, [pc, #448]	; (8002990 <PointingVertical+0x5a8>)
 80027d0:	ed93 7a00 	vldr	s14, [r3]
 80027d4:	4b70      	ldr	r3, [pc, #448]	; (8002998 <PointingVertical+0x5b0>)
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e2:	f2c0 808a 	blt.w	80028fa <PointingVertical+0x512>
						for(int k=0; k<4;k++){
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	e018      	b.n	800281e <PointingVertical+0x436>
							HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 80027ec:	4a68      	ldr	r2, [pc, #416]	; (8002990 <PointingVertical+0x5a8>)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fed6 	bl	80005a8 <__aeabi_f2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4969      	ldr	r1, [pc, #420]	; (80029a8 <PointingVertical+0x5c0>)
 8002802:	4861      	ldr	r0, [pc, #388]	; (8002988 <PointingVertical+0x5a0>)
 8002804:	f010 fd86 	bl	8013314 <siprintf>
 8002808:	4603      	mov	r3, r0
 800280a:	b29a      	uxth	r2, r3
 800280c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002810:	495d      	ldr	r1, [pc, #372]	; (8002988 <PointingVertical+0x5a0>)
 8002812:	485e      	ldr	r0, [pc, #376]	; (800298c <PointingVertical+0x5a4>)
 8002814:	f006 f84c 	bl	80088b0 <HAL_UART_Transmit>
						for(int k=0; k<4;k++){
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	3301      	adds	r3, #1
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	2b03      	cmp	r3, #3
 8002822:	dde3      	ble.n	80027ec <PointingVertical+0x404>
						}
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002824:	6938      	ldr	r0, [r7, #16]
 8002826:	f7fd febf 	bl	80005a8 <__aeabi_f2d>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	495e      	ldr	r1, [pc, #376]	; (80029a8 <PointingVertical+0x5c0>)
 8002830:	4855      	ldr	r0, [pc, #340]	; (8002988 <PointingVertical+0x5a0>)
 8002832:	f010 fd6f 	bl	8013314 <siprintf>
 8002836:	4603      	mov	r3, r0
 8002838:	b29a      	uxth	r2, r3
 800283a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283e:	4952      	ldr	r1, [pc, #328]	; (8002988 <PointingVertical+0x5a0>)
 8002840:	4852      	ldr	r0, [pc, #328]	; (800298c <PointingVertical+0x5a4>)
 8002842:	f006 f835 	bl	80088b0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4958      	ldr	r1, [pc, #352]	; (80029ac <PointingVertical+0x5c4>)
 800284a:	484f      	ldr	r0, [pc, #316]	; (8002988 <PointingVertical+0x5a0>)
 800284c:	f010 fd62 	bl	8013314 <siprintf>
 8002850:	4603      	mov	r3, r0
 8002852:	b29a      	uxth	r2, r3
 8002854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002858:	494b      	ldr	r1, [pc, #300]	; (8002988 <PointingVertical+0x5a0>)
 800285a:	484c      	ldr	r0, [pc, #304]	; (800298c <PointingVertical+0x5a4>)
 800285c:	f006 f828 	bl	80088b0 <HAL_UART_Transmit>
 8002860:	e04b      	b.n	80028fa <PointingVertical+0x512>
						//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "1"), 1000);
					}
				}else if(a==1){
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d148      	bne.n	80028fa <PointingVertical+0x512>
					for(int k=0; k<4;k++){
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	e018      	b.n	80028a0 <PointingVertical+0x4b8>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 800286e:	4a48      	ldr	r2, [pc, #288]	; (8002990 <PointingVertical+0x5a8>)
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe95 	bl	80005a8 <__aeabi_f2d>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4949      	ldr	r1, [pc, #292]	; (80029a8 <PointingVertical+0x5c0>)
 8002884:	4840      	ldr	r0, [pc, #256]	; (8002988 <PointingVertical+0x5a0>)
 8002886:	f010 fd45 	bl	8013314 <siprintf>
 800288a:	4603      	mov	r3, r0
 800288c:	b29a      	uxth	r2, r3
 800288e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002892:	493d      	ldr	r1, [pc, #244]	; (8002988 <PointingVertical+0x5a0>)
 8002894:	483d      	ldr	r0, [pc, #244]	; (800298c <PointingVertical+0x5a4>)
 8002896:	f006 f80b 	bl	80088b0 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	3301      	adds	r3, #1
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	dde3      	ble.n	800286e <PointingVertical+0x486>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 80028a6:	6938      	ldr	r0, [r7, #16]
 80028a8:	f7fd fe7e 	bl	80005a8 <__aeabi_f2d>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	493d      	ldr	r1, [pc, #244]	; (80029a8 <PointingVertical+0x5c0>)
 80028b2:	4835      	ldr	r0, [pc, #212]	; (8002988 <PointingVertical+0x5a0>)
 80028b4:	f010 fd2e 	bl	8013314 <siprintf>
 80028b8:	4603      	mov	r3, r0
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c0:	4931      	ldr	r1, [pc, #196]	; (8002988 <PointingVertical+0x5a0>)
 80028c2:	4832      	ldr	r0, [pc, #200]	; (800298c <PointingVertical+0x5a4>)
 80028c4:	f005 fff4 	bl	80088b0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4938      	ldr	r1, [pc, #224]	; (80029ac <PointingVertical+0x5c4>)
 80028cc:	482e      	ldr	r0, [pc, #184]	; (8002988 <PointingVertical+0x5a0>)
 80028ce:	f010 fd21 	bl	8013314 <siprintf>
 80028d2:	4603      	mov	r3, r0
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028da:	492b      	ldr	r1, [pc, #172]	; (8002988 <PointingVertical+0x5a0>)
 80028dc:	482b      	ldr	r0, [pc, #172]	; (800298c <PointingVertical+0x5a4>)
 80028de:	f005 ffe7 	bl	80088b0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "0"), 1000);
 80028e2:	4933      	ldr	r1, [pc, #204]	; (80029b0 <PointingVertical+0x5c8>)
 80028e4:	4828      	ldr	r0, [pc, #160]	; (8002988 <PointingVertical+0x5a0>)
 80028e6:	f010 fd15 	bl	8013314 <siprintf>
 80028ea:	4603      	mov	r3, r0
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	4925      	ldr	r1, [pc, #148]	; (8002988 <PointingVertical+0x5a0>)
 80028f4:	4825      	ldr	r0, [pc, #148]	; (800298c <PointingVertical+0x5a4>)
 80028f6:	f005 ffdb 	bl	80088b0 <HAL_UART_Transmit>
				}
			}
			do{
				endTime = HAL_GetTick();
 80028fa:	f001 fd75 	bl	80043e8 <HAL_GetTick>
 80028fe:	60b8      	str	r0, [r7, #8]
				diffTime = endTime - startTime;
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	607b      	str	r3, [r7, #4]
			}while (diffTime <= TIMBUDGET);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d9f5      	bls.n	80028fa <PointingVertical+0x512>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 800290e:	4929      	ldr	r1, [pc, #164]	; (80029b4 <PointingVertical+0x5cc>)
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <PointingVertical+0x5a0>)
 8002912:	f010 fcff 	bl	8013314 <siprintf>
 8002916:	4603      	mov	r3, r0
 8002918:	b29a      	uxth	r2, r3
 800291a:	2364      	movs	r3, #100	; 0x64
 800291c:	491a      	ldr	r1, [pc, #104]	; (8002988 <PointingVertical+0x5a0>)
 800291e:	481b      	ldr	r0, [pc, #108]	; (800298c <PointingVertical+0x5a4>)
 8002920:	f005 ffc6 	bl	80088b0 <HAL_UART_Transmit>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 8002924:	f001 fd60 	bl	80043e8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002932:	4293      	cmp	r3, r2
 8002934:	f67f ad73 	bls.w	800241e <PointingVertical+0x36>
	    }
	    HAL_Delay(1000);
 8002938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800293c:	f001 fd60 	bl	8004400 <HAL_Delay>

		servo_angle(&htim2, TIM_CHANNEL_1, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	481c      	ldr	r0, [pc, #112]	; (80029b8 <PointingVertical+0x5d0>)
 8002946:	f001 f8e5 	bl	8003b14 <servo_angle>
		HAL_Delay(1000);
 800294a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800294e:	f001 fd57 	bl	8004400 <HAL_Delay>
	    stepLin(-25);
 8002952:	f06f 0018 	mvn.w	r0, #24
 8002956:	f001 f881 	bl	8003a5c <stepLin>
	for(int i = 0; i < 5; i++) {
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	3301      	adds	r3, #1
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
 8002960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002962:	2b04      	cmp	r3, #4
 8002964:	f77f ad4e 	ble.w	8002404 <PointingVertical+0x1c>
	}
	//stepLin(130);

	// 30 55 80 110 130
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3738      	adds	r7, #56	; 0x38
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	f3af 8000 	nop.w
 8002978:	70a3d70a 	.word	0x70a3d70a
 800297c:	3fef0a3d 	.word	0x3fef0a3d
 8002980:	20005e34 	.word	0x20005e34
 8002984:	08018768 	.word	0x08018768
 8002988:	20005fc0 	.word	0x20005fc0
 800298c:	20005f38 	.word	0x20005f38
 8002990:	20002100 	.word	0x20002100
 8002994:	20002060 	.word	0x20002060
 8002998:	20000240 	.word	0x20000240
 800299c:	20000248 	.word	0x20000248
 80029a0:	43100000 	.word	0x43100000
 80029a4:	43100000 	.word	0x43100000
 80029a8:	0801875c 	.word	0x0801875c
 80029ac:	08018770 	.word	0x08018770
 80029b0:	08018778 	.word	0x08018778
 80029b4:	08018764 	.word	0x08018764
 80029b8:	20005ee8 	.word	0x20005ee8

080029bc <PointingRadial>:

void PointingRadial(){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++) {
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	e017      	b.n	80029f8 <PointingRadial+0x3c>
		servo_angle(&htim2, TIM_CHANNEL_1, 12); // poking 8
 80029c8:	220c      	movs	r2, #12
 80029ca:	2100      	movs	r1, #0
 80029cc:	480e      	ldr	r0, [pc, #56]	; (8002a08 <PointingRadial+0x4c>)
 80029ce:	f001 f8a1 	bl	8003b14 <servo_angle>
		HAL_Delay(5000);
 80029d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80029d6:	f001 fd13 	bl	8004400 <HAL_Delay>
		servo_angle(&htim2, TIM_CHANNEL_1, 0); // poking 8
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	480a      	ldr	r0, [pc, #40]	; (8002a08 <PointingRadial+0x4c>)
 80029e0:	f001 f898 	bl	8003b14 <servo_angle>
	    stepRev(15);
 80029e4:	200f      	movs	r0, #15
 80029e6:	f000 ffd1 	bl	800398c <stepRev>
		HAL_Delay(5000);
 80029ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80029ee:	f001 fd07 	bl	8004400 <HAL_Delay>
	for(int i = 0; i < 7; i++) {
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3301      	adds	r3, #1
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	dde4      	ble.n	80029c8 <PointingRadial+0xc>
	}

	// 0 15 30 45 60 75 90
}
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20005ee8 	.word	0x20005ee8

08002a0c <InitializaionCalibrationCommand>:
void InitializaionCalibrationCommand()
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "InitializationCommand\n\r"), 100);
 8002a12:	49b2      	ldr	r1, [pc, #712]	; (8002cdc <InitializaionCalibrationCommand+0x2d0>)
 8002a14:	48b2      	ldr	r0, [pc, #712]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002a16:	f010 fc7d 	bl	8013314 <siprintf>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	2364      	movs	r3, #100	; 0x64
 8002a20:	49af      	ldr	r1, [pc, #700]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002a22:	48b0      	ldr	r0, [pc, #704]	; (8002ce4 <InitializaionCalibrationCommand+0x2d8>)
 8002a24:	f005 ff44 	bl	80088b0 <HAL_UART_Transmit>

	ResetAllDevices();
 8002a28:	f001 fbb8 	bl	800419c <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e10a      	b.n	8002c48 <InitializaionCalibrationCommand+0x23c>
  	    uint8_t q = i / 12;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4aac      	ldr	r2, [pc, #688]	; (8002ce8 <InitializaionCalibrationCommand+0x2dc>)
 8002a36:	fb82 1203 	smull	r1, r2, r2, r3
 8002a3a:	1052      	asrs	r2, r2, #1
 8002a3c:	17db      	asrs	r3, r3, #31
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4ba8      	ldr	r3, [pc, #672]	; (8002ce8 <InitializaionCalibrationCommand+0x2dc>)
 8002a46:	fb83 1302 	smull	r1, r3, r3, r2
 8002a4a:	1059      	asrs	r1, r3, #1
 8002a4c:	17d3      	asrs	r3, r2, #31
 8002a4e:	1ac9      	subs	r1, r1, r3
 8002a50:	460b      	mov	r3, r1
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	440b      	add	r3, r1
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	1ad1      	subs	r1, r2, r3
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	78ba      	ldrb	r2, [r7, #2]
 8002a66:	2a07      	cmp	r2, #7
 8002a68:	bf8c      	ite	hi
 8002a6a:	2201      	movhi	r2, #1
 8002a6c:	2200      	movls	r2, #0
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	4413      	add	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002a74:	78bb      	ldrb	r3, [r7, #2]
 8002a76:	2b07      	cmp	r3, #7
 8002a78:	d903      	bls.n	8002a82 <InitializaionCalibrationCommand+0x76>
 8002a7a:	78bb      	ldrb	r3, [r7, #2]
 8002a7c:	3b08      	subs	r3, #8
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	e000      	b.n	8002a84 <InitializaionCalibrationCommand+0x78>
 8002a82:	78bb      	ldrb	r3, [r7, #2]
 8002a84:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 8002a86:	787b      	ldrb	r3, [r7, #1]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 fbb3 	bl	80041f4 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8002a8e:	783a      	ldrb	r2, [r7, #0]
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 fbdf 	bl	8004258 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	4a91      	ldr	r2, [pc, #580]	; (8002cec <InitializaionCalibrationCommand+0x2e0>)
 8002aa6:	4413      	add	r3, r2
 8002aa8:	4a91      	ldr	r2, [pc, #580]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002aaa:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8002aac:	4b90      	ldr	r3, [pc, #576]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a90      	ldr	r2, [pc, #576]	; (8002cf4 <InitializaionCalibrationCommand+0x2e8>)
 8002ab2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8002ab6:	4b8e      	ldr	r3, [pc, #568]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2252      	movs	r2, #82	; 0x52
 8002abc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8002ac0:	4b8b      	ldr	r3, [pc, #556]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f007 fae5 	bl	800a094 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8002aca:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f006 fffa 	bl	8009ac8 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8002ad4:	4b86      	ldr	r3, [pc, #536]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f007 f959 	bl	8009d90 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8002ade:	4b84      	ldr	r3, [pc, #528]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f007 fb73 	bl	800a1d0 <VL53L0X_SetDeviceMode>

  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 8002aea:	4b81      	ldr	r3, [pc, #516]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4a81      	ldr	r2, [pc, #516]	; (8002cf8 <InitializaionCalibrationCommand+0x2ec>)
 8002af4:	1899      	adds	r1, r3, r2
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	4a80      	ldr	r2, [pc, #512]	; (8002cfc <InitializaionCalibrationCommand+0x2f0>)
 8002afa:	4413      	add	r3, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	f008 fca6 	bl	800b44e <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 8002b02:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	4a7d      	ldr	r2, [pc, #500]	; (8002d00 <InitializaionCalibrationCommand+0x2f4>)
 8002b0a:	1899      	adds	r1, r3, r2
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	4a7d      	ldr	r2, [pc, #500]	; (8002d04 <InitializaionCalibrationCommand+0x2f8>)
 8002b10:	4413      	add	r3, r2
 8002b12:	461a      	mov	r2, r3
 8002b14:	f007 fff6 	bl	800ab04 <VL53L0X_PerformRefCalibration>

  		refSpadCountHost[i] = refSpadCount[i];
 8002b18:	4a77      	ldr	r2, [pc, #476]	; (8002cf8 <InitializaionCalibrationCommand+0x2ec>)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b20:	4979      	ldr	r1, [pc, #484]	; (8002d08 <InitializaionCalibrationCommand+0x2fc>)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		isApertureSpadsHost[i] = isApertureSpads[i];
 8002b28:	4a74      	ldr	r2, [pc, #464]	; (8002cfc <InitializaionCalibrationCommand+0x2f0>)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	7819      	ldrb	r1, [r3, #0]
 8002b30:	4a76      	ldr	r2, [pc, #472]	; (8002d0c <InitializaionCalibrationCommand+0x300>)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	4413      	add	r3, r2
 8002b36:	460a      	mov	r2, r1
 8002b38:	701a      	strb	r2, [r3, #0]
  		VhvSettingsHost[i] = VhvSettings[i];
 8002b3a:	4a71      	ldr	r2, [pc, #452]	; (8002d00 <InitializaionCalibrationCommand+0x2f4>)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4413      	add	r3, r2
 8002b40:	7819      	ldrb	r1, [r3, #0]
 8002b42:	4a73      	ldr	r2, [pc, #460]	; (8002d10 <InitializaionCalibrationCommand+0x304>)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	4413      	add	r3, r2
 8002b48:	460a      	mov	r2, r1
 8002b4a:	701a      	strb	r2, [r3, #0]
  		PhaseCalHost[i] = PhaseCal[i];
 8002b4c:	4a6d      	ldr	r2, [pc, #436]	; (8002d04 <InitializaionCalibrationCommand+0x2f8>)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4413      	add	r3, r2
 8002b52:	7819      	ldrb	r1, [r3, #0]
 8002b54:	4a6f      	ldr	r2, [pc, #444]	; (8002d14 <InitializaionCalibrationCommand+0x308>)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	4413      	add	r3, r2
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	701a      	strb	r2, [r3, #0]

  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002b5e:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2201      	movs	r2, #1
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f007 fdc6 	bl	800a6f8 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002b6c:	4b60      	ldr	r3, [pc, #384]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f007 fdbf 	bl	800a6f8 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f641 1299 	movw	r2, #6553	; 0x1999
 8002b82:	2101      	movs	r1, #1
 8002b84:	4618      	mov	r0, r3
 8002b86:	f007 fe67 	bl	800a858 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002b8a:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f007 fe5f 	bl	800a858 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 100000);
 8002b9a:	4b55      	ldr	r3, [pc, #340]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	495e      	ldr	r1, [pc, #376]	; (8002d18 <InitializaionCalibrationCommand+0x30c>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f007 fb73 	bl	800a28c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002ba6:	4b52      	ldr	r3, [pc, #328]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2212      	movs	r2, #18
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f007 fb92 	bl	800a2d8 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002bb4:	4b4e      	ldr	r3, [pc, #312]	; (8002cf0 <InitializaionCalibrationCommand+0x2e4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	220e      	movs	r2, #14
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f007 fb8b 	bl	800a2d8 <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기�????????
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4a53      	ldr	r2, [pc, #332]	; (8002d1c <InitializaionCalibrationCommand+0x310>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	4a53      	ldr	r2, [pc, #332]	; (8002d20 <InitializaionCalibrationCommand+0x314>)
 8002bd2:	edd2 7a00 	vldr	s15, [r2]
 8002bd6:	4a53      	ldr	r2, [pc, #332]	; (8002d24 <InitializaionCalibrationCommand+0x318>)
 8002bd8:	ed92 7a00 	vldr	s14, [r2]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <InitializaionCalibrationCommand+0x31c>)
 8002bde:	edd2 6a00 	vldr	s13, [r2]
 8002be2:	eddf 1a52 	vldr	s3, [pc, #328]	; 8002d2c <InitializaionCalibrationCommand+0x320>
 8002be6:	eeb0 1a66 	vmov.f32	s2, s13
 8002bea:	eef0 0a47 	vmov.f32	s1, s14
 8002bee:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fbb6 	bl	8003364 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",i), 100);
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	494d      	ldr	r1, [pc, #308]	; (8002d30 <InitializaionCalibrationCommand+0x324>)
 8002bfc:	4838      	ldr	r0, [pc, #224]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002bfe:	f010 fb89 	bl	8013314 <siprintf>
 8002c02:	4603      	mov	r3, r0
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	2364      	movs	r3, #100	; 0x64
 8002c08:	4935      	ldr	r1, [pc, #212]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002c0a:	4836      	ldr	r0, [pc, #216]	; (8002ce4 <InitializaionCalibrationCommand+0x2d8>)
 8002c0c:	f005 fe50 	bl	80088b0 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8002c10:	6979      	ldr	r1, [r7, #20]
 8002c12:	4b35      	ldr	r3, [pc, #212]	; (8002ce8 <InitializaionCalibrationCommand+0x2dc>)
 8002c14:	fb83 2301 	smull	r2, r3, r3, r1
 8002c18:	105a      	asrs	r2, r3, #1
 8002c1a:	17cb      	asrs	r3, r1, #31
 8002c1c:	1ad2      	subs	r2, r2, r3
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	1aca      	subs	r2, r1, r3
 8002c28:	2a0b      	cmp	r2, #11
 8002c2a:	d10a      	bne.n	8002c42 <InitializaionCalibrationCommand+0x236>
 8002c2c:	4941      	ldr	r1, [pc, #260]	; (8002d34 <InitializaionCalibrationCommand+0x328>)
 8002c2e:	482c      	ldr	r0, [pc, #176]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002c30:	f010 fb70 	bl	8013314 <siprintf>
 8002c34:	4603      	mov	r3, r0
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	2364      	movs	r3, #100	; 0x64
 8002c3a:	4929      	ldr	r1, [pc, #164]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002c3c:	4829      	ldr	r0, [pc, #164]	; (8002ce4 <InitializaionCalibrationCommand+0x2d8>)
 8002c3e:	f005 fe37 	bl	80088b0 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	3301      	adds	r3, #1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b23      	cmp	r3, #35	; 0x23
 8002c4c:	f77f aef1 	ble.w	8002a32 <InitializaionCalibrationCommand+0x26>
  	}


	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint32_t refSpadCountHost[NUM_SENSOR]={"), 100);
 8002c50:	4939      	ldr	r1, [pc, #228]	; (8002d38 <InitializaionCalibrationCommand+0x32c>)
 8002c52:	4823      	ldr	r0, [pc, #140]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002c54:	f010 fb5e 	bl	8013314 <siprintf>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	2364      	movs	r3, #100	; 0x64
 8002c5e:	4920      	ldr	r1, [pc, #128]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002c60:	4820      	ldr	r0, [pc, #128]	; (8002ce4 <InitializaionCalibrationCommand+0x2d8>)
 8002c62:	f005 fe25 	bl	80088b0 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e026      	b.n	8002cba <InitializaionCalibrationCommand+0x2ae>
		if(i < NUM_SENSOR - 1){
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b22      	cmp	r3, #34	; 0x22
 8002c70:	dc10      	bgt.n	8002c94 <InitializaionCalibrationCommand+0x288>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu,",refSpadCount[i]), 100);
 8002c72:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <InitializaionCalibrationCommand+0x2ec>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	492f      	ldr	r1, [pc, #188]	; (8002d3c <InitializaionCalibrationCommand+0x330>)
 8002c7e:	4818      	ldr	r0, [pc, #96]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002c80:	f010 fb48 	bl	8013314 <siprintf>
 8002c84:	4603      	mov	r3, r0
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	2364      	movs	r3, #100	; 0x64
 8002c8a:	4915      	ldr	r1, [pc, #84]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002c8c:	4815      	ldr	r0, [pc, #84]	; (8002ce4 <InitializaionCalibrationCommand+0x2d8>)
 8002c8e:	f005 fe0f 	bl	80088b0 <HAL_UART_Transmit>
 8002c92:	e00f      	b.n	8002cb4 <InitializaionCalibrationCommand+0x2a8>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu};\n",refSpadCount[i]), 100);
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <InitializaionCalibrationCommand+0x2ec>)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4928      	ldr	r1, [pc, #160]	; (8002d40 <InitializaionCalibrationCommand+0x334>)
 8002ca0:	480f      	ldr	r0, [pc, #60]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002ca2:	f010 fb37 	bl	8013314 <siprintf>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	2364      	movs	r3, #100	; 0x64
 8002cac:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002cae:	480d      	ldr	r0, [pc, #52]	; (8002ce4 <InitializaionCalibrationCommand+0x2d8>)
 8002cb0:	f005 fdfe 	bl	80088b0 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b23      	cmp	r3, #35	; 0x23
 8002cbe:	ddd5      	ble.n	8002c6c <InitializaionCalibrationCommand+0x260>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t isApertureSpadsHost[NUM_SENSOR]={"), 100);
 8002cc0:	4920      	ldr	r1, [pc, #128]	; (8002d44 <InitializaionCalibrationCommand+0x338>)
 8002cc2:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002cc4:	f010 fb26 	bl	8013314 <siprintf>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	2364      	movs	r3, #100	; 0x64
 8002cce:	4904      	ldr	r1, [pc, #16]	; (8002ce0 <InitializaionCalibrationCommand+0x2d4>)
 8002cd0:	4804      	ldr	r0, [pc, #16]	; (8002ce4 <InitializaionCalibrationCommand+0x2d8>)
 8002cd2:	f005 fded 	bl	80088b0 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e05c      	b.n	8002d96 <InitializaionCalibrationCommand+0x38a>
 8002cdc:	0801877c 	.word	0x0801877c
 8002ce0:	20005fc0 	.word	0x20005fc0
 8002ce4:	20005f38 	.word	0x20005f38
 8002ce8:	2aaaaaab 	.word	0x2aaaaaab
 8002cec:	2000615c 	.word	0x2000615c
 8002cf0:	2000999c 	.word	0x2000999c
 8002cf4:	20005b10 	.word	0x20005b10
 8002cf8:	20006060 	.word	0x20006060
 8002cfc:	200060f0 	.word	0x200060f0
 8002d00:	20006114 	.word	0x20006114
 8002d04:	20006138 	.word	0x20006138
 8002d08:	20000010 	.word	0x20000010
 8002d0c:	200000a0 	.word	0x200000a0
 8002d10:	200000c4 	.word	0x200000c4
 8002d14:	200000e8 	.word	0x200000e8
 8002d18:	000186a0 	.word	0x000186a0
 8002d1c:	20005b64 	.word	0x20005b64
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000004 	.word	0x20000004
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	00000000 	.word	0x00000000
 8002d30:	08018794 	.word	0x08018794
 8002d34:	0801879c 	.word	0x0801879c
 8002d38:	080187a0 	.word	0x080187a0
 8002d3c:	080187c8 	.word	0x080187c8
 8002d40:	080187d0 	.word	0x080187d0
 8002d44:	080187d8 	.word	0x080187d8
		if(i < NUM_SENSOR - 1){
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b22      	cmp	r3, #34	; 0x22
 8002d4c:	dc10      	bgt.n	8002d70 <InitializaionCalibrationCommand+0x364>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",isApertureSpads[i]), 100);
 8002d4e:	4a4e      	ldr	r2, [pc, #312]	; (8002e88 <InitializaionCalibrationCommand+0x47c>)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	494c      	ldr	r1, [pc, #304]	; (8002e8c <InitializaionCalibrationCommand+0x480>)
 8002d5a:	484d      	ldr	r0, [pc, #308]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002d5c:	f010 fada 	bl	8013314 <siprintf>
 8002d60:	4603      	mov	r3, r0
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	2364      	movs	r3, #100	; 0x64
 8002d66:	494a      	ldr	r1, [pc, #296]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002d68:	484a      	ldr	r0, [pc, #296]	; (8002e94 <InitializaionCalibrationCommand+0x488>)
 8002d6a:	f005 fda1 	bl	80088b0 <HAL_UART_Transmit>
 8002d6e:	e00f      	b.n	8002d90 <InitializaionCalibrationCommand+0x384>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",isApertureSpads[i]), 100);
 8002d70:	4a45      	ldr	r2, [pc, #276]	; (8002e88 <InitializaionCalibrationCommand+0x47c>)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4947      	ldr	r1, [pc, #284]	; (8002e98 <InitializaionCalibrationCommand+0x48c>)
 8002d7c:	4844      	ldr	r0, [pc, #272]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002d7e:	f010 fac9 	bl	8013314 <siprintf>
 8002d82:	4603      	mov	r3, r0
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	2364      	movs	r3, #100	; 0x64
 8002d88:	4941      	ldr	r1, [pc, #260]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002d8a:	4842      	ldr	r0, [pc, #264]	; (8002e94 <InitializaionCalibrationCommand+0x488>)
 8002d8c:	f005 fd90 	bl	80088b0 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3301      	adds	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b23      	cmp	r3, #35	; 0x23
 8002d9a:	ddd5      	ble.n	8002d48 <InitializaionCalibrationCommand+0x33c>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t VhvSettingsHost[NUM_SENSOR]={"), 100);
 8002d9c:	493f      	ldr	r1, [pc, #252]	; (8002e9c <InitializaionCalibrationCommand+0x490>)
 8002d9e:	483c      	ldr	r0, [pc, #240]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002da0:	f010 fab8 	bl	8013314 <siprintf>
 8002da4:	4603      	mov	r3, r0
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	2364      	movs	r3, #100	; 0x64
 8002daa:	4939      	ldr	r1, [pc, #228]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002dac:	4839      	ldr	r0, [pc, #228]	; (8002e94 <InitializaionCalibrationCommand+0x488>)
 8002dae:	f005 fd7f 	bl	80088b0 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	e026      	b.n	8002e06 <InitializaionCalibrationCommand+0x3fa>
		if(i < NUM_SENSOR - 1){
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b22      	cmp	r3, #34	; 0x22
 8002dbc:	dc10      	bgt.n	8002de0 <InitializaionCalibrationCommand+0x3d4>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",VhvSettings[i]), 100);
 8002dbe:	4a38      	ldr	r2, [pc, #224]	; (8002ea0 <InitializaionCalibrationCommand+0x494>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4930      	ldr	r1, [pc, #192]	; (8002e8c <InitializaionCalibrationCommand+0x480>)
 8002dca:	4831      	ldr	r0, [pc, #196]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002dcc:	f010 faa2 	bl	8013314 <siprintf>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	2364      	movs	r3, #100	; 0x64
 8002dd6:	492e      	ldr	r1, [pc, #184]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002dd8:	482e      	ldr	r0, [pc, #184]	; (8002e94 <InitializaionCalibrationCommand+0x488>)
 8002dda:	f005 fd69 	bl	80088b0 <HAL_UART_Transmit>
 8002dde:	e00f      	b.n	8002e00 <InitializaionCalibrationCommand+0x3f4>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",VhvSettings[i]), 100);
 8002de0:	4a2f      	ldr	r2, [pc, #188]	; (8002ea0 <InitializaionCalibrationCommand+0x494>)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4413      	add	r3, r2
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	492b      	ldr	r1, [pc, #172]	; (8002e98 <InitializaionCalibrationCommand+0x48c>)
 8002dec:	4828      	ldr	r0, [pc, #160]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002dee:	f010 fa91 	bl	8013314 <siprintf>
 8002df2:	4603      	mov	r3, r0
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	2364      	movs	r3, #100	; 0x64
 8002df8:	4925      	ldr	r1, [pc, #148]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002dfa:	4826      	ldr	r0, [pc, #152]	; (8002e94 <InitializaionCalibrationCommand+0x488>)
 8002dfc:	f005 fd58 	bl	80088b0 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3301      	adds	r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b23      	cmp	r3, #35	; 0x23
 8002e0a:	ddd5      	ble.n	8002db8 <InitializaionCalibrationCommand+0x3ac>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t PhaseCalHost[NUM_SENSOR]={"), 100);
 8002e0c:	4925      	ldr	r1, [pc, #148]	; (8002ea4 <InitializaionCalibrationCommand+0x498>)
 8002e0e:	4820      	ldr	r0, [pc, #128]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002e10:	f010 fa80 	bl	8013314 <siprintf>
 8002e14:	4603      	mov	r3, r0
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	2364      	movs	r3, #100	; 0x64
 8002e1a:	491d      	ldr	r1, [pc, #116]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002e1c:	481d      	ldr	r0, [pc, #116]	; (8002e94 <InitializaionCalibrationCommand+0x488>)
 8002e1e:	f005 fd47 	bl	80088b0 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	e026      	b.n	8002e76 <InitializaionCalibrationCommand+0x46a>
		if(i < NUM_SENSOR - 1){
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b22      	cmp	r3, #34	; 0x22
 8002e2c:	dc10      	bgt.n	8002e50 <InitializaionCalibrationCommand+0x444>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",PhaseCal[i]), 100);
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <InitializaionCalibrationCommand+0x49c>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	4914      	ldr	r1, [pc, #80]	; (8002e8c <InitializaionCalibrationCommand+0x480>)
 8002e3a:	4815      	ldr	r0, [pc, #84]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002e3c:	f010 fa6a 	bl	8013314 <siprintf>
 8002e40:	4603      	mov	r3, r0
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	2364      	movs	r3, #100	; 0x64
 8002e46:	4912      	ldr	r1, [pc, #72]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002e48:	4812      	ldr	r0, [pc, #72]	; (8002e94 <InitializaionCalibrationCommand+0x488>)
 8002e4a:	f005 fd31 	bl	80088b0 <HAL_UART_Transmit>
 8002e4e:	e00f      	b.n	8002e70 <InitializaionCalibrationCommand+0x464>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",PhaseCal[i]), 100);
 8002e50:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <InitializaionCalibrationCommand+0x49c>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	490f      	ldr	r1, [pc, #60]	; (8002e98 <InitializaionCalibrationCommand+0x48c>)
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002e5e:	f010 fa59 	bl	8013314 <siprintf>
 8002e62:	4603      	mov	r3, r0
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	2364      	movs	r3, #100	; 0x64
 8002e68:	4909      	ldr	r1, [pc, #36]	; (8002e90 <InitializaionCalibrationCommand+0x484>)
 8002e6a:	480a      	ldr	r0, [pc, #40]	; (8002e94 <InitializaionCalibrationCommand+0x488>)
 8002e6c:	f005 fd20 	bl	80088b0 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3301      	adds	r3, #1
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b23      	cmp	r3, #35	; 0x23
 8002e7a:	ddd5      	ble.n	8002e28 <InitializaionCalibrationCommand+0x41c>
		}
	}
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200060f0 	.word	0x200060f0
 8002e8c:	08018804 	.word	0x08018804
 8002e90:	20005fc0 	.word	0x20005fc0
 8002e94:	20005f38 	.word	0x20005f38
 8002e98:	08018808 	.word	0x08018808
 8002e9c:	08018810 	.word	0x08018810
 8002ea0:	20006114 	.word	0x20006114
 8002ea4:	08018838 	.word	0x08018838
 8002ea8:	20006138 	.word	0x20006138

08002eac <AutoI2CCommand>:

void AutoI2CCommand(){
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af02      	add	r7, sp, #8

    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Auto Command \r\n"), 100);
 8002eb2:	49a1      	ldr	r1, [pc, #644]	; (8003138 <AutoI2CCommand+0x28c>)
 8002eb4:	48a1      	ldr	r0, [pc, #644]	; (800313c <AutoI2CCommand+0x290>)
 8002eb6:	f010 fa2d 	bl	8013314 <siprintf>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	2364      	movs	r3, #100	; 0x64
 8002ec0:	499e      	ldr	r1, [pc, #632]	; (800313c <AutoI2CCommand+0x290>)
 8002ec2:	489f      	ldr	r0, [pc, #636]	; (8003140 <AutoI2CCommand+0x294>)
 8002ec4:	f005 fcf4 	bl	80088b0 <HAL_UART_Transmit>

    SetI2CCommand();
 8002ec8:	f7fe fc1a 	bl	8001700 <SetI2CCommand>
    SensorI2CCommand();
 8002ecc:	f7fe fb6a 	bl	80015a4 <SensorI2CCommand>
    ResetAllDevices();
 8002ed0:	f001 f964 	bl	800419c <ResetAllDevices>
    setOnAllDevices();
 8002ed4:	f001 f9e2 	bl	800429c <setOnAllDevices>

    float forceSensorZeroPoint = 0.0f;
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t startTime = 0, endTime = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
    uint8_t diffTime = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	71fb      	strb	r3, [r7, #7]

    servo_angle(&htim2, TIM_CHANNEL_1, 0); // 초기 ?��?�� ?���?? ?��?��
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	4895      	ldr	r0, [pc, #596]	; (8003144 <AutoI2CCommand+0x298>)
 8002ef0:	f000 fe10 	bl	8003b14 <servo_angle>

    for(int lin = 2; lin < 19; lin++){
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef8:	e114      	b.n	8003124 <AutoI2CCommand+0x278>
        for(int rev = 0; rev < 72; rev++){
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
 8002efe:	e0ff      	b.n	8003100 <AutoI2CCommand+0x254>
            for(int r = 1; r <6; r++){
 8002f00:	2301      	movs	r3, #1
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	e0f2      	b.n	80030ec <AutoI2CCommand+0x240>
                servo_angle(&htim2, TIM_CHANNEL_1, 2*r); // ?��?�� ?��?��
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	488d      	ldr	r0, [pc, #564]	; (8003144 <AutoI2CCommand+0x298>)
 8002f10:	f000 fe00 	bl	8003b14 <servo_angle>
                HAL_Delay(200);
 8002f14:	20c8      	movs	r0, #200	; 0xc8
 8002f16:	f001 fa73 	bl	8004400 <HAL_Delay>
                int tofHitCount = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
                while(tofHitCount < 20){
 8002f1e:	e0d4      	b.n	80030ca <AutoI2CCommand+0x21e>
                    uint8_t tofcount = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	76fb      	strb	r3, [r7, #27]
					if(lin ==2 && rev ==0 && r == 1){
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d112      	bne.n	8002f50 <AutoI2CCommand+0xa4>
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10f      	bne.n	8002f50 <AutoI2CCommand+0xa4>
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <AutoI2CCommand+0xa4>
						forceSensorZeroPoint = Read_HX711();
 8002f36:	f000 f91f 	bl	8003178 <Read_HX711>
 8002f3a:	ee07 0a90 	vmov	s15, r0
 8002f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f42:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
						Hx711Data = 0;
 8002f46:	4b80      	ldr	r3, [pc, #512]	; (8003148 <AutoI2CCommand+0x29c>)
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e00c      	b.n	8002f6a <AutoI2CCommand+0xbe>
					}else{
						Hx711Data = Read_HX711() - forceSensorZeroPoint;
 8002f50:	f000 f912 	bl	8003178 <Read_HX711>
 8002f54:	ee07 0a90 	vmov	s15, r0
 8002f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f64:	4b78      	ldr	r3, [pc, #480]	; (8003148 <AutoI2CCommand+0x29c>)
 8002f66:	edc3 7a00 	vstr	s15, [r3]
					}
   					startTime = HAL_GetTick();
 8002f6a:	f001 fa3d 	bl	80043e8 <HAL_GetTick>
 8002f6e:	60f8      	str	r0, [r7, #12]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e06f      	b.n	8003056 <AutoI2CCommand+0x1aa>
   						Dev = &vl53l0x_s[i];
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	4a72      	ldr	r2, [pc, #456]	; (800314c <AutoI2CCommand+0x2a0>)
 8002f82:	4413      	add	r3, r2
 8002f84:	4a72      	ldr	r2, [pc, #456]	; (8003150 <AutoI2CCommand+0x2a4>)
 8002f86:	6013      	str	r3, [r2, #0]
   						VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8002f88:	4b71      	ldr	r3, [pc, #452]	; (8003150 <AutoI2CCommand+0x2a4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4971      	ldr	r1, [pc, #452]	; (8003154 <AutoI2CCommand+0x2a8>)
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f008 fa72 	bl	800b478 <VL53L0X_PerformContinuousRangingMeasurement>
   						if (RangingData.RangeStatus == 0) {
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <AutoI2CCommand+0x2a8>)
 8002f96:	7e1b      	ldrb	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d134      	bne.n	8003006 <AutoI2CCommand+0x15a>
   						  if (RangingData.RangeMilliMeter < 100) {
 8002f9c:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <AutoI2CCommand+0x2a8>)
 8002f9e:	891b      	ldrh	r3, [r3, #8]
 8002fa0:	2b63      	cmp	r3, #99	; 0x63
 8002fa2:	d830      	bhi.n	8003006 <AutoI2CCommand+0x15a>
   							  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4a6a      	ldr	r2, [pc, #424]	; (8003158 <AutoI2CCommand+0x2ac>)
 8002fb0:	4413      	add	r3, r2
 8002fb2:	4a68      	ldr	r2, [pc, #416]	; (8003154 <AutoI2CCommand+0x2a8>)
 8002fb4:	8912      	ldrh	r2, [r2, #8]
 8002fb6:	ee07 2a90 	vmov	s15, r2
 8002fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f9ec 	bl	80033a0 <Kalman_Estimate>
 8002fc8:	eef0 7a40 	vmov.f32	s15, s0
 8002fcc:	4a63      	ldr	r2, [pc, #396]	; (800315c <AutoI2CCommand+0x2b0>)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
   							  filteredValue[i] -= sensorAverages[i];
 8002fd8:	4a60      	ldr	r2, [pc, #384]	; (800315c <AutoI2CCommand+0x2b0>)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	ed93 7a00 	vldr	s14, [r3]
 8002fe4:	4a5e      	ldr	r2, [pc, #376]	; (8003160 <AutoI2CCommand+0x2b4>)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	edd3 7a00 	vldr	s15, [r3]
 8002ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff4:	4a59      	ldr	r2, [pc, #356]	; (800315c <AutoI2CCommand+0x2b0>)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	edc3 7a00 	vstr	s15, [r3]
   							  //filteredValue /= Xstd[i];
   							  tofcount++;
 8003000:	7efb      	ldrb	r3, [r7, #27]
 8003002:	3301      	adds	r3, #1
 8003004:	76fb      	strb	r3, [r7, #27]
   						  }
   						}
   						if(tofcount==NUM_SENSOR){
 8003006:	7efb      	ldrb	r3, [r7, #27]
 8003008:	2b24      	cmp	r3, #36	; 0x24
 800300a:	d121      	bne.n	8003050 <AutoI2CCommand+0x1a4>
   							for(int i = 0; i< NUM_SENSOR;i++){
 800300c:	2300      	movs	r3, #0
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	e018      	b.n	8003044 <AutoI2CCommand+0x198>
   							  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 500);
 8003012:	4a52      	ldr	r2, [pc, #328]	; (800315c <AutoI2CCommand+0x2b0>)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fac3 	bl	80005a8 <__aeabi_f2d>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	494f      	ldr	r1, [pc, #316]	; (8003164 <AutoI2CCommand+0x2b8>)
 8003028:	4844      	ldr	r0, [pc, #272]	; (800313c <AutoI2CCommand+0x290>)
 800302a:	f010 f973 	bl	8013314 <siprintf>
 800302e:	4603      	mov	r3, r0
 8003030:	b29a      	uxth	r2, r3
 8003032:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003036:	4941      	ldr	r1, [pc, #260]	; (800313c <AutoI2CCommand+0x290>)
 8003038:	4841      	ldr	r0, [pc, #260]	; (8003140 <AutoI2CCommand+0x294>)
 800303a:	f005 fc39 	bl	80088b0 <HAL_UART_Transmit>
   							for(int i = 0; i< NUM_SENSOR;i++){
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	3301      	adds	r3, #1
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b23      	cmp	r3, #35	; 0x23
 8003048:	dde3      	ble.n	8003012 <AutoI2CCommand+0x166>
   							}
   	                        tofHitCount++;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3301      	adds	r3, #1
 800304e:	61fb      	str	r3, [r7, #28]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3301      	adds	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b23      	cmp	r3, #35	; 0x23
 800305a:	dd8c      	ble.n	8002f76 <AutoI2CCommand+0xca>
   						}
   					}
   					do {
   					endTime = HAL_GetTick();
 800305c:	f001 f9c4 	bl	80043e8 <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]
   					diffTime = endTime - startTime;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	71fb      	strb	r3, [r7, #7]
   					} while (diffTime <= TIMBUDGET);
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b64      	cmp	r3, #100	; 0x64
 8003072:	d9f3      	bls.n	800305c <AutoI2CCommand+0x1b0>

   					startTime = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
   					endTime = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
   					diffTime = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	71fb      	strb	r3, [r7, #7]

   					UART_SendWeight_N(Hx711Data,-1/1600.00f,0); // Send the weight data over UART
 8003080:	4b31      	ldr	r3, [pc, #196]	; (8003148 <AutoI2CCommand+0x29c>)
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8003168 <AutoI2CCommand+0x2bc>
 800308a:	eddf 0a38 	vldr	s1, [pc, #224]	; 800316c <AutoI2CCommand+0x2c0>
 800308e:	eeb0 0a67 	vmov.f32	s0, s15
 8003092:	f000 f8c1 	bl	8003218 <UART_SendWeight_N>
   					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d %d %d\n", 8*lin, 5*rev, 2*r), 500);
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	00d9      	lsls	r1, r3, #3
 800309a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	441a      	add	r2, r3
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	460a      	mov	r2, r1
 80030ac:	4930      	ldr	r1, [pc, #192]	; (8003170 <AutoI2CCommand+0x2c4>)
 80030ae:	4823      	ldr	r0, [pc, #140]	; (800313c <AutoI2CCommand+0x290>)
 80030b0:	f010 f930 	bl	8013314 <siprintf>
 80030b4:	4603      	mov	r3, r0
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030bc:	491f      	ldr	r1, [pc, #124]	; (800313c <AutoI2CCommand+0x290>)
 80030be:	4820      	ldr	r0, [pc, #128]	; (8003140 <AutoI2CCommand+0x294>)
 80030c0:	f005 fbf6 	bl	80088b0 <HAL_UART_Transmit>

                    if (tofHitCount >= 20) {
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b13      	cmp	r3, #19
 80030c8:	dc04      	bgt.n	80030d4 <AutoI2CCommand+0x228>
                while(tofHitCount < 20){
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b13      	cmp	r3, #19
 80030ce:	f77f af27 	ble.w	8002f20 <AutoI2CCommand+0x74>
 80030d2:	e000      	b.n	80030d6 <AutoI2CCommand+0x22a>
                        break;
 80030d4:	bf00      	nop
                    }
                }
                servo_angle(&htim2, TIM_CHANNEL_1, 0); // ?��?�� ?��치로 ?��?���??
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	481a      	ldr	r0, [pc, #104]	; (8003144 <AutoI2CCommand+0x298>)
 80030dc:	f000 fd1a 	bl	8003b14 <servo_angle>
                HAL_Delay(200);
 80030e0:	20c8      	movs	r0, #200	; 0xc8
 80030e2:	f001 f98d 	bl	8004400 <HAL_Delay>
            for(int r = 1; r <6; r++){
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	3301      	adds	r3, #1
 80030ea:	623b      	str	r3, [r7, #32]
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	f77f af09 	ble.w	8002f06 <AutoI2CCommand+0x5a>
            }

            stepRev(5); // ?�� 바�?? ?��?��
 80030f4:	2005      	movs	r0, #5
 80030f6:	f000 fc49 	bl	800398c <stepRev>
        for(int rev = 0; rev < 72; rev++){
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	3301      	adds	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	2b47      	cmp	r3, #71	; 0x47
 8003104:	f77f aefc 	ble.w	8002f00 <AutoI2CCommand+0x54>
        }
        HAL_Delay(500);
 8003108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800310c:	f001 f978 	bl	8004400 <HAL_Delay>
        stepRev(-360); // ?��?���??
 8003110:	4818      	ldr	r0, [pc, #96]	; (8003174 <AutoI2CCommand+0x2c8>)
 8003112:	f000 fc3b 	bl	800398c <stepRev>
        stepLin(-8); // ?��?�� ?��?��
 8003116:	f06f 0007 	mvn.w	r0, #7
 800311a:	f000 fc9f 	bl	8003a5c <stepLin>
    for(int lin = 2; lin < 19; lin++){
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	3301      	adds	r3, #1
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	2b12      	cmp	r3, #18
 8003128:	f77f aee7 	ble.w	8002efa <AutoI2CCommand+0x4e>
    }
    //stepLin(144); // 마�?�?? ?��치로 ?��?��
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3730      	adds	r7, #48	; 0x30
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	0801885c 	.word	0x0801885c
 800313c:	20005fc0 	.word	0x20005fc0
 8003140:	20005f38 	.word	0x20005f38
 8003144:	20005ee8 	.word	0x20005ee8
 8003148:	20005b0c 	.word	0x20005b0c
 800314c:	2000615c 	.word	0x2000615c
 8003150:	2000999c 	.word	0x2000999c
 8003154:	20006044 	.word	0x20006044
 8003158:	20005b64 	.word	0x20005b64
 800315c:	20005e34 	.word	0x20005e34
 8003160:	20005958 	.word	0x20005958
 8003164:	08018768 	.word	0x08018768
 8003168:	00000000 	.word	0x00000000
 800316c:	ba23d70a 	.word	0xba23d70a
 8003170:	0801886c 	.word	0x0801886c
 8003174:	fffffe98 	.word	0xfffffe98

08003178 <Read_HX711>:
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
}

int32_t Read_HX711(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  int32_t data = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 8003182:	bf00      	nop
 8003184:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003188:	4820      	ldr	r0, [pc, #128]	; (800320c <Read_HX711+0x94>)
 800318a:	f001 fda5 	bl	8004cd8 <HAL_GPIO_ReadPin>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d0f7      	beq.n	8003184 <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 8003194:	2300      	movs	r3, #0
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	e020      	b.n	80031dc <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800319a:	2201      	movs	r2, #1
 800319c:	2102      	movs	r1, #2
 800319e:	481c      	ldr	r0, [pc, #112]	; (8003210 <Read_HX711+0x98>)
 80031a0:	f001 fdb2 	bl	8004d08 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 80031a4:	2001      	movs	r0, #1
 80031a6:	f000 f889 	bl	80032bc <DelayMicroseconds>
    data = (data << 1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 80031b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031b4:	4815      	ldr	r0, [pc, #84]	; (800320c <Read_HX711+0x94>)
 80031b6:	f001 fd8f 	bl	8004cd8 <HAL_GPIO_ReadPin>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d102      	bne.n	80031c6 <Read_HX711+0x4e>
    {
      data++;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3301      	adds	r3, #1
 80031c4:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2102      	movs	r1, #2
 80031ca:	4811      	ldr	r0, [pc, #68]	; (8003210 <Read_HX711+0x98>)
 80031cc:	f001 fd9c 	bl	8004d08 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 80031d0:	2001      	movs	r0, #1
 80031d2:	f000 f873 	bl	80032bc <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b17      	cmp	r3, #23
 80031e0:	dddb      	ble.n	800319a <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80031e2:	2201      	movs	r2, #1
 80031e4:	2102      	movs	r1, #2
 80031e6:	480a      	ldr	r0, [pc, #40]	; (8003210 <Read_HX711+0x98>)
 80031e8:	f001 fd8e 	bl	8004d08 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 80031ec:	2001      	movs	r0, #1
 80031ee:	f000 f865 	bl	80032bc <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2102      	movs	r1, #2
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <Read_HX711+0x98>)
 80031f8:	f001 fd86 	bl	8004d08 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 80031fc:	2001      	movs	r0, #1
 80031fe:	f000 f85d 	bl	80032bc <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 8003202:	687b      	ldr	r3, [r7, #4]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40020400 	.word	0x40020400
 8003210:	40022000 	.word	0x40022000
 8003214:	00000000 	.word	0x00000000

08003218 <UART_SendWeight_N>:
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
}

void UART_SendWeight_N(float rawData,float loadcell_slope,float loadcell_bias)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08e      	sub	sp, #56	; 0x38
 800321c:	af00      	add	r7, sp, #0
 800321e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003222:	edc7 0a02 	vstr	s1, [r7, #8]
 8003226:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 800322a:	ed97 7a02 	vldr	s14, [r7, #8]
 800322e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	ed97 7a01 	vldr	s14, [r7, #4]
 800323a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  weight *=9.8;
 8003242:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003244:	f7fd f9b0 	bl	80005a8 <__aeabi_f2d>
 8003248:	a31a      	add	r3, pc, #104	; (adr r3, 80032b4 <UART_SendWeight_N+0x9c>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f7fd fa03 	bl	8000658 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	f7fd fcf5 	bl	8000c48 <__aeabi_d2f>
 800325e:	4603      	mov	r3, r0
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
  weight /=1000;
 8003262:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003266:	eddf 6a10 	vldr	s13, [pc, #64]	; 80032a8 <UART_SendWeight_N+0x90>
 800326a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  char buffer[32];
  int len = sprintf(buffer, "%.4f", weight);
 8003272:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003274:	f7fd f998 	bl	80005a8 <__aeabi_f2d>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	f107 0010 	add.w	r0, r7, #16
 8003280:	490a      	ldr	r1, [pc, #40]	; (80032ac <UART_SendWeight_N+0x94>)
 8003282:	f010 f847 	bl	8013314 <siprintf>
 8003286:	6338      	str	r0, [r7, #48]	; 0x30

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	b29a      	uxth	r2, r3
 800328c:	f107 0110 	add.w	r1, r7, #16
 8003290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003294:	4806      	ldr	r0, [pc, #24]	; (80032b0 <UART_SendWeight_N+0x98>)
 8003296:	f005 fb0b 	bl	80088b0 <HAL_UART_Transmit>
}
 800329a:	bf00      	nop
 800329c:	3738      	adds	r7, #56	; 0x38
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	f3af 8000 	nop.w
 80032a8:	447a0000 	.word	0x447a0000
 80032ac:	08018880 	.word	0x08018880
 80032b0:	20005f38 	.word	0x20005f38
 80032b4:	9999999a 	.word	0x9999999a
 80032b8:	40239999 	.word	0x40239999

080032bc <DelayMicroseconds>:
  weight *=9.8;
  weight /=1000;
  return weight;
}
void DelayMicroseconds(uint32_t microseconds)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 80032c8:	e000      	b.n	80032cc <DelayMicroseconds+0x10>
  {
    __NOP();
 80032ca:	bf00      	nop
  while (ticks--)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e5a      	subs	r2, r3, #1
 80032d0:	60fa      	str	r2, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f9      	bne.n	80032ca <DelayMicroseconds+0xe>
  }
}
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <MX_I2C1_Init+0x74>)
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <MX_I2C1_Init+0x78>)
 80032ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <MX_I2C1_Init+0x74>)
 80032f0:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <MX_I2C1_Init+0x7c>)
 80032f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <MX_I2C1_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <MX_I2C1_Init+0x74>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <MX_I2C1_Init+0x74>)
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <MX_I2C1_Init+0x74>)
 8003308:	2200      	movs	r2, #0
 800330a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <MX_I2C1_Init+0x74>)
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <MX_I2C1_Init+0x74>)
 8003314:	2200      	movs	r2, #0
 8003316:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <MX_I2C1_Init+0x74>)
 800331a:	2200      	movs	r2, #0
 800331c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800331e:	480e      	ldr	r0, [pc, #56]	; (8003358 <MX_I2C1_Init+0x74>)
 8003320:	f001 fd30 	bl	8004d84 <HAL_I2C_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800332a:	f000 fb19 	bl	8003960 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800332e:	2100      	movs	r1, #0
 8003330:	4809      	ldr	r0, [pc, #36]	; (8003358 <MX_I2C1_Init+0x74>)
 8003332:	f002 ff81 	bl	8006238 <HAL_I2CEx_ConfigAnalogFilter>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800333c:	f000 fb10 	bl	8003960 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003340:	2100      	movs	r1, #0
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <MX_I2C1_Init+0x74>)
 8003344:	f002 ffc3 	bl	80062ce <HAL_I2CEx_ConfigDigitalFilter>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800334e:	f000 fb07 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20005b10 	.word	0x20005b10
 800335c:	40005400 	.word	0x40005400
 8003360:	6000030d 	.word	0x6000030d

08003364 <Kalman_Init>:
float filteredValue[NUM_SENSOR]={0};
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6178      	str	r0, [r7, #20]
 800336c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003370:	edc7 0a03 	vstr	s1, [r7, #12]
 8003374:	ed87 1a02 	vstr	s2, [r7, #8]
 8003378:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	605a      	str	r2, [r3, #4]
    kf->P = P;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	bf00      	nop
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80033d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	edd3 6a04 	vldr	s13, [r3, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80033f4:	ed97 6a00 	vldr	s12, [r7]
 80033f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80033fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	edd3 7a02 	vldr	s15, [r3, #8]
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	ee07 3a90 	vmov	s15, r3
}
 8003430:	eeb0 0a67 	vmov.f32	s0, s15
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003444:	f3bf 8f4f 	dsb	sy
}
 8003448:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800344a:	f3bf 8f6f 	isb	sy
}
 800344e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <SCB_EnableICache+0x48>)
 8003452:	2200      	movs	r2, #0
 8003454:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003458:	f3bf 8f4f 	dsb	sy
}
 800345c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800345e:	f3bf 8f6f 	isb	sy
}
 8003462:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <SCB_EnableICache+0x48>)
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	4a07      	ldr	r2, [pc, #28]	; (8003488 <SCB_EnableICache+0x48>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003470:	f3bf 8f4f 	dsb	sy
}
 8003474:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003476:	f3bf 8f6f 	isb	sy
}
 800347a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <SCB_EnableDCache+0x84>)
 8003494:	2200      	movs	r2, #0
 8003496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800349a:	f3bf 8f4f 	dsb	sy
}
 800349e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <SCB_EnableDCache+0x84>)
 80034a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0b5b      	lsrs	r3, r3, #13
 80034ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80034b0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	08db      	lsrs	r3, r3, #3
 80034b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ba:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80034c4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80034ca:	4911      	ldr	r1, [pc, #68]	; (8003510 <SCB_EnableDCache+0x84>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1e5a      	subs	r2, r3, #1
 80034d6:	60ba      	str	r2, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ef      	bne.n	80034bc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e5a      	subs	r2, r3, #1
 80034e0:	60fa      	str	r2, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e5      	bne.n	80034b2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80034e6:	f3bf 8f4f 	dsb	sy
}
 80034ea:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <SCB_EnableDCache+0x84>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <SCB_EnableDCache+0x84>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80034f8:	f3bf 8f4f 	dsb	sy
}
 80034fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034fe:	f3bf 8f6f 	isb	sy
}
 8003502:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8003518:	f7ff ff92 	bl	8003440 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800351c:	f7ff ffb6 	bl	800348c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003520:	f000 ff11 	bl	8004346 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003524:	f000 f82c 	bl	8003580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003528:	f000 f962 	bl	80037f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800352c:	f000 fd66 	bl	8003ffc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003530:	f7ff fed8 	bl	80032e4 <MX_I2C1_Init>
  MX_CRC_Init();
 8003534:	f000 f8c4 	bl	80036c0 <MX_CRC_Init>
  MX_TIM2_Init();
 8003538:	f000 f8e4 	bl	8003704 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800353c:	f000 f88c 	bl	8003658 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8003540:	2100      	movs	r1, #0
 8003542:	480c      	ldr	r0, [pc, #48]	; (8003574 <main+0x60>)
 8003544:	f004 f8d2 	bl	80076ec <HAL_TIM_PWM_Start>

  aiInit();
 8003548:	f7fd fd86 	bl	8001058 <aiInit>
  startMsg();
 800354c:	f000 fdbc 	bl	80040c8 <startMsg>
  servo_angle(&htim2, TIM_CHANNEL_1, 0);
 8003550:	2200      	movs	r2, #0
 8003552:	2100      	movs	r1, #0
 8003554:	4807      	ldr	r0, [pc, #28]	; (8003574 <main+0x60>)
 8003556:	f000 fadd 	bl	8003b14 <servo_angle>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef JH
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 800355a:	2241      	movs	r2, #65	; 0x41
 800355c:	4906      	ldr	r1, [pc, #24]	; (8003578 <main+0x64>)
 800355e:	4807      	ldr	r0, [pc, #28]	; (800357c <main+0x68>)
 8003560:	f000 fd7c 	bl	800405c <ReceiveUartMessage>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f7      	bne.n	800355a <main+0x46>
	  {
	      ProcessCommand(rxMsg);
 800356a:	4803      	ldr	r0, [pc, #12]	; (8003578 <main+0x64>)
 800356c:	f7fd ff34 	bl	80013d8 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8003570:	e7f3      	b.n	800355a <main+0x46>
 8003572:	bf00      	nop
 8003574:	20005ee8 	.word	0x20005ee8
 8003578:	20006000 	.word	0x20006000
 800357c:	20005f38 	.word	0x20005f38

08003580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b094      	sub	sp, #80	; 0x50
 8003584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003586:	f107 0320 	add.w	r3, r7, #32
 800358a:	2230      	movs	r2, #48	; 0x30
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f00e ff48 	bl	8012424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <SystemClock_Config+0xd0>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	4a29      	ldr	r2, [pc, #164]	; (8003650 <SystemClock_Config+0xd0>)
 80035aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ae:	6413      	str	r3, [r2, #64]	; 0x40
 80035b0:	4b27      	ldr	r3, [pc, #156]	; (8003650 <SystemClock_Config+0xd0>)
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <SystemClock_Config+0xd4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a24      	ldr	r2, [pc, #144]	; (8003654 <SystemClock_Config+0xd4>)
 80035c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b22      	ldr	r3, [pc, #136]	; (8003654 <SystemClock_Config+0xd4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035d4:	2302      	movs	r3, #2
 80035d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035d8:	2301      	movs	r3, #1
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035dc:	2310      	movs	r3, #16
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035e0:	2302      	movs	r3, #2
 80035e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035e4:	2300      	movs	r3, #0
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80035e8:	2308      	movs	r3, #8
 80035ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80035ec:	23d8      	movs	r3, #216	; 0xd8
 80035ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035f0:	2302      	movs	r3, #2
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80035f4:	2302      	movs	r3, #2
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035f8:	f107 0320 	add.w	r3, r7, #32
 80035fc:	4618      	mov	r0, r3
 80035fe:	f002 ff03 	bl	8006408 <HAL_RCC_OscConfig>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003608:	f000 f9aa 	bl	8003960 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800360c:	f002 feac 	bl	8006368 <HAL_PWREx_EnableOverDrive>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003616:	f000 f9a3 	bl	8003960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800361a:	230f      	movs	r3, #15
 800361c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800361e:	2302      	movs	r3, #2
 8003620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800362a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800362c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	2107      	movs	r1, #7
 8003638:	4618      	mov	r0, r3
 800363a:	f003 f989 	bl	8006950 <HAL_RCC_ClockConfig>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003644:	f000 f98c 	bl	8003960 <Error_Handler>
  }
}
 8003648:	bf00      	nop
 800364a:	3750      	adds	r7, #80	; 0x50
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000

08003658 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	2100      	movs	r1, #0
 8003660:	2025      	movs	r0, #37	; 0x25
 8003662:	f000 ffcc 	bl	80045fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003666:	2025      	movs	r0, #37	; 0x25
 8003668:	f000 ffe5 	bl	8004636 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	2020      	movs	r0, #32
 8003672:	f000 ffc4 	bl	80045fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003676:	2020      	movs	r0, #32
 8003678:	f000 ffdd 	bl	8004636 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	201f      	movs	r0, #31
 8003682:	f000 ffbc 	bl	80045fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003686:	201f      	movs	r0, #31
 8003688:	f000 ffd5 	bl	8004636 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	2028      	movs	r0, #40	; 0x28
 8003692:	f000 ffb4 	bl	80045fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003696:	2028      	movs	r0, #40	; 0x28
 8003698:	f000 ffcd 	bl	8004636 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800369c:	2200      	movs	r2, #0
 800369e:	2100      	movs	r1, #0
 80036a0:	2017      	movs	r0, #23
 80036a2:	f000 ffac 	bl	80045fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036a6:	2017      	movs	r0, #23
 80036a8:	f000 ffc5 	bl	8004636 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2100      	movs	r1, #0
 80036b0:	201c      	movs	r0, #28
 80036b2:	f000 ffa4 	bl	80045fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036b6:	201c      	movs	r0, #28
 80036b8:	f000 ffbd 	bl	8004636 <HAL_NVIC_EnableIRQ>
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}

080036c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <MX_CRC_Init+0x3c>)
 80036c6:	4a0e      	ldr	r2, [pc, #56]	; (8003700 <MX_CRC_Init+0x40>)
 80036c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <MX_CRC_Init+0x3c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <MX_CRC_Init+0x3c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <MX_CRC_Init+0x3c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <MX_CRC_Init+0x3c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <MX_CRC_Init+0x3c>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80036e8:	4804      	ldr	r0, [pc, #16]	; (80036fc <MX_CRC_Init+0x3c>)
 80036ea:	f000 ffbf 	bl	800466c <HAL_CRC_Init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80036f4:	f000 f934 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20005ec4 	.word	0x20005ec4
 8003700:	40023000 	.word	0x40023000

08003704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08e      	sub	sp, #56	; 0x38
 8003708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800370a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003718:	f107 031c 	add.w	r3, r7, #28
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003724:	463b      	mov	r3, r7
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	615a      	str	r2, [r3, #20]
 8003734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003736:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800373c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 800373e:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003740:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8003744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003746:	4b29      	ldr	r3, [pc, #164]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 800374c:	4b27      	ldr	r3, [pc, #156]	; (80037ec <MX_TIM2_Init+0xe8>)
 800374e:	2231      	movs	r2, #49	; 0x31
 8003750:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003754:	2200      	movs	r2, #0
 8003756:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003758:	4b24      	ldr	r3, [pc, #144]	; (80037ec <MX_TIM2_Init+0xe8>)
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800375e:	4823      	ldr	r0, [pc, #140]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003760:	f003 ff0c 	bl	800757c <HAL_TIM_Base_Init>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800376a:	f000 f8f9 	bl	8003960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800376e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003774:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003778:	4619      	mov	r1, r3
 800377a:	481c      	ldr	r0, [pc, #112]	; (80037ec <MX_TIM2_Init+0xe8>)
 800377c:	f004 fae4 	bl	8007d48 <HAL_TIM_ConfigClockSource>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003786:	f000 f8eb 	bl	8003960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800378a:	4818      	ldr	r0, [pc, #96]	; (80037ec <MX_TIM2_Init+0xe8>)
 800378c:	f003 ff4d 	bl	800762a <HAL_TIM_PWM_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003796:	f000 f8e3 	bl	8003960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800379e:	2300      	movs	r3, #0
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037a2:	f107 031c 	add.w	r3, r7, #28
 80037a6:	4619      	mov	r1, r3
 80037a8:	4810      	ldr	r0, [pc, #64]	; (80037ec <MX_TIM2_Init+0xe8>)
 80037aa:	f004 ff87 	bl	80086bc <HAL_TIMEx_MasterConfigSynchronization>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80037b4:	f000 f8d4 	bl	8003960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037b8:	2360      	movs	r3, #96	; 0x60
 80037ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037c8:	463b      	mov	r3, r7
 80037ca:	2200      	movs	r2, #0
 80037cc:	4619      	mov	r1, r3
 80037ce:	4807      	ldr	r0, [pc, #28]	; (80037ec <MX_TIM2_Init+0xe8>)
 80037d0:	f004 f9a6 	bl	8007b20 <HAL_TIM_PWM_ConfigChannel>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80037da:	f000 f8c1 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80037de:	4803      	ldr	r0, [pc, #12]	; (80037ec <MX_TIM2_Init+0xe8>)
 80037e0:	f000 faa2 	bl	8003d28 <HAL_TIM_MspPostInit>

}
 80037e4:	bf00      	nop
 80037e6:	3738      	adds	r7, #56	; 0x38
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20005ee8 	.word	0x20005ee8

080037f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f6:	f107 0314 	add.w	r3, r7, #20
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003806:	4b51      	ldr	r3, [pc, #324]	; (800394c <MX_GPIO_Init+0x15c>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a50      	ldr	r2, [pc, #320]	; (800394c <MX_GPIO_Init+0x15c>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b4e      	ldr	r3, [pc, #312]	; (800394c <MX_GPIO_Init+0x15c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <MX_GPIO_Init+0x15c>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4a4a      	ldr	r2, [pc, #296]	; (800394c <MX_GPIO_Init+0x15c>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6313      	str	r3, [r2, #48]	; 0x30
 800382a:	4b48      	ldr	r3, [pc, #288]	; (800394c <MX_GPIO_Init+0x15c>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003836:	4b45      	ldr	r3, [pc, #276]	; (800394c <MX_GPIO_Init+0x15c>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a44      	ldr	r2, [pc, #272]	; (800394c <MX_GPIO_Init+0x15c>)
 800383c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b42      	ldr	r3, [pc, #264]	; (800394c <MX_GPIO_Init+0x15c>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <MX_GPIO_Init+0x15c>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a3e      	ldr	r2, [pc, #248]	; (800394c <MX_GPIO_Init+0x15c>)
 8003854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b3c      	ldr	r3, [pc, #240]	; (800394c <MX_GPIO_Init+0x15c>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <MX_GPIO_Init+0x15c>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a38      	ldr	r2, [pc, #224]	; (800394c <MX_GPIO_Init+0x15c>)
 800386c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <MX_GPIO_Init+0x15c>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800387e:	2200      	movs	r2, #0
 8003880:	2110      	movs	r1, #16
 8003882:	4833      	ldr	r0, [pc, #204]	; (8003950 <MX_GPIO_Init+0x160>)
 8003884:	f001 fa40 	bl	8004d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8003888:	2200      	movs	r2, #0
 800388a:	210f      	movs	r1, #15
 800388c:	4831      	ldr	r0, [pc, #196]	; (8003954 <MX_GPIO_Init+0x164>)
 800388e:	f001 fa3b 	bl	8004d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8003892:	2200      	movs	r2, #0
 8003894:	21c0      	movs	r1, #192	; 0xc0
 8003896:	4830      	ldr	r0, [pc, #192]	; (8003958 <MX_GPIO_Init+0x168>)
 8003898:	f001 fa36 	bl	8004d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800389c:	2310      	movs	r3, #16
 800389e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a0:	2301      	movs	r3, #1
 80038a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a8:	2300      	movs	r3, #0
 80038aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4619      	mov	r1, r3
 80038b2:	4827      	ldr	r0, [pc, #156]	; (8003950 <MX_GPIO_Init+0x160>)
 80038b4:	f001 f864 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 80038b8:	230f      	movs	r3, #15
 80038ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038bc:	2301      	movs	r3, #1
 80038be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c4:	2300      	movs	r3, #0
 80038c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	4619      	mov	r1, r3
 80038ce:	4821      	ldr	r0, [pc, #132]	; (8003954 <MX_GPIO_Init+0x164>)
 80038d0:	f001 f856 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80038de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4619      	mov	r1, r3
 80038ea:	481c      	ldr	r0, [pc, #112]	; (800395c <MX_GPIO_Init+0x16c>)
 80038ec:	f001 f848 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80038f0:	23c0      	movs	r3, #192	; 0xc0
 80038f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f4:	2301      	movs	r3, #1
 80038f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	2300      	movs	r3, #0
 80038fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	4619      	mov	r1, r3
 8003906:	4814      	ldr	r0, [pc, #80]	; (8003958 <MX_GPIO_Init+0x168>)
 8003908:	f001 f83a 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800390c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391a:	f107 0314 	add.w	r3, r7, #20
 800391e:	4619      	mov	r1, r3
 8003920:	480b      	ldr	r0, [pc, #44]	; (8003950 <MX_GPIO_Init+0x160>)
 8003922:	f001 f82d 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800392a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800392c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	4619      	mov	r1, r3
 800393c:	4804      	ldr	r0, [pc, #16]	; (8003950 <MX_GPIO_Init+0x160>)
 800393e:	f001 f81f 	bl	8004980 <HAL_GPIO_Init>

}
 8003942:	bf00      	nop
 8003944:	3728      	adds	r7, #40	; 0x28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	40020400 	.word	0x40020400
 8003954:	40022000 	.word	0x40022000
 8003958:	40021800 	.word	0x40021800
 800395c:	40020000 	.word	0x40020000

08003960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003964:	b672      	cpsid	i
}
 8003966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 8003968:	4905      	ldr	r1, [pc, #20]	; (8003980 <Error_Handler+0x20>)
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <Error_Handler+0x24>)
 800396c:	f00f fcd2 	bl	8013314 <siprintf>
 8003970:	4603      	mov	r3, r0
 8003972:	b29a      	uxth	r2, r3
 8003974:	2364      	movs	r3, #100	; 0x64
 8003976:	4903      	ldr	r1, [pc, #12]	; (8003984 <Error_Handler+0x24>)
 8003978:	4803      	ldr	r0, [pc, #12]	; (8003988 <Error_Handler+0x28>)
 800397a:	f004 ff99 	bl	80088b0 <HAL_UART_Transmit>
 800397e:	e7f3      	b.n	8003968 <Error_Handler+0x8>
 8003980:	08018888 	.word	0x08018888
 8003984:	20005fc0 	.word	0x20005fc0
 8003988:	20005f38 	.word	0x20005f38

0800398c <stepRev>:
#include "usart.h"

#define PULSE 200
#define GEAR 139

void stepRev(int ANG) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8003994:	2200      	movs	r2, #0
 8003996:	2140      	movs	r1, #64	; 0x40
 8003998:	482d      	ldr	r0, [pc, #180]	; (8003a50 <stepRev+0xc4>)
 800399a:	f001 f9b5 	bl	8004d08 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d04c      	beq.n	8003a3e <stepRev+0xb2>
    int direction = (ANG > 0) ? 1 : -1;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	dd01      	ble.n	80039ae <stepRev+0x22>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e001      	b.n	80039b2 <stepRev+0x26>
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	fb02 f303 	mul.w	r3, r2, r3
 80039bc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	4820      	ldr	r0, [pc, #128]	; (8003a50 <stepRev+0xc4>)
 80039d0:	f001 f99a 	bl	8004d08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	481d      	ldr	r0, [pc, #116]	; (8003a50 <stepRev+0xc4>)
 80039da:	f001 f995 	bl	8004d08 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f646 4298 	movw	r2, #27800	; 0x6c98
 80039e4:	fb02 f303 	mul.w	r3, r2, r3
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fc fdcb 	bl	8000584 <__aeabi_i2d>
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <stepRev+0xc8>)
 80039f4:	f7fc ff5a 	bl	80008ac <__aeabi_ddiv>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	f7fd f902 	bl	8000c08 <__aeabi_d2uiz>
 8003a04:	4603      	mov	r3, r0
 8003a06:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e012      	b.n	8003a34 <stepRev+0xa8>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8003a0e:	2201      	movs	r2, #1
 8003a10:	2110      	movs	r1, #16
 8003a12:	4811      	ldr	r0, [pc, #68]	; (8003a58 <stepRev+0xcc>)
 8003a14:	f001 f978 	bl	8004d08 <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f000 fcf1 	bl	8004400 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2110      	movs	r1, #16
 8003a22:	480d      	ldr	r0, [pc, #52]	; (8003a58 <stepRev+0xcc>)
 8003a24:	f001 f970 	bl	8004d08 <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f000 fce9 	bl	8004400 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3301      	adds	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d8e8      	bhi.n	8003a0e <stepRev+0x82>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8003a3c:	e004      	b.n	8003a48 <stepRev+0xbc>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	4803      	ldr	r0, [pc, #12]	; (8003a50 <stepRev+0xc4>)
 8003a44:	f001 f960 	bl	8004d08 <HAL_GPIO_WritePin>
}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021800 	.word	0x40021800
 8003a54:	40768000 	.word	0x40768000
 8003a58:	40020400 	.word	0x40020400

08003a5c <stepLin>:

void stepLin(int DIST) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003a64:	2201      	movs	r2, #1
 8003a66:	2101      	movs	r1, #1
 8003a68:	4829      	ldr	r0, [pc, #164]	; (8003b10 <stepLin+0xb4>)
 8003a6a:	f001 f94d 	bl	8004d08 <HAL_GPIO_WritePin>

  if (DIST != 0) {
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03e      	beq.n	8003af2 <stepLin+0x96>
    int direction = (DIST > 0) ? 1 : -1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	dd01      	ble.n	8003a7e <stepLin+0x22>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e001      	b.n	8003a82 <stepLin+0x26>
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	613b      	str	r3, [r7, #16]
    DIST *= direction;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2108      	movs	r1, #8
 8003a9e:	481c      	ldr	r0, [pc, #112]	; (8003b10 <stepLin+0xb4>)
 8003aa0:	f001 f932 	bl	8004d08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4819      	ldr	r0, [pc, #100]	; (8003b10 <stepLin+0xb4>)
 8003aaa:	f001 f92d 	bl	8004d08 <HAL_GPIO_WritePin>
    uint32_t steps = 25*DIST;
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009a      	lsls	r2, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d\n ", steps), 1000);


    for (int i = 0; i < steps; i++) {
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e012      	b.n	8003ae8 <stepLin+0x8c>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	4812      	ldr	r0, [pc, #72]	; (8003b10 <stepLin+0xb4>)
 8003ac8:	f001 f91e 	bl	8004d08 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003acc:	2001      	movs	r0, #1
 8003ace:	f000 fc97 	bl	8004400 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	480e      	ldr	r0, [pc, #56]	; (8003b10 <stepLin+0xb4>)
 8003ad8:	f001 f916 	bl	8004d08 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003adc:	2001      	movs	r0, #1
 8003ade:	f000 fc8f 	bl	8004400 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d8e8      	bhi.n	8003ac2 <stepLin+0x66>
 8003af0:	e004      	b.n	8003afc <stepLin+0xa0>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003af2:	2200      	movs	r2, #0
 8003af4:	2101      	movs	r1, #1
 8003af6:	4806      	ldr	r0, [pc, #24]	; (8003b10 <stepLin+0xb4>)
 8003af8:	f001 f906 	bl	8004d08 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003afc:	2201      	movs	r2, #1
 8003afe:	2101      	movs	r1, #1
 8003b00:	4803      	ldr	r0, [pc, #12]	; (8003b10 <stepLin+0xb4>)
 8003b02:	f001 f901 	bl	8004d08 <HAL_GPIO_WritePin>

}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40022000 	.word	0x40022000

08003b14 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 15)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	dd01      	ble.n	8003b2a <servo_angle+0x16>
    	step = 15; // 최대 각도 제한
 8003b26:	230f      	movs	r3, #15
 8003b28:	607b      	str	r3, [r7, #4]

    int pulse_width = 20-step; // 듀티 사이클 계산 (0도에서 180도까지)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1c3 0314 	rsb	r3, r3, #20
 8003b30:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <servo_angle+0x2e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003b40:	e023      	b.n	8003b8a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d104      	bne.n	8003b52 <servo_angle+0x3e>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003b50:	e01b      	b.n	8003b8a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d104      	bne.n	8003b62 <servo_angle+0x4e>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003b60:	e013      	b.n	8003b8a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b0c      	cmp	r3, #12
 8003b66:	d104      	bne.n	8003b72 <servo_angle+0x5e>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003b70:	e00b      	b.n	8003b8a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d104      	bne.n	8003b82 <servo_angle+0x6e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003b80:	e003      	b.n	8003b8a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_MspInit+0x50>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <HAL_MspInit+0x50>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <HAL_MspInit+0x50>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_MspInit+0x50>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <HAL_MspInit+0x50>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_MspInit+0x50>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2005      	movs	r0, #5
 8003bd4:	f000 fd13 	bl	80045fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003bd8:	2005      	movs	r0, #5
 8003bda:	f000 fd2c 	bl	8004636 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800

08003bec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <HAL_CRC_MspInit+0x38>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d10b      	bne.n	8003c16 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <HAL_CRC_MspInit+0x3c>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_CRC_MspInit+0x3c>)
 8003c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c08:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <HAL_CRC_MspInit+0x3c>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40023000 	.word	0x40023000
 8003c28:	40023800 	.word	0x40023800

08003c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b0aa      	sub	sp, #168	; 0xa8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	60da      	str	r2, [r3, #12]
 8003c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	2284      	movs	r2, #132	; 0x84
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00e fbe9 	bl	8012424 <memset>
  if(hi2c->Instance==I2C1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a22      	ldr	r2, [pc, #136]	; (8003ce0 <HAL_I2C_MspInit+0xb4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d13c      	bne.n	8003cd6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c62:	2300      	movs	r3, #0
 8003c64:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c66:	f107 0310 	add.w	r3, r7, #16
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f003 f896 	bl	8006d9c <HAL_RCCEx_PeriphCLKConfig>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c76:	f7ff fe73 	bl	8003960 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <HAL_I2C_MspInit+0xb8>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <HAL_I2C_MspInit+0xb8>)
 8003c80:	f043 0302 	orr.w	r3, r3, #2
 8003c84:	6313      	str	r3, [r2, #48]	; 0x30
 8003c86:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <HAL_I2C_MspInit+0xb8>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c9a:	2312      	movs	r3, #18
 8003c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cac:	2304      	movs	r3, #4
 8003cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	480b      	ldr	r0, [pc, #44]	; (8003ce8 <HAL_I2C_MspInit+0xbc>)
 8003cba:	f000 fe61 	bl	8004980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_I2C_MspInit+0xb8>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <HAL_I2C_MspInit+0xb8>)
 8003cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_I2C_MspInit+0xb8>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cd6:	bf00      	nop
 8003cd8:	37a8      	adds	r7, #168	; 0xa8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40005400 	.word	0x40005400
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020400 	.word	0x40020400

08003cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfc:	d10b      	bne.n	8003d16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_TIM_Base_MspInit+0x38>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <HAL_TIM_Base_MspInit+0x38>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_TIM_Base_MspInit+0x38>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800

08003d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d48:	d11c      	bne.n	8003d84 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_TIM_MspPostInit+0x64>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <HAL_TIM_MspPostInit+0x64>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <HAL_TIM_MspPostInit+0x64>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d74:	2301      	movs	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4804      	ldr	r0, [pc, #16]	; (8003d90 <HAL_TIM_MspPostInit+0x68>)
 8003d80:	f000 fdfe 	bl	8004980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003d84:	bf00      	nop
 8003d86:	3720      	adds	r7, #32
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40020000 	.word	0x40020000

08003d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b0ac      	sub	sp, #176	; 0xb0
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dac:	f107 0318 	add.w	r3, r7, #24
 8003db0:	2284      	movs	r2, #132	; 0x84
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f00e fb35 	bl	8012424 <memset>
  if(huart->Instance==USART1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a32      	ldr	r2, [pc, #200]	; (8003e88 <HAL_UART_MspInit+0xf4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d15c      	bne.n	8003e7e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003dc4:	2340      	movs	r3, #64	; 0x40
 8003dc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dcc:	f107 0318 	add.w	r3, r7, #24
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f002 ffe3 	bl	8006d9c <HAL_RCCEx_PeriphCLKConfig>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ddc:	f7ff fdc0 	bl	8003960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003de0:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <HAL_UART_MspInit+0xf8>)
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	4a29      	ldr	r2, [pc, #164]	; (8003e8c <HAL_UART_MspInit+0xf8>)
 8003de6:	f043 0310 	orr.w	r3, r3, #16
 8003dea:	6453      	str	r3, [r2, #68]	; 0x44
 8003dec:	4b27      	ldr	r3, [pc, #156]	; (8003e8c <HAL_UART_MspInit+0xf8>)
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_UART_MspInit+0xf8>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <HAL_UART_MspInit+0xf8>)
 8003dfe:	f043 0302 	orr.w	r3, r3, #2
 8003e02:	6313      	str	r3, [r2, #48]	; 0x30
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_UART_MspInit+0xf8>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e10:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <HAL_UART_MspInit+0xf8>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <HAL_UART_MspInit+0xf8>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_UART_MspInit+0xf8>)
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e40:	2307      	movs	r3, #7
 8003e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4810      	ldr	r0, [pc, #64]	; (8003e90 <HAL_UART_MspInit+0xfc>)
 8003e4e:	f000 fd97 	bl	8004980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e66:	2303      	movs	r3, #3
 8003e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e6c:	2307      	movs	r3, #7
 8003e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e76:	4619      	mov	r1, r3
 8003e78:	4806      	ldr	r0, [pc, #24]	; (8003e94 <HAL_UART_MspInit+0x100>)
 8003e7a:	f000 fd81 	bl	8004980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e7e:	bf00      	nop
 8003e80:	37b0      	adds	r7, #176	; 0xb0
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40011000 	.word	0x40011000
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40020400 	.word	0x40020400
 8003e94:	40020000 	.word	0x40020000

08003e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e9c:	e7fe      	b.n	8003e9c <NMI_Handler+0x4>

08003e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ea2:	e7fe      	b.n	8003ea2 <HardFault_Handler+0x4>

08003ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <MemManage_Handler+0x4>

08003eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eae:	e7fe      	b.n	8003eae <BusFault_Handler+0x4>

08003eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <UsageFault_Handler+0x4>

08003eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ee4:	f000 fa6c 	bl	80043c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003efe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f02:	f000 ff1b 	bl	8004d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f10:	4802      	ldr	r0, [pc, #8]	; (8003f1c <TIM2_IRQHandler+0x10>)
 8003f12:	f003 fce5 	bl	80078e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20005ee8 	.word	0x20005ee8

08003f20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f24:	4802      	ldr	r0, [pc, #8]	; (8003f30 <I2C1_EV_IRQHandler+0x10>)
 8003f26:	f001 f9a7 	bl	8005278 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20005b10 	.word	0x20005b10

08003f34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <I2C1_ER_IRQHandler+0x10>)
 8003f3a:	f001 f9b7 	bl	80052ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20005b10 	.word	0x20005b10

08003f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f4c:	4802      	ldr	r0, [pc, #8]	; (8003f58 <USART1_IRQHandler+0x10>)
 8003f4e:	f004 fdf7 	bl	8008b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20005f38 	.word	0x20005f38

08003f5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003f60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f64:	f000 feea 	bl	8004d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <_sbrk+0x5c>)
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <_sbrk+0x60>)
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <_sbrk+0x64>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <_sbrk+0x64>)
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <_sbrk+0x68>)
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <_sbrk+0x64>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d207      	bcs.n	8003fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f9c:	f00e fa02 	bl	80123a4 <__errno>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	220c      	movs	r2, #12
 8003fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	e009      	b.n	8003fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <_sbrk+0x64>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <_sbrk+0x64>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <_sbrk+0x64>)
 8003fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20050000 	.word	0x20050000
 8003fcc:	00000800 	.word	0x00000800
 8003fd0:	20005f34 	.word	0x20005f34
 8003fd4:	20009ab8 	.word	0x20009ab8

08003fd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <SystemInit+0x20>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <SystemInit+0x20>)
 8003fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <MX_USART1_UART_Init+0x58>)
 8004002:	4a15      	ldr	r2, [pc, #84]	; (8004058 <MX_USART1_UART_Init+0x5c>)
 8004004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <MX_USART1_UART_Init+0x58>)
 8004008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800400c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <MX_USART1_UART_Init+0x58>)
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <MX_USART1_UART_Init+0x58>)
 8004016:	2200      	movs	r2, #0
 8004018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <MX_USART1_UART_Init+0x58>)
 800401c:	2200      	movs	r2, #0
 800401e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <MX_USART1_UART_Init+0x58>)
 8004022:	220c      	movs	r2, #12
 8004024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <MX_USART1_UART_Init+0x58>)
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <MX_USART1_UART_Init+0x58>)
 800402e:	2200      	movs	r2, #0
 8004030:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <MX_USART1_UART_Init+0x58>)
 8004034:	2200      	movs	r2, #0
 8004036:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <MX_USART1_UART_Init+0x58>)
 800403a:	2200      	movs	r2, #0
 800403c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800403e:	4805      	ldr	r0, [pc, #20]	; (8004054 <MX_USART1_UART_Init+0x58>)
 8004040:	f004 fbe8 	bl	8008814 <HAL_UART_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800404a:	f7ff fc89 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20005f38 	.word	0x20005f38
 8004058:	40011000 	.word	0x40011000

0800405c <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 800406e:	f107 0115 	add.w	r1, r7, #21
 8004072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004076:	2201      	movs	r2, #1
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f004 fc9c 	bl	80089b6 <HAL_UART_Receive>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f4      	bne.n	800406e <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8004084:	7d7b      	ldrb	r3, [r7, #21]
 8004086:	2b0a      	cmp	r3, #10
 8004088:	d106      	bne.n	8004098 <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 800408a:	8afb      	ldrh	r3, [r7, #22]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	4413      	add	r3, r2
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e012      	b.n	80040be <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 8004098:	8afb      	ldrh	r3, [r7, #22]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4413      	add	r3, r2
 800409e:	7d7a      	ldrb	r2, [r7, #21]
 80040a0:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 80040a2:	8afb      	ldrh	r3, [r7, #22]
 80040a4:	3301      	adds	r3, #1
 80040a6:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 80040a8:	8afa      	ldrh	r2, [r7, #22]
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d3de      	bcc.n	800406e <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 80040b0:	8afb      	ldrh	r3, [r7, #22]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	4413      	add	r3, r2
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <startMsg>:

void startMsg(){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80040cc:	492c      	ldr	r1, [pc, #176]	; (8004180 <startMsg+0xb8>)
 80040ce:	482d      	ldr	r0, [pc, #180]	; (8004184 <startMsg+0xbc>)
 80040d0:	f00f f920 	bl	8013314 <siprintf>
 80040d4:	4603      	mov	r3, r0
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	2364      	movs	r3, #100	; 0x64
 80040da:	492a      	ldr	r1, [pc, #168]	; (8004184 <startMsg+0xbc>)
 80040dc:	482a      	ldr	r0, [pc, #168]	; (8004188 <startMsg+0xc0>)
 80040de:	f004 fbe7 	bl	80088b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80040e2:	4927      	ldr	r1, [pc, #156]	; (8004180 <startMsg+0xb8>)
 80040e4:	4827      	ldr	r0, [pc, #156]	; (8004184 <startMsg+0xbc>)
 80040e6:	f00f f915 	bl	8013314 <siprintf>
 80040ea:	4603      	mov	r3, r0
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	2364      	movs	r3, #100	; 0x64
 80040f0:	4924      	ldr	r1, [pc, #144]	; (8004184 <startMsg+0xbc>)
 80040f2:	4825      	ldr	r0, [pc, #148]	; (8004188 <startMsg+0xc0>)
 80040f4:	f004 fbdc 	bl	80088b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 80040f8:	4924      	ldr	r1, [pc, #144]	; (800418c <startMsg+0xc4>)
 80040fa:	4822      	ldr	r0, [pc, #136]	; (8004184 <startMsg+0xbc>)
 80040fc:	f00f f90a 	bl	8013314 <siprintf>
 8004100:	4603      	mov	r3, r0
 8004102:	b29a      	uxth	r2, r3
 8004104:	2364      	movs	r3, #100	; 0x64
 8004106:	491f      	ldr	r1, [pc, #124]	; (8004184 <startMsg+0xbc>)
 8004108:	481f      	ldr	r0, [pc, #124]	; (8004188 <startMsg+0xc0>)
 800410a:	f004 fbd1 	bl	80088b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 1 : TOF sensor array -----------------------\n"), 100);
 800410e:	4920      	ldr	r1, [pc, #128]	; (8004190 <startMsg+0xc8>)
 8004110:	481c      	ldr	r0, [pc, #112]	; (8004184 <startMsg+0xbc>)
 8004112:	f00f f8ff 	bl	8013314 <siprintf>
 8004116:	4603      	mov	r3, r0
 8004118:	b29a      	uxth	r2, r3
 800411a:	2364      	movs	r3, #100	; 0x64
 800411c:	4919      	ldr	r1, [pc, #100]	; (8004184 <startMsg+0xbc>)
 800411e:	481a      	ldr	r0, [pc, #104]	; (8004188 <startMsg+0xc0>)
 8004120:	f004 fbc6 	bl	80088b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 2 : TOF sensor array and AI output ---------\n"), 100);
 8004124:	491b      	ldr	r1, [pc, #108]	; (8004194 <startMsg+0xcc>)
 8004126:	4817      	ldr	r0, [pc, #92]	; (8004184 <startMsg+0xbc>)
 8004128:	f00f f8f4 	bl	8013314 <siprintf>
 800412c:	4603      	mov	r3, r0
 800412e:	b29a      	uxth	r2, r3
 8004130:	2364      	movs	r3, #100	; 0x64
 8004132:	4914      	ldr	r1, [pc, #80]	; (8004184 <startMsg+0xbc>)
 8004134:	4814      	ldr	r0, [pc, #80]	; (8004188 <startMsg+0xc0>)
 8004136:	f004 fbbb 	bl	80088b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 3 : TOF Avg Std Force Z --------------------\n"), 100);
 800413a:	4917      	ldr	r1, [pc, #92]	; (8004198 <startMsg+0xd0>)
 800413c:	4811      	ldr	r0, [pc, #68]	; (8004184 <startMsg+0xbc>)
 800413e:	f00f f8e9 	bl	8013314 <siprintf>
 8004142:	4603      	mov	r3, r0
 8004144:	b29a      	uxth	r2, r3
 8004146:	2364      	movs	r3, #100	; 0x64
 8004148:	490e      	ldr	r1, [pc, #56]	; (8004184 <startMsg+0xbc>)
 800414a:	480f      	ldr	r0, [pc, #60]	; (8004188 <startMsg+0xc0>)
 800414c:	f004 fbb0 	bl	80088b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004150:	490b      	ldr	r1, [pc, #44]	; (8004180 <startMsg+0xb8>)
 8004152:	480c      	ldr	r0, [pc, #48]	; (8004184 <startMsg+0xbc>)
 8004154:	f00f f8de 	bl	8013314 <siprintf>
 8004158:	4603      	mov	r3, r0
 800415a:	b29a      	uxth	r2, r3
 800415c:	2364      	movs	r3, #100	; 0x64
 800415e:	4909      	ldr	r1, [pc, #36]	; (8004184 <startMsg+0xbc>)
 8004160:	4809      	ldr	r0, [pc, #36]	; (8004188 <startMsg+0xc0>)
 8004162:	f004 fba5 	bl	80088b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004166:	4906      	ldr	r1, [pc, #24]	; (8004180 <startMsg+0xb8>)
 8004168:	4806      	ldr	r0, [pc, #24]	; (8004184 <startMsg+0xbc>)
 800416a:	f00f f8d3 	bl	8013314 <siprintf>
 800416e:	4603      	mov	r3, r0
 8004170:	b29a      	uxth	r2, r3
 8004172:	2364      	movs	r3, #100	; 0x64
 8004174:	4903      	ldr	r1, [pc, #12]	; (8004184 <startMsg+0xbc>)
 8004176:	4804      	ldr	r0, [pc, #16]	; (8004188 <startMsg+0xc0>)
 8004178:	f004 fb9a 	bl	80088b0 <HAL_UART_Transmit>
}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	08018890 	.word	0x08018890
 8004184:	20005fc0 	.word	0x20005fc0
 8004188:	20005f38 	.word	0x20005f38
 800418c:	080188d0 	.word	0x080188d0
 8004190:	08018910 	.word	0x08018910
 8004194:	08018950 	.word	0x08018950
 8004198:	08018990 	.word	0x08018990

0800419c <ResetAllDevices>:
    }
}
#endif


void ResetAllDevices() {
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	e011      	b.n	80041cc <ResetAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <ResetAllDevices+0x48>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	b299      	uxth	r1, r3
 80041b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2301      	movs	r3, #1
 80041be:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <ResetAllDevices+0x4c>)
 80041c0:	480a      	ldr	r0, [pc, #40]	; (80041ec <ResetAllDevices+0x50>)
 80041c2:	f000 fe6f 	bl	8004ea4 <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3301      	adds	r3, #1
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <ResetAllDevices+0x54>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4293      	cmp	r3, r2
 80041d6:	dbe7      	blt.n	80041a8 <ResetAllDevices+0xc>
  }
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000118 	.word	0x20000118
 80041e8:	200099a0 	.word	0x200099a0
 80041ec:	20005b10 	.word	0x20005b10
 80041f0:	2000011e 	.word	0x2000011e

080041f4 <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e015      	b.n	8004230 <ResetDevicesExcept+0x3c>
        if (j != active_device) {
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	429a      	cmp	r2, r3
 800420a:	d00e      	beq.n	800422a <ResetDevicesExcept+0x36>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 800420c:	4a0e      	ldr	r2, [pc, #56]	; (8004248 <ResetDevicesExcept+0x54>)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	b299      	uxth	r1, r3
 800421a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2301      	movs	r3, #1
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <ResetDevicesExcept+0x58>)
 8004224:	480a      	ldr	r0, [pc, #40]	; (8004250 <ResetDevicesExcept+0x5c>)
 8004226:	f000 fe3d 	bl	8004ea4 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3301      	adds	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	4b08      	ldr	r3, [pc, #32]	; (8004254 <ResetDevicesExcept+0x60>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4293      	cmp	r3, r2
 800423a:	dbe3      	blt.n	8004204 <ResetDevicesExcept+0x10>
        }
    }
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000118 	.word	0x20000118
 800424c:	200099a0 	.word	0x200099a0
 8004250:	20005b10 	.word	0x20005b10
 8004254:	2000011e 	.word	0x2000011e

08004258 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af02      	add	r7, sp, #8
 800425e:	4603      	mov	r3, r0
 8004260:	460a      	mov	r2, r1
 8004262:	71fb      	strb	r3, [r7, #7]
 8004264:	4613      	mov	r3, r2
 8004266:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <setActiveTcaChannel+0x38>)
 800426c:	5cd3      	ldrb	r3, [r2, r3]
 800426e:	b29b      	uxth	r3, r3
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	b299      	uxth	r1, r3
 8004274:	79bb      	ldrb	r3, [r7, #6]
 8004276:	4a07      	ldr	r2, [pc, #28]	; (8004294 <setActiveTcaChannel+0x3c>)
 8004278:	441a      	add	r2, r3
 800427a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	2301      	movs	r3, #1
 8004282:	4805      	ldr	r0, [pc, #20]	; (8004298 <setActiveTcaChannel+0x40>)
 8004284:	f000 fe0e 	bl	8004ea4 <HAL_I2C_Master_Transmit>
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20000118 	.word	0x20000118
 8004294:	2000010c 	.word	0x2000010c
 8004298:	20005b10 	.word	0x20005b10

0800429c <setOnAllDevices>:

void setOnAllDevices(){
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	e011      	b.n	80042cc <setOnAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_all_on, 1, 1000);
 80042a8:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <setOnAllDevices+0x48>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	b299      	uxth	r1, r3
 80042b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2301      	movs	r3, #1
 80042be:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <setOnAllDevices+0x4c>)
 80042c0:	480a      	ldr	r0, [pc, #40]	; (80042ec <setOnAllDevices+0x50>)
 80042c2:	f000 fdef 	bl	8004ea4 <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3301      	adds	r3, #1
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <setOnAllDevices+0x54>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4293      	cmp	r3, r2
 80042d6:	dbe7      	blt.n	80042a8 <setOnAllDevices+0xc>
  }
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000118 	.word	0x20000118
 80042e8:	20000114 	.word	0x20000114
 80042ec:	20005b10 	.word	0x20005b10
 80042f0:	2000011e 	.word	0x2000011e

080042f4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80042f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800432c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042f8:	480d      	ldr	r0, [pc, #52]	; (8004330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042fa:	490e      	ldr	r1, [pc, #56]	; (8004334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042fc:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004300:	e002      	b.n	8004308 <LoopCopyDataInit>

08004302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004306:	3304      	adds	r3, #4

08004308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800430a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800430c:	d3f9      	bcc.n	8004302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800430e:	4a0b      	ldr	r2, [pc, #44]	; (800433c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004310:	4c0b      	ldr	r4, [pc, #44]	; (8004340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004314:	e001      	b.n	800431a <LoopFillZerobss>

08004316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004318:	3204      	adds	r2, #4

0800431a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800431a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800431c:	d3fb      	bcc.n	8004316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800431e:	f7ff fe5b 	bl	8003fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004322:	f00e f845 	bl	80123b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004326:	f7ff f8f5 	bl	8003514 <main>
  bx  lr    
 800432a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800432c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004334:	20001578 	.word	0x20001578
  ldr r2, =_sidata
 8004338:	08050a48 	.word	0x08050a48
  ldr r2, =_sbss
 800433c:	20001580 	.word	0x20001580
  ldr r4, =_ebss
 8004340:	20009ab4 	.word	0x20009ab4

08004344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004344:	e7fe      	b.n	8004344 <ADC_IRQHandler>

08004346 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800434a:	2003      	movs	r0, #3
 800434c:	f000 f94c 	bl	80045e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004350:	200f      	movs	r0, #15
 8004352:	f000 f805 	bl	8004360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004356:	f7ff fc1f 	bl	8003b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_InitTick+0x54>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_InitTick+0x58>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	4619      	mov	r1, r3
 8004372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004376:	fbb3 f3f1 	udiv	r3, r3, r1
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f967 	bl	8004652 <HAL_SYSTICK_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00e      	b.n	80043ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d80a      	bhi.n	80043aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004394:	2200      	movs	r2, #0
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	f000 f92f 	bl	80045fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a0:	4a06      	ldr	r2, [pc, #24]	; (80043bc <HAL_InitTick+0x5c>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	2000000c 	.word	0x2000000c
 80043b8:	20000254 	.word	0x20000254
 80043bc:	20000250 	.word	0x20000250

080043c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_IncTick+0x20>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_IncTick+0x24>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <HAL_IncTick+0x24>)
 80043d2:	6013      	str	r3, [r2, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000254 	.word	0x20000254
 80043e4:	200099a4 	.word	0x200099a4

080043e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return uwTick;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_GetTick+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	200099a4 	.word	0x200099a4

08004400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff ffee 	bl	80043e8 <HAL_GetTick>
 800440c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d005      	beq.n	8004426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <HAL_Delay+0x44>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004426:	bf00      	nop
 8004428:	f7ff ffde 	bl	80043e8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d8f7      	bhi.n	8004428 <HAL_Delay+0x28>
  {
  }
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000254 	.word	0x20000254

08004448 <__NVIC_SetPriorityGrouping>:
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <__NVIC_SetPriorityGrouping+0x40>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004464:	4013      	ands	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <__NVIC_SetPriorityGrouping+0x44>)
 8004472:	4313      	orrs	r3, r2
 8004474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004476:	4a04      	ldr	r2, [pc, #16]	; (8004488 <__NVIC_SetPriorityGrouping+0x40>)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	60d3      	str	r3, [r2, #12]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	e000ed00 	.word	0xe000ed00
 800448c:	05fa0000 	.word	0x05fa0000

08004490 <__NVIC_GetPriorityGrouping>:
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	f003 0307 	and.w	r3, r3, #7
}
 800449e:	4618      	mov	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <__NVIC_EnableIRQ>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	db0b      	blt.n	80044d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	4907      	ldr	r1, [pc, #28]	; (80044e4 <__NVIC_EnableIRQ+0x38>)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2001      	movs	r0, #1
 80044ce:	fa00 f202 	lsl.w	r2, r0, r2
 80044d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	e000e100 	.word	0xe000e100

080044e8 <__NVIC_SetPriority>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	6039      	str	r1, [r7, #0]
 80044f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db0a      	blt.n	8004512 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <__NVIC_SetPriority+0x4c>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	0112      	lsls	r2, r2, #4
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	440b      	add	r3, r1
 800450c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004510:	e00a      	b.n	8004528 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	4908      	ldr	r1, [pc, #32]	; (8004538 <__NVIC_SetPriority+0x50>)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	3b04      	subs	r3, #4
 8004520:	0112      	lsls	r2, r2, #4
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	440b      	add	r3, r1
 8004526:	761a      	strb	r2, [r3, #24]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000e100 	.word	0xe000e100
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <NVIC_EncodePriority>:
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f1c3 0307 	rsb	r3, r3, #7
 8004556:	2b04      	cmp	r3, #4
 8004558:	bf28      	it	cs
 800455a:	2304      	movcs	r3, #4
 800455c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3304      	adds	r3, #4
 8004562:	2b06      	cmp	r3, #6
 8004564:	d902      	bls.n	800456c <NVIC_EncodePriority+0x30>
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3b03      	subs	r3, #3
 800456a:	e000      	b.n	800456e <NVIC_EncodePriority+0x32>
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43da      	mvns	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	401a      	ands	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004584:	f04f 31ff 	mov.w	r1, #4294967295
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	43d9      	mvns	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004594:	4313      	orrs	r3, r2
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	; 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b4:	d301      	bcc.n	80045ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045b6:	2301      	movs	r3, #1
 80045b8:	e00f      	b.n	80045da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <SysTick_Config+0x40>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3b01      	subs	r3, #1
 80045c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045c2:	210f      	movs	r1, #15
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	f7ff ff8e 	bl	80044e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <SysTick_Config+0x40>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <SysTick_Config+0x40>)
 80045d4:	2207      	movs	r2, #7
 80045d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	e000e010 	.word	0xe000e010

080045e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff29 	bl	8004448 <__NVIC_SetPriorityGrouping>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045fe:	b580      	push	{r7, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004610:	f7ff ff3e 	bl	8004490 <__NVIC_GetPriorityGrouping>
 8004614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f7ff ff8e 	bl	800453c <NVIC_EncodePriority>
 8004620:	4602      	mov	r2, r0
 8004622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff5d 	bl	80044e8 <__NVIC_SetPriority>
}
 800462e:	bf00      	nop
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	4603      	mov	r3, r0
 800463e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff31 	bl	80044ac <__NVIC_EnableIRQ>
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff ffa2 	bl	80045a4 <SysTick_Config>
 8004660:	4603      	mov	r3, r0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e054      	b.n	8004728 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7f5b      	ldrb	r3, [r3, #29]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff faac 	bl	8003bec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	791b      	ldrb	r3, [r3, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10c      	bne.n	80046bc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a22      	ldr	r2, [pc, #136]	; (8004730 <HAL_CRC_Init+0xc4>)
 80046a8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0218 	bic.w	r2, r2, #24
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	e00c      	b.n	80046d6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6899      	ldr	r1, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	461a      	mov	r2, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f834 	bl	8004734 <HAL_CRCEx_Polynomial_Set>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e028      	b.n	8004728 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	795b      	ldrb	r3, [r3, #5]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d105      	bne.n	80046ea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	611a      	str	r2, [r3, #16]
 80046e8:	e004      	b.n	80046f4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6912      	ldr	r2, [r2, #16]
 80046f2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	04c11db7 	.word	0x04c11db7

08004734 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004744:	231f      	movs	r3, #31
 8004746:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004748:	bf00      	nop
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1e5a      	subs	r2, r3, #1
 800474e:	613a      	str	r2, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d009      	beq.n	8004768 <HAL_CRCEx_Polynomial_Set+0x34>
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b18      	cmp	r3, #24
 800476c:	d846      	bhi.n	80047fc <HAL_CRCEx_Polynomial_Set+0xc8>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	08004803 	.word	0x08004803
 8004778:	080047fd 	.word	0x080047fd
 800477c:	080047fd 	.word	0x080047fd
 8004780:	080047fd 	.word	0x080047fd
 8004784:	080047fd 	.word	0x080047fd
 8004788:	080047fd 	.word	0x080047fd
 800478c:	080047fd 	.word	0x080047fd
 8004790:	080047fd 	.word	0x080047fd
 8004794:	080047f1 	.word	0x080047f1
 8004798:	080047fd 	.word	0x080047fd
 800479c:	080047fd 	.word	0x080047fd
 80047a0:	080047fd 	.word	0x080047fd
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	080047fd 	.word	0x080047fd
 80047b0:	080047fd 	.word	0x080047fd
 80047b4:	080047e5 	.word	0x080047e5
 80047b8:	080047fd 	.word	0x080047fd
 80047bc:	080047fd 	.word	0x080047fd
 80047c0:	080047fd 	.word	0x080047fd
 80047c4:	080047fd 	.word	0x080047fd
 80047c8:	080047fd 	.word	0x080047fd
 80047cc:	080047fd 	.word	0x080047fd
 80047d0:	080047fd 	.word	0x080047fd
 80047d4:	080047d9 	.word	0x080047d9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b06      	cmp	r3, #6
 80047dc:	d913      	bls.n	8004806 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047e2:	e010      	b.n	8004806 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b07      	cmp	r3, #7
 80047e8:	d90f      	bls.n	800480a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047ee:	e00c      	b.n	800480a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b0f      	cmp	r3, #15
 80047f4:	d90b      	bls.n	800480e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047fa:	e008      	b.n	800480e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004800:	e006      	b.n	8004810 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004802:	bf00      	nop
 8004804:	e004      	b.n	8004810 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800480e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f023 0118 	bic.w	r1, r3, #24
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	430a      	orrs	r2, r1
 8004830:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004832:	7dfb      	ldrb	r3, [r7, #23]
}
 8004834:	4618      	mov	r0, r3
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800484e:	f7ff fdcb 	bl	80043e8 <HAL_GetTick>
 8004852:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d008      	beq.n	8004872 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e052      	b.n	8004918 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0216 	bic.w	r2, r2, #22
 8004880:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004890:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <HAL_DMA_Abort+0x62>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0208 	bic.w	r2, r2, #8
 80048b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c2:	e013      	b.n	80048ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048c4:	f7ff fd90 	bl	80043e8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d90c      	bls.n	80048ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2203      	movs	r2, #3
 80048dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e015      	b.n	8004918 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e4      	bne.n	80048c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	223f      	movs	r2, #63	; 0x3f
 8004900:	409a      	lsls	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d004      	beq.n	800493e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2280      	movs	r2, #128	; 0x80
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e00c      	b.n	8004958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2205      	movs	r2, #5
 8004942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004972:	b2db      	uxtb	r3, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004980:	b480      	push	{r7}
 8004982:	b089      	sub	sp, #36	; 0x24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e175      	b.n	8004c8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80049a0:	2201      	movs	r2, #1
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	f040 8164 	bne.w	8004c86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d005      	beq.n	80049d6 <HAL_GPIO_Init+0x56>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d130      	bne.n	8004a38 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2203      	movs	r2, #3
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 0201 	and.w	r2, r3, #1
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d017      	beq.n	8004a74 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d123      	bne.n	8004ac8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	08da      	lsrs	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3208      	adds	r2, #8
 8004a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	220f      	movs	r2, #15
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	08da      	lsrs	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3208      	adds	r2, #8
 8004ac2:	69b9      	ldr	r1, [r7, #24]
 8004ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0203 	and.w	r2, r3, #3
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80be 	beq.w	8004c86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0a:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_GPIO_Init+0x324>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	4a65      	ldr	r2, [pc, #404]	; (8004ca4 <HAL_GPIO_Init+0x324>)
 8004b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b14:	6453      	str	r3, [r2, #68]	; 0x44
 8004b16:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_GPIO_Init+0x324>)
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b22:	4a61      	ldr	r2, [pc, #388]	; (8004ca8 <HAL_GPIO_Init+0x328>)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	3302      	adds	r3, #2
 8004b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	220f      	movs	r2, #15
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4013      	ands	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a58      	ldr	r2, [pc, #352]	; (8004cac <HAL_GPIO_Init+0x32c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d037      	beq.n	8004bbe <HAL_GPIO_Init+0x23e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a57      	ldr	r2, [pc, #348]	; (8004cb0 <HAL_GPIO_Init+0x330>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d031      	beq.n	8004bba <HAL_GPIO_Init+0x23a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a56      	ldr	r2, [pc, #344]	; (8004cb4 <HAL_GPIO_Init+0x334>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d02b      	beq.n	8004bb6 <HAL_GPIO_Init+0x236>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a55      	ldr	r2, [pc, #340]	; (8004cb8 <HAL_GPIO_Init+0x338>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d025      	beq.n	8004bb2 <HAL_GPIO_Init+0x232>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a54      	ldr	r2, [pc, #336]	; (8004cbc <HAL_GPIO_Init+0x33c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01f      	beq.n	8004bae <HAL_GPIO_Init+0x22e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a53      	ldr	r2, [pc, #332]	; (8004cc0 <HAL_GPIO_Init+0x340>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d019      	beq.n	8004baa <HAL_GPIO_Init+0x22a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a52      	ldr	r2, [pc, #328]	; (8004cc4 <HAL_GPIO_Init+0x344>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_GPIO_Init+0x226>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a51      	ldr	r2, [pc, #324]	; (8004cc8 <HAL_GPIO_Init+0x348>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00d      	beq.n	8004ba2 <HAL_GPIO_Init+0x222>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a50      	ldr	r2, [pc, #320]	; (8004ccc <HAL_GPIO_Init+0x34c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <HAL_GPIO_Init+0x21e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a4f      	ldr	r2, [pc, #316]	; (8004cd0 <HAL_GPIO_Init+0x350>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_GPIO_Init+0x21a>
 8004b96:	2309      	movs	r3, #9
 8004b98:	e012      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004b9a:	230a      	movs	r3, #10
 8004b9c:	e010      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	e00e      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004ba2:	2307      	movs	r3, #7
 8004ba4:	e00c      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004ba6:	2306      	movs	r3, #6
 8004ba8:	e00a      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004baa:	2305      	movs	r3, #5
 8004bac:	e008      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004bae:	2304      	movs	r3, #4
 8004bb0:	e006      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e004      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e002      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_GPIO_Init+0x240>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	f002 0203 	and.w	r2, r2, #3
 8004bc6:	0092      	lsls	r2, r2, #2
 8004bc8:	4093      	lsls	r3, r2
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004bd0:	4935      	ldr	r1, [pc, #212]	; (8004ca8 <HAL_GPIO_Init+0x328>)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bde:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <HAL_GPIO_Init+0x354>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4013      	ands	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c02:	4a34      	ldr	r2, [pc, #208]	; (8004cd4 <HAL_GPIO_Init+0x354>)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c08:	4b32      	ldr	r3, [pc, #200]	; (8004cd4 <HAL_GPIO_Init+0x354>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c2c:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <HAL_GPIO_Init+0x354>)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c32:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <HAL_GPIO_Init+0x354>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c56:	4a1f      	ldr	r2, [pc, #124]	; (8004cd4 <HAL_GPIO_Init+0x354>)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c5c:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <HAL_GPIO_Init+0x354>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <HAL_GPIO_Init+0x354>)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	f67f ae86 	bls.w	80049a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	3724      	adds	r7, #36	; 0x24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40013800 	.word	0x40013800
 8004cac:	40020000 	.word	0x40020000
 8004cb0:	40020400 	.word	0x40020400
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	40020c00 	.word	0x40020c00
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40021400 	.word	0x40021400
 8004cc4:	40021800 	.word	0x40021800
 8004cc8:	40021c00 	.word	0x40021c00
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	40022400 	.word	0x40022400
 8004cd4:	40013c00 	.word	0x40013c00

08004cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	887b      	ldrh	r3, [r7, #2]
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
 8004cf4:	e001      	b.n	8004cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	807b      	strh	r3, [r7, #2]
 8004d14:	4613      	mov	r3, r2
 8004d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d18:	787b      	ldrb	r3, [r7, #1]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d24:	e003      	b.n	8004d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d26:	887b      	ldrh	r3, [r7, #2]
 8004d28:	041a      	lsls	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	619a      	str	r2, [r3, #24]
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d46:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d006      	beq.n	8004d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d52:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f806 	bl	8004d6c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40013c00 	.word	0x40013c00

08004d6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e07f      	b.n	8004e96 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fe ff3e 	bl	8003c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	; 0x24
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004de4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d107      	bne.n	8004dfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	e006      	b.n	8004e0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d104      	bne.n	8004e1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <HAL_I2C_Init+0x11c>)
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69d9      	ldr	r1, [r3, #28]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	02008000 	.word	0x02008000

08004ea4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	817b      	strh	r3, [r7, #10]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	f040 80da 	bne.w	800507a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_I2C_Master_Transmit+0x30>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e0d3      	b.n	800507c <HAL_I2C_Master_Transmit+0x1d8>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004edc:	f7ff fa84 	bl	80043e8 <HAL_GetTick>
 8004ee0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	2319      	movs	r3, #25
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fefb 	bl	8005cea <I2C_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e0be      	b.n	800507c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2221      	movs	r2, #33	; 0x21
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2210      	movs	r2, #16
 8004f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	893a      	ldrh	r2, [r7, #8]
 8004f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2bff      	cmp	r3, #255	; 0xff
 8004f2e:	d90e      	bls.n	8004f4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	22ff      	movs	r2, #255	; 0xff
 8004f34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	8979      	ldrh	r1, [r7, #10]
 8004f3e:	4b51      	ldr	r3, [pc, #324]	; (8005084 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f001 f8e6 	bl	8006118 <I2C_TransferConfig>
 8004f4c:	e06c      	b.n	8005028 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	8979      	ldrh	r1, [r7, #10]
 8004f60:	4b48      	ldr	r3, [pc, #288]	; (8005084 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f001 f8d5 	bl	8006118 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004f6e:	e05b      	b.n	8005028 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	6a39      	ldr	r1, [r7, #32]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fef8 	bl	8005d6a <I2C_WaitOnTXISFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e07b      	b.n	800507c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d034      	beq.n	8005028 <HAL_I2C_Master_Transmit+0x184>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d130      	bne.n	8005028 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fe8a 	bl	8005cea <I2C_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e04d      	b.n	800507c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2bff      	cmp	r3, #255	; 0xff
 8004fe8:	d90e      	bls.n	8005008 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	22ff      	movs	r2, #255	; 0xff
 8004fee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	8979      	ldrh	r1, [r7, #10]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f001 f889 	bl	8006118 <I2C_TransferConfig>
 8005006:	e00f      	b.n	8005028 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005016:	b2da      	uxtb	r2, r3
 8005018:	8979      	ldrh	r1, [r7, #10]
 800501a:	2300      	movs	r3, #0
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f001 f878 	bl	8006118 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d19e      	bne.n	8004f70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	6a39      	ldr	r1, [r7, #32]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fed7 	bl	8005dea <I2C_WaitOnSTOPFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e01a      	b.n	800507c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2220      	movs	r2, #32
 800504c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_I2C_Master_Transmit+0x1e4>)
 800505a:	400b      	ands	r3, r1
 800505c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	80002000 	.word	0x80002000
 8005088:	fe00e800 	.word	0xfe00e800

0800508c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	461a      	mov	r2, r3
 8005098:	460b      	mov	r3, r1
 800509a:	817b      	strh	r3, [r7, #10]
 800509c:	4613      	mov	r3, r2
 800509e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	f040 80db 	bne.w	8005264 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_I2C_Master_Receive+0x30>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0d4      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050c4:	f7ff f990 	bl	80043e8 <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2319      	movs	r3, #25
 80050d0:	2201      	movs	r2, #1
 80050d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fe07 	bl	8005cea <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0bf      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2222      	movs	r2, #34	; 0x22
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2210      	movs	r2, #16
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	893a      	ldrh	r2, [r7, #8]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	2bff      	cmp	r3, #255	; 0xff
 8005116:	d90e      	bls.n	8005136 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	22ff      	movs	r2, #255	; 0xff
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005122:	b2da      	uxtb	r2, r3
 8005124:	8979      	ldrh	r1, [r7, #10]
 8005126:	4b52      	ldr	r3, [pc, #328]	; (8005270 <HAL_I2C_Master_Receive+0x1e4>)
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fff2 	bl	8006118 <I2C_TransferConfig>
 8005134:	e06d      	b.n	8005212 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	b2da      	uxtb	r2, r3
 8005146:	8979      	ldrh	r1, [r7, #10]
 8005148:	4b49      	ldr	r3, [pc, #292]	; (8005270 <HAL_I2C_Master_Receive+0x1e4>)
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 ffe1 	bl	8006118 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005156:	e05c      	b.n	8005212 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	6a39      	ldr	r1, [r7, #32]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 fe81 	bl	8005e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e07c      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d034      	beq.n	8005212 <HAL_I2C_Master_Receive+0x186>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d130      	bne.n	8005212 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2200      	movs	r2, #0
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fd95 	bl	8005cea <I2C_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e04d      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2bff      	cmp	r3, #255	; 0xff
 80051d2:	d90e      	bls.n	80051f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	22ff      	movs	r2, #255	; 0xff
 80051d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	8979      	ldrh	r1, [r7, #10]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 ff94 	bl	8006118 <I2C_TransferConfig>
 80051f0:	e00f      	b.n	8005212 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	b2da      	uxtb	r2, r3
 8005202:	8979      	ldrh	r1, [r7, #10]
 8005204:	2300      	movs	r3, #0
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 ff83 	bl	8006118 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d19d      	bne.n	8005158 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	6a39      	ldr	r1, [r7, #32]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fde2 	bl	8005dea <I2C_WaitOnSTOPFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e01a      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2220      	movs	r2, #32
 8005236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6859      	ldr	r1, [r3, #4]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <HAL_I2C_Master_Receive+0x1e8>)
 8005244:	400b      	ands	r3, r1
 8005246:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e000      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
  }
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	80002400 	.word	0x80002400
 8005274:	fe00e800 	.word	0xfe00e800

08005278 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	4798      	blx	r3
  }
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d010      	beq.n	80052f2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	09db      	lsrs	r3, r3, #7
 80052d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	f043 0201 	orr.w	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	0a9b      	lsrs	r3, r3, #10
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d010      	beq.n	8005320 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	09db      	lsrs	r3, r3, #7
 8005302:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	f043 0208 	orr.w	r2, r3, #8
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800531e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	0a5b      	lsrs	r3, r3, #9
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d010      	beq.n	800534e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	09db      	lsrs	r3, r3, #7
 8005330:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533c:	f043 0202 	orr.w	r2, r3, #2
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 030b 	and.w	r3, r3, #11
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fb89 	bl	8005a78 <I2C_ITError>
  }
}
 8005366:	bf00      	nop
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	70fb      	strb	r3, [r7, #3]
 80053a2:	4613      	mov	r3, r2
 80053a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b086      	sub	sp, #24
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <I2C_Slave_ISR_IT+0x24>
 800540e:	2302      	movs	r3, #2
 8005410:	e0ec      	b.n	80055ec <I2C_Slave_ISR_IT+0x1fe>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005432:	6939      	ldr	r1, [r7, #16]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f9bf 	bl	80057b8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d04d      	beq.n	80054e2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800544e:	2b00      	cmp	r3, #0
 8005450:	d047      	beq.n	80054e2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d128      	bne.n	80054ae <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b28      	cmp	r3, #40	; 0x28
 8005466:	d108      	bne.n	800547a <I2C_Slave_ISR_IT+0x8c>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800546e:	d104      	bne.n	800547a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005470:	6939      	ldr	r1, [r7, #16]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 faaa 	bl	80059cc <I2C_ITListenCplt>
 8005478:	e032      	b.n	80054e0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b29      	cmp	r3, #41	; 0x29
 8005484:	d10e      	bne.n	80054a4 <I2C_Slave_ISR_IT+0xb6>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800548c:	d00a      	beq.n	80054a4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2210      	movs	r2, #16
 8005494:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fbe5 	bl	8005c66 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f92d 	bl	80056fc <I2C_ITSlaveSeqCplt>
 80054a2:	e01d      	b.n	80054e0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2210      	movs	r2, #16
 80054aa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80054ac:	e096      	b.n	80055dc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2210      	movs	r2, #16
 80054b4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f043 0204 	orr.w	r2, r3, #4
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <I2C_Slave_ISR_IT+0xe4>
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054ce:	f040 8085 	bne.w	80055dc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	4619      	mov	r1, r3
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 facd 	bl	8005a78 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80054de:	e07d      	b.n	80055dc <I2C_Slave_ISR_IT+0x1ee>
 80054e0:	e07c      	b.n	80055dc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	089b      	lsrs	r3, r3, #2
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d030      	beq.n	8005550 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	089b      	lsrs	r3, r3, #2
 80054f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d02a      	beq.n	8005550 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d018      	beq.n	8005536 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d14f      	bne.n	80055e0 <I2C_Slave_ISR_IT+0x1f2>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005546:	d04b      	beq.n	80055e0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f8d7 	bl	80056fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800554e:	e047      	b.n	80055e0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	08db      	lsrs	r3, r3, #3
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	08db      	lsrs	r3, r3, #3
 8005560:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005568:	6939      	ldr	r1, [r7, #16]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 f842 	bl	80055f4 <I2C_ITAddrCplt>
 8005570:	e037      	b.n	80055e2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d031      	beq.n	80055e2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005586:	2b00      	cmp	r3, #0
 8005588:	d02b      	beq.n	80055e2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d018      	beq.n	80055c6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	781a      	ldrb	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	851a      	strh	r2, [r3, #40]	; 0x28
 80055c4:	e00d      	b.n	80055e2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055cc:	d002      	beq.n	80055d4 <I2C_Slave_ISR_IT+0x1e6>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f891 	bl	80056fc <I2C_ITSlaveSeqCplt>
 80055da:	e002      	b.n	80055e2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80055dc:	bf00      	nop
 80055de:	e000      	b.n	80055e2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80055e0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800560a:	2b28      	cmp	r3, #40	; 0x28
 800560c:	d16a      	bne.n	80056e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	0c1b      	lsrs	r3, r3, #16
 8005616:	b2db      	uxtb	r3, r3
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	b29b      	uxth	r3, r3
 8005628:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800562c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	b29b      	uxth	r3, r3
 8005636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800563a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005648:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d138      	bne.n	80056c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005652:	897b      	ldrh	r3, [r7, #10]
 8005654:	09db      	lsrs	r3, r3, #7
 8005656:	b29a      	uxth	r2, r3
 8005658:	89bb      	ldrh	r3, [r7, #12]
 800565a:	4053      	eors	r3, r2
 800565c:	b29b      	uxth	r3, r3
 800565e:	f003 0306 	and.w	r3, r3, #6
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11c      	bne.n	80056a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005666:	897b      	ldrh	r3, [r7, #10]
 8005668:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005678:	2b02      	cmp	r3, #2
 800567a:	d13b      	bne.n	80056f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2208      	movs	r2, #8
 8005688:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005692:	89ba      	ldrh	r2, [r7, #12]
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fe7c 	bl	8005396 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800569e:	e029      	b.n	80056f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80056a0:	893b      	ldrh	r3, [r7, #8]
 80056a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fd67 	bl	800617c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056b6:	89ba      	ldrh	r2, [r7, #12]
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fe6a 	bl	8005396 <HAL_I2C_AddrCallback>
}
 80056c2:	e017      	b.n	80056f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fd57 	bl	800617c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056d6:	89ba      	ldrh	r2, [r7, #12]
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fe5a 	bl	8005396 <HAL_I2C_AddrCallback>
}
 80056e2:	e007      	b.n	80056f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2208      	movs	r2, #8
 80056ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	0b9b      	lsrs	r3, r3, #14
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e00d      	b.n	800574e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	0bdb      	lsrs	r3, r3, #15
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800574c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b29      	cmp	r3, #41	; 0x29
 8005758:	d112      	bne.n	8005780 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2228      	movs	r2, #40	; 0x28
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2221      	movs	r2, #33	; 0x21
 8005766:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005768:	2101      	movs	r1, #1
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fd06 	bl	800617c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff fdf8 	bl	800536e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800577e:	e017      	b.n	80057b0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b2a      	cmp	r3, #42	; 0x2a
 800578a:	d111      	bne.n	80057b0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2228      	movs	r2, #40	; 0x28
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2222      	movs	r2, #34	; 0x22
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800579a:	2102      	movs	r1, #2
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fced 	bl	800617c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fde9 	bl	8005382 <HAL_I2C_SlaveRxCpltCallback>
}
 80057b0:	bf00      	nop
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2220      	movs	r2, #32
 80057dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	2b21      	cmp	r3, #33	; 0x21
 80057e2:	d002      	beq.n	80057ea <I2C_ITSlaveCplt+0x32>
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b29      	cmp	r3, #41	; 0x29
 80057e8:	d108      	bne.n	80057fc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80057ea:	f248 0101 	movw	r1, #32769	; 0x8001
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fcc4 	bl	800617c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2221      	movs	r2, #33	; 0x21
 80057f8:	631a      	str	r2, [r3, #48]	; 0x30
 80057fa:	e00d      	b.n	8005818 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b22      	cmp	r3, #34	; 0x22
 8005800:	d002      	beq.n	8005808 <I2C_ITSlaveCplt+0x50>
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2b2a      	cmp	r3, #42	; 0x2a
 8005806:	d107      	bne.n	8005818 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005808:	f248 0102 	movw	r1, #32770	; 0x8002
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fcb5 	bl	800617c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2222      	movs	r2, #34	; 0x22
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005826:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b64      	ldr	r3, [pc, #400]	; (80059c4 <I2C_ITSlaveCplt+0x20c>)
 8005834:	400b      	ands	r3, r1
 8005836:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fa14 	bl	8005c66 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	0b9b      	lsrs	r3, r3, #14
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d013      	beq.n	8005872 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005858:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	2b00      	cmp	r3, #0
 8005860:	d020      	beq.n	80058a4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005870:	e018      	b.n	80058a4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	0bdb      	lsrs	r3, r3, #15
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800588c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d006      	beq.n	80058a4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d020      	beq.n	80058f2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0304 	bic.w	r3, r3, #4
 80058b6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00c      	beq.n	80058f2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	f043 0204 	orr.w	r2, r3, #4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591a:	2b00      	cmp	r3, #0
 800591c:	d010      	beq.n	8005940 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f8a7 	bl	8005a78 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b28      	cmp	r3, #40	; 0x28
 8005934:	d141      	bne.n	80059ba <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005936:	6979      	ldr	r1, [r7, #20]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f847 	bl	80059cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800593e:	e03c      	b.n	80059ba <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005948:	d014      	beq.n	8005974 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fed6 	bl	80056fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <I2C_ITSlaveCplt+0x210>)
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff fd20 	bl	80053b2 <HAL_I2C_ListenCpltCallback>
}
 8005972:	e022      	b.n	80059ba <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b22      	cmp	r3, #34	; 0x22
 800597e:	d10e      	bne.n	800599e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fcf3 	bl	8005382 <HAL_I2C_SlaveRxCpltCallback>
}
 800599c:	e00d      	b.n	80059ba <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fcda 	bl	800536e <HAL_I2C_SlaveTxCpltCallback>
}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	fe00e800 	.word	0xfe00e800
 80059c8:	ffff0000 	.word	0xffff0000

080059cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a26      	ldr	r2, [pc, #152]	; (8005a74 <I2C_ITListenCplt+0xa8>)
 80059da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d022      	beq.n	8005a4a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d012      	beq.n	8005a4a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	f043 0204 	orr.w	r2, r3, #4
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a4a:	f248 0103 	movw	r1, #32771	; 0x8003
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fb94 	bl	800617c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff fca4 	bl	80053b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	ffff0000 	.word	0xffff0000

08005a78 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a5d      	ldr	r2, [pc, #372]	; (8005c0c <I2C_ITError+0x194>)
 8005a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b28      	cmp	r3, #40	; 0x28
 8005aae:	d005      	beq.n	8005abc <I2C_ITError+0x44>
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	2b29      	cmp	r3, #41	; 0x29
 8005ab4:	d002      	beq.n	8005abc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aba:	d10b      	bne.n	8005ad4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005abc:	2103      	movs	r1, #3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fb5c 	bl	800617c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2228      	movs	r2, #40	; 0x28
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a50      	ldr	r2, [pc, #320]	; (8005c10 <I2C_ITError+0x198>)
 8005ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8005ad2:	e011      	b.n	8005af8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ad4:	f248 0103 	movw	r1, #32771	; 0x8003
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fb4f 	bl	800617c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b60      	cmp	r3, #96	; 0x60
 8005ae8:	d003      	beq.n	8005af2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d039      	beq.n	8005b7a <I2C_ITError+0x102>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b11      	cmp	r3, #17
 8005b0a:	d002      	beq.n	8005b12 <I2C_ITError+0x9a>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b21      	cmp	r3, #33	; 0x21
 8005b10:	d133      	bne.n	8005b7a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b20:	d107      	bne.n	8005b32 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b30:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe ff14 	bl	8004964 <HAL_DMA_GetState>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d017      	beq.n	8005b72 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	4a33      	ldr	r2, [pc, #204]	; (8005c14 <I2C_ITError+0x19c>)
 8005b48:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fee2 	bl	8004920 <HAL_DMA_Abort_IT>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d04d      	beq.n	8005bfe <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b70:	e045      	b.n	8005bfe <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f850 	bl	8005c18 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b78:	e041      	b.n	8005bfe <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d039      	beq.n	8005bf6 <I2C_ITError+0x17e>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b12      	cmp	r3, #18
 8005b86:	d002      	beq.n	8005b8e <I2C_ITError+0x116>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b22      	cmp	r3, #34	; 0x22
 8005b8c:	d133      	bne.n	8005bf6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9c:	d107      	bne.n	8005bae <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe fed6 	bl	8004964 <HAL_DMA_GetState>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d017      	beq.n	8005bee <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc2:	4a14      	ldr	r2, [pc, #80]	; (8005c14 <I2C_ITError+0x19c>)
 8005bc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fea4 	bl	8004920 <HAL_DMA_Abort_IT>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d011      	beq.n	8005c02 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bec:	e009      	b.n	8005c02 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f812 	bl	8005c18 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bf4:	e005      	b.n	8005c02 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f80e 	bl	8005c18 <I2C_TreatErrorCallback>
  }
}
 8005bfc:	e002      	b.n	8005c04 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c02:	bf00      	nop
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	ffff0000 	.word	0xffff0000
 8005c10:	080053ef 	.word	0x080053ef
 8005c14:	08005caf 	.word	0x08005caf

08005c18 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b60      	cmp	r3, #96	; 0x60
 8005c2a:	d10e      	bne.n	8005c4a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff fbc9 	bl	80053da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c48:	e009      	b.n	8005c5e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fbb4 	bl	80053c6 <HAL_I2C_ErrorCallback>
}
 8005c5e:	bf00      	nop
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d103      	bne.n	8005c84 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2200      	movs	r2, #0
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d007      	beq.n	8005ca2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699a      	ldr	r2, [r3, #24]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	619a      	str	r2, [r3, #24]
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	2200      	movs	r2, #0
 8005cca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	2200      	movs	r2, #0
 8005cda:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff ff9b 	bl	8005c18 <I2C_TreatErrorCallback>
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	603b      	str	r3, [r7, #0]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cfa:	e022      	b.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d01e      	beq.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d04:	f7fe fb70 	bl	80043e8 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d302      	bcc.n	8005d1a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d113      	bne.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	f043 0220 	orr.w	r2, r3, #32
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e00f      	b.n	8005d62 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	bf0c      	ite	eq
 8005d52:	2301      	moveq	r3, #1
 8005d54:	2300      	movne	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d0cd      	beq.n	8005cfc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d76:	e02c      	b.n	8005dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f8eb 	bl	8005f58 <I2C_IsErrorOccurred>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e02a      	b.n	8005de2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d01e      	beq.n	8005dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d94:	f7fe fb28 	bl	80043e8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d113      	bne.n	8005dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e007      	b.n	8005de2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d1cb      	bne.n	8005d78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005df6:	e028      	b.n	8005e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f8ab 	bl	8005f58 <I2C_IsErrorOccurred>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e026      	b.n	8005e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0c:	f7fe faec 	bl	80043e8 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d302      	bcc.n	8005e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d113      	bne.n	8005e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	f043 0220 	orr.w	r2, r3, #32
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e007      	b.n	8005e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d1cf      	bne.n	8005df8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e70:	e064      	b.n	8005f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f86e 	bl	8005f58 <I2C_IsErrorOccurred>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e062      	b.n	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d138      	bne.n	8005f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d105      	bne.n	8005eae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e04e      	b.n	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d107      	bne.n	8005ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	645a      	str	r2, [r3, #68]	; 0x44
 8005eca:	e002      	b.n	8005ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005ee6:	400b      	ands	r3, r1
 8005ee8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e022      	b.n	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f06:	f7fe fa6f 	bl	80043e8 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d302      	bcc.n	8005f1c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10f      	bne.n	8005f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e007      	b.n	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d193      	bne.n	8005e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	fe00e800 	.word	0xfe00e800

08005f58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d068      	beq.n	8006056 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2210      	movs	r2, #16
 8005f8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f8c:	e049      	b.n	8006022 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d045      	beq.n	8006022 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f96:	f7fe fa27 	bl	80043e8 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d302      	bcc.n	8005fac <I2C_IsErrorOccurred+0x54>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d13a      	bne.n	8006022 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fce:	d121      	bne.n	8006014 <I2C_IsErrorOccurred+0xbc>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd6:	d01d      	beq.n	8006014 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d01a      	beq.n	8006014 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fee:	f7fe f9fb 	bl	80043e8 <HAL_GetTick>
 8005ff2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ff4:	e00e      	b.n	8006014 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ff6:	f7fe f9f7 	bl	80043e8 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b19      	cmp	r3, #25
 8006002:	d907      	bls.n	8006014 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	f043 0320 	orr.w	r3, r3, #32
 800600a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006012:	e006      	b.n	8006022 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b20      	cmp	r3, #32
 8006020:	d1e9      	bne.n	8005ff6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b20      	cmp	r3, #32
 800602e:	d003      	beq.n	8006038 <I2C_IsErrorOccurred+0xe0>
 8006030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0aa      	beq.n	8005f8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2220      	movs	r2, #32
 8006046:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	f043 0304 	orr.w	r3, r3, #4
 800604e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00b      	beq.n	8006080 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006078:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	f043 0308 	orr.w	r3, r3, #8
 8006090:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800609a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	f043 0302 	orr.w	r3, r3, #2
 80060b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80060c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01c      	beq.n	8006106 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff fdca 	bl	8005c66 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6859      	ldr	r1, [r3, #4]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <I2C_IsErrorOccurred+0x1bc>)
 80060de:	400b      	ands	r3, r1
 80060e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800610a:	4618      	mov	r0, r3
 800610c:	3728      	adds	r7, #40	; 0x28
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	fe00e800 	.word	0xfe00e800

08006118 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	817b      	strh	r3, [r7, #10]
 8006126:	4613      	mov	r3, r2
 8006128:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800612a:	897b      	ldrh	r3, [r7, #10]
 800612c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006130:	7a7b      	ldrb	r3, [r7, #9]
 8006132:	041b      	lsls	r3, r3, #16
 8006134:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006138:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	4313      	orrs	r3, r2
 8006142:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006146:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	0d5b      	lsrs	r3, r3, #21
 8006152:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006156:	4b08      	ldr	r3, [pc, #32]	; (8006178 <I2C_TransferConfig+0x60>)
 8006158:	430b      	orrs	r3, r1
 800615a:	43db      	mvns	r3, r3
 800615c:	ea02 0103 	and.w	r1, r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	03ff63ff 	.word	0x03ff63ff

0800617c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800618c:	887b      	ldrh	r3, [r7, #2]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00f      	beq.n	80061b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800619c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061aa:	2b28      	cmp	r3, #40	; 0x28
 80061ac:	d003      	beq.n	80061b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80061b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80061b6:	887b      	ldrh	r3, [r7, #2]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00f      	beq.n	80061e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80061c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061d4:	2b28      	cmp	r3, #40	; 0x28
 80061d6:	d003      	beq.n	80061e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80061de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80061e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	da03      	bge.n	80061f0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80061ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80061f0:	887b      	ldrh	r3, [r7, #2]
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d103      	bne.n	80061fe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80061fe:	887b      	ldrh	r3, [r7, #2]
 8006200:	2b20      	cmp	r3, #32
 8006202:	d103      	bne.n	800620c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f043 0320 	orr.w	r3, r3, #32
 800620a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800620c:	887b      	ldrh	r3, [r7, #2]
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d103      	bne.n	800621a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006218:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	43da      	mvns	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	400a      	ands	r2, r1
 800622a:	601a      	str	r2, [r3, #0]
}
 800622c:	bf00      	nop
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b20      	cmp	r3, #32
 800624c:	d138      	bne.n	80062c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006258:	2302      	movs	r3, #2
 800625a:	e032      	b.n	80062c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	; 0x24
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800628a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d139      	bne.n	8006358 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e033      	b.n	800635a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2224      	movs	r2, #36	; 0x24
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006320:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e000      	b.n	800635a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	4b23      	ldr	r3, [pc, #140]	; (8006400 <HAL_PWREx_EnableOverDrive+0x98>)
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	4a22      	ldr	r2, [pc, #136]	; (8006400 <HAL_PWREx_EnableOverDrive+0x98>)
 8006378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637c:	6413      	str	r3, [r2, #64]	; 0x40
 800637e:	4b20      	ldr	r3, [pc, #128]	; (8006400 <HAL_PWREx_EnableOverDrive+0x98>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800638a:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006394:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006396:	f7fe f827 	bl	80043e8 <HAL_GetTick>
 800639a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800639c:	e009      	b.n	80063b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800639e:	f7fe f823 	bl	80043e8 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ac:	d901      	bls.n	80063b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e022      	b.n	80063f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063b2:	4b14      	ldr	r3, [pc, #80]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d1ee      	bne.n	800639e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063c0:	4b10      	ldr	r3, [pc, #64]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a0f      	ldr	r2, [pc, #60]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063cc:	f7fe f80c 	bl	80043e8 <HAL_GetTick>
 80063d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063d2:	e009      	b.n	80063e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063d4:	f7fe f808 	bl	80043e8 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063e2:	d901      	bls.n	80063e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e007      	b.n	80063f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f4:	d1ee      	bne.n	80063d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40023800 	.word	0x40023800
 8006404:	40007000 	.word	0x40007000

08006408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006410:	2300      	movs	r3, #0
 8006412:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e291      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8087 	beq.w	800653a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800642c:	4b96      	ldr	r3, [pc, #600]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 030c 	and.w	r3, r3, #12
 8006434:	2b04      	cmp	r3, #4
 8006436:	d00c      	beq.n	8006452 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006438:	4b93      	ldr	r3, [pc, #588]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 030c 	and.w	r3, r3, #12
 8006440:	2b08      	cmp	r3, #8
 8006442:	d112      	bne.n	800646a <HAL_RCC_OscConfig+0x62>
 8006444:	4b90      	ldr	r3, [pc, #576]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800644c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006450:	d10b      	bne.n	800646a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006452:	4b8d      	ldr	r3, [pc, #564]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d06c      	beq.n	8006538 <HAL_RCC_OscConfig+0x130>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d168      	bne.n	8006538 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e26b      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006472:	d106      	bne.n	8006482 <HAL_RCC_OscConfig+0x7a>
 8006474:	4b84      	ldr	r3, [pc, #528]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a83      	ldr	r2, [pc, #524]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 800647a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e02e      	b.n	80064e0 <HAL_RCC_OscConfig+0xd8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10c      	bne.n	80064a4 <HAL_RCC_OscConfig+0x9c>
 800648a:	4b7f      	ldr	r3, [pc, #508]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a7e      	ldr	r2, [pc, #504]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4b7c      	ldr	r3, [pc, #496]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a7b      	ldr	r2, [pc, #492]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 800649c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	e01d      	b.n	80064e0 <HAL_RCC_OscConfig+0xd8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCC_OscConfig+0xc0>
 80064ae:	4b76      	ldr	r3, [pc, #472]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a75      	ldr	r2, [pc, #468]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80064b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	4b73      	ldr	r3, [pc, #460]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a72      	ldr	r2, [pc, #456]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e00b      	b.n	80064e0 <HAL_RCC_OscConfig+0xd8>
 80064c8:	4b6f      	ldr	r3, [pc, #444]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a6e      	ldr	r2, [pc, #440]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80064ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	4b6c      	ldr	r3, [pc, #432]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a6b      	ldr	r2, [pc, #428]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80064da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d013      	beq.n	8006510 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fd ff7e 	bl	80043e8 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f0:	f7fd ff7a 	bl	80043e8 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	; 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e21f      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006502:	4b61      	ldr	r3, [pc, #388]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f0      	beq.n	80064f0 <HAL_RCC_OscConfig+0xe8>
 800650e:	e014      	b.n	800653a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fd ff6a 	bl	80043e8 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006518:	f7fd ff66 	bl	80043e8 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b64      	cmp	r3, #100	; 0x64
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e20b      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800652a:	4b57      	ldr	r3, [pc, #348]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x110>
 8006536:	e000      	b.n	800653a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d069      	beq.n	800661a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006546:	4b50      	ldr	r3, [pc, #320]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006552:	4b4d      	ldr	r3, [pc, #308]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b08      	cmp	r3, #8
 800655c:	d11c      	bne.n	8006598 <HAL_RCC_OscConfig+0x190>
 800655e:	4b4a      	ldr	r3, [pc, #296]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d116      	bne.n	8006598 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800656a:	4b47      	ldr	r3, [pc, #284]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_RCC_OscConfig+0x17a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d001      	beq.n	8006582 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e1df      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006582:	4b41      	ldr	r3, [pc, #260]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	493d      	ldr	r1, [pc, #244]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006592:	4313      	orrs	r3, r2
 8006594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006596:	e040      	b.n	800661a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d023      	beq.n	80065e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065a0:	4b39      	ldr	r3, [pc, #228]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a38      	ldr	r2, [pc, #224]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ac:	f7fd ff1c 	bl	80043e8 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065b4:	f7fd ff18 	bl	80043e8 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e1bd      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c6:	4b30      	ldr	r3, [pc, #192]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d2:	4b2d      	ldr	r3, [pc, #180]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4929      	ldr	r1, [pc, #164]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]
 80065e6:	e018      	b.n	800661a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065e8:	4b27      	ldr	r3, [pc, #156]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a26      	ldr	r2, [pc, #152]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fd fef8 	bl	80043e8 <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065fc:	f7fd fef4 	bl	80043e8 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e199      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660e:	4b1e      	ldr	r3, [pc, #120]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1f0      	bne.n	80065fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d038      	beq.n	8006698 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d019      	beq.n	8006662 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800662e:	4b16      	ldr	r3, [pc, #88]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006632:	4a15      	ldr	r2, [pc, #84]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663a:	f7fd fed5 	bl	80043e8 <HAL_GetTick>
 800663e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006642:	f7fd fed1 	bl	80043e8 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e176      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0f0      	beq.n	8006642 <HAL_RCC_OscConfig+0x23a>
 8006660:	e01a      	b.n	8006698 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006666:	4a08      	ldr	r2, [pc, #32]	; (8006688 <HAL_RCC_OscConfig+0x280>)
 8006668:	f023 0301 	bic.w	r3, r3, #1
 800666c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666e:	f7fd febb 	bl	80043e8 <HAL_GetTick>
 8006672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006674:	e00a      	b.n	800668c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006676:	f7fd feb7 	bl	80043e8 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d903      	bls.n	800668c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e15c      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
 8006688:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800668c:	4b91      	ldr	r3, [pc, #580]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800668e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1ee      	bne.n	8006676 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80a4 	beq.w	80067ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066a6:	4b8b      	ldr	r3, [pc, #556]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10d      	bne.n	80066ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80066b2:	4b88      	ldr	r3, [pc, #544]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	4a87      	ldr	r2, [pc, #540]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80066b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066bc:	6413      	str	r3, [r2, #64]	; 0x40
 80066be:	4b85      	ldr	r3, [pc, #532]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c6:	60bb      	str	r3, [r7, #8]
 80066c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ce:	4b82      	ldr	r3, [pc, #520]	; (80068d8 <HAL_RCC_OscConfig+0x4d0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d118      	bne.n	800670c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80066da:	4b7f      	ldr	r3, [pc, #508]	; (80068d8 <HAL_RCC_OscConfig+0x4d0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a7e      	ldr	r2, [pc, #504]	; (80068d8 <HAL_RCC_OscConfig+0x4d0>)
 80066e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066e6:	f7fd fe7f 	bl	80043e8 <HAL_GetTick>
 80066ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ee:	f7fd fe7b 	bl	80043e8 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b64      	cmp	r3, #100	; 0x64
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e120      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006700:	4b75      	ldr	r3, [pc, #468]	; (80068d8 <HAL_RCC_OscConfig+0x4d0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f0      	beq.n	80066ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d106      	bne.n	8006722 <HAL_RCC_OscConfig+0x31a>
 8006714:	4b6f      	ldr	r3, [pc, #444]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	4a6e      	ldr	r2, [pc, #440]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	6713      	str	r3, [r2, #112]	; 0x70
 8006720:	e02d      	b.n	800677e <HAL_RCC_OscConfig+0x376>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10c      	bne.n	8006744 <HAL_RCC_OscConfig+0x33c>
 800672a:	4b6a      	ldr	r3, [pc, #424]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	4a69      	ldr	r2, [pc, #420]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	6713      	str	r3, [r2, #112]	; 0x70
 8006736:	4b67      	ldr	r3, [pc, #412]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	4a66      	ldr	r2, [pc, #408]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800673c:	f023 0304 	bic.w	r3, r3, #4
 8006740:	6713      	str	r3, [r2, #112]	; 0x70
 8006742:	e01c      	b.n	800677e <HAL_RCC_OscConfig+0x376>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b05      	cmp	r3, #5
 800674a:	d10c      	bne.n	8006766 <HAL_RCC_OscConfig+0x35e>
 800674c:	4b61      	ldr	r3, [pc, #388]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800674e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006750:	4a60      	ldr	r2, [pc, #384]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006752:	f043 0304 	orr.w	r3, r3, #4
 8006756:	6713      	str	r3, [r2, #112]	; 0x70
 8006758:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800675a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675c:	4a5d      	ldr	r2, [pc, #372]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	6713      	str	r3, [r2, #112]	; 0x70
 8006764:	e00b      	b.n	800677e <HAL_RCC_OscConfig+0x376>
 8006766:	4b5b      	ldr	r3, [pc, #364]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	4a5a      	ldr	r2, [pc, #360]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	6713      	str	r3, [r2, #112]	; 0x70
 8006772:	4b58      	ldr	r3, [pc, #352]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	4a57      	ldr	r2, [pc, #348]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006778:	f023 0304 	bic.w	r3, r3, #4
 800677c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d015      	beq.n	80067b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006786:	f7fd fe2f 	bl	80043e8 <HAL_GetTick>
 800678a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678c:	e00a      	b.n	80067a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800678e:	f7fd fe2b 	bl	80043e8 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	f241 3288 	movw	r2, #5000	; 0x1388
 800679c:	4293      	cmp	r3, r2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e0ce      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a4:	4b4b      	ldr	r3, [pc, #300]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0ee      	beq.n	800678e <HAL_RCC_OscConfig+0x386>
 80067b0:	e014      	b.n	80067dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b2:	f7fd fe19 	bl	80043e8 <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067b8:	e00a      	b.n	80067d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ba:	f7fd fe15 	bl	80043e8 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e0b8      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067d0:	4b40      	ldr	r3, [pc, #256]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1ee      	bne.n	80067ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d105      	bne.n	80067ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067e2:	4b3c      	ldr	r3, [pc, #240]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	4a3b      	ldr	r2, [pc, #236]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80067e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80a4 	beq.w	8006940 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067f8:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 030c 	and.w	r3, r3, #12
 8006800:	2b08      	cmp	r3, #8
 8006802:	d06b      	beq.n	80068dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d149      	bne.n	80068a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680c:	4b31      	ldr	r3, [pc, #196]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a30      	ldr	r2, [pc, #192]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fd fde6 	bl	80043e8 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7fd fde2 	bl	80043e8 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e087      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69da      	ldr	r2, [r3, #28]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	019b      	lsls	r3, r3, #6
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	085b      	lsrs	r3, r3, #1
 8006856:	3b01      	subs	r3, #1
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	061b      	lsls	r3, r3, #24
 8006862:	4313      	orrs	r3, r2
 8006864:	4a1b      	ldr	r2, [pc, #108]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006866:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800686a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800686c:	4b19      	ldr	r3, [pc, #100]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a18      	ldr	r2, [pc, #96]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fd fdb6 	bl	80043e8 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006880:	f7fd fdb2 	bl	80043e8 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e057      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006892:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x478>
 800689e:	e04f      	b.n	8006940 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a0:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a0b      	ldr	r2, [pc, #44]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80068a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fd fd9c 	bl	80043e8 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fd fd98 	bl	80043e8 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e03d      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c6:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <HAL_RCC_OscConfig+0x4cc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f0      	bne.n	80068b4 <HAL_RCC_OscConfig+0x4ac>
 80068d2:	e035      	b.n	8006940 <HAL_RCC_OscConfig+0x538>
 80068d4:	40023800 	.word	0x40023800
 80068d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80068dc:	4b1b      	ldr	r3, [pc, #108]	; (800694c <HAL_RCC_OscConfig+0x544>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d028      	beq.n	800693c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d121      	bne.n	800693c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006902:	429a      	cmp	r2, r3
 8006904:	d11a      	bne.n	800693c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800690c:	4013      	ands	r3, r2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006912:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006914:	4293      	cmp	r3, r2
 8006916:	d111      	bne.n	800693c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	085b      	lsrs	r3, r3, #1
 8006924:	3b01      	subs	r3, #1
 8006926:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006928:	429a      	cmp	r2, r3
 800692a:	d107      	bne.n	800693c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006938:	429a      	cmp	r2, r3
 800693a:	d001      	beq.n	8006940 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40023800 	.word	0x40023800

08006950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e0d0      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006968:	4b6a      	ldr	r3, [pc, #424]	; (8006b14 <HAL_RCC_ClockConfig+0x1c4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d910      	bls.n	8006998 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006976:	4b67      	ldr	r3, [pc, #412]	; (8006b14 <HAL_RCC_ClockConfig+0x1c4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 020f 	bic.w	r2, r3, #15
 800697e:	4965      	ldr	r1, [pc, #404]	; (8006b14 <HAL_RCC_ClockConfig+0x1c4>)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	4313      	orrs	r3, r2
 8006984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	4b63      	ldr	r3, [pc, #396]	; (8006b14 <HAL_RCC_ClockConfig+0x1c4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d001      	beq.n	8006998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e0b8      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d020      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069b0:	4b59      	ldr	r3, [pc, #356]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4a58      	ldr	r2, [pc, #352]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 80069b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069c8:	4b53      	ldr	r3, [pc, #332]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	4a52      	ldr	r2, [pc, #328]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 80069ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d4:	4b50      	ldr	r3, [pc, #320]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	494d      	ldr	r1, [pc, #308]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d040      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d107      	bne.n	8006a0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069fa:	4b47      	ldr	r3, [pc, #284]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d115      	bne.n	8006a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e07f      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d107      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a12:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e073      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a22:	4b3d      	ldr	r3, [pc, #244]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e06b      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a32:	4b39      	ldr	r3, [pc, #228]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f023 0203 	bic.w	r2, r3, #3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4936      	ldr	r1, [pc, #216]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a44:	f7fd fcd0 	bl	80043e8 <HAL_GetTick>
 8006a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a4a:	e00a      	b.n	8006a62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a4c:	f7fd fccc 	bl	80043e8 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e053      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a62:	4b2d      	ldr	r3, [pc, #180]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 020c 	and.w	r2, r3, #12
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d1eb      	bne.n	8006a4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a74:	4b27      	ldr	r3, [pc, #156]	; (8006b14 <HAL_RCC_ClockConfig+0x1c4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d210      	bcs.n	8006aa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a82:	4b24      	ldr	r3, [pc, #144]	; (8006b14 <HAL_RCC_ClockConfig+0x1c4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f023 020f 	bic.w	r2, r3, #15
 8006a8a:	4922      	ldr	r1, [pc, #136]	; (8006b14 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a92:	4b20      	ldr	r3, [pc, #128]	; (8006b14 <HAL_RCC_ClockConfig+0x1c4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d001      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e032      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d008      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ab0:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	4916      	ldr	r1, [pc, #88]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ace:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	490e      	ldr	r1, [pc, #56]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ae2:	f000 f821 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <HAL_RCC_ClockConfig+0x1c8>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	490a      	ldr	r1, [pc, #40]	; (8006b1c <HAL_RCC_ClockConfig+0x1cc>)
 8006af4:	5ccb      	ldrb	r3, [r1, r3]
 8006af6:	fa22 f303 	lsr.w	r3, r2, r3
 8006afa:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <HAL_RCC_ClockConfig+0x1d0>)
 8006afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <HAL_RCC_ClockConfig+0x1d4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fd fc2c 	bl	8004360 <HAL_InitTick>

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40023c00 	.word	0x40023c00
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	08018a0c 	.word	0x08018a0c
 8006b20:	2000000c 	.word	0x2000000c
 8006b24:	20000250 	.word	0x20000250

08006b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b2c:	b094      	sub	sp, #80	; 0x50
 8006b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	647b      	str	r3, [r7, #68]	; 0x44
 8006b34:	2300      	movs	r3, #0
 8006b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b38:	2300      	movs	r3, #0
 8006b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b40:	4b79      	ldr	r3, [pc, #484]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 030c 	and.w	r3, r3, #12
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d00d      	beq.n	8006b68 <HAL_RCC_GetSysClockFreq+0x40>
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	f200 80e1 	bhi.w	8006d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_RCC_GetSysClockFreq+0x34>
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d003      	beq.n	8006b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b5a:	e0db      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b5c:	4b73      	ldr	r3, [pc, #460]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b60:	e0db      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b62:	4b73      	ldr	r3, [pc, #460]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b66:	e0d8      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b68:	4b6f      	ldr	r3, [pc, #444]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b70:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b72:	4b6d      	ldr	r3, [pc, #436]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d063      	beq.n	8006c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b7e:	4b6a      	ldr	r3, [pc, #424]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	099b      	lsrs	r3, r3, #6
 8006b84:	2200      	movs	r2, #0
 8006b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b90:	633b      	str	r3, [r7, #48]	; 0x30
 8006b92:	2300      	movs	r3, #0
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
 8006b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	f04f 0000 	mov.w	r0, #0
 8006ba2:	f04f 0100 	mov.w	r1, #0
 8006ba6:	0159      	lsls	r1, r3, #5
 8006ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bac:	0150      	lsls	r0, r2, #5
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	1a51      	subs	r1, r2, r1
 8006bb6:	6139      	str	r1, [r7, #16]
 8006bb8:	4629      	mov	r1, r5
 8006bba:	eb63 0301 	sbc.w	r3, r3, r1
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bcc:	4659      	mov	r1, fp
 8006bce:	018b      	lsls	r3, r1, #6
 8006bd0:	4651      	mov	r1, sl
 8006bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	018a      	lsls	r2, r1, #6
 8006bda:	4651      	mov	r1, sl
 8006bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8006be0:	4659      	mov	r1, fp
 8006be2:	eb63 0901 	sbc.w	r9, r3, r1
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bfa:	4690      	mov	r8, r2
 8006bfc:	4699      	mov	r9, r3
 8006bfe:	4623      	mov	r3, r4
 8006c00:	eb18 0303 	adds.w	r3, r8, r3
 8006c04:	60bb      	str	r3, [r7, #8]
 8006c06:	462b      	mov	r3, r5
 8006c08:	eb49 0303 	adc.w	r3, r9, r3
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	024b      	lsls	r3, r1, #9
 8006c1e:	4621      	mov	r1, r4
 8006c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c24:	4621      	mov	r1, r4
 8006c26:	024a      	lsls	r2, r1, #9
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2e:	2200      	movs	r2, #0
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c38:	f7fa f856 	bl	8000ce8 <__aeabi_uldivmod>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4613      	mov	r3, r2
 8006c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c44:	e058      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c46:	4b38      	ldr	r3, [pc, #224]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	099b      	lsrs	r3, r3, #6
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	4611      	mov	r1, r2
 8006c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c60:	4642      	mov	r2, r8
 8006c62:	464b      	mov	r3, r9
 8006c64:	f04f 0000 	mov.w	r0, #0
 8006c68:	f04f 0100 	mov.w	r1, #0
 8006c6c:	0159      	lsls	r1, r3, #5
 8006c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c72:	0150      	lsls	r0, r2, #5
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4641      	mov	r1, r8
 8006c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c7e:	4649      	mov	r1, r9
 8006c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c98:	ebb2 040a 	subs.w	r4, r2, sl
 8006c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	00eb      	lsls	r3, r5, #3
 8006caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cae:	00e2      	lsls	r2, r4, #3
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	461d      	mov	r5, r3
 8006cb4:	4643      	mov	r3, r8
 8006cb6:	18e3      	adds	r3, r4, r3
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	464b      	mov	r3, r9
 8006cbc:	eb45 0303 	adc.w	r3, r5, r3
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cce:	4629      	mov	r1, r5
 8006cd0:	028b      	lsls	r3, r1, #10
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cd8:	4621      	mov	r1, r4
 8006cda:	028a      	lsls	r2, r1, #10
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	61fa      	str	r2, [r7, #28]
 8006ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cec:	f7f9 fffc 	bl	8000ce8 <__aeabi_uldivmod>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	3301      	adds	r3, #1
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d12:	e002      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006d16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3750      	adds	r7, #80	; 0x50
 8006d20:	46bd      	mov	sp, r7
 8006d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d26:	bf00      	nop
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	00f42400 	.word	0x00f42400
 8006d30:	007a1200 	.word	0x007a1200

08006d34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d38:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	2000000c 	.word	0x2000000c

08006d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d50:	f7ff fff0 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d54:	4602      	mov	r2, r0
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	0a9b      	lsrs	r3, r3, #10
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	4903      	ldr	r1, [pc, #12]	; (8006d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d62:	5ccb      	ldrb	r3, [r1, r3]
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	08018a1c 	.word	0x08018a1c

08006d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d78:	f7ff ffdc 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	0b5b      	lsrs	r3, r3, #13
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	4903      	ldr	r1, [pc, #12]	; (8006d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40023800 	.word	0x40023800
 8006d98:	08018a1c 	.word	0x08018a1c

08006d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d012      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dc4:	4b69      	ldr	r3, [pc, #420]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4a68      	ldr	r2, [pc, #416]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006dce:	6093      	str	r3, [r2, #8]
 8006dd0:	4b66      	ldr	r3, [pc, #408]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd8:	4964      	ldr	r1, [pc, #400]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006de6:	2301      	movs	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d017      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006df6:	4b5d      	ldr	r3, [pc, #372]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e04:	4959      	ldr	r1, [pc, #356]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e14:	d101      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e16:	2301      	movs	r3, #1
 8006e18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e22:	2301      	movs	r3, #1
 8006e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d017      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e32:	4b4e      	ldr	r3, [pc, #312]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	494a      	ldr	r1, [pc, #296]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e50:	d101      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 808b 	beq.w	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e80:	4b3a      	ldr	r3, [pc, #232]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	4a39      	ldr	r2, [pc, #228]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e8c:	4b37      	ldr	r3, [pc, #220]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e94:	60bb      	str	r3, [r7, #8]
 8006e96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e98:	4b35      	ldr	r3, [pc, #212]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a34      	ldr	r2, [pc, #208]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea4:	f7fd faa0 	bl	80043e8 <HAL_GetTick>
 8006ea8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eac:	f7fd fa9c 	bl	80043e8 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b64      	cmp	r3, #100	; 0x64
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e357      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ebe:	4b2c      	ldr	r3, [pc, #176]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0f0      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006eca:	4b28      	ldr	r3, [pc, #160]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d035      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d02e      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ee8:	4b20      	ldr	r3, [pc, #128]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ef2:	4b1e      	ldr	r3, [pc, #120]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	4a1d      	ldr	r2, [pc, #116]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006efc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006efe:	4b1b      	ldr	r3, [pc, #108]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f02:	4a1a      	ldr	r2, [pc, #104]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f0a:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f10:	4b16      	ldr	r3, [pc, #88]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d114      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1c:	f7fd fa64 	bl	80043e8 <HAL_GetTick>
 8006f20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f22:	e00a      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f24:	f7fd fa60 	bl	80043e8 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e319      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0ee      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f52:	d111      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f60:	4b04      	ldr	r3, [pc, #16]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f62:	400b      	ands	r3, r1
 8006f64:	4901      	ldr	r1, [pc, #4]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]
 8006f6a:	e00b      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	40007000 	.word	0x40007000
 8006f74:	0ffffcff 	.word	0x0ffffcff
 8006f78:	4baa      	ldr	r3, [pc, #680]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	4aa9      	ldr	r2, [pc, #676]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f82:	6093      	str	r3, [r2, #8]
 8006f84:	4ba7      	ldr	r3, [pc, #668]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f90:	49a4      	ldr	r1, [pc, #656]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0310 	and.w	r3, r3, #16
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d010      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fa2:	4ba0      	ldr	r3, [pc, #640]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fa8:	4a9e      	ldr	r2, [pc, #632]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006fb2:	4b9c      	ldr	r3, [pc, #624]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	4999      	ldr	r1, [pc, #612]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fd0:	4b94      	ldr	r3, [pc, #592]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fde:	4991      	ldr	r1, [pc, #580]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ff2:	4b8c      	ldr	r3, [pc, #560]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007000:	4988      	ldr	r1, [pc, #544]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007014:	4b83      	ldr	r3, [pc, #524]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007022:	4980      	ldr	r1, [pc, #512]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007024:	4313      	orrs	r3, r2
 8007026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007036:	4b7b      	ldr	r3, [pc, #492]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007044:	4977      	ldr	r1, [pc, #476]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007046:	4313      	orrs	r3, r2
 8007048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007058:	4b72      	ldr	r3, [pc, #456]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800705a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705e:	f023 0203 	bic.w	r2, r3, #3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	496f      	ldr	r1, [pc, #444]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800707a:	4b6a      	ldr	r3, [pc, #424]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800707c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007080:	f023 020c 	bic.w	r2, r3, #12
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007088:	4966      	ldr	r1, [pc, #408]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800709c:	4b61      	ldr	r3, [pc, #388]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070aa:	495e      	ldr	r1, [pc, #376]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070be:	4b59      	ldr	r3, [pc, #356]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070cc:	4955      	ldr	r1, [pc, #340]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070e0:	4b50      	ldr	r3, [pc, #320]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ee:	494d      	ldr	r1, [pc, #308]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007102:	4b48      	ldr	r3, [pc, #288]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007108:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007110:	4944      	ldr	r1, [pc, #272]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007124:	4b3f      	ldr	r3, [pc, #252]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007132:	493c      	ldr	r1, [pc, #240]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007146:	4b37      	ldr	r3, [pc, #220]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007154:	4933      	ldr	r1, [pc, #204]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007156:	4313      	orrs	r3, r2
 8007158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007168:	4b2e      	ldr	r3, [pc, #184]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800716a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007176:	492b      	ldr	r1, [pc, #172]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007178:	4313      	orrs	r3, r2
 800717a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d011      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800718a:	4b26      	ldr	r3, [pc, #152]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007190:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007198:	4922      	ldr	r1, [pc, #136]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071a8:	d101      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80071aa:	2301      	movs	r3, #1
 80071ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80071ba:	2301      	movs	r3, #1
 80071bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071ca:	4b16      	ldr	r3, [pc, #88]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d8:	4912      	ldr	r1, [pc, #72]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00b      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071ec:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071fc:	4909      	ldr	r1, [pc, #36]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d006      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80d9 	beq.w	80073ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007218:	4b02      	ldr	r3, [pc, #8]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a01      	ldr	r2, [pc, #4]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800721e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007222:	e001      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007224:	40023800 	.word	0x40023800
 8007228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fd f8dd 	bl	80043e8 <HAL_GetTick>
 800722e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007230:	e008      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007232:	f7fd f8d9 	bl	80043e8 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b64      	cmp	r3, #100	; 0x64
 800723e:	d901      	bls.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e194      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007244:	4b6c      	ldr	r3, [pc, #432]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d021      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	2b00      	cmp	r3, #0
 8007262:	d11d      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007264:	4b64      	ldr	r3, [pc, #400]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800726a:	0c1b      	lsrs	r3, r3, #16
 800726c:	f003 0303 	and.w	r3, r3, #3
 8007270:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007272:	4b61      	ldr	r3, [pc, #388]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007278:	0e1b      	lsrs	r3, r3, #24
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	019a      	lsls	r2, r3, #6
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	041b      	lsls	r3, r3, #16
 800728a:	431a      	orrs	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	061b      	lsls	r3, r3, #24
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	071b      	lsls	r3, r3, #28
 8007298:	4957      	ldr	r1, [pc, #348]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800729a:	4313      	orrs	r3, r2
 800729c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072b4:	d00a      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d02e      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072ca:	d129      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072cc:	4b4a      	ldr	r3, [pc, #296]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072da:	4b47      	ldr	r3, [pc, #284]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e0:	0f1b      	lsrs	r3, r3, #28
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	019a      	lsls	r2, r3, #6
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	041b      	lsls	r3, r3, #16
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	061b      	lsls	r3, r3, #24
 80072fa:	431a      	orrs	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	071b      	lsls	r3, r3, #28
 8007300:	493d      	ldr	r1, [pc, #244]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007308:	4b3b      	ldr	r3, [pc, #236]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800730a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800730e:	f023 021f 	bic.w	r2, r3, #31
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	3b01      	subs	r3, #1
 8007318:	4937      	ldr	r1, [pc, #220]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01d      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800732c:	4b32      	ldr	r3, [pc, #200]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800732e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007332:	0e1b      	lsrs	r3, r3, #24
 8007334:	f003 030f 	and.w	r3, r3, #15
 8007338:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800733a:	4b2f      	ldr	r3, [pc, #188]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800733c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007340:	0f1b      	lsrs	r3, r3, #28
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	019a      	lsls	r2, r3, #6
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	041b      	lsls	r3, r3, #16
 8007354:	431a      	orrs	r2, r3
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	061b      	lsls	r3, r3, #24
 800735a:	431a      	orrs	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	071b      	lsls	r3, r3, #28
 8007360:	4925      	ldr	r1, [pc, #148]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d011      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	019a      	lsls	r2, r3, #6
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	041b      	lsls	r3, r3, #16
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	061b      	lsls	r3, r3, #24
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	071b      	lsls	r3, r3, #28
 8007390:	4919      	ldr	r1, [pc, #100]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007392:	4313      	orrs	r3, r2
 8007394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007398:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a16      	ldr	r2, [pc, #88]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800739e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a4:	f7fd f820 	bl	80043e8 <HAL_GetTick>
 80073a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073ac:	f7fd f81c 	bl	80043e8 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b64      	cmp	r3, #100	; 0x64
 80073b8:	d901      	bls.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e0d7      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073be:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	f040 80cd 	bne.w	800756c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073d2:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073de:	f7fd f803 	bl	80043e8 <HAL_GetTick>
 80073e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073e4:	e00a      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073e6:	f7fc ffff 	bl	80043e8 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b64      	cmp	r3, #100	; 0x64
 80073f2:	d903      	bls.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e0ba      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80073f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073fc:	4b5e      	ldr	r3, [pc, #376]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007408:	d0ed      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007426:	2b00      	cmp	r3, #0
 8007428:	d02e      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d12a      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007432:	4b51      	ldr	r3, [pc, #324]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007438:	0c1b      	lsrs	r3, r3, #16
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007440:	4b4d      	ldr	r3, [pc, #308]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007446:	0f1b      	lsrs	r3, r3, #28
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	019a      	lsls	r2, r3, #6
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	041b      	lsls	r3, r3, #16
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	061b      	lsls	r3, r3, #24
 8007460:	431a      	orrs	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	071b      	lsls	r3, r3, #28
 8007466:	4944      	ldr	r1, [pc, #272]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007468:	4313      	orrs	r3, r2
 800746a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800746e:	4b42      	ldr	r3, [pc, #264]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007474:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	3b01      	subs	r3, #1
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	493d      	ldr	r1, [pc, #244]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d022      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800749c:	d11d      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800749e:	4b36      	ldr	r3, [pc, #216]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a4:	0e1b      	lsrs	r3, r3, #24
 80074a6:	f003 030f 	and.w	r3, r3, #15
 80074aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074ac:	4b32      	ldr	r3, [pc, #200]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	0f1b      	lsrs	r3, r3, #28
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	019a      	lsls	r2, r3, #6
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	041b      	lsls	r3, r3, #16
 80074c6:	431a      	orrs	r2, r3
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	061b      	lsls	r3, r3, #24
 80074cc:	431a      	orrs	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	071b      	lsls	r3, r3, #28
 80074d2:	4929      	ldr	r1, [pc, #164]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d028      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074e6:	4b24      	ldr	r3, [pc, #144]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ec:	0e1b      	lsrs	r3, r3, #24
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074f4:	4b20      	ldr	r3, [pc, #128]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fa:	0c1b      	lsrs	r3, r3, #16
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	019a      	lsls	r2, r3, #6
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	041b      	lsls	r3, r3, #16
 800750c:	431a      	orrs	r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	061b      	lsls	r3, r3, #24
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	071b      	lsls	r3, r3, #28
 800751a:	4917      	ldr	r1, [pc, #92]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800751c:	4313      	orrs	r3, r2
 800751e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	4911      	ldr	r1, [pc, #68]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007538:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a0e      	ldr	r2, [pc, #56]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800753e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007544:	f7fc ff50 	bl	80043e8 <HAL_GetTick>
 8007548:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800754a:	e008      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800754c:	f7fc ff4c 	bl	80043e8 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b64      	cmp	r3, #100	; 0x64
 8007558:	d901      	bls.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e007      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800755e:	4b06      	ldr	r3, [pc, #24]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756a:	d1ef      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	40023800 	.word	0x40023800

0800757c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e049      	b.n	8007622 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fc fba2 	bl	8003cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f000 fcc0 	bl	8007f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e049      	b.n	80076d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f841 	bl	80076d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2202      	movs	r2, #2
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	4619      	mov	r1, r3
 8007668:	4610      	mov	r0, r2
 800766a:	f000 fc69 	bl	8007f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <HAL_TIM_PWM_Start+0x24>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	e03c      	b.n	800778a <HAL_TIM_PWM_Start+0x9e>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b04      	cmp	r3, #4
 8007714:	d109      	bne.n	800772a <HAL_TIM_PWM_Start+0x3e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b01      	cmp	r3, #1
 8007720:	bf14      	ite	ne
 8007722:	2301      	movne	r3, #1
 8007724:	2300      	moveq	r3, #0
 8007726:	b2db      	uxtb	r3, r3
 8007728:	e02f      	b.n	800778a <HAL_TIM_PWM_Start+0x9e>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d109      	bne.n	8007744 <HAL_TIM_PWM_Start+0x58>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	bf14      	ite	ne
 800773c:	2301      	movne	r3, #1
 800773e:	2300      	moveq	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	e022      	b.n	800778a <HAL_TIM_PWM_Start+0x9e>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b0c      	cmp	r3, #12
 8007748:	d109      	bne.n	800775e <HAL_TIM_PWM_Start+0x72>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	bf14      	ite	ne
 8007756:	2301      	movne	r3, #1
 8007758:	2300      	moveq	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	e015      	b.n	800778a <HAL_TIM_PWM_Start+0x9e>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b10      	cmp	r3, #16
 8007762:	d109      	bne.n	8007778 <HAL_TIM_PWM_Start+0x8c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	bf14      	ite	ne
 8007770:	2301      	movne	r3, #1
 8007772:	2300      	moveq	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	e008      	b.n	800778a <HAL_TIM_PWM_Start+0x9e>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	bf14      	ite	ne
 8007784:	2301      	movne	r3, #1
 8007786:	2300      	moveq	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e092      	b.n	80078b8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d104      	bne.n	80077a2 <HAL_TIM_PWM_Start+0xb6>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077a0:	e023      	b.n	80077ea <HAL_TIM_PWM_Start+0xfe>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d104      	bne.n	80077b2 <HAL_TIM_PWM_Start+0xc6>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077b0:	e01b      	b.n	80077ea <HAL_TIM_PWM_Start+0xfe>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d104      	bne.n	80077c2 <HAL_TIM_PWM_Start+0xd6>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077c0:	e013      	b.n	80077ea <HAL_TIM_PWM_Start+0xfe>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b0c      	cmp	r3, #12
 80077c6:	d104      	bne.n	80077d2 <HAL_TIM_PWM_Start+0xe6>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077d0:	e00b      	b.n	80077ea <HAL_TIM_PWM_Start+0xfe>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d104      	bne.n	80077e2 <HAL_TIM_PWM_Start+0xf6>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077e0:	e003      	b.n	80077ea <HAL_TIM_PWM_Start+0xfe>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2202      	movs	r2, #2
 80077e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2201      	movs	r2, #1
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 ff3c 	bl	8008670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a30      	ldr	r2, [pc, #192]	; (80078c0 <HAL_TIM_PWM_Start+0x1d4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <HAL_TIM_PWM_Start+0x120>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a2f      	ldr	r2, [pc, #188]	; (80078c4 <HAL_TIM_PWM_Start+0x1d8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d101      	bne.n	8007810 <HAL_TIM_PWM_Start+0x124>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <HAL_TIM_PWM_Start+0x126>
 8007810:	2300      	movs	r3, #0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d007      	beq.n	8007826 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007824:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a25      	ldr	r2, [pc, #148]	; (80078c0 <HAL_TIM_PWM_Start+0x1d4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d022      	beq.n	8007876 <HAL_TIM_PWM_Start+0x18a>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007838:	d01d      	beq.n	8007876 <HAL_TIM_PWM_Start+0x18a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a22      	ldr	r2, [pc, #136]	; (80078c8 <HAL_TIM_PWM_Start+0x1dc>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d018      	beq.n	8007876 <HAL_TIM_PWM_Start+0x18a>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a20      	ldr	r2, [pc, #128]	; (80078cc <HAL_TIM_PWM_Start+0x1e0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_TIM_PWM_Start+0x18a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <HAL_TIM_PWM_Start+0x1e4>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_TIM_PWM_Start+0x18a>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a19      	ldr	r2, [pc, #100]	; (80078c4 <HAL_TIM_PWM_Start+0x1d8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_TIM_PWM_Start+0x18a>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a1b      	ldr	r2, [pc, #108]	; (80078d4 <HAL_TIM_PWM_Start+0x1e8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_TIM_PWM_Start+0x18a>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a19      	ldr	r2, [pc, #100]	; (80078d8 <HAL_TIM_PWM_Start+0x1ec>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d115      	bne.n	80078a2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	4b17      	ldr	r3, [pc, #92]	; (80078dc <HAL_TIM_PWM_Start+0x1f0>)
 800787e:	4013      	ands	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b06      	cmp	r3, #6
 8007886:	d015      	beq.n	80078b4 <HAL_TIM_PWM_Start+0x1c8>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800788e:	d011      	beq.n	80078b4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0201 	orr.w	r2, r2, #1
 800789e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a0:	e008      	b.n	80078b4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f042 0201 	orr.w	r2, r2, #1
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	e000      	b.n	80078b6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400
 80078c8:	40000400 	.word	0x40000400
 80078cc:	40000800 	.word	0x40000800
 80078d0:	40000c00 	.word	0x40000c00
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40001800 	.word	0x40001800
 80078dc:	00010007 	.word	0x00010007

080078e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d122      	bne.n	800793c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b02      	cmp	r3, #2
 8007902:	d11b      	bne.n	800793c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f06f 0202 	mvn.w	r2, #2
 800790c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 faee 	bl	8007f04 <HAL_TIM_IC_CaptureCallback>
 8007928:	e005      	b.n	8007936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fae0 	bl	8007ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 faf1 	bl	8007f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b04      	cmp	r3, #4
 8007948:	d122      	bne.n	8007990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b04      	cmp	r3, #4
 8007956:	d11b      	bne.n	8007990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0204 	mvn.w	r2, #4
 8007960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fac4 	bl	8007f04 <HAL_TIM_IC_CaptureCallback>
 800797c:	e005      	b.n	800798a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fab6 	bl	8007ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fac7 	bl	8007f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0308 	and.w	r3, r3, #8
 800799a:	2b08      	cmp	r3, #8
 800799c:	d122      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0308 	and.w	r3, r3, #8
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d11b      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0208 	mvn.w	r2, #8
 80079b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2204      	movs	r2, #4
 80079ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa9a 	bl	8007f04 <HAL_TIM_IC_CaptureCallback>
 80079d0:	e005      	b.n	80079de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa8c 	bl	8007ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa9d 	bl	8007f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0310 	and.w	r3, r3, #16
 80079ee:	2b10      	cmp	r3, #16
 80079f0:	d122      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d11b      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0210 	mvn.w	r2, #16
 8007a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa70 	bl	8007f04 <HAL_TIM_IC_CaptureCallback>
 8007a24:	e005      	b.n	8007a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa62 	bl	8007ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fa73 	bl	8007f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d10e      	bne.n	8007a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d107      	bne.n	8007a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0201 	mvn.w	r2, #1
 8007a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa3c 	bl	8007edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a6e:	2b80      	cmp	r3, #128	; 0x80
 8007a70:	d10e      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7c:	2b80      	cmp	r3, #128	; 0x80
 8007a7e:	d107      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 feae 	bl	80087ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a9e:	d10e      	bne.n	8007abe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b80      	cmp	r3, #128	; 0x80
 8007aac:	d107      	bne.n	8007abe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fea1 	bl	8008800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac8:	2b40      	cmp	r3, #64	; 0x40
 8007aca:	d10e      	bne.n	8007aea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d107      	bne.n	8007aea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fa21 	bl	8007f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	f003 0320 	and.w	r3, r3, #32
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	d10e      	bne.n	8007b16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	d107      	bne.n	8007b16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f06f 0220 	mvn.w	r2, #32
 8007b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fe61 	bl	80087d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e0ff      	b.n	8007d3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b14      	cmp	r3, #20
 8007b4a:	f200 80f0 	bhi.w	8007d2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007ba9 	.word	0x08007ba9
 8007b58:	08007d2f 	.word	0x08007d2f
 8007b5c:	08007d2f 	.word	0x08007d2f
 8007b60:	08007d2f 	.word	0x08007d2f
 8007b64:	08007be9 	.word	0x08007be9
 8007b68:	08007d2f 	.word	0x08007d2f
 8007b6c:	08007d2f 	.word	0x08007d2f
 8007b70:	08007d2f 	.word	0x08007d2f
 8007b74:	08007c2b 	.word	0x08007c2b
 8007b78:	08007d2f 	.word	0x08007d2f
 8007b7c:	08007d2f 	.word	0x08007d2f
 8007b80:	08007d2f 	.word	0x08007d2f
 8007b84:	08007c6b 	.word	0x08007c6b
 8007b88:	08007d2f 	.word	0x08007d2f
 8007b8c:	08007d2f 	.word	0x08007d2f
 8007b90:	08007d2f 	.word	0x08007d2f
 8007b94:	08007cad 	.word	0x08007cad
 8007b98:	08007d2f 	.word	0x08007d2f
 8007b9c:	08007d2f 	.word	0x08007d2f
 8007ba0:	08007d2f 	.word	0x08007d2f
 8007ba4:	08007ced 	.word	0x08007ced
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fa66 	bl	8008080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0208 	orr.w	r2, r2, #8
 8007bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699a      	ldr	r2, [r3, #24]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0204 	bic.w	r2, r2, #4
 8007bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6999      	ldr	r1, [r3, #24]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	619a      	str	r2, [r3, #24]
      break;
 8007be6:	e0a5      	b.n	8007d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fab8 	bl	8008164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6999      	ldr	r1, [r3, #24]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	021a      	lsls	r2, r3, #8
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	619a      	str	r2, [r3, #24]
      break;
 8007c28:	e084      	b.n	8007d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fb0f 	bl	8008254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f042 0208 	orr.w	r2, r2, #8
 8007c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69da      	ldr	r2, [r3, #28]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0204 	bic.w	r2, r2, #4
 8007c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69d9      	ldr	r1, [r3, #28]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	61da      	str	r2, [r3, #28]
      break;
 8007c68:	e064      	b.n	8007d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fb65 	bl	8008340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69da      	ldr	r2, [r3, #28]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69d9      	ldr	r1, [r3, #28]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	021a      	lsls	r2, r3, #8
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	61da      	str	r2, [r3, #28]
      break;
 8007caa:	e043      	b.n	8007d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fb9c 	bl	80083f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0208 	orr.w	r2, r2, #8
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0204 	bic.w	r2, r2, #4
 8007cd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cea:	e023      	b.n	8007d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fbce 	bl	8008494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	021a      	lsls	r2, r3, #8
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d2c:	e002      	b.n	8007d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
      break;
 8007d32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop

08007d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_TIM_ConfigClockSource+0x1c>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e0b4      	b.n	8007ece <HAL_TIM_ConfigClockSource+0x186>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	4b56      	ldr	r3, [pc, #344]	; (8007ed8 <HAL_TIM_ConfigClockSource+0x190>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9c:	d03e      	beq.n	8007e1c <HAL_TIM_ConfigClockSource+0xd4>
 8007d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da2:	f200 8087 	bhi.w	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007daa:	f000 8086 	beq.w	8007eba <HAL_TIM_ConfigClockSource+0x172>
 8007dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db2:	d87f      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007db4:	2b70      	cmp	r3, #112	; 0x70
 8007db6:	d01a      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0xa6>
 8007db8:	2b70      	cmp	r3, #112	; 0x70
 8007dba:	d87b      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dbc:	2b60      	cmp	r3, #96	; 0x60
 8007dbe:	d050      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x11a>
 8007dc0:	2b60      	cmp	r3, #96	; 0x60
 8007dc2:	d877      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc4:	2b50      	cmp	r3, #80	; 0x50
 8007dc6:	d03c      	beq.n	8007e42 <HAL_TIM_ConfigClockSource+0xfa>
 8007dc8:	2b50      	cmp	r3, #80	; 0x50
 8007dca:	d873      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d058      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0x13a>
 8007dd0:	2b40      	cmp	r3, #64	; 0x40
 8007dd2:	d86f      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd4:	2b30      	cmp	r3, #48	; 0x30
 8007dd6:	d064      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007dd8:	2b30      	cmp	r3, #48	; 0x30
 8007dda:	d86b      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d060      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d867      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d05c      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d05a      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007dec:	e062      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6899      	ldr	r1, [r3, #8]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f000 fc17 	bl	8008630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	609a      	str	r2, [r3, #8]
      break;
 8007e1a:	e04f      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	6899      	ldr	r1, [r3, #8]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f000 fc00 	bl	8008630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e3e:	609a      	str	r2, [r3, #8]
      break;
 8007e40:	e03c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f000 fb74 	bl	800853c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2150      	movs	r1, #80	; 0x50
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fbcd 	bl	80085fa <TIM_ITRx_SetConfig>
      break;
 8007e60:	e02c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	6859      	ldr	r1, [r3, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f000 fb93 	bl	800859a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2160      	movs	r1, #96	; 0x60
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fbbd 	bl	80085fa <TIM_ITRx_SetConfig>
      break;
 8007e80:	e01c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	6859      	ldr	r1, [r3, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f000 fb54 	bl	800853c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2140      	movs	r1, #64	; 0x40
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fbad 	bl	80085fa <TIM_ITRx_SetConfig>
      break;
 8007ea0:	e00c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f000 fba4 	bl	80085fa <TIM_ITRx_SetConfig>
      break;
 8007eb2:	e003      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb8:	e000      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007eba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	fffeff88 	.word	0xfffeff88

08007edc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a40      	ldr	r2, [pc, #256]	; (8008054 <TIM_Base_SetConfig+0x114>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d013      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5e:	d00f      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a3d      	ldr	r2, [pc, #244]	; (8008058 <TIM_Base_SetConfig+0x118>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00b      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a3c      	ldr	r2, [pc, #240]	; (800805c <TIM_Base_SetConfig+0x11c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d007      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a3b      	ldr	r2, [pc, #236]	; (8008060 <TIM_Base_SetConfig+0x120>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d003      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a3a      	ldr	r2, [pc, #232]	; (8008064 <TIM_Base_SetConfig+0x124>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d108      	bne.n	8007f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a2f      	ldr	r2, [pc, #188]	; (8008054 <TIM_Base_SetConfig+0x114>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d02b      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa0:	d027      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a2c      	ldr	r2, [pc, #176]	; (8008058 <TIM_Base_SetConfig+0x118>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d023      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a2b      	ldr	r2, [pc, #172]	; (800805c <TIM_Base_SetConfig+0x11c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d01f      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a2a      	ldr	r2, [pc, #168]	; (8008060 <TIM_Base_SetConfig+0x120>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d01b      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a29      	ldr	r2, [pc, #164]	; (8008064 <TIM_Base_SetConfig+0x124>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d017      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a28      	ldr	r2, [pc, #160]	; (8008068 <TIM_Base_SetConfig+0x128>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a27      	ldr	r2, [pc, #156]	; (800806c <TIM_Base_SetConfig+0x12c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00f      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a26      	ldr	r2, [pc, #152]	; (8008070 <TIM_Base_SetConfig+0x130>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00b      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a25      	ldr	r2, [pc, #148]	; (8008074 <TIM_Base_SetConfig+0x134>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d007      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a24      	ldr	r2, [pc, #144]	; (8008078 <TIM_Base_SetConfig+0x138>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a23      	ldr	r2, [pc, #140]	; (800807c <TIM_Base_SetConfig+0x13c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d108      	bne.n	8008004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <TIM_Base_SetConfig+0x114>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d003      	beq.n	8008038 <TIM_Base_SetConfig+0xf8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a0c      	ldr	r2, [pc, #48]	; (8008064 <TIM_Base_SetConfig+0x124>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d103      	bne.n	8008040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	615a      	str	r2, [r3, #20]
}
 8008046:	bf00      	nop
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40010000 	.word	0x40010000
 8008058:	40000400 	.word	0x40000400
 800805c:	40000800 	.word	0x40000800
 8008060:	40000c00 	.word	0x40000c00
 8008064:	40010400 	.word	0x40010400
 8008068:	40014000 	.word	0x40014000
 800806c:	40014400 	.word	0x40014400
 8008070:	40014800 	.word	0x40014800
 8008074:	40001800 	.word	0x40001800
 8008078:	40001c00 	.word	0x40001c00
 800807c:	40002000 	.word	0x40002000

08008080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	f023 0201 	bic.w	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	4b2b      	ldr	r3, [pc, #172]	; (8008158 <TIM_OC1_SetConfig+0xd8>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 0303 	bic.w	r3, r3, #3
 80080b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f023 0302 	bic.w	r3, r3, #2
 80080c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a21      	ldr	r2, [pc, #132]	; (800815c <TIM_OC1_SetConfig+0xdc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d003      	beq.n	80080e4 <TIM_OC1_SetConfig+0x64>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a20      	ldr	r2, [pc, #128]	; (8008160 <TIM_OC1_SetConfig+0xe0>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d10c      	bne.n	80080fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f023 0308 	bic.w	r3, r3, #8
 80080ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f023 0304 	bic.w	r3, r3, #4
 80080fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a16      	ldr	r2, [pc, #88]	; (800815c <TIM_OC1_SetConfig+0xdc>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d003      	beq.n	800810e <TIM_OC1_SetConfig+0x8e>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a15      	ldr	r2, [pc, #84]	; (8008160 <TIM_OC1_SetConfig+0xe0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d111      	bne.n	8008132 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800811c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4313      	orrs	r3, r2
 8008126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	621a      	str	r2, [r3, #32]
}
 800814c:	bf00      	nop
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	fffeff8f 	.word	0xfffeff8f
 800815c:	40010000 	.word	0x40010000
 8008160:	40010400 	.word	0x40010400

08008164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	f023 0210 	bic.w	r2, r3, #16
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4b2e      	ldr	r3, [pc, #184]	; (8008248 <TIM_OC2_SetConfig+0xe4>)
 8008190:	4013      	ands	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800819a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0320 	bic.w	r3, r3, #32
 80081ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a23      	ldr	r2, [pc, #140]	; (800824c <TIM_OC2_SetConfig+0xe8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d003      	beq.n	80081cc <TIM_OC2_SetConfig+0x68>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a22      	ldr	r2, [pc, #136]	; (8008250 <TIM_OC2_SetConfig+0xec>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d10d      	bne.n	80081e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a18      	ldr	r2, [pc, #96]	; (800824c <TIM_OC2_SetConfig+0xe8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d003      	beq.n	80081f8 <TIM_OC2_SetConfig+0x94>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a17      	ldr	r2, [pc, #92]	; (8008250 <TIM_OC2_SetConfig+0xec>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d113      	bne.n	8008220 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	feff8fff 	.word	0xfeff8fff
 800824c:	40010000 	.word	0x40010000
 8008250:	40010400 	.word	0x40010400

08008254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	4b2d      	ldr	r3, [pc, #180]	; (8008334 <TIM_OC3_SetConfig+0xe0>)
 8008280:	4013      	ands	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0303 	bic.w	r3, r3, #3
 800828a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800829c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a22      	ldr	r2, [pc, #136]	; (8008338 <TIM_OC3_SetConfig+0xe4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_OC3_SetConfig+0x66>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a21      	ldr	r2, [pc, #132]	; (800833c <TIM_OC3_SetConfig+0xe8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d10d      	bne.n	80082d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a17      	ldr	r2, [pc, #92]	; (8008338 <TIM_OC3_SetConfig+0xe4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d003      	beq.n	80082e6 <TIM_OC3_SetConfig+0x92>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a16      	ldr	r2, [pc, #88]	; (800833c <TIM_OC3_SetConfig+0xe8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d113      	bne.n	800830e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	011b      	lsls	r3, r3, #4
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	4313      	orrs	r3, r2
 800830c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	621a      	str	r2, [r3, #32]
}
 8008328:	bf00      	nop
 800832a:	371c      	adds	r7, #28
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	fffeff8f 	.word	0xfffeff8f
 8008338:	40010000 	.word	0x40010000
 800833c:	40010400 	.word	0x40010400

08008340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <TIM_OC4_SetConfig+0xa4>)
 800836c:	4013      	ands	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	021b      	lsls	r3, r3, #8
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	4313      	orrs	r3, r2
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800838a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	031b      	lsls	r3, r3, #12
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a13      	ldr	r2, [pc, #76]	; (80083e8 <TIM_OC4_SetConfig+0xa8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d003      	beq.n	80083a8 <TIM_OC4_SetConfig+0x68>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a12      	ldr	r2, [pc, #72]	; (80083ec <TIM_OC4_SetConfig+0xac>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d109      	bne.n	80083bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	019b      	lsls	r3, r3, #6
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	621a      	str	r2, [r3, #32]
}
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	feff8fff 	.word	0xfeff8fff
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40010400 	.word	0x40010400

080083f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4b1b      	ldr	r3, [pc, #108]	; (8008488 <TIM_OC5_SetConfig+0x98>)
 800841c:	4013      	ands	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	041b      	lsls	r3, r3, #16
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a12      	ldr	r2, [pc, #72]	; (800848c <TIM_OC5_SetConfig+0x9c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d003      	beq.n	800844e <TIM_OC5_SetConfig+0x5e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a11      	ldr	r2, [pc, #68]	; (8008490 <TIM_OC5_SetConfig+0xa0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d109      	bne.n	8008462 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008454:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	621a      	str	r2, [r3, #32]
}
 800847c:	bf00      	nop
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	fffeff8f 	.word	0xfffeff8f
 800848c:	40010000 	.word	0x40010000
 8008490:	40010400 	.word	0x40010400

08008494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	4b1c      	ldr	r3, [pc, #112]	; (8008530 <TIM_OC6_SetConfig+0x9c>)
 80084c0:	4013      	ands	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	021b      	lsls	r3, r3, #8
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	051b      	lsls	r3, r3, #20
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a13      	ldr	r2, [pc, #76]	; (8008534 <TIM_OC6_SetConfig+0xa0>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d003      	beq.n	80084f4 <TIM_OC6_SetConfig+0x60>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a12      	ldr	r2, [pc, #72]	; (8008538 <TIM_OC6_SetConfig+0xa4>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d109      	bne.n	8008508 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	029b      	lsls	r3, r3, #10
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	4313      	orrs	r3, r2
 8008506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	feff8fff 	.word	0xfeff8fff
 8008534:	40010000 	.word	0x40010000
 8008538:	40010400 	.word	0x40010400

0800853c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	f023 0201 	bic.w	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f023 030a 	bic.w	r3, r3, #10
 8008578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	4313      	orrs	r3, r2
 8008580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	621a      	str	r2, [r3, #32]
}
 800858e:	bf00      	nop
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800859a:	b480      	push	{r7}
 800859c:	b087      	sub	sp, #28
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	f023 0210 	bic.w	r2, r3, #16
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	031b      	lsls	r3, r3, #12
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	4313      	orrs	r3, r2
 80085e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	621a      	str	r2, [r3, #32]
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4313      	orrs	r3, r2
 8008618:	f043 0307 	orr.w	r3, r3, #7
 800861c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	609a      	str	r2, [r3, #8]
}
 8008624:	bf00      	nop
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800864a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	021a      	lsls	r2, r3, #8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	431a      	orrs	r2, r3
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	4313      	orrs	r3, r2
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	609a      	str	r2, [r3, #8]
}
 8008664:	bf00      	nop
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	2201      	movs	r2, #1
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1a      	ldr	r2, [r3, #32]
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	43db      	mvns	r3, r3
 8008692:	401a      	ands	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a1a      	ldr	r2, [r3, #32]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f003 031f 	and.w	r3, r3, #31
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	fa01 f303 	lsl.w	r3, r1, r3
 80086a8:	431a      	orrs	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	621a      	str	r2, [r3, #32]
}
 80086ae:	bf00      	nop
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
	...

080086bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d101      	bne.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086d0:	2302      	movs	r3, #2
 80086d2:	e06d      	b.n	80087b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2202      	movs	r2, #2
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a30      	ldr	r2, [pc, #192]	; (80087bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d004      	beq.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a2f      	ldr	r2, [pc, #188]	; (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d108      	bne.n	800871a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800870e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008720:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a20      	ldr	r2, [pc, #128]	; (80087bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d022      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008746:	d01d      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d018      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a1c      	ldr	r2, [pc, #112]	; (80087c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d013      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a1a      	ldr	r2, [pc, #104]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d00e      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a15      	ldr	r2, [pc, #84]	; (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a16      	ldr	r2, [pc, #88]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a15      	ldr	r2, [pc, #84]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d10c      	bne.n	800879e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	4313      	orrs	r3, r2
 8008794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	40010000 	.word	0x40010000
 80087c0:	40010400 	.word	0x40010400
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40000c00 	.word	0x40000c00
 80087d0:	40014000 	.word	0x40014000
 80087d4:	40001800 	.word	0x40001800

080087d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e040      	b.n	80088a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fb faac 	bl	8003d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2224      	movs	r2, #36	; 0x24
 8008840:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 0201 	bic.w	r2, r2, #1
 8008850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fc66 	bl	8009124 <UART_SetConfig>
 8008858:	4603      	mov	r3, r0
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e022      	b.n	80088a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 febe 	bl	80095ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800887e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689a      	ldr	r2, [r3, #8]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800888e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 ff45 	bl	8009730 <UART_CheckIdleState>
 80088a6:	4603      	mov	r3, r0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08a      	sub	sp, #40	; 0x28
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	603b      	str	r3, [r7, #0]
 80088bc:	4613      	mov	r3, r2
 80088be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d171      	bne.n	80089ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <HAL_UART_Transmit+0x24>
 80088ce:	88fb      	ldrh	r3, [r7, #6]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e06a      	b.n	80089ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2221      	movs	r2, #33	; 0x21
 80088e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088e6:	f7fb fd7f 	bl	80043e8 <HAL_GetTick>
 80088ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	88fa      	ldrh	r2, [r7, #6]
 80088f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	88fa      	ldrh	r2, [r7, #6]
 80088f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008904:	d108      	bne.n	8008918 <HAL_UART_Transmit+0x68>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	61bb      	str	r3, [r7, #24]
 8008916:	e003      	b.n	8008920 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800891c:	2300      	movs	r3, #0
 800891e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008920:	e02c      	b.n	800897c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2200      	movs	r2, #0
 800892a:	2180      	movs	r1, #128	; 0x80
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 ff36 	bl	800979e <UART_WaitOnFlagUntilTimeout>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e038      	b.n	80089ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10b      	bne.n	800895a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008950:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	3302      	adds	r3, #2
 8008956:	61bb      	str	r3, [r7, #24]
 8008958:	e007      	b.n	800896a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	781a      	ldrb	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	3301      	adds	r3, #1
 8008968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	b29a      	uxth	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008982:	b29b      	uxth	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1cc      	bne.n	8008922 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2200      	movs	r2, #0
 8008990:	2140      	movs	r1, #64	; 0x40
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 ff03 	bl	800979e <UART_WaitOnFlagUntilTimeout>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e005      	b.n	80089ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2220      	movs	r2, #32
 80089a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	e000      	b.n	80089ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80089ac:	2302      	movs	r3, #2
  }
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b08a      	sub	sp, #40	; 0x28
 80089ba:	af02      	add	r7, sp, #8
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	603b      	str	r3, [r7, #0]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	f040 80b1 	bne.w	8008b34 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <HAL_UART_Receive+0x28>
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e0a9      	b.n	8008b36 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2222      	movs	r2, #34	; 0x22
 80089ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089f8:	f7fb fcf6 	bl	80043e8 <HAL_GetTick>
 80089fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	88fa      	ldrh	r2, [r7, #6]
 8008a02:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	88fa      	ldrh	r2, [r7, #6]
 8008a0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a16:	d10e      	bne.n	8008a36 <HAL_UART_Receive+0x80>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d105      	bne.n	8008a2c <HAL_UART_Receive+0x76>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a2a:	e02d      	b.n	8008a88 <HAL_UART_Receive+0xd2>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	22ff      	movs	r2, #255	; 0xff
 8008a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a34:	e028      	b.n	8008a88 <HAL_UART_Receive+0xd2>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10d      	bne.n	8008a5a <HAL_UART_Receive+0xa4>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d104      	bne.n	8008a50 <HAL_UART_Receive+0x9a>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	22ff      	movs	r2, #255	; 0xff
 8008a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a4e:	e01b      	b.n	8008a88 <HAL_UART_Receive+0xd2>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	227f      	movs	r2, #127	; 0x7f
 8008a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a58:	e016      	b.n	8008a88 <HAL_UART_Receive+0xd2>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a62:	d10d      	bne.n	8008a80 <HAL_UART_Receive+0xca>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d104      	bne.n	8008a76 <HAL_UART_Receive+0xc0>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	227f      	movs	r2, #127	; 0x7f
 8008a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a74:	e008      	b.n	8008a88 <HAL_UART_Receive+0xd2>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	223f      	movs	r2, #63	; 0x3f
 8008a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a7e:	e003      	b.n	8008a88 <HAL_UART_Receive+0xd2>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a8e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a98:	d108      	bne.n	8008aac <HAL_UART_Receive+0xf6>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d104      	bne.n	8008aac <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e003      	b.n	8008ab4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008ab4:	e032      	b.n	8008b1c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2200      	movs	r2, #0
 8008abe:	2120      	movs	r1, #32
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 fe6c 	bl	800979e <UART_WaitOnFlagUntilTimeout>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e032      	b.n	8008b36 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10c      	bne.n	8008af0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	8a7b      	ldrh	r3, [r7, #18]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	3302      	adds	r3, #2
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	e00c      	b.n	8008b0a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	8a7b      	ldrh	r3, [r7, #18]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	4013      	ands	r3, r2
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	3301      	adds	r3, #1
 8008b08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1c6      	bne.n	8008ab6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	e000      	b.n	8008b36 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8008b34:	2302      	movs	r3, #2
  }
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3720      	adds	r7, #32
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b0ba      	sub	sp, #232	; 0xe8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008b6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b6e:	4013      	ands	r3, r2
 8008b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d115      	bne.n	8008ba8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00f      	beq.n	8008ba8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b8c:	f003 0320 	and.w	r3, r3, #32
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d009      	beq.n	8008ba8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 8297 	beq.w	80090cc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	4798      	blx	r3
      }
      return;
 8008ba6:	e291      	b.n	80090cc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 8117 	beq.w	8008de0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d106      	bne.n	8008bcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008bbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008bc2:	4b85      	ldr	r3, [pc, #532]	; (8008dd8 <HAL_UART_IRQHandler+0x298>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 810a 	beq.w	8008de0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d011      	beq.n	8008bfc <HAL_UART_IRQHandler+0xbc>
 8008bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2201      	movs	r2, #1
 8008bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bf2:	f043 0201 	orr.w	r2, r3, #1
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d011      	beq.n	8008c2c <HAL_UART_IRQHandler+0xec>
 8008c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00b      	beq.n	8008c2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c22:	f043 0204 	orr.w	r2, r3, #4
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c30:	f003 0304 	and.w	r3, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d011      	beq.n	8008c5c <HAL_UART_IRQHandler+0x11c>
 8008c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2204      	movs	r2, #4
 8008c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c52:	f043 0202 	orr.w	r2, r3, #2
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d017      	beq.n	8008c98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d105      	bne.n	8008c80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2208      	movs	r2, #8
 8008c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c8e:	f043 0208 	orr.w	r2, r3, #8
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d012      	beq.n	8008cca <HAL_UART_IRQHandler+0x18a>
 8008ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00c      	beq.n	8008cca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cc0:	f043 0220 	orr.w	r2, r3, #32
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 81fd 	beq.w	80090d0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00d      	beq.n	8008cfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d007      	beq.n	8008cfe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d005      	beq.n	8008d22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d04f      	beq.n	8008dc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fe01 	bl	800992a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d32:	2b40      	cmp	r3, #64	; 0x40
 8008d34:	d141      	bne.n	8008dba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1d9      	bne.n	8008d36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d013      	beq.n	8008db2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d8e:	4a13      	ldr	r2, [pc, #76]	; (8008ddc <HAL_UART_IRQHandler+0x29c>)
 8008d90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fb fdc2 	bl	8004920 <HAL_DMA_Abort_IT>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d017      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008dac:	4610      	mov	r0, r2
 8008dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db0:	e00f      	b.n	8008dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f9a0 	bl	80090f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db8:	e00b      	b.n	8008dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f99c 	bl	80090f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc0:	e007      	b.n	8008dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f998 	bl	80090f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008dd0:	e17e      	b.n	80090d0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd2:	bf00      	nop
    return;
 8008dd4:	e17c      	b.n	80090d0 <HAL_UART_IRQHandler+0x590>
 8008dd6:	bf00      	nop
 8008dd8:	04000120 	.word	0x04000120
 8008ddc:	080099f3 	.word	0x080099f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	f040 814c 	bne.w	8009082 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dee:	f003 0310 	and.w	r3, r3, #16
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 8145 	beq.w	8009082 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 813e 	beq.w	8009082 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2210      	movs	r2, #16
 8008e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e18:	2b40      	cmp	r3, #64	; 0x40
 8008e1a:	f040 80b6 	bne.w	8008f8a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 8150 	beq.w	80090d4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	f080 8148 	bcs.w	80090d4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e58:	f000 8086 	beq.w	8008f68 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1da      	bne.n	8008e5c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008eca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e1      	bne.n	8008ea6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e3      	bne.n	8008ee2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f38:	f023 0310 	bic.w	r3, r3, #16
 8008f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e4      	bne.n	8008f28 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fb fc6c 	bl	8004840 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f8c2 	bl	800910c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f88:	e0a4      	b.n	80090d4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 8096 	beq.w	80090d8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 8091 	beq.w	80090d8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	e853 3f00 	ldrex	r3, [r3]
 8008fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8008fda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e4      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	623b      	str	r3, [r7, #32]
   return(result);
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	f023 0301 	bic.w	r3, r3, #1
 8009002:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009010:	633a      	str	r2, [r7, #48]	; 0x30
 8009012:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e3      	bne.n	8008fec <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2220      	movs	r2, #32
 8009028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	60fb      	str	r3, [r7, #12]
   return(result);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f023 0310 	bic.w	r3, r3, #16
 800904c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	69b9      	ldr	r1, [r7, #24]
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	e841 2300 	strex	r3, r2, [r1]
 8009066:	617b      	str	r3, [r7, #20]
   return(result);
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e4      	bne.n	8009038 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2202      	movs	r2, #2
 8009072:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f846 	bl	800910c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009080:	e02a      	b.n	80090d8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00e      	beq.n	80090ac <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800908e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009096:	2b00      	cmp	r3, #0
 8009098:	d008      	beq.n	80090ac <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01c      	beq.n	80090dc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	4798      	blx	r3
    }
    return;
 80090aa:	e017      	b.n	80090dc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d012      	beq.n	80090de <HAL_UART_IRQHandler+0x59e>
 80090b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00c      	beq.n	80090de <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fcaa 	bl	8009a1e <UART_EndTransmit_IT>
    return;
 80090ca:	e008      	b.n	80090de <HAL_UART_IRQHandler+0x59e>
      return;
 80090cc:	bf00      	nop
 80090ce:	e006      	b.n	80090de <HAL_UART_IRQHandler+0x59e>
    return;
 80090d0:	bf00      	nop
 80090d2:	e004      	b.n	80090de <HAL_UART_IRQHandler+0x59e>
      return;
 80090d4:	bf00      	nop
 80090d6:	e002      	b.n	80090de <HAL_UART_IRQHandler+0x59e>
      return;
 80090d8:	bf00      	nop
 80090da:	e000      	b.n	80090de <HAL_UART_IRQHandler+0x59e>
    return;
 80090dc:	bf00      	nop
  }

}
 80090de:	37e8      	adds	r7, #232	; 0xe8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	431a      	orrs	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	4313      	orrs	r3, r2
 8009146:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4ba6      	ldr	r3, [pc, #664]	; (80093e8 <UART_SetConfig+0x2c4>)
 8009150:	4013      	ands	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6812      	ldr	r2, [r2, #0]
 8009156:	6979      	ldr	r1, [r7, #20]
 8009158:	430b      	orrs	r3, r1
 800915a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4313      	orrs	r3, r2
 8009180:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	430a      	orrs	r2, r1
 8009194:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a94      	ldr	r2, [pc, #592]	; (80093ec <UART_SetConfig+0x2c8>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d120      	bne.n	80091e2 <UART_SetConfig+0xbe>
 80091a0:	4b93      	ldr	r3, [pc, #588]	; (80093f0 <UART_SetConfig+0x2cc>)
 80091a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d816      	bhi.n	80091dc <UART_SetConfig+0xb8>
 80091ae:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <UART_SetConfig+0x90>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091c5 	.word	0x080091c5
 80091b8:	080091d1 	.word	0x080091d1
 80091bc:	080091cb 	.word	0x080091cb
 80091c0:	080091d7 	.word	0x080091d7
 80091c4:	2301      	movs	r3, #1
 80091c6:	77fb      	strb	r3, [r7, #31]
 80091c8:	e150      	b.n	800946c <UART_SetConfig+0x348>
 80091ca:	2302      	movs	r3, #2
 80091cc:	77fb      	strb	r3, [r7, #31]
 80091ce:	e14d      	b.n	800946c <UART_SetConfig+0x348>
 80091d0:	2304      	movs	r3, #4
 80091d2:	77fb      	strb	r3, [r7, #31]
 80091d4:	e14a      	b.n	800946c <UART_SetConfig+0x348>
 80091d6:	2308      	movs	r3, #8
 80091d8:	77fb      	strb	r3, [r7, #31]
 80091da:	e147      	b.n	800946c <UART_SetConfig+0x348>
 80091dc:	2310      	movs	r3, #16
 80091de:	77fb      	strb	r3, [r7, #31]
 80091e0:	e144      	b.n	800946c <UART_SetConfig+0x348>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a83      	ldr	r2, [pc, #524]	; (80093f4 <UART_SetConfig+0x2d0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d132      	bne.n	8009252 <UART_SetConfig+0x12e>
 80091ec:	4b80      	ldr	r3, [pc, #512]	; (80093f0 <UART_SetConfig+0x2cc>)
 80091ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f2:	f003 030c 	and.w	r3, r3, #12
 80091f6:	2b0c      	cmp	r3, #12
 80091f8:	d828      	bhi.n	800924c <UART_SetConfig+0x128>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <UART_SetConfig+0xdc>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009235 	.word	0x08009235
 8009204:	0800924d 	.word	0x0800924d
 8009208:	0800924d 	.word	0x0800924d
 800920c:	0800924d 	.word	0x0800924d
 8009210:	08009241 	.word	0x08009241
 8009214:	0800924d 	.word	0x0800924d
 8009218:	0800924d 	.word	0x0800924d
 800921c:	0800924d 	.word	0x0800924d
 8009220:	0800923b 	.word	0x0800923b
 8009224:	0800924d 	.word	0x0800924d
 8009228:	0800924d 	.word	0x0800924d
 800922c:	0800924d 	.word	0x0800924d
 8009230:	08009247 	.word	0x08009247
 8009234:	2300      	movs	r3, #0
 8009236:	77fb      	strb	r3, [r7, #31]
 8009238:	e118      	b.n	800946c <UART_SetConfig+0x348>
 800923a:	2302      	movs	r3, #2
 800923c:	77fb      	strb	r3, [r7, #31]
 800923e:	e115      	b.n	800946c <UART_SetConfig+0x348>
 8009240:	2304      	movs	r3, #4
 8009242:	77fb      	strb	r3, [r7, #31]
 8009244:	e112      	b.n	800946c <UART_SetConfig+0x348>
 8009246:	2308      	movs	r3, #8
 8009248:	77fb      	strb	r3, [r7, #31]
 800924a:	e10f      	b.n	800946c <UART_SetConfig+0x348>
 800924c:	2310      	movs	r3, #16
 800924e:	77fb      	strb	r3, [r7, #31]
 8009250:	e10c      	b.n	800946c <UART_SetConfig+0x348>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a68      	ldr	r2, [pc, #416]	; (80093f8 <UART_SetConfig+0x2d4>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d120      	bne.n	800929e <UART_SetConfig+0x17a>
 800925c:	4b64      	ldr	r3, [pc, #400]	; (80093f0 <UART_SetConfig+0x2cc>)
 800925e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009266:	2b30      	cmp	r3, #48	; 0x30
 8009268:	d013      	beq.n	8009292 <UART_SetConfig+0x16e>
 800926a:	2b30      	cmp	r3, #48	; 0x30
 800926c:	d814      	bhi.n	8009298 <UART_SetConfig+0x174>
 800926e:	2b20      	cmp	r3, #32
 8009270:	d009      	beq.n	8009286 <UART_SetConfig+0x162>
 8009272:	2b20      	cmp	r3, #32
 8009274:	d810      	bhi.n	8009298 <UART_SetConfig+0x174>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <UART_SetConfig+0x15c>
 800927a:	2b10      	cmp	r3, #16
 800927c:	d006      	beq.n	800928c <UART_SetConfig+0x168>
 800927e:	e00b      	b.n	8009298 <UART_SetConfig+0x174>
 8009280:	2300      	movs	r3, #0
 8009282:	77fb      	strb	r3, [r7, #31]
 8009284:	e0f2      	b.n	800946c <UART_SetConfig+0x348>
 8009286:	2302      	movs	r3, #2
 8009288:	77fb      	strb	r3, [r7, #31]
 800928a:	e0ef      	b.n	800946c <UART_SetConfig+0x348>
 800928c:	2304      	movs	r3, #4
 800928e:	77fb      	strb	r3, [r7, #31]
 8009290:	e0ec      	b.n	800946c <UART_SetConfig+0x348>
 8009292:	2308      	movs	r3, #8
 8009294:	77fb      	strb	r3, [r7, #31]
 8009296:	e0e9      	b.n	800946c <UART_SetConfig+0x348>
 8009298:	2310      	movs	r3, #16
 800929a:	77fb      	strb	r3, [r7, #31]
 800929c:	e0e6      	b.n	800946c <UART_SetConfig+0x348>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a56      	ldr	r2, [pc, #344]	; (80093fc <UART_SetConfig+0x2d8>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d120      	bne.n	80092ea <UART_SetConfig+0x1c6>
 80092a8:	4b51      	ldr	r3, [pc, #324]	; (80093f0 <UART_SetConfig+0x2cc>)
 80092aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80092b2:	2bc0      	cmp	r3, #192	; 0xc0
 80092b4:	d013      	beq.n	80092de <UART_SetConfig+0x1ba>
 80092b6:	2bc0      	cmp	r3, #192	; 0xc0
 80092b8:	d814      	bhi.n	80092e4 <UART_SetConfig+0x1c0>
 80092ba:	2b80      	cmp	r3, #128	; 0x80
 80092bc:	d009      	beq.n	80092d2 <UART_SetConfig+0x1ae>
 80092be:	2b80      	cmp	r3, #128	; 0x80
 80092c0:	d810      	bhi.n	80092e4 <UART_SetConfig+0x1c0>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <UART_SetConfig+0x1a8>
 80092c6:	2b40      	cmp	r3, #64	; 0x40
 80092c8:	d006      	beq.n	80092d8 <UART_SetConfig+0x1b4>
 80092ca:	e00b      	b.n	80092e4 <UART_SetConfig+0x1c0>
 80092cc:	2300      	movs	r3, #0
 80092ce:	77fb      	strb	r3, [r7, #31]
 80092d0:	e0cc      	b.n	800946c <UART_SetConfig+0x348>
 80092d2:	2302      	movs	r3, #2
 80092d4:	77fb      	strb	r3, [r7, #31]
 80092d6:	e0c9      	b.n	800946c <UART_SetConfig+0x348>
 80092d8:	2304      	movs	r3, #4
 80092da:	77fb      	strb	r3, [r7, #31]
 80092dc:	e0c6      	b.n	800946c <UART_SetConfig+0x348>
 80092de:	2308      	movs	r3, #8
 80092e0:	77fb      	strb	r3, [r7, #31]
 80092e2:	e0c3      	b.n	800946c <UART_SetConfig+0x348>
 80092e4:	2310      	movs	r3, #16
 80092e6:	77fb      	strb	r3, [r7, #31]
 80092e8:	e0c0      	b.n	800946c <UART_SetConfig+0x348>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a44      	ldr	r2, [pc, #272]	; (8009400 <UART_SetConfig+0x2dc>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d125      	bne.n	8009340 <UART_SetConfig+0x21c>
 80092f4:	4b3e      	ldr	r3, [pc, #248]	; (80093f0 <UART_SetConfig+0x2cc>)
 80092f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009302:	d017      	beq.n	8009334 <UART_SetConfig+0x210>
 8009304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009308:	d817      	bhi.n	800933a <UART_SetConfig+0x216>
 800930a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800930e:	d00b      	beq.n	8009328 <UART_SetConfig+0x204>
 8009310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009314:	d811      	bhi.n	800933a <UART_SetConfig+0x216>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <UART_SetConfig+0x1fe>
 800931a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800931e:	d006      	beq.n	800932e <UART_SetConfig+0x20a>
 8009320:	e00b      	b.n	800933a <UART_SetConfig+0x216>
 8009322:	2300      	movs	r3, #0
 8009324:	77fb      	strb	r3, [r7, #31]
 8009326:	e0a1      	b.n	800946c <UART_SetConfig+0x348>
 8009328:	2302      	movs	r3, #2
 800932a:	77fb      	strb	r3, [r7, #31]
 800932c:	e09e      	b.n	800946c <UART_SetConfig+0x348>
 800932e:	2304      	movs	r3, #4
 8009330:	77fb      	strb	r3, [r7, #31]
 8009332:	e09b      	b.n	800946c <UART_SetConfig+0x348>
 8009334:	2308      	movs	r3, #8
 8009336:	77fb      	strb	r3, [r7, #31]
 8009338:	e098      	b.n	800946c <UART_SetConfig+0x348>
 800933a:	2310      	movs	r3, #16
 800933c:	77fb      	strb	r3, [r7, #31]
 800933e:	e095      	b.n	800946c <UART_SetConfig+0x348>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a2f      	ldr	r2, [pc, #188]	; (8009404 <UART_SetConfig+0x2e0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d125      	bne.n	8009396 <UART_SetConfig+0x272>
 800934a:	4b29      	ldr	r3, [pc, #164]	; (80093f0 <UART_SetConfig+0x2cc>)
 800934c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009358:	d017      	beq.n	800938a <UART_SetConfig+0x266>
 800935a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800935e:	d817      	bhi.n	8009390 <UART_SetConfig+0x26c>
 8009360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009364:	d00b      	beq.n	800937e <UART_SetConfig+0x25a>
 8009366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800936a:	d811      	bhi.n	8009390 <UART_SetConfig+0x26c>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <UART_SetConfig+0x254>
 8009370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009374:	d006      	beq.n	8009384 <UART_SetConfig+0x260>
 8009376:	e00b      	b.n	8009390 <UART_SetConfig+0x26c>
 8009378:	2301      	movs	r3, #1
 800937a:	77fb      	strb	r3, [r7, #31]
 800937c:	e076      	b.n	800946c <UART_SetConfig+0x348>
 800937e:	2302      	movs	r3, #2
 8009380:	77fb      	strb	r3, [r7, #31]
 8009382:	e073      	b.n	800946c <UART_SetConfig+0x348>
 8009384:	2304      	movs	r3, #4
 8009386:	77fb      	strb	r3, [r7, #31]
 8009388:	e070      	b.n	800946c <UART_SetConfig+0x348>
 800938a:	2308      	movs	r3, #8
 800938c:	77fb      	strb	r3, [r7, #31]
 800938e:	e06d      	b.n	800946c <UART_SetConfig+0x348>
 8009390:	2310      	movs	r3, #16
 8009392:	77fb      	strb	r3, [r7, #31]
 8009394:	e06a      	b.n	800946c <UART_SetConfig+0x348>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <UART_SetConfig+0x2e4>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d138      	bne.n	8009412 <UART_SetConfig+0x2ee>
 80093a0:	4b13      	ldr	r3, [pc, #76]	; (80093f0 <UART_SetConfig+0x2cc>)
 80093a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80093aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093ae:	d017      	beq.n	80093e0 <UART_SetConfig+0x2bc>
 80093b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093b4:	d82a      	bhi.n	800940c <UART_SetConfig+0x2e8>
 80093b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ba:	d00b      	beq.n	80093d4 <UART_SetConfig+0x2b0>
 80093bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093c0:	d824      	bhi.n	800940c <UART_SetConfig+0x2e8>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <UART_SetConfig+0x2aa>
 80093c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ca:	d006      	beq.n	80093da <UART_SetConfig+0x2b6>
 80093cc:	e01e      	b.n	800940c <UART_SetConfig+0x2e8>
 80093ce:	2300      	movs	r3, #0
 80093d0:	77fb      	strb	r3, [r7, #31]
 80093d2:	e04b      	b.n	800946c <UART_SetConfig+0x348>
 80093d4:	2302      	movs	r3, #2
 80093d6:	77fb      	strb	r3, [r7, #31]
 80093d8:	e048      	b.n	800946c <UART_SetConfig+0x348>
 80093da:	2304      	movs	r3, #4
 80093dc:	77fb      	strb	r3, [r7, #31]
 80093de:	e045      	b.n	800946c <UART_SetConfig+0x348>
 80093e0:	2308      	movs	r3, #8
 80093e2:	77fb      	strb	r3, [r7, #31]
 80093e4:	e042      	b.n	800946c <UART_SetConfig+0x348>
 80093e6:	bf00      	nop
 80093e8:	efff69f3 	.word	0xefff69f3
 80093ec:	40011000 	.word	0x40011000
 80093f0:	40023800 	.word	0x40023800
 80093f4:	40004400 	.word	0x40004400
 80093f8:	40004800 	.word	0x40004800
 80093fc:	40004c00 	.word	0x40004c00
 8009400:	40005000 	.word	0x40005000
 8009404:	40011400 	.word	0x40011400
 8009408:	40007800 	.word	0x40007800
 800940c:	2310      	movs	r3, #16
 800940e:	77fb      	strb	r3, [r7, #31]
 8009410:	e02c      	b.n	800946c <UART_SetConfig+0x348>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a72      	ldr	r2, [pc, #456]	; (80095e0 <UART_SetConfig+0x4bc>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d125      	bne.n	8009468 <UART_SetConfig+0x344>
 800941c:	4b71      	ldr	r3, [pc, #452]	; (80095e4 <UART_SetConfig+0x4c0>)
 800941e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009422:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009426:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800942a:	d017      	beq.n	800945c <UART_SetConfig+0x338>
 800942c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009430:	d817      	bhi.n	8009462 <UART_SetConfig+0x33e>
 8009432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009436:	d00b      	beq.n	8009450 <UART_SetConfig+0x32c>
 8009438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943c:	d811      	bhi.n	8009462 <UART_SetConfig+0x33e>
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <UART_SetConfig+0x326>
 8009442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009446:	d006      	beq.n	8009456 <UART_SetConfig+0x332>
 8009448:	e00b      	b.n	8009462 <UART_SetConfig+0x33e>
 800944a:	2300      	movs	r3, #0
 800944c:	77fb      	strb	r3, [r7, #31]
 800944e:	e00d      	b.n	800946c <UART_SetConfig+0x348>
 8009450:	2302      	movs	r3, #2
 8009452:	77fb      	strb	r3, [r7, #31]
 8009454:	e00a      	b.n	800946c <UART_SetConfig+0x348>
 8009456:	2304      	movs	r3, #4
 8009458:	77fb      	strb	r3, [r7, #31]
 800945a:	e007      	b.n	800946c <UART_SetConfig+0x348>
 800945c:	2308      	movs	r3, #8
 800945e:	77fb      	strb	r3, [r7, #31]
 8009460:	e004      	b.n	800946c <UART_SetConfig+0x348>
 8009462:	2310      	movs	r3, #16
 8009464:	77fb      	strb	r3, [r7, #31]
 8009466:	e001      	b.n	800946c <UART_SetConfig+0x348>
 8009468:	2310      	movs	r3, #16
 800946a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009474:	d15b      	bne.n	800952e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009476:	7ffb      	ldrb	r3, [r7, #31]
 8009478:	2b08      	cmp	r3, #8
 800947a:	d828      	bhi.n	80094ce <UART_SetConfig+0x3aa>
 800947c:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <UART_SetConfig+0x360>)
 800947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009482:	bf00      	nop
 8009484:	080094a9 	.word	0x080094a9
 8009488:	080094b1 	.word	0x080094b1
 800948c:	080094b9 	.word	0x080094b9
 8009490:	080094cf 	.word	0x080094cf
 8009494:	080094bf 	.word	0x080094bf
 8009498:	080094cf 	.word	0x080094cf
 800949c:	080094cf 	.word	0x080094cf
 80094a0:	080094cf 	.word	0x080094cf
 80094a4:	080094c7 	.word	0x080094c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094a8:	f7fd fc50 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 80094ac:	61b8      	str	r0, [r7, #24]
        break;
 80094ae:	e013      	b.n	80094d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094b0:	f7fd fc60 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 80094b4:	61b8      	str	r0, [r7, #24]
        break;
 80094b6:	e00f      	b.n	80094d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094b8:	4b4b      	ldr	r3, [pc, #300]	; (80095e8 <UART_SetConfig+0x4c4>)
 80094ba:	61bb      	str	r3, [r7, #24]
        break;
 80094bc:	e00c      	b.n	80094d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094be:	f7fd fb33 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 80094c2:	61b8      	str	r0, [r7, #24]
        break;
 80094c4:	e008      	b.n	80094d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ca:	61bb      	str	r3, [r7, #24]
        break;
 80094cc:	e004      	b.n	80094d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	77bb      	strb	r3, [r7, #30]
        break;
 80094d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d074      	beq.n	80095c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	005a      	lsls	r2, r3, #1
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	085b      	lsrs	r3, r3, #1
 80094e8:	441a      	add	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	2b0f      	cmp	r3, #15
 80094f8:	d916      	bls.n	8009528 <UART_SetConfig+0x404>
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009500:	d212      	bcs.n	8009528 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	b29b      	uxth	r3, r3
 8009506:	f023 030f 	bic.w	r3, r3, #15
 800950a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	b29b      	uxth	r3, r3
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	b29a      	uxth	r2, r3
 8009518:	89fb      	ldrh	r3, [r7, #14]
 800951a:	4313      	orrs	r3, r2
 800951c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	89fa      	ldrh	r2, [r7, #14]
 8009524:	60da      	str	r2, [r3, #12]
 8009526:	e04f      	b.n	80095c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	77bb      	strb	r3, [r7, #30]
 800952c:	e04c      	b.n	80095c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800952e:	7ffb      	ldrb	r3, [r7, #31]
 8009530:	2b08      	cmp	r3, #8
 8009532:	d828      	bhi.n	8009586 <UART_SetConfig+0x462>
 8009534:	a201      	add	r2, pc, #4	; (adr r2, 800953c <UART_SetConfig+0x418>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	08009561 	.word	0x08009561
 8009540:	08009569 	.word	0x08009569
 8009544:	08009571 	.word	0x08009571
 8009548:	08009587 	.word	0x08009587
 800954c:	08009577 	.word	0x08009577
 8009550:	08009587 	.word	0x08009587
 8009554:	08009587 	.word	0x08009587
 8009558:	08009587 	.word	0x08009587
 800955c:	0800957f 	.word	0x0800957f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009560:	f7fd fbf4 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 8009564:	61b8      	str	r0, [r7, #24]
        break;
 8009566:	e013      	b.n	8009590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009568:	f7fd fc04 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 800956c:	61b8      	str	r0, [r7, #24]
        break;
 800956e:	e00f      	b.n	8009590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009570:	4b1d      	ldr	r3, [pc, #116]	; (80095e8 <UART_SetConfig+0x4c4>)
 8009572:	61bb      	str	r3, [r7, #24]
        break;
 8009574:	e00c      	b.n	8009590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009576:	f7fd fad7 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 800957a:	61b8      	str	r0, [r7, #24]
        break;
 800957c:	e008      	b.n	8009590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800957e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009582:	61bb      	str	r3, [r7, #24]
        break;
 8009584:	e004      	b.n	8009590 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	77bb      	strb	r3, [r7, #30]
        break;
 800958e:	bf00      	nop
    }

    if (pclk != 0U)
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d018      	beq.n	80095c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	085a      	lsrs	r2, r3, #1
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	441a      	add	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b0f      	cmp	r3, #15
 80095ae:	d909      	bls.n	80095c4 <UART_SetConfig+0x4a0>
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095b6:	d205      	bcs.n	80095c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60da      	str	r2, [r3, #12]
 80095c2:	e001      	b.n	80095c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80095d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	40007c00 	.word	0x40007c00
 80095e4:	40023800 	.word	0x40023800
 80095e8:	00f42400 	.word	0x00f42400

080095ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00a      	beq.n	8009616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	430a      	orrs	r2, r1
 8009636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00a      	beq.n	800965a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	f003 0308 	and.w	r3, r3, #8
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	430a      	orrs	r2, r1
 800967a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	f003 0310 	and.w	r3, r3, #16
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00a      	beq.n	800969e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d01a      	beq.n	8009702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ea:	d10a      	bne.n	8009702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	430a      	orrs	r2, r1
 8009700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00a      	beq.n	8009724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	605a      	str	r2, [r3, #4]
  }
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af02      	add	r7, sp, #8
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009740:	f7fa fe52 	bl	80043e8 <HAL_GetTick>
 8009744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	2b08      	cmp	r3, #8
 8009752:	d10e      	bne.n	8009772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f81b 	bl	800979e <UART_WaitOnFlagUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e011      	b.n	8009796 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2220      	movs	r2, #32
 8009776:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b09c      	sub	sp, #112	; 0x70
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	603b      	str	r3, [r7, #0]
 80097aa:	4613      	mov	r3, r2
 80097ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097ae:	e0a7      	b.n	8009900 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b6:	f000 80a3 	beq.w	8009900 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ba:	f7fa fe15 	bl	80043e8 <HAL_GetTick>
 80097be:	4602      	mov	r2, r0
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d302      	bcc.n	80097d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80097ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d13f      	bne.n	8009850 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097e4:	667b      	str	r3, [r7, #100]	; 0x64
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80097fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e6      	bne.n	80097d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3308      	adds	r3, #8
 8009808:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	f023 0301 	bic.w	r3, r3, #1
 8009818:	663b      	str	r3, [r7, #96]	; 0x60
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3308      	adds	r3, #8
 8009820:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009822:	64ba      	str	r2, [r7, #72]	; 0x48
 8009824:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e5      	bne.n	8009802 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2220      	movs	r2, #32
 800983a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2220      	movs	r2, #32
 8009840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e068      	b.n	8009922 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0304 	and.w	r3, r3, #4
 800985a:	2b00      	cmp	r3, #0
 800985c:	d050      	beq.n	8009900 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800986c:	d148      	bne.n	8009900 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009876:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800988c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009896:	637b      	str	r3, [r7, #52]	; 0x34
 8009898:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800989c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e6      	bne.n	8009878 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3308      	adds	r3, #8
 80098b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	613b      	str	r3, [r7, #16]
   return(result);
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f023 0301 	bic.w	r3, r3, #1
 80098c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3308      	adds	r3, #8
 80098c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80098ca:	623a      	str	r2, [r7, #32]
 80098cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ce:	69f9      	ldr	r1, [r7, #28]
 80098d0:	6a3a      	ldr	r2, [r7, #32]
 80098d2:	e841 2300 	strex	r3, r2, [r1]
 80098d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1e5      	bne.n	80098aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2220      	movs	r2, #32
 80098e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e010      	b.n	8009922 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	69da      	ldr	r2, [r3, #28]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	4013      	ands	r3, r2
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	429a      	cmp	r2, r3
 800990e:	bf0c      	ite	eq
 8009910:	2301      	moveq	r3, #1
 8009912:	2300      	movne	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	461a      	mov	r2, r3
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	429a      	cmp	r2, r3
 800991c:	f43f af48 	beq.w	80097b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3770      	adds	r7, #112	; 0x70
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800992a:	b480      	push	{r7}
 800992c:	b095      	sub	sp, #84	; 0x54
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	461a      	mov	r2, r3
 800994e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009950:	643b      	str	r3, [r7, #64]	; 0x40
 8009952:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009958:	e841 2300 	strex	r3, r2, [r1]
 800995c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1e6      	bne.n	8009932 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3308      	adds	r3, #8
 800996a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	61fb      	str	r3, [r7, #28]
   return(result);
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	f023 0301 	bic.w	r3, r3, #1
 800997a:	64bb      	str	r3, [r7, #72]	; 0x48
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3308      	adds	r3, #8
 8009982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800998a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800998c:	e841 2300 	strex	r3, r2, [r1]
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e5      	bne.n	8009964 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800999c:	2b01      	cmp	r3, #1
 800999e:	d118      	bne.n	80099d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	f023 0310 	bic.w	r3, r3, #16
 80099b4:	647b      	str	r3, [r7, #68]	; 0x44
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099be:	61bb      	str	r3, [r7, #24]
 80099c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6979      	ldr	r1, [r7, #20]
 80099c4:	69ba      	ldr	r2, [r7, #24]
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	613b      	str	r3, [r7, #16]
   return(result);
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e6      	bne.n	80099a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80099e6:	bf00      	nop
 80099e8:	3754      	adds	r7, #84	; 0x54
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff fb71 	bl	80090f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a16:	bf00      	nop
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b088      	sub	sp, #32
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	e853 3f00 	ldrex	r3, [r3]
 8009a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a3a:	61fb      	str	r3, [r7, #28]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	61bb      	str	r3, [r7, #24]
 8009a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	6979      	ldr	r1, [r7, #20]
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	e841 2300 	strex	r3, r2, [r1]
 8009a50:	613b      	str	r3, [r7, #16]
   return(result);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e6      	bne.n	8009a26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff fb3d 	bl	80090e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a6a:	bf00      	nop
 8009a6c:	3720      	adds	r7, #32
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 fd28 	bl	800b4d8 <VL53L0X_get_offset_calibration_data_micro_meter>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	085b      	lsrs	r3, r3, #1
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	461a      	mov	r2, r3
 8009ab0:	218a      	movs	r1, #138	; 0x8a
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f004 ff46 	bl	800e944 <VL53L0X_WrByte>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8009abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009ac8:	b5b0      	push	{r4, r5, r7, lr}
 8009aca:	b096      	sub	sp, #88	; 0x58
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009ad6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d107      	bne.n	8009aee <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2188      	movs	r1, #136	; 0x88
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f004 ff2e 	bl	800e944 <VL53L0X_WrByte>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009afc:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b06:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a9e      	ldr	r2, [pc, #632]	; (8009d88 <VL53L0X_DataInit+0x2c0>)
 8009b0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a9d      	ldr	r2, [pc, #628]	; (8009d8c <VL53L0X_DataInit+0x2c4>)
 8009b16:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009b20:	f107 0310 	add.w	r3, r7, #16
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fac2 	bl	800a0b0 <VL53L0X_GetDeviceParameters>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8009b32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d112      	bne.n	8009b60 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f103 0410 	add.w	r4, r3, #16
 8009b48:	f107 0510 	add.w	r5, r7, #16
 8009b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2264      	movs	r2, #100	; 0x64
 8009b64:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009b6e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009b78:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009b82:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009b8e:	2201      	movs	r2, #1
 8009b90:	2180      	movs	r1, #128	; 0x80
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f004 fed6 	bl	800e944 <VL53L0X_WrByte>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	21ff      	movs	r1, #255	; 0xff
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f004 feca 	bl	800e944 <VL53L0X_WrByte>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f004 febe 	bl	800e944 <VL53L0X_WrByte>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009bd6:	f107 030f 	add.w	r3, r7, #15
 8009bda:	461a      	mov	r2, r3
 8009bdc:	2191      	movs	r1, #145	; 0x91
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f004 ff32 	bl	800ea48 <VL53L0X_RdByte>
 8009be4:	4603      	mov	r3, r0
 8009be6:	461a      	mov	r2, r3
 8009be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009bec:	4313      	orrs	r3, r2
 8009bee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009bf2:	7bfa      	ldrb	r2, [r7, #15]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f004 fea0 	bl	800e944 <VL53L0X_WrByte>
 8009c04:	4603      	mov	r3, r0
 8009c06:	461a      	mov	r2, r3
 8009c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009c12:	2200      	movs	r2, #0
 8009c14:	21ff      	movs	r1, #255	; 0xff
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f004 fe94 	bl	800e944 <VL53L0X_WrByte>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c24:	4313      	orrs	r3, r2
 8009c26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2180      	movs	r1, #128	; 0x80
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f004 fe88 	bl	800e944 <VL53L0X_WrByte>
 8009c34:	4603      	mov	r3, r0
 8009c36:	461a      	mov	r2, r3
 8009c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009c42:	2300      	movs	r3, #0
 8009c44:	653b      	str	r3, [r7, #80]	; 0x50
 8009c46:	e014      	b.n	8009c72 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8009c48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d114      	bne.n	8009c7a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8009c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	2201      	movs	r2, #1
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fd4d 	bl	800a6f8 <VL53L0X_SetLimitCheckEnable>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	461a      	mov	r2, r3
 8009c62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c66:	4313      	orrs	r3, r2
 8009c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c6e:	3301      	adds	r3, #1
 8009c70:	653b      	str	r3, [r7, #80]	; 0x50
 8009c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c74:	2b05      	cmp	r3, #5
 8009c76:	dde7      	ble.n	8009c48 <VL53L0X_DataInit+0x180>
 8009c78:	e000      	b.n	8009c7c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8009c7a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009c7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d107      	bne.n	8009c94 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009c84:	2200      	movs	r2, #0
 8009c86:	2102      	movs	r1, #2
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fd35 	bl	800a6f8 <VL53L0X_SetLimitCheckEnable>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009c94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d107      	bne.n	8009cac <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2103      	movs	r1, #3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fd29 	bl	800a6f8 <VL53L0X_SetLimitCheckEnable>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009cac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d107      	bne.n	8009cc4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2104      	movs	r1, #4
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fd1d 	bl	800a6f8 <VL53L0X_SetLimitCheckEnable>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009cc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d107      	bne.n	8009cdc <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2105      	movs	r1, #5
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fd11 	bl	800a6f8 <VL53L0X_SetLimitCheckEnable>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8009cdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d108      	bne.n	8009cf6 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009ce4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8009ce8:	2100      	movs	r1, #0
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fdb4 	bl	800a858 <VL53L0X_SetLimitCheckValue>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009cf6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d108      	bne.n	8009d10 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009d02:	2101      	movs	r1, #1
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fda7 	bl	800a858 <VL53L0X_SetLimitCheckValue>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d108      	bne.n	8009d2a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009d18:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8009d1c:	2102      	movs	r1, #2
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fd9a 	bl	800a858 <VL53L0X_SetLimitCheckValue>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d107      	bne.n	8009d42 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009d32:	2200      	movs	r2, #0
 8009d34:	2103      	movs	r1, #3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fd8e 	bl	800a858 <VL53L0X_SetLimitCheckValue>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d42:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10f      	bne.n	8009d6a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	22ff      	movs	r2, #255	; 0xff
 8009d4e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009d52:	22ff      	movs	r2, #255	; 0xff
 8009d54:	2101      	movs	r1, #1
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f004 fdf4 	bl	800e944 <VL53L0X_WrByte>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009d6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d103      	bne.n	8009d7a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8009d7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3758      	adds	r7, #88	; 0x58
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bdb0      	pop	{r4, r5, r7, pc}
 8009d86:	bf00      	nop
 8009d88:	00016b85 	.word	0x00016b85
 8009d8c:	000970a4 	.word	0x000970a4

08009d90 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009d90:	b5b0      	push	{r4, r5, r7, lr}
 8009d92:	b09e      	sub	sp, #120	; 0x78
 8009d94:	af02      	add	r7, sp, #8
 8009d96:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8009d9e:	f107 031c 	add.w	r3, r7, #28
 8009da2:	2240      	movs	r2, #64	; 0x40
 8009da4:	2100      	movs	r1, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f008 fb3c 	bl	8012424 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009dcc:	2101      	movs	r1, #1
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f002 fafc 	bl	800c3cc <VL53L0X_get_info_from_device>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009de0:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009de8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009dec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d80d      	bhi.n	8009e10 <VL53L0X_StaticInit+0x80>
 8009df4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d102      	bne.n	8009e02 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dfe:	2b20      	cmp	r3, #32
 8009e00:	d806      	bhi.n	8009e10 <VL53L0X_StaticInit+0x80>
 8009e02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10e      	bne.n	8009e28 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8009e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e0c:	2b0c      	cmp	r3, #12
 8009e0e:	d90b      	bls.n	8009e28 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009e10:	f107 0218 	add.w	r2, r7, #24
 8009e14:	f107 0314 	add.w	r3, r7, #20
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 fd58 	bl	800b8d0 <VL53L0X_perform_ref_spad_management>
 8009e20:	4603      	mov	r3, r0
 8009e22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8009e26:	e009      	b.n	8009e3c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8009e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 ff59 	bl	800bce8 <VL53L0X_set_reference_spads>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009e3c:	4b94      	ldr	r3, [pc, #592]	; (800a090 <VL53L0X_StaticInit+0x300>)
 8009e3e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8009e40:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10f      	bne.n	8009e68 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009e4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8009e52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d104      	bne.n	8009e64 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e62:	e001      	b.n	8009e68 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009e64:	4b8a      	ldr	r3, [pc, #552]	; (800a090 <VL53L0X_StaticInit+0x300>)
 8009e66:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009e68:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d106      	bne.n	8009e7e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009e70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f003 fe50 	bl	800db18 <VL53L0X_load_tuning_settings>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8009e7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8009e86:	2300      	movs	r3, #0
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	2304      	movs	r3, #4
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2100      	movs	r1, #0
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 f909 	bl	800b0a8 <VL53L0X_SetGpioConfig>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e9c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d121      	bne.n	8009ee8 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	21ff      	movs	r1, #255	; 0xff
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f004 fd4b 	bl	800e944 <VL53L0X_WrByte>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009eb4:	f107 031a 	add.w	r3, r7, #26
 8009eb8:	461a      	mov	r2, r3
 8009eba:	2184      	movs	r1, #132	; 0x84
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f004 fded 	bl	800ea9c <VL53L0X_RdWord>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	21ff      	movs	r1, #255	; 0xff
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f004 fd35 	bl	800e944 <VL53L0X_WrByte>
 8009eda:	4603      	mov	r3, r0
 8009edc:	461a      	mov	r2, r3
 8009ede:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ee8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d105      	bne.n	8009efc <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009ef0:	8b7b      	ldrh	r3, [r7, #26]
 8009ef2:	011b      	lsls	r3, r3, #4
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009efc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d108      	bne.n	8009f16 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009f04:	f107 031c 	add.w	r3, r7, #28
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8d0 	bl	800a0b0 <VL53L0X_GetDeviceParameters>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8009f16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d110      	bne.n	8009f40 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8009f1e:	f107 0319 	add.w	r3, r7, #25
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f992 	bl	800a24e <VL53L0X_GetFractionEnable>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8009f30:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d103      	bne.n	8009f40 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8009f38:	7e7a      	ldrb	r2, [r7, #25]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009f40:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10e      	bne.n	8009f66 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f103 0410 	add.w	r4, r3, #16
 8009f4e:	f107 051c 	add.w	r5, r7, #28
 8009f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009f62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8009f66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d111      	bne.n	8009f92 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8009f6e:	f107 0319 	add.w	r3, r7, #25
 8009f72:	461a      	mov	r2, r3
 8009f74:	2101      	movs	r1, #1
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f004 fd66 	bl	800ea48 <VL53L0X_RdByte>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009f82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d103      	bne.n	8009f92 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8009f8a:	7e7a      	ldrb	r2, [r7, #25]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8009f92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d107      	bne.n	8009faa <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f9ca 	bl	800a338 <VL53L0X_SetSequenceStepEnable>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009faa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d107      	bne.n	8009fc2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2102      	movs	r1, #2
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f9be 	bl	800a338 <VL53L0X_SetSequenceStepEnable>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8009fc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d103      	bne.n	8009fd2 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2203      	movs	r2, #3
 8009fce:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009fd2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009fda:	f107 0313 	add.w	r3, r7, #19
 8009fde:	461a      	mov	r2, r3
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f990 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009fee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d103      	bne.n	8009ffe <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009ff6:	7cfa      	ldrb	r2, [r7, #19]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009ffe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a002:	2b00      	cmp	r3, #0
 800a004:	d109      	bne.n	800a01a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a006:	f107 0313 	add.w	r3, r7, #19
 800a00a:	461a      	mov	r2, r3
 800a00c:	2101      	movs	r1, #1
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f97a 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800a014:	4603      	mov	r3, r0
 800a016:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a01a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d103      	bne.n	800a02a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a022:	7cfa      	ldrb	r2, [r7, #19]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a02a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d109      	bne.n	800a046 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800a032:	f107 030c 	add.w	r3, r7, #12
 800a036:	461a      	mov	r2, r3
 800a038:	2103      	movs	r1, #3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f002 ff48 	bl	800ced0 <get_sequence_step_timeout>
 800a040:	4603      	mov	r3, r0
 800a042:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a046:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d103      	bne.n	800a056 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a056:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d109      	bne.n	800a072 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800a05e:	f107 030c 	add.w	r3, r7, #12
 800a062:	461a      	mov	r2, r3
 800a064:	2104      	movs	r1, #4
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f002 ff32 	bl	800ced0 <get_sequence_step_timeout>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a072:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a076:	2b00      	cmp	r3, #0
 800a078:	d103      	bne.n	800a082 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a082:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800a086:	4618      	mov	r0, r3
 800a088:	3770      	adds	r7, #112	; 0x70
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bdb0      	pop	{r4, r5, r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000258 	.word	0x20000258

0800a094 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800a09c:	239d      	movs	r3, #157	; 0x9d
 800a09e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800a0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f8b0 	bl	800a228 <VL53L0X_GetDeviceMode>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a0cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d107      	bne.n	800a0e4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fa78 	bl	800a5d0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a0e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d107      	bne.n	800a10a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	3310      	adds	r3, #16
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 faae 	bl	800a662 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a106:	4603      	mov	r3, r0
 800a108:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d107      	bne.n	800a122 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	3314      	adds	r3, #20
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff fcaa 	bl	8009a72 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a11e:	4603      	mov	r3, r0
 800a120:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d134      	bne.n	800a194 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a12a:	2300      	movs	r3, #0
 800a12c:	60bb      	str	r3, [r7, #8]
 800a12e:	e02a      	b.n	800a186 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d12a      	bne.n	800a18e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	b299      	uxth	r1, r3
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	3308      	adds	r3, #8
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	4413      	add	r3, r2
 800a146:	3304      	adds	r3, #4
 800a148:	461a      	mov	r2, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fbe6 	bl	800a91c <VL53L0X_GetLimitCheckValue>
 800a150:	4603      	mov	r3, r0
 800a152:	461a      	mov	r2, r3
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	4313      	orrs	r3, r2
 800a158:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d117      	bne.n	800a192 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	b299      	uxth	r1, r3
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	3318      	adds	r3, #24
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4413      	add	r3, r2
 800a16e:	461a      	mov	r2, r3
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fb4d 	bl	800a810 <VL53L0X_GetLimitCheckEnable>
 800a176:	4603      	mov	r3, r0
 800a178:	461a      	mov	r2, r3
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	3301      	adds	r3, #1
 800a184:	60bb      	str	r3, [r7, #8]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2b05      	cmp	r3, #5
 800a18a:	ddd1      	ble.n	800a130 <VL53L0X_GetDeviceParameters+0x80>
 800a18c:	e002      	b.n	800a194 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800a18e:	bf00      	nop
 800a190:	e000      	b.n	800a194 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a192:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d107      	bne.n	800a1ac <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	333c      	adds	r3, #60	; 0x3c
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fc48 	bl	800aa38 <VL53L0X_GetWrapAroundCheckEnable>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a1ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d107      	bne.n	800a1c4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f879 	bl	800a2b2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	2b15      	cmp	r3, #21
 800a1e4:	bf8c      	ite	hi
 800a1e6:	2201      	movhi	r2, #1
 800a1e8:	2200      	movls	r2, #0
 800a1ea:	b2d2      	uxtb	r2, r2
 800a1ec:	2a00      	cmp	r2, #0
 800a1ee:	d10e      	bne.n	800a20e <VL53L0X_SetDeviceMode+0x3e>
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	409a      	lsls	r2, r3
 800a1f4:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <VL53L0X_SetDeviceMode+0x54>)
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	bf14      	ite	ne
 800a1fc:	2301      	movne	r3, #1
 800a1fe:	2300      	moveq	r3, #0
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	78fa      	ldrb	r2, [r7, #3]
 800a20a:	741a      	strb	r2, [r3, #16]
		break;
 800a20c:	e001      	b.n	800a212 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a20e:	23f8      	movs	r3, #248	; 0xf8
 800a210:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	0030000b 	.word	0x0030000b

0800a228 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a232:	2300      	movs	r3, #0
 800a234:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	7c1a      	ldrb	r2, [r3, #16]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	2109      	movs	r1, #9
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f004 fbf1 	bl	800ea48 <VL53L0X_RdByte>
 800a266:	4603      	mov	r3, r0
 800a268:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f003 faaa 	bl	800d7f6 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a2a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f003 fb77 	bl	800d9b6 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	70fb      	strb	r3, [r7, #3]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800a2ec:	78ba      	ldrb	r2, [r7, #2]
 800a2ee:	78fb      	ldrb	r3, [r7, #3]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f002 ffbf 	bl	800d276 <VL53L0X_set_vcsel_pulse_period>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a2fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	460b      	mov	r3, r1
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a316:	2300      	movs	r3, #0
 800a318:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a31a:	7afb      	ldrb	r3, [r7, #11]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	4619      	mov	r1, r3
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f003 fa31 	bl	800d788 <VL53L0X_get_vcsel_pulse_period>
 800a326:	4603      	mov	r3, r0
 800a328:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a32a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3718      	adds	r7, #24
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
 800a344:	4613      	mov	r3, r2
 800a346:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a348:	2300      	movs	r3, #0
 800a34a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a354:	f107 030f 	add.w	r3, r7, #15
 800a358:	461a      	mov	r2, r3
 800a35a:	2101      	movs	r1, #1
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f004 fb73 	bl	800ea48 <VL53L0X_RdByte>
 800a362:	4603      	mov	r3, r0
 800a364:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d15a      	bne.n	800a428 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800a372:	78bb      	ldrb	r3, [r7, #2]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d12b      	bne.n	800a3d0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a378:	78fb      	ldrb	r3, [r7, #3]
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d825      	bhi.n	800a3ca <VL53L0X_SetSequenceStepEnable+0x92>
 800a37e:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a384:	0800a399 	.word	0x0800a399
 800a388:	0800a3a3 	.word	0x0800a3a3
 800a38c:	0800a3ad 	.word	0x0800a3ad
 800a390:	0800a3b7 	.word	0x0800a3b7
 800a394:	0800a3c1 	.word	0x0800a3c1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a398:	7dbb      	ldrb	r3, [r7, #22]
 800a39a:	f043 0310 	orr.w	r3, r3, #16
 800a39e:	75bb      	strb	r3, [r7, #22]
				break;
 800a3a0:	e043      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a3a2:	7dbb      	ldrb	r3, [r7, #22]
 800a3a4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800a3a8:	75bb      	strb	r3, [r7, #22]
				break;
 800a3aa:	e03e      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a3ac:	7dbb      	ldrb	r3, [r7, #22]
 800a3ae:	f043 0304 	orr.w	r3, r3, #4
 800a3b2:	75bb      	strb	r3, [r7, #22]
				break;
 800a3b4:	e039      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a3b6:	7dbb      	ldrb	r3, [r7, #22]
 800a3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3bc:	75bb      	strb	r3, [r7, #22]
				break;
 800a3be:	e034      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a3c0:	7dbb      	ldrb	r3, [r7, #22]
 800a3c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3c6:	75bb      	strb	r3, [r7, #22]
				break;
 800a3c8:	e02f      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3ca:	23fc      	movs	r3, #252	; 0xfc
 800a3cc:	75fb      	strb	r3, [r7, #23]
 800a3ce:	e02c      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	2b04      	cmp	r3, #4
 800a3d4:	d825      	bhi.n	800a422 <VL53L0X_SetSequenceStepEnable+0xea>
 800a3d6:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a3f1 	.word	0x0800a3f1
 800a3e0:	0800a3fb 	.word	0x0800a3fb
 800a3e4:	0800a405 	.word	0x0800a405
 800a3e8:	0800a40f 	.word	0x0800a40f
 800a3ec:	0800a419 	.word	0x0800a419
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a3f0:	7dbb      	ldrb	r3, [r7, #22]
 800a3f2:	f023 0310 	bic.w	r3, r3, #16
 800a3f6:	75bb      	strb	r3, [r7, #22]
				break;
 800a3f8:	e017      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a3fa:	7dbb      	ldrb	r3, [r7, #22]
 800a3fc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a400:	75bb      	strb	r3, [r7, #22]
				break;
 800a402:	e012      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a404:	7dbb      	ldrb	r3, [r7, #22]
 800a406:	f023 0304 	bic.w	r3, r3, #4
 800a40a:	75bb      	strb	r3, [r7, #22]
				break;
 800a40c:	e00d      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a40e:	7dbb      	ldrb	r3, [r7, #22]
 800a410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a414:	75bb      	strb	r3, [r7, #22]
				break;
 800a416:	e008      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a418:	7dbb      	ldrb	r3, [r7, #22]
 800a41a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a41e:	75bb      	strb	r3, [r7, #22]
				break;
 800a420:	e003      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a422:	23fc      	movs	r3, #252	; 0xfc
 800a424:	75fb      	strb	r3, [r7, #23]
 800a426:	e000      	b.n	800a42a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800a428:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	7dba      	ldrb	r2, [r7, #22]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d01e      	beq.n	800a470 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d107      	bne.n	800a44a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800a43a:	7dbb      	ldrb	r3, [r7, #22]
 800a43c:	461a      	mov	r2, r3
 800a43e:	2101      	movs	r1, #1
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f004 fa7f 	bl	800e944 <VL53L0X_WrByte>
 800a446:	4603      	mov	r3, r0
 800a448:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a44a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d103      	bne.n	800a45a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	7dba      	ldrb	r2, [r7, #22]
 800a456:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a45a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d106      	bne.n	800a470 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a468:	6939      	ldr	r1, [r7, #16]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff ff0e 	bl	800a28c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a470:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	607b      	str	r3, [r7, #4]
 800a486:	460b      	mov	r3, r1
 800a488:	72fb      	strb	r3, [r7, #11]
 800a48a:	4613      	mov	r3, r2
 800a48c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a48e:	2300      	movs	r3, #0
 800a490:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a498:	7afb      	ldrb	r3, [r7, #11]
 800a49a:	2b04      	cmp	r3, #4
 800a49c:	d836      	bhi.n	800a50c <sequence_step_enabled+0x90>
 800a49e:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <sequence_step_enabled+0x28>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4b9 	.word	0x0800a4b9
 800a4a8:	0800a4cb 	.word	0x0800a4cb
 800a4ac:	0800a4dd 	.word	0x0800a4dd
 800a4b0:	0800a4ef 	.word	0x0800a4ef
 800a4b4:	0800a501 	.word	0x0800a501
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a4b8:	7abb      	ldrb	r3, [r7, #10]
 800a4ba:	111b      	asrs	r3, r3, #4
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	b2da      	uxtb	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	701a      	strb	r2, [r3, #0]
		break;
 800a4c8:	e022      	b.n	800a510 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a4ca:	7abb      	ldrb	r3, [r7, #10]
 800a4cc:	10db      	asrs	r3, r3, #3
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	701a      	strb	r2, [r3, #0]
		break;
 800a4da:	e019      	b.n	800a510 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a4dc:	7abb      	ldrb	r3, [r7, #10]
 800a4de:	109b      	asrs	r3, r3, #2
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	701a      	strb	r2, [r3, #0]
		break;
 800a4ec:	e010      	b.n	800a510 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a4ee:	7abb      	ldrb	r3, [r7, #10]
 800a4f0:	119b      	asrs	r3, r3, #6
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	701a      	strb	r2, [r3, #0]
		break;
 800a4fe:	e007      	b.n	800a510 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a500:	7abb      	ldrb	r3, [r7, #10]
 800a502:	09db      	lsrs	r3, r3, #7
 800a504:	b2da      	uxtb	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	701a      	strb	r2, [r3, #0]
		break;
 800a50a:	e001      	b.n	800a510 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a50c:	23fc      	movs	r3, #252	; 0xfc
 800a50e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a510:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a514:	4618      	mov	r0, r3
 800a516:	371c      	adds	r7, #28
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a52a:	2300      	movs	r3, #0
 800a52c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a532:	f107 030e 	add.w	r3, r7, #14
 800a536:	461a      	mov	r2, r3
 800a538:	2101      	movs	r1, #1
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f004 fa84 	bl	800ea48 <VL53L0X_RdByte>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d107      	bne.n	800a55c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800a54c:	7bba      	ldrb	r2, [r7, #14]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2100      	movs	r1, #0
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff ff92 	bl	800a47c <sequence_step_enabled>
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d108      	bne.n	800a576 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800a564:	7bba      	ldrb	r2, [r7, #14]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	3302      	adds	r3, #2
 800a56a:	2101      	movs	r1, #1
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7ff ff85 	bl	800a47c <sequence_step_enabled>
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d108      	bne.n	800a590 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800a57e:	7bba      	ldrb	r2, [r7, #14]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	3301      	adds	r3, #1
 800a584:	2102      	movs	r1, #2
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff ff78 	bl	800a47c <sequence_step_enabled>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d108      	bne.n	800a5aa <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800a598:	7bba      	ldrb	r2, [r7, #14]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	3303      	adds	r3, #3
 800a59e:	2103      	movs	r1, #3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff ff6b 	bl	800a47c <sequence_step_enabled>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a5aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d108      	bne.n	800a5c4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800a5b2:	7bba      	ldrb	r2, [r7, #14]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	2104      	movs	r1, #4
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff ff5e 	bl	800a47c <sequence_step_enabled>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a5de:	f107 030c 	add.w	r3, r7, #12
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	21f8      	movs	r1, #248	; 0xf8
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f004 fa58 	bl	800ea9c <VL53L0X_RdWord>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d108      	bne.n	800a60a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800a5f8:	f107 0308 	add.w	r3, r7, #8
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	2104      	movs	r1, #4
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f004 fa83 	bl	800eb0c <VL53L0X_RdDWord>
 800a606:	4603      	mov	r3, r0
 800a608:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10c      	bne.n	800a62c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800a612:	89bb      	ldrh	r3, [r7, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d005      	beq.n	800a624 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	89ba      	ldrh	r2, [r7, #12]
 800a61c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a62c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	7f1b      	ldrb	r3, [r3, #28]
 800a64a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	7bba      	ldrb	r2, [r7, #14]
 800a650:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b086      	sub	sp, #24
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a66c:	2300      	movs	r3, #0
 800a66e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800a670:	f107 030e 	add.w	r3, r7, #14
 800a674:	461a      	mov	r2, r3
 800a676:	2120      	movs	r1, #32
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f004 fa0f 	bl	800ea9c <VL53L0X_RdWord>
 800a67e:	4603      	mov	r3, r0
 800a680:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800a682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d118      	bne.n	800a6bc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800a68a:	89fb      	ldrh	r3, [r7, #14]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d109      	bne.n	800a6a4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	771a      	strb	r2, [r3, #28]
 800a6a2:	e00b      	b.n	800a6bc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800a6a4:	89fb      	ldrh	r3, [r7, #14]
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 800a6dc:	78ba      	ldrb	r2, [r7, #2]
 800a6de:	78fb      	ldrb	r3, [r7, #3]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f001 fd82 	bl	800c1ec <VL53L0X_set_ref_calibration>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a6ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	807b      	strh	r3, [r7, #2]
 800a704:	4613      	mov	r3, r2
 800a706:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a708:	2300      	movs	r3, #0
 800a70a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a718:	887b      	ldrh	r3, [r7, #2]
 800a71a:	2b05      	cmp	r3, #5
 800a71c:	d902      	bls.n	800a724 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a71e:	23fc      	movs	r3, #252	; 0xfc
 800a720:	75fb      	strb	r3, [r7, #23]
 800a722:	e05b      	b.n	800a7dc <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800a724:	787b      	ldrb	r3, [r7, #1]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d106      	bne.n	800a738 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800a732:	2301      	movs	r3, #1
 800a734:	73bb      	strb	r3, [r7, #14]
 800a736:	e00a      	b.n	800a74e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a738:	887b      	ldrh	r3, [r7, #2]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	330c      	adds	r3, #12
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800a74a:	2301      	movs	r3, #1
 800a74c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800a74e:	887b      	ldrh	r3, [r7, #2]
 800a750:	2b05      	cmp	r3, #5
 800a752:	d841      	bhi.n	800a7d8 <VL53L0X_SetLimitCheckEnable+0xe0>
 800a754:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <VL53L0X_SetLimitCheckEnable+0x64>)
 800a756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75a:	bf00      	nop
 800a75c:	0800a775 	.word	0x0800a775
 800a760:	0800a77f 	.word	0x0800a77f
 800a764:	0800a795 	.word	0x0800a795
 800a768:	0800a79f 	.word	0x0800a79f
 800a76c:	0800a7a9 	.word	0x0800a7a9
 800a770:	0800a7c1 	.word	0x0800a7c1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	7bfa      	ldrb	r2, [r7, #15]
 800a778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800a77c:	e02e      	b.n	800a7dc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a782:	b29b      	uxth	r3, r3
 800a784:	461a      	mov	r2, r3
 800a786:	2144      	movs	r1, #68	; 0x44
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f004 f8ff 	bl	800e98c <VL53L0X_WrWord>
 800a78e:	4603      	mov	r3, r0
 800a790:	75fb      	strb	r3, [r7, #23]

			break;
 800a792:	e023      	b.n	800a7dc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	7bfa      	ldrb	r2, [r7, #15]
 800a798:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800a79c:	e01e      	b.n	800a7dc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	7bfa      	ldrb	r2, [r7, #15]
 800a7a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800a7a6:	e019      	b.n	800a7dc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a7ae:	7b7b      	ldrb	r3, [r7, #13]
 800a7b0:	22fe      	movs	r2, #254	; 0xfe
 800a7b2:	2160      	movs	r1, #96	; 0x60
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f004 f913 	bl	800e9e0 <VL53L0X_UpdateByte>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800a7be:	e00d      	b.n	800a7dc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a7c6:	7b7b      	ldrb	r3, [r7, #13]
 800a7c8:	22ef      	movs	r2, #239	; 0xef
 800a7ca:	2160      	movs	r1, #96	; 0x60
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f004 f907 	bl	800e9e0 <VL53L0X_UpdateByte>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800a7d6:	e001      	b.n	800a7dc <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7d8:	23fc      	movs	r3, #252	; 0xfc
 800a7da:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a7dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10f      	bne.n	800a804 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800a7e4:	787b      	ldrb	r3, [r7, #1]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d106      	bne.n	800a7f8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a7ea:	887b      	ldrh	r3, [r7, #2]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a7f6:	e005      	b.n	800a804 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a7f8:	887b      	ldrh	r3, [r7, #2]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a804:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	460b      	mov	r3, r1
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a81e:	2300      	movs	r3, #0
 800a820:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a822:	897b      	ldrh	r3, [r7, #10]
 800a824:	2b05      	cmp	r3, #5
 800a826:	d905      	bls.n	800a834 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a828:	23fc      	movs	r3, #252	; 0xfc
 800a82a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	e008      	b.n	800a846 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a834:	897b      	ldrh	r3, [r7, #10]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	4413      	add	r3, r2
 800a83a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a83e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	7dba      	ldrb	r2, [r7, #22]
 800a844:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a846:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	371c      	adds	r7, #28
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
	...

0800a858 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	460b      	mov	r3, r1
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a866:	2300      	movs	r3, #0
 800a868:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800a86a:	897b      	ldrh	r3, [r7, #10]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	4413      	add	r3, r2
 800a870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a874:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800a876:	7dbb      	ldrb	r3, [r7, #22]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d107      	bne.n	800a88c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a87c:	897b      	ldrh	r3, [r7, #10]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	330c      	adds	r3, #12
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	605a      	str	r2, [r3, #4]
 800a88a:	e040      	b.n	800a90e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800a88c:	897b      	ldrh	r3, [r7, #10]
 800a88e:	2b05      	cmp	r3, #5
 800a890:	d830      	bhi.n	800a8f4 <VL53L0X_SetLimitCheckValue+0x9c>
 800a892:	a201      	add	r2, pc, #4	; (adr r2, 800a898 <VL53L0X_SetLimitCheckValue+0x40>)
 800a894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a898:	0800a8b1 	.word	0x0800a8b1
 800a89c:	0800a8b9 	.word	0x0800a8b9
 800a8a0:	0800a8cf 	.word	0x0800a8cf
 800a8a4:	0800a8d7 	.word	0x0800a8d7
 800a8a8:	0800a8df 	.word	0x0800a8df
 800a8ac:	0800a8df 	.word	0x0800a8df

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800a8b6:	e01f      	b.n	800a8f8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	461a      	mov	r2, r3
 800a8c0:	2144      	movs	r1, #68	; 0x44
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f004 f862 	bl	800e98c <VL53L0X_WrWord>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a8cc:	e014      	b.n	800a8f8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800a8d4:	e010      	b.n	800a8f8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800a8dc:	e00c      	b.n	800a8f8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	2164      	movs	r1, #100	; 0x64
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f004 f84f 	bl	800e98c <VL53L0X_WrWord>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a8f2:	e001      	b.n	800a8f8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8f4:	23fc      	movs	r3, #252	; 0xfc
 800a8f6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a8f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d106      	bne.n	800a90e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a900:	897b      	ldrh	r3, [r7, #10]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	330c      	adds	r3, #12
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a90e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop

0800a91c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	460b      	mov	r3, r1
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a92a:	2300      	movs	r3, #0
 800a92c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a932:	897b      	ldrh	r3, [r7, #10]
 800a934:	2b05      	cmp	r3, #5
 800a936:	d847      	bhi.n	800a9c8 <VL53L0X_GetLimitCheckValue+0xac>
 800a938:	a201      	add	r2, pc, #4	; (adr r2, 800a940 <VL53L0X_GetLimitCheckValue+0x24>)
 800a93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93e:	bf00      	nop
 800a940:	0800a959 	.word	0x0800a959
 800a944:	0800a965 	.word	0x0800a965
 800a948:	0800a98b 	.word	0x0800a98b
 800a94c:	0800a997 	.word	0x0800a997
 800a950:	0800a9a3 	.word	0x0800a9a3
 800a954:	0800a9a3 	.word	0x0800a9a3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	77bb      	strb	r3, [r7, #30]
		break;
 800a962:	e033      	b.n	800a9cc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a964:	f107 0316 	add.w	r3, r7, #22
 800a968:	461a      	mov	r2, r3
 800a96a:	2144      	movs	r1, #68	; 0x44
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f004 f895 	bl	800ea9c <VL53L0X_RdWord>
 800a972:	4603      	mov	r3, r0
 800a974:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a976:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d102      	bne.n	800a984 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a97e:	8afb      	ldrh	r3, [r7, #22]
 800a980:	025b      	lsls	r3, r3, #9
 800a982:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800a984:	2301      	movs	r3, #1
 800a986:	77bb      	strb	r3, [r7, #30]
		break;
 800a988:	e020      	b.n	800a9cc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	77bb      	strb	r3, [r7, #30]
		break;
 800a994:	e01a      	b.n	800a9cc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	77bb      	strb	r3, [r7, #30]
		break;
 800a9a0:	e014      	b.n	800a9cc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a9a2:	f107 0316 	add.w	r3, r7, #22
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	2164      	movs	r1, #100	; 0x64
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f004 f876 	bl	800ea9c <VL53L0X_RdWord>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a9b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d102      	bne.n	800a9c2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a9bc:	8afb      	ldrh	r3, [r7, #22]
 800a9be:	025b      	lsls	r3, r3, #9
 800a9c0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	77bb      	strb	r3, [r7, #30]
		break;
 800a9c6:	e001      	b.n	800a9cc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9c8:	23fc      	movs	r3, #252	; 0xfc
 800a9ca:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a9cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d12a      	bne.n	800aa2a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800a9d4:	7fbb      	ldrb	r3, [r7, #30]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d124      	bne.n	800aa24 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d110      	bne.n	800aa02 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800a9e0:	897b      	ldrh	r3, [r7, #10]
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	330c      	adds	r3, #12
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a9f4:	897b      	ldrh	r3, [r7, #10]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800aa00:	e013      	b.n	800aa2a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	69ba      	ldr	r2, [r7, #24]
 800aa06:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800aa08:	897b      	ldrh	r3, [r7, #10]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	330c      	adds	r3, #12
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800aa16:	897b      	ldrh	r3, [r7, #10]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800aa22:	e002      	b.n	800aa2a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa2a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop

0800aa38 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800aa46:	f107 030e 	add.w	r3, r7, #14
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f003 fffa 	bl	800ea48 <VL53L0X_RdByte>
 800aa54:	4603      	mov	r3, r0
 800aa56:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800aa58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10e      	bne.n	800aa7e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800aa60:	7bba      	ldrb	r2, [r7, #14]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	b25b      	sxtb	r3, r3
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	da03      	bge.n	800aa78 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2201      	movs	r2, #1
 800aa74:	701a      	strb	r2, [r3, #0]
 800aa76:	e002      	b.n	800aa7e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800aa7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d104      	bne.n	800aa90 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	781a      	ldrb	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800aaa8:	f107 030e 	add.w	r3, r7, #14
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7ff fbba 	bl	800a228 <VL53L0X_GetDeviceMode>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800aab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d107      	bne.n	800aad0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d104      	bne.n	800aad0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f898 	bl	800abfc <VL53L0X_StartMeasurement>
 800aacc:	4603      	mov	r3, r0
 800aace:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800aad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d104      	bne.n	800aae2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f001 fbaa 	bl	800c232 <VL53L0X_measurement_poll_for_completion>
 800aade:	4603      	mov	r3, r0
 800aae0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800aae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d103      	bne.n	800aaf8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2203      	movs	r2, #3
 800aaf4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800aaf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab10:	2300      	movs	r3, #0
 800ab12:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800ab14:	2301      	movs	r3, #1
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	68b9      	ldr	r1, [r7, #8]
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f001 fb29 	bl	800c172 <VL53L0X_perform_ref_calibration>
 800ab20:	4603      	mov	r3, r0
 800ab22:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800ab24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800ab46:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800ab48:	7dbb      	ldrb	r3, [r7, #22]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d005      	beq.n	800ab5a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800ab4e:	7dbb      	ldrb	r3, [r7, #22]
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d002      	beq.n	800ab5a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800ab54:	7dbb      	ldrb	r3, [r7, #22]
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d147      	bne.n	800abea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800ab5a:	f107 030c 	add.w	r3, r7, #12
 800ab5e:	f107 0210 	add.w	r2, r7, #16
 800ab62:	2101      	movs	r1, #1
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fbc3 	bl	800b2f0 <VL53L0X_GetInterruptThresholds>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800ab74:	d803      	bhi.n	800ab7e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800ab76:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800ab78:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800ab7c:	d935      	bls.n	800abea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800ab7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d131      	bne.n	800abea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800ab86:	78fb      	ldrb	r3, [r7, #3]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d006      	beq.n	800ab9a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800ab8c:	491a      	ldr	r1, [pc, #104]	; (800abf8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f002 ffc2 	bl	800db18 <VL53L0X_load_tuning_settings>
 800ab94:	4603      	mov	r3, r0
 800ab96:	75fb      	strb	r3, [r7, #23]
 800ab98:	e027      	b.n	800abea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800ab9a:	2204      	movs	r2, #4
 800ab9c:	21ff      	movs	r1, #255	; 0xff
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f003 fed0 	bl	800e944 <VL53L0X_WrByte>
 800aba4:	4603      	mov	r3, r0
 800aba6:	461a      	mov	r2, r3
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
 800abaa:	4313      	orrs	r3, r2
 800abac:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800abae:	2200      	movs	r2, #0
 800abb0:	2170      	movs	r1, #112	; 0x70
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f003 fec6 	bl	800e944 <VL53L0X_WrByte>
 800abb8:	4603      	mov	r3, r0
 800abba:	461a      	mov	r2, r3
 800abbc:	7dfb      	ldrb	r3, [r7, #23]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800abc2:	2200      	movs	r2, #0
 800abc4:	21ff      	movs	r1, #255	; 0xff
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f003 febc 	bl	800e944 <VL53L0X_WrByte>
 800abcc:	4603      	mov	r3, r0
 800abce:	461a      	mov	r2, r3
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800abd6:	2200      	movs	r2, #0
 800abd8:	2180      	movs	r1, #128	; 0x80
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f003 feb2 	bl	800e944 <VL53L0X_WrByte>
 800abe0:	4603      	mov	r3, r0
 800abe2:	461a      	mov	r2, r3
 800abe4:	7dfb      	ldrb	r3, [r7, #23]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800abea:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800abee:	4618      	mov	r0, r3
 800abf0:	3718      	adds	r7, #24
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	2000034c 	.word	0x2000034c

0800abfc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac04:	2300      	movs	r3, #0
 800ac06:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800ac0c:	f107 030e 	add.w	r3, r7, #14
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff fb08 	bl	800a228 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ac18:	2201      	movs	r2, #1
 800ac1a:	2180      	movs	r1, #128	; 0x80
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f003 fe91 	bl	800e944 <VL53L0X_WrByte>
 800ac22:	4603      	mov	r3, r0
 800ac24:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ac26:	2201      	movs	r2, #1
 800ac28:	21ff      	movs	r1, #255	; 0xff
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f003 fe8a 	bl	800e944 <VL53L0X_WrByte>
 800ac30:	4603      	mov	r3, r0
 800ac32:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ac34:	2200      	movs	r2, #0
 800ac36:	2100      	movs	r1, #0
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f003 fe83 	bl	800e944 <VL53L0X_WrByte>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800ac48:	461a      	mov	r2, r3
 800ac4a:	2191      	movs	r1, #145	; 0x91
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f003 fe79 	bl	800e944 <VL53L0X_WrByte>
 800ac52:	4603      	mov	r3, r0
 800ac54:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ac56:	2201      	movs	r2, #1
 800ac58:	2100      	movs	r1, #0
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f003 fe72 	bl	800e944 <VL53L0X_WrByte>
 800ac60:	4603      	mov	r3, r0
 800ac62:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ac64:	2200      	movs	r2, #0
 800ac66:	21ff      	movs	r1, #255	; 0xff
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f003 fe6b 	bl	800e944 <VL53L0X_WrByte>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ac72:	2200      	movs	r2, #0
 800ac74:	2180      	movs	r1, #128	; 0x80
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f003 fe64 	bl	800e944 <VL53L0X_WrByte>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800ac80:	7bbb      	ldrb	r3, [r7, #14]
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d054      	beq.n	800ad30 <VL53L0X_StartMeasurement+0x134>
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	dc6c      	bgt.n	800ad64 <VL53L0X_StartMeasurement+0x168>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <VL53L0X_StartMeasurement+0x98>
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d034      	beq.n	800acfc <VL53L0X_StartMeasurement+0x100>
 800ac92:	e067      	b.n	800ad64 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800ac94:	2201      	movs	r2, #1
 800ac96:	2100      	movs	r1, #0
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f003 fe53 	bl	800e944 <VL53L0X_WrByte>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
 800aca4:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800aca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d15d      	bne.n	800ad6a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d008      	beq.n	800acca <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800acb8:	f107 030d 	add.w	r3, r7, #13
 800acbc:	461a      	mov	r2, r3
 800acbe:	2100      	movs	r1, #0
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f003 fec1 	bl	800ea48 <VL53L0X_RdByte>
 800acc6:	4603      	mov	r3, r0
 800acc8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	3301      	adds	r3, #1
 800acce:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800acd0:	7b7a      	ldrb	r2, [r7, #13]
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	4013      	ands	r3, r2
 800acd6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800acd8:	7bfa      	ldrb	r2, [r7, #15]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d107      	bne.n	800acee <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800acde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d103      	bne.n	800acee <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800acec:	d3e1      	bcc.n	800acb2 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800acf4:	d339      	bcc.n	800ad6a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800acf6:	23f9      	movs	r3, #249	; 0xf9
 800acf8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800acfa:	e036      	b.n	800ad6a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800acfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d105      	bne.n	800ad10 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800ad04:	2101      	movs	r1, #1
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff ff12 	bl	800ab30 <VL53L0X_CheckAndLoadInterruptSettings>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800ad10:	2202      	movs	r2, #2
 800ad12:	2100      	movs	r1, #0
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f003 fe15 	bl	800e944 <VL53L0X_WrByte>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800ad1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d123      	bne.n	800ad6e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2204      	movs	r2, #4
 800ad2a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800ad2e:	e01e      	b.n	800ad6e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800ad30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d105      	bne.n	800ad44 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800ad38:	2101      	movs	r1, #1
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff fef8 	bl	800ab30 <VL53L0X_CheckAndLoadInterruptSettings>
 800ad40:	4603      	mov	r3, r0
 800ad42:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800ad44:	2204      	movs	r2, #4
 800ad46:	2100      	movs	r1, #0
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f003 fdfb 	bl	800e944 <VL53L0X_WrByte>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800ad52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10b      	bne.n	800ad72 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2204      	movs	r2, #4
 800ad5e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800ad62:	e006      	b.n	800ad72 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800ad64:	23f8      	movs	r3, #248	; 0xf8
 800ad66:	75fb      	strb	r3, [r7, #23]
 800ad68:	e004      	b.n	800ad74 <VL53L0X_StartMeasurement+0x178>
		break;
 800ad6a:	bf00      	nop
 800ad6c:	e002      	b.n	800ad74 <VL53L0X_StartMeasurement+0x178>
		break;
 800ad6e:	bf00      	nop
 800ad70:	e000      	b.n	800ad74 <VL53L0X_StartMeasurement+0x178>
		break;
 800ad72:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800ad74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800ad94:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b04      	cmp	r3, #4
 800ad9a:	d112      	bne.n	800adc2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800ad9c:	f107 0308 	add.w	r3, r7, #8
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fb1a 	bl	800b3dc <VL53L0X_GetInterruptMaskStatus>
 800ada8:	4603      	mov	r3, r0
 800adaa:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b04      	cmp	r3, #4
 800adb0:	d103      	bne.n	800adba <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2201      	movs	r2, #1
 800adb6:	701a      	strb	r2, [r3, #0]
 800adb8:	e01c      	b.n	800adf4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2200      	movs	r2, #0
 800adbe:	701a      	strb	r2, [r3, #0]
 800adc0:	e018      	b.n	800adf4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800adc2:	f107 030d 	add.w	r3, r7, #13
 800adc6:	461a      	mov	r2, r3
 800adc8:	2114      	movs	r1, #20
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f003 fe3c 	bl	800ea48 <VL53L0X_RdByte>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800add4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10b      	bne.n	800adf4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800addc:	7b7b      	ldrb	r3, [r7, #13]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d003      	beq.n	800adee <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	2201      	movs	r2, #1
 800adea:	701a      	strb	r2, [r3, #0]
 800adec:	e002      	b.n	800adf4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2200      	movs	r2, #0
 800adf2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800adf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800ae00:	b5b0      	push	{r4, r5, r7, lr}
 800ae02:	b096      	sub	sp, #88	; 0x58
 800ae04:	af02      	add	r7, sp, #8
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800ae10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ae14:	230c      	movs	r3, #12
 800ae16:	2114      	movs	r1, #20
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f003 fd67 	bl	800e8ec <VL53L0X_ReadMulti>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800ae24:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f040 80d1 	bne.w	800afd0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2200      	movs	r2, #0
 800ae32:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2200      	movs	r2, #0
 800ae38:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800ae3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	021b      	lsls	r3, r3, #8
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2200      	movs	r2, #0
 800ae54:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800ae56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	021b      	lsls	r3, r3, #8
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	4413      	add	r3, r2
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	025b      	lsls	r3, r3, #9
 800ae6c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae72:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800ae74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	021b      	lsls	r3, r3, #8
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	4413      	add	r3, r2
 800ae86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800ae8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae8e:	025b      	lsls	r3, r3, #9
 800ae90:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800ae96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	021b      	lsls	r3, r3, #8
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	4413      	add	r3, r2
 800aea8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800aeb2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800aeb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aeb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800aec2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800aeca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800aece:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aed4:	d046      	beq.n	800af64 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800aed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aed8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800aedc:	fb02 f303 	mul.w	r3, r2, r3
 800aee0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aee4:	4a57      	ldr	r2, [pc, #348]	; (800b044 <VL53L0X_GetRangingMeasurementData+0x244>)
 800aee6:	fb82 1203 	smull	r1, r2, r2, r3
 800aeea:	1192      	asrs	r2, r2, #6
 800aeec:	17db      	asrs	r3, r3, #31
 800aeee:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800aef0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7f1b      	ldrb	r3, [r3, #28]
 800aefe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800af02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af06:	2b00      	cmp	r3, #0
 800af08:	d02c      	beq.n	800af64 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800af0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800af0c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800af10:	fb02 f303 	mul.w	r3, r2, r3
 800af14:	121a      	asrs	r2, r3, #8
					<= 0) {
 800af16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800af18:	429a      	cmp	r2, r3
 800af1a:	d10d      	bne.n	800af38 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800af1c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af20:	2b00      	cmp	r3, #0
 800af22:	d004      	beq.n	800af2e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800af24:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800af28:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800af2c:	e016      	b.n	800af5c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800af2e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800af32:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800af36:	e011      	b.n	800af5c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800af38:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af3e:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800af42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800af44:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800af48:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800af4c:	121b      	asrs	r3, r3, #8
 800af4e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800af50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af52:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800af54:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800af58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800af5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af60:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800af64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00d      	beq.n	800af88 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800af6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af70:	089b      	lsrs	r3, r3, #2
 800af72:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800af78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	019b      	lsls	r3, r3, #6
 800af80:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	75da      	strb	r2, [r3, #23]
 800af86:	e006      	b.n	800af96 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800af8e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2200      	movs	r2, #0
 800af94:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800af96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800af9a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800af9e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	4613      	mov	r3, r2
 800afaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f003 fa51 	bl	800e454 <VL53L0X_get_pal_range_status>
 800afb2:	4603      	mov	r3, r0
 800afb4:	461a      	mov	r2, r3
 800afb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800afba:	4313      	orrs	r3, r2
 800afbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800afc0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d103      	bne.n	800afd0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800afc8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800afd0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d12f      	bne.n	800b038 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f107 040c 	add.w	r4, r7, #12
 800afde:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800afe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afe6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800afea:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800aff2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800aff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b000:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b006:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b00c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b012:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b018:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b01e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800b028:	f107 050c 	add.w	r5, r7, #12
 800b02c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b02e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b038:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3750      	adds	r7, #80	; 0x50
 800b040:	46bd      	mov	sp, r7
 800b042:	bdb0      	pop	{r4, r5, r7, pc}
 800b044:	10624dd3 	.word	0x10624dd3

0800b048 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b052:	2300      	movs	r3, #0
 800b054:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b056:	2100      	movs	r1, #0
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff f8b9 	bl	800a1d0 <VL53L0X_SetDeviceMode>
 800b05e:	4603      	mov	r3, r0
 800b060:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d104      	bne.n	800b074 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff fd16 	bl	800aa9c <VL53L0X_PerformSingleMeasurement>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d105      	bne.n	800b088 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7ff febe 	bl	800ae00 <VL53L0X_GetRangingMeasurementData>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d105      	bne.n	800b09c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b090:	2100      	movs	r1, #0
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f962 	bl	800b35c <VL53L0X_ClearInterruptMask>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800b09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	70fb      	strb	r3, [r7, #3]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	70bb      	strb	r3, [r7, #2]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b0c6:	78fb      	ldrb	r3, [r7, #3]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b0cc:	23f6      	movs	r3, #246	; 0xf6
 800b0ce:	73fb      	strb	r3, [r7, #15]
 800b0d0:	e107      	b.n	800b2e2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b0d2:	78bb      	ldrb	r3, [r7, #2]
 800b0d4:	2b14      	cmp	r3, #20
 800b0d6:	d110      	bne.n	800b0fa <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b0d8:	7e3b      	ldrb	r3, [r7, #24]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d102      	bne.n	800b0e4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800b0de:	2310      	movs	r3, #16
 800b0e0:	73bb      	strb	r3, [r7, #14]
 800b0e2:	e001      	b.n	800b0e8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	2184      	movs	r1, #132	; 0x84
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f003 fc28 	bl	800e944 <VL53L0X_WrByte>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]
 800b0f8:	e0f3      	b.n	800b2e2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b0fa:	78bb      	ldrb	r3, [r7, #2]
 800b0fc:	2b15      	cmp	r3, #21
 800b0fe:	f040 8097 	bne.w	800b230 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b102:	2201      	movs	r2, #1
 800b104:	21ff      	movs	r1, #255	; 0xff
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f003 fc1c 	bl	800e944 <VL53L0X_WrByte>
 800b10c:	4603      	mov	r3, r0
 800b10e:	461a      	mov	r2, r3
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	4313      	orrs	r3, r2
 800b114:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b116:	2200      	movs	r2, #0
 800b118:	2100      	movs	r1, #0
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f003 fc12 	bl	800e944 <VL53L0X_WrByte>
 800b120:	4603      	mov	r3, r0
 800b122:	461a      	mov	r2, r3
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	4313      	orrs	r3, r2
 800b128:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b12a:	2200      	movs	r2, #0
 800b12c:	21ff      	movs	r1, #255	; 0xff
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f003 fc08 	bl	800e944 <VL53L0X_WrByte>
 800b134:	4603      	mov	r3, r0
 800b136:	461a      	mov	r2, r3
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b13e:	2201      	movs	r2, #1
 800b140:	2180      	movs	r1, #128	; 0x80
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f003 fbfe 	bl	800e944 <VL53L0X_WrByte>
 800b148:	4603      	mov	r3, r0
 800b14a:	461a      	mov	r2, r3
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	4313      	orrs	r3, r2
 800b150:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b152:	2202      	movs	r2, #2
 800b154:	2185      	movs	r1, #133	; 0x85
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f003 fbf4 	bl	800e944 <VL53L0X_WrByte>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	4313      	orrs	r3, r2
 800b164:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b166:	2204      	movs	r2, #4
 800b168:	21ff      	movs	r1, #255	; 0xff
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f003 fbea 	bl	800e944 <VL53L0X_WrByte>
 800b170:	4603      	mov	r3, r0
 800b172:	461a      	mov	r2, r3
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	4313      	orrs	r3, r2
 800b178:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800b17a:	2200      	movs	r2, #0
 800b17c:	21cd      	movs	r1, #205	; 0xcd
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f003 fbe0 	bl	800e944 <VL53L0X_WrByte>
 800b184:	4603      	mov	r3, r0
 800b186:	461a      	mov	r2, r3
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800b18e:	2211      	movs	r2, #17
 800b190:	21cc      	movs	r1, #204	; 0xcc
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f003 fbd6 	bl	800e944 <VL53L0X_WrByte>
 800b198:	4603      	mov	r3, r0
 800b19a:	461a      	mov	r2, r3
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b1a2:	2207      	movs	r2, #7
 800b1a4:	21ff      	movs	r1, #255	; 0xff
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f003 fbcc 	bl	800e944 <VL53L0X_WrByte>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	21be      	movs	r1, #190	; 0xbe
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f003 fbc2 	bl	800e944 <VL53L0X_WrByte>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b1ca:	2206      	movs	r2, #6
 800b1cc:	21ff      	movs	r1, #255	; 0xff
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f003 fbb8 	bl	800e944 <VL53L0X_WrByte>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b1de:	2209      	movs	r2, #9
 800b1e0:	21cc      	movs	r1, #204	; 0xcc
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f003 fbae 	bl	800e944 <VL53L0X_WrByte>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	21ff      	movs	r1, #255	; 0xff
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f003 fba4 	bl	800e944 <VL53L0X_WrByte>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461a      	mov	r2, r3
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	4313      	orrs	r3, r2
 800b204:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b206:	2201      	movs	r2, #1
 800b208:	21ff      	movs	r1, #255	; 0xff
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f003 fb9a 	bl	800e944 <VL53L0X_WrByte>
 800b210:	4603      	mov	r3, r0
 800b212:	461a      	mov	r2, r3
 800b214:	7bfb      	ldrb	r3, [r7, #15]
 800b216:	4313      	orrs	r3, r2
 800b218:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b21a:	2200      	movs	r2, #0
 800b21c:	2100      	movs	r1, #0
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f003 fb90 	bl	800e944 <VL53L0X_WrByte>
 800b224:	4603      	mov	r3, r0
 800b226:	461a      	mov	r2, r3
 800b228:	7bfb      	ldrb	r3, [r7, #15]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	73fb      	strb	r3, [r7, #15]
 800b22e:	e058      	b.n	800b2e2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d121      	bne.n	800b27c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800b238:	787b      	ldrb	r3, [r7, #1]
 800b23a:	2b04      	cmp	r3, #4
 800b23c:	d81b      	bhi.n	800b276 <VL53L0X_SetGpioConfig+0x1ce>
 800b23e:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <VL53L0X_SetGpioConfig+0x19c>)
 800b240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b244:	0800b259 	.word	0x0800b259
 800b248:	0800b25f 	.word	0x0800b25f
 800b24c:	0800b265 	.word	0x0800b265
 800b250:	0800b26b 	.word	0x0800b26b
 800b254:	0800b271 	.word	0x0800b271
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b258:	2300      	movs	r3, #0
 800b25a:	73bb      	strb	r3, [r7, #14]
				break;
 800b25c:	e00f      	b.n	800b27e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b25e:	2301      	movs	r3, #1
 800b260:	73bb      	strb	r3, [r7, #14]
				break;
 800b262:	e00c      	b.n	800b27e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800b264:	2302      	movs	r3, #2
 800b266:	73bb      	strb	r3, [r7, #14]
				break;
 800b268:	e009      	b.n	800b27e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800b26a:	2303      	movs	r3, #3
 800b26c:	73bb      	strb	r3, [r7, #14]
				break;
 800b26e:	e006      	b.n	800b27e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800b270:	2304      	movs	r3, #4
 800b272:	73bb      	strb	r3, [r7, #14]
				break;
 800b274:	e003      	b.n	800b27e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800b276:	23f5      	movs	r3, #245	; 0xf5
 800b278:	73fb      	strb	r3, [r7, #15]
 800b27a:	e000      	b.n	800b27e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800b27c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800b27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d107      	bne.n	800b296 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800b286:	7bbb      	ldrb	r3, [r7, #14]
 800b288:	461a      	mov	r2, r3
 800b28a:	210a      	movs	r1, #10
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f003 fb59 	bl	800e944 <VL53L0X_WrByte>
 800b292:	4603      	mov	r3, r0
 800b294:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800b296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10f      	bne.n	800b2be <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b29e:	7e3b      	ldrb	r3, [r7, #24]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d102      	bne.n	800b2aa <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73bb      	strb	r3, [r7, #14]
 800b2a8:	e001      	b.n	800b2ae <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800b2aa:	2310      	movs	r3, #16
 800b2ac:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	22ef      	movs	r2, #239	; 0xef
 800b2b2:	2184      	movs	r1, #132	; 0x84
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f003 fb93 	bl	800e9e0 <VL53L0X_UpdateByte>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d103      	bne.n	800b2ce <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	787a      	ldrb	r2, [r7, #1]
 800b2ca:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800b2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d105      	bne.n	800b2e2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f83f 	bl	800b35c <VL53L0X_ClearInterruptMask>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop

0800b2f0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	607a      	str	r2, [r7, #4]
 800b2fa:	603b      	str	r3, [r7, #0]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b300:	2300      	movs	r3, #0
 800b302:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800b304:	f107 0314 	add.w	r3, r7, #20
 800b308:	461a      	mov	r2, r3
 800b30a:	210e      	movs	r1, #14
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f003 fbc5 	bl	800ea9c <VL53L0X_RdWord>
 800b312:	4603      	mov	r3, r0
 800b314:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b316:	8abb      	ldrh	r3, [r7, #20]
 800b318:	045b      	lsls	r3, r3, #17
 800b31a:	461a      	mov	r2, r3
 800b31c:	4b0e      	ldr	r3, [pc, #56]	; (800b358 <VL53L0X_GetInterruptThresholds+0x68>)
 800b31e:	4013      	ands	r3, r2
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10f      	bne.n	800b34c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800b32c:	f107 0314 	add.w	r3, r7, #20
 800b330:	461a      	mov	r2, r3
 800b332:	210c      	movs	r1, #12
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f003 fbb1 	bl	800ea9c <VL53L0X_RdWord>
 800b33a:	4603      	mov	r3, r0
 800b33c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b33e:	8abb      	ldrh	r3, [r7, #20]
 800b340:	045b      	lsls	r3, r3, #17
 800b342:	461a      	mov	r2, r3
 800b344:	4b04      	ldr	r3, [pc, #16]	; (800b358 <VL53L0X_GetInterruptThresholds+0x68>)
 800b346:	4013      	ands	r3, r2
		*pThresholdHigh =
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b34c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	1ffe0000 	.word	0x1ffe0000

0800b35c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800b36e:	2201      	movs	r2, #1
 800b370:	210b      	movs	r1, #11
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f003 fae6 	bl	800e944 <VL53L0X_WrByte>
 800b378:	4603      	mov	r3, r0
 800b37a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800b37c:	2200      	movs	r2, #0
 800b37e:	210b      	movs	r1, #11
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f003 fadf 	bl	800e944 <VL53L0X_WrByte>
 800b386:	4603      	mov	r3, r0
 800b388:	461a      	mov	r2, r3
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800b390:	f107 030d 	add.w	r3, r7, #13
 800b394:	461a      	mov	r2, r3
 800b396:	2113      	movs	r1, #19
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f003 fb55 	bl	800ea48 <VL53L0X_RdByte>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800b3a8:	7bbb      	ldrb	r3, [r7, #14]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800b3ae:	7b7b      	ldrb	r3, [r7, #13]
 800b3b0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d006      	beq.n	800b3c6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d803      	bhi.n	800b3c6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800b3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0d3      	beq.n	800b36e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d901      	bls.n	800b3d0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800b3cc:	23f4      	movs	r3, #244	; 0xf4
 800b3ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800b3ea:	f107 030e 	add.w	r3, r7, #14
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	2113      	movs	r1, #19
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f003 fb28 	bl	800ea48 <VL53L0X_RdByte>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	f003 0207 	and.w	r2, r3, #7
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800b406:	7bbb      	ldrb	r3, [r7, #14]
 800b408:	f003 0318 	and.w	r3, r3, #24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d001      	beq.n	800b414 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800b410:	23fa      	movs	r3, #250	; 0xfa
 800b412:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b414:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	4613      	mov	r3, r2
 800b42c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b42e:	2300      	movs	r3, #0
 800b430:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 800b432:	79fb      	ldrb	r3, [r7, #7]
 800b434:	461a      	mov	r2, r3
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f000 fc55 	bl	800bce8 <VL53L0X_set_reference_spads>
 800b43e:	4603      	mov	r3, r0
 800b440:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 800b442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b086      	sub	sp, #24
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b45a:	2300      	movs	r3, #0
 800b45c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	68b9      	ldr	r1, [r7, #8]
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 fa34 	bl	800b8d0 <VL53L0X_perform_ref_spad_management>
 800b468:	4603      	mov	r3, r0
 800b46a:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b46c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3718      	adds	r7, #24
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800b482:	2101      	movs	r1, #1
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7fe fea3 	bl	800a1d0 <VL53L0X_SetDeviceMode>
 800b48a:	4603      	mov	r3, r0
 800b48c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800b496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b49a:	e019      	b.n	800b4d0 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7ff fbad 	bl	800abfc <VL53L0X_StartMeasurement>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800b4ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4b2:	e00d      	b.n	800b4d0 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff fca2 	bl	800ae00 <VL53L0X_GetRangingMeasurementData>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800b4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4cc:	e000      	b.n	800b4d0 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b4e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b4ea:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b4ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4f0:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b4f2:	f107 0308 	add.w	r3, r7, #8
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	2128      	movs	r1, #40	; 0x28
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f003 face 	bl	800ea9c <VL53L0X_RdWord>
 800b500:	4603      	mov	r3, r0
 800b502:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d11e      	bne.n	800b54a <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b50c:	893b      	ldrh	r3, [r7, #8]
 800b50e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b512:	b29b      	uxth	r3, r3
 800b514:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b516:	893b      	ldrh	r3, [r7, #8]
 800b518:	461a      	mov	r2, r3
 800b51a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b51e:	429a      	cmp	r2, r3
 800b520:	dd0b      	ble.n	800b53a <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b522:	893a      	ldrh	r2, [r7, #8]
 800b524:	897b      	ldrh	r3, [r7, #10]
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	b29b      	uxth	r3, r3
 800b52a:	b21b      	sxth	r3, r3
 800b52c:	461a      	mov	r2, r3
					* 250;
 800b52e:	23fa      	movs	r3, #250	; 0xfa
 800b530:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	e007      	b.n	800b54a <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800b53a:	893b      	ldrh	r3, [r7, #8]
 800b53c:	b21b      	sxth	r3, r3
 800b53e:	461a      	mov	r2, r3
 800b540:	23fa      	movs	r3, #250	; 0xfa
 800b542:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800b54a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800b556:	b480      	push	{r7}
 800b558:	b08b      	sub	sp, #44	; 0x2c
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	60f8      	str	r0, [r7, #12]
 800b55e:	60b9      	str	r1, [r7, #8]
 800b560:	607a      	str	r2, [r7, #4]
 800b562:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800b564:	2308      	movs	r3, #8
 800b566:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	f04f 32ff 	mov.w	r2, #4294967295
 800b572:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57c:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	69ba      	ldr	r2, [r7, #24]
 800b582:	fbb3 f2f2 	udiv	r2, r3, r2
 800b586:	69b9      	ldr	r1, [r7, #24]
 800b588:	fb01 f202 	mul.w	r2, r1, r2
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	627b      	str	r3, [r7, #36]	; 0x24
 800b594:	e030      	b.n	800b5f8 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	4413      	add	r3, r2
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d11e      	bne.n	800b5ea <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b5ac:	7ffa      	ldrb	r2, [r7, #31]
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	fa42 f303 	asr.w	r3, r2, r3
 800b5b4:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b5ba:	e016      	b.n	800b5ea <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b5bc:	7ffb      	ldrb	r3, [r7, #31]
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00b      	beq.n	800b5de <get_next_good_spad+0x88>
				success = 1;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	69ba      	ldr	r2, [r7, #24]
 800b5ce:	fb03 f202 	mul.w	r2, r3, r2
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	601a      	str	r2, [r3, #0]
				break;
 800b5dc:	e009      	b.n	800b5f2 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800b5de:	7ffb      	ldrb	r3, [r7, #31]
 800b5e0:	085b      	lsrs	r3, r3, #1
 800b5e2:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800b5ea:	6a3a      	ldr	r2, [r7, #32]
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d3e4      	bcc.n	800b5bc <get_next_good_spad+0x66>
				coarseIndex++) {
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d202      	bcs.n	800b606 <get_next_good_spad+0xb0>
 800b600:	7fbb      	ldrb	r3, [r7, #30]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d0c7      	beq.n	800b596 <get_next_good_spad+0x40>
		}
	}
}
 800b606:	bf00      	nop
 800b608:	372c      	adds	r7, #44	; 0x2c
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
	...

0800b614 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800b61c:	2301      	movs	r3, #1
 800b61e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	099b      	lsrs	r3, r3, #6
 800b624:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800b626:	4a07      	ldr	r2, [pc, #28]	; (800b644 <is_aperture+0x30>)
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <is_aperture+0x22>
		isAperture = 0;
 800b632:	2300      	movs	r3, #0
 800b634:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800b636:	7bfb      	ldrb	r3, [r7, #15]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3714      	adds	r7, #20
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr
 800b644:	20000504 	.word	0x20000504

0800b648 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800b648:	b480      	push	{r7}
 800b64a:	b089      	sub	sp, #36	; 0x24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b654:	2300      	movs	r3, #0
 800b656:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800b658:	2308      	movs	r3, #8
 800b65a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	fbb2 f3f3 	udiv	r3, r2, r3
 800b664:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b66e:	69b9      	ldr	r1, [r7, #24]
 800b670:	fb01 f202 	mul.w	r2, r1, r2
 800b674:	1a9b      	subs	r3, r3, r2
 800b676:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d302      	bcc.n	800b686 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b680:	23ce      	movs	r3, #206	; 0xce
 800b682:	77fb      	strb	r3, [r7, #31]
 800b684:	e010      	b.n	800b6a8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	4413      	add	r3, r2
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	b25a      	sxtb	r2, r3
 800b690:	2101      	movs	r1, #1
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	fa01 f303 	lsl.w	r3, r1, r3
 800b698:	b25b      	sxtb	r3, r3
 800b69a:	4313      	orrs	r3, r2
 800b69c:	b259      	sxtb	r1, r3
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	b2ca      	uxtb	r2, r1
 800b6a6:	701a      	strb	r2, [r3, #0]

	return status;
 800b6a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3724      	adds	r7, #36	; 0x24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800b6c2:	2306      	movs	r3, #6
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	21b0      	movs	r1, #176	; 0xb0
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f003 f8df 	bl	800e88c <VL53L0X_WriteMulti>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800b6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800b6e8:	2306      	movs	r3, #6
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	21b0      	movs	r1, #176	; 0xb0
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f003 f8fc 	bl	800e8ec <VL53L0X_ReadMulti>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800b6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b08c      	sub	sp, #48	; 0x30
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	607a      	str	r2, [r7, #4]
 800b70e:	603b      	str	r3, [r7, #0]
 800b710:	460b      	mov	r3, r1
 800b712:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b714:	2300      	movs	r3, #0
 800b716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800b71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b71c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800b71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b720:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b722:	2300      	movs	r3, #0
 800b724:	62bb      	str	r3, [r7, #40]	; 0x28
 800b726:	e02b      	b.n	800b780 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800b728:	f107 031c 	add.w	r3, r7, #28
 800b72c:	6a3a      	ldr	r2, [r7, #32]
 800b72e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff ff10 	bl	800b556 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73c:	d103      	bne.n	800b746 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b73e:	23ce      	movs	r3, #206	; 0xce
 800b740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b744:	e020      	b.n	800b788 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	461a      	mov	r2, r3
 800b74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b74c:	4413      	add	r3, r2
 800b74e:	4618      	mov	r0, r3
 800b750:	f7ff ff60 	bl	800b614 <is_aperture>
 800b754:	4603      	mov	r3, r0
 800b756:	461a      	mov	r2, r3
 800b758:	7afb      	ldrb	r3, [r7, #11]
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d003      	beq.n	800b766 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b75e:	23ce      	movs	r3, #206	; 0xce
 800b760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b764:	e010      	b.n	800b788 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800b76a:	6a3a      	ldr	r2, [r7, #32]
 800b76c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b76e:	6838      	ldr	r0, [r7, #0]
 800b770:	f7ff ff6a 	bl	800b648 <enable_spad_bit>
		currentSpad++;
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	3301      	adds	r3, #1
 800b778:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77c:	3301      	adds	r3, #1
 800b77e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b784:	429a      	cmp	r2, r3
 800b786:	d3cf      	bcc.n	800b728 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800b788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b78a:	6a3a      	ldr	r2, [r7, #32]
 800b78c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800b78e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b792:	2b00      	cmp	r3, #0
 800b794:	d106      	bne.n	800b7a4 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff ff8d 	bl	800b6b8 <set_ref_spad_map>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800b7a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d121      	bne.n	800b7f0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800b7ac:	f107 0314 	add.w	r3, r7, #20
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff ff93 	bl	800b6de <get_ref_spad_map>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800b7c2:	e011      	b.n	800b7e8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	4413      	add	r3, r2
 800b7ca:	781a      	ldrb	r2, [r3, #0]
 800b7cc:	f107 0114 	add.w	r1, r7, #20
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	440b      	add	r3, r1
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d003      	beq.n	800b7e2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b7da:	23ce      	movs	r3, #206	; 0xce
 800b7dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b7e0:	e006      	b.n	800b7f0 <enable_ref_spads+0xec>
			}
			i++;
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800b7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d3e9      	bcc.n	800b7c4 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800b7f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3730      	adds	r7, #48	; 0x30
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08a      	sub	sp, #40	; 0x28
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b806:	2300      	movs	r3, #0
 800b808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800b80c:	2300      	movs	r3, #0
 800b80e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800b81c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b820:	2b00      	cmp	r3, #0
 800b822:	d107      	bne.n	800b834 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800b824:	22c0      	movs	r2, #192	; 0xc0
 800b826:	2101      	movs	r1, #1
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f003 f88b 	bl	800e944 <VL53L0X_WrByte>
 800b82e:	4603      	mov	r3, r0
 800b830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800b834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d108      	bne.n	800b84e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800b83c:	f107 0308 	add.w	r3, r7, #8
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff fc00 	bl	800b048 <VL53L0X_PerformSingleRangingMeasurement>
 800b848:	4603      	mov	r3, r0
 800b84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800b84e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b852:	2b00      	cmp	r3, #0
 800b854:	d107      	bne.n	800b866 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b856:	2201      	movs	r2, #1
 800b858:	21ff      	movs	r1, #255	; 0xff
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f003 f872 	bl	800e944 <VL53L0X_WrByte>
 800b860:	4603      	mov	r3, r0
 800b862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800b866:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d107      	bne.n	800b87e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	21b6      	movs	r1, #182	; 0xb6
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f003 f912 	bl	800ea9c <VL53L0X_RdWord>
 800b878:	4603      	mov	r3, r0
 800b87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800b87e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b882:	2b00      	cmp	r3, #0
 800b884:	d107      	bne.n	800b896 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b886:	2200      	movs	r2, #0
 800b888:	21ff      	movs	r1, #255	; 0xff
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f003 f85a 	bl	800e944 <VL53L0X_WrByte>
 800b890:	4603      	mov	r3, r0
 800b892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800b896:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d112      	bne.n	800b8c4 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b89e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f003 f84c 	bl	800e944 <VL53L0X_WrByte>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800b8b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d104      	bne.n	800b8c4 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b8c0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800b8c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3728      	adds	r7, #40	; 0x28
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800b8d0:	b590      	push	{r4, r7, lr}
 800b8d2:	b09d      	sub	sp, #116	; 0x74
 800b8d4:	af06      	add	r7, sp, #24
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800b8e2:	23b4      	movs	r3, #180	; 0xb4
 800b8e4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800b8ec:	232c      	movs	r3, #44	; 0x2c
 800b8ee:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800b8fc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800b900:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800b90a:	2306      	movs	r3, #6
 800b90c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800b934:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800b936:	2300      	movs	r3, #0
 800b938:	64bb      	str	r3, [r7, #72]	; 0x48
 800b93a:	e009      	b.n	800b950 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b940:	4413      	add	r3, r2
 800b942:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b946:	2200      	movs	r2, #0
 800b948:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b94a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b94c:	3301      	adds	r3, #1
 800b94e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	429a      	cmp	r2, r3
 800b956:	d3f1      	bcc.n	800b93c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b958:	2201      	movs	r2, #1
 800b95a:	21ff      	movs	r1, #255	; 0xff
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f002 fff1 	bl	800e944 <VL53L0X_WrByte>
 800b962:	4603      	mov	r3, r0
 800b964:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b968:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d107      	bne.n	800b980 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800b970:	2200      	movs	r2, #0
 800b972:	214f      	movs	r1, #79	; 0x4f
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f002 ffe5 	bl	800e944 <VL53L0X_WrByte>
 800b97a:	4603      	mov	r3, r0
 800b97c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b980:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b984:	2b00      	cmp	r3, #0
 800b986:	d107      	bne.n	800b998 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800b988:	222c      	movs	r2, #44	; 0x2c
 800b98a:	214e      	movs	r1, #78	; 0x4e
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f002 ffd9 	bl	800e944 <VL53L0X_WrByte>
 800b992:	4603      	mov	r3, r0
 800b994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b998:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d107      	bne.n	800b9b0 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	21ff      	movs	r1, #255	; 0xff
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f002 ffcd 	bl	800e944 <VL53L0X_WrByte>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b9b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d109      	bne.n	800b9cc <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800b9b8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b9bc:	461a      	mov	r2, r3
 800b9be:	21b6      	movs	r1, #182	; 0xb6
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f002 ffbf 	bl	800e944 <VL53L0X_WrByte>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800b9cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d107      	bne.n	800b9e4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2180      	movs	r1, #128	; 0x80
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f002 ffb3 	bl	800e944 <VL53L0X_WrByte>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800b9e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10a      	bne.n	800ba02 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800b9ec:	f107 0210 	add.w	r2, r7, #16
 800b9f0:	f107 0111 	add.w	r1, r7, #17
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f000 fbbb 	bl	800c172 <VL53L0X_perform_ref_calibration>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800ba02:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d121      	bne.n	800ba4e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800ba0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba10:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800ba16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba18:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800ba26:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ba2a:	f107 0218 	add.w	r2, r7, #24
 800ba2e:	9204      	str	r2, [sp, #16]
 800ba30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba32:	9203      	str	r2, [sp, #12]
 800ba34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba36:	9202      	str	r2, [sp, #8]
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	4623      	mov	r3, r4
 800ba40:	4602      	mov	r2, r0
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f7ff fe5e 	bl	800b704 <enable_ref_spads>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d174      	bne.n	800bb40 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800ba5a:	f107 0312 	add.w	r3, r7, #18
 800ba5e:	4619      	mov	r1, r3
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f7ff fecb 	bl	800b7fc <perform_ref_signal_measurement>
 800ba66:	4603      	mov	r3, r0
 800ba68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ba6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d161      	bne.n	800bb38 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800ba74:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ba76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d25d      	bcs.n	800bb38 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba80:	e009      	b.n	800ba96 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba86:	4413      	add	r3, r2
 800ba88:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800ba90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba92:	3301      	adds	r3, #1
 800ba94:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d3f1      	bcc.n	800ba82 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800ba9e:	e002      	b.n	800baa6 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800baa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baa2:	3301      	adds	r3, #1
 800baa4:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800baa6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800baaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baac:	4413      	add	r3, r2
 800baae:	4618      	mov	r0, r3
 800bab0:	f7ff fdb0 	bl	800b614 <is_aperture>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d103      	bne.n	800bac2 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800baba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	429a      	cmp	r2, r3
 800bac0:	d3ee      	bcc.n	800baa0 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800bac2:	2301      	movs	r3, #1
 800bac4:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800bac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800bad6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bada:	f107 0218 	add.w	r2, r7, #24
 800bade:	9204      	str	r2, [sp, #16]
 800bae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bae2:	9203      	str	r2, [sp, #12]
 800bae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bae6:	9202      	str	r2, [sp, #8]
 800bae8:	9301      	str	r3, [sp, #4]
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	4623      	mov	r3, r4
 800baf0:	4602      	mov	r2, r0
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f7ff fe06 	bl	800b704 <enable_ref_spads>
 800baf8:	4603      	mov	r3, r0
 800bafa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bafe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d11b      	bne.n	800bb3e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800bb0a:	f107 0312 	add.w	r3, r7, #18
 800bb0e:	4619      	mov	r1, r3
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f7ff fe73 	bl	800b7fc <perform_ref_signal_measurement>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800bb1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10c      	bne.n	800bb3e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800bb24:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800bb26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d208      	bcs.n	800bb3e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800bb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb34:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800bb36:	e002      	b.n	800bb3e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb3c:	e000      	b.n	800bb40 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800bb3e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bb40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f040 80af 	bne.w	800bca8 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800bb4a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800bb4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	f240 80aa 	bls.w	800bca8 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800bb54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800bb5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb5c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800bb64:	f107 031c 	add.w	r3, r7, #28
 800bb68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f006 fc4c 	bl	8012408 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800bb70:	8a7b      	ldrh	r3, [r7, #18]
 800bb72:	461a      	mov	r2, r3
 800bb74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	bfb8      	it	lt
 800bb7c:	425b      	neglt	r3, r3
 800bb7e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800bb80:	2300      	movs	r3, #0
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800bb86:	e086      	b.n	800bc96 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800bb8e:	f107 0314 	add.w	r3, r7, #20
 800bb92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb96:	f7ff fcde 	bl	800b556 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba0:	d103      	bne.n	800bbaa <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bba2:	23ce      	movs	r3, #206	; 0xce
 800bba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800bba8:	e07e      	b.n	800bca8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800bbaa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff fd2e 	bl	800b614 <is_aperture>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	461a      	mov	r2, r3
 800bbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d003      	beq.n	800bbca <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800bbc8:	e06e      	b.n	800bca8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800bbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbcc:	3301      	adds	r3, #1
 800bbce:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800bbda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff fd32 	bl	800b648 <enable_spad_bit>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bbea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10c      	bne.n	800bc0c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800bbf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800bbfe:	4619      	mov	r1, r3
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f7ff fd59 	bl	800b6b8 <set_ref_spad_map>
 800bc06:	4603      	mov	r3, r0
 800bc08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800bc0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d146      	bne.n	800bca2 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800bc14:	f107 0312 	add.w	r3, r7, #18
 800bc18:	4619      	mov	r1, r3
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f7ff fdee 	bl	800b7fc <perform_ref_signal_measurement>
 800bc20:	4603      	mov	r3, r0
 800bc22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800bc26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d13b      	bne.n	800bca6 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800bc2e:	8a7b      	ldrh	r3, [r7, #18]
 800bc30:	461a      	mov	r2, r3
 800bc32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	bfb8      	it	lt
 800bc3a:	425b      	neglt	r3, r3
 800bc3c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800bc3e:	8a7b      	ldrh	r3, [r7, #18]
 800bc40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d21c      	bcs.n	800bc80 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800bc46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d914      	bls.n	800bc78 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800bc4e:	f107 031c 	add.w	r3, r7, #28
 800bc52:	4619      	mov	r1, r3
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f7ff fd2f 	bl	800b6b8 <set_ref_spad_map>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800bc66:	f107 011c 	add.w	r1, r7, #28
 800bc6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f006 fbcb 	bl	8012408 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800bc72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc74:	3b01      	subs	r3, #1
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc7e:	e00a      	b.n	800bc96 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc82:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800bc8a:	f107 031c 	add.w	r3, r7, #28
 800bc8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc90:	4618      	mov	r0, r3
 800bc92:	f006 fbb9 	bl	8012408 <memcpy>
		while (!complete) {
 800bc96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f43f af74 	beq.w	800bb88 <VL53L0X_perform_ref_spad_management+0x2b8>
 800bca0:	e002      	b.n	800bca8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800bca2:	bf00      	nop
 800bca4:	e000      	b.n	800bca8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800bca6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bca8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d115      	bne.n	800bcdc <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcb4:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800bcbc:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	781a      	ldrb	r2, [r3, #0]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800bcdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	375c      	adds	r7, #92	; 0x5c
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd90      	pop	{r4, r7, pc}

0800bce8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800bce8:	b590      	push	{r4, r7, lr}
 800bcea:	b093      	sub	sp, #76	; 0x4c
 800bcec:	af06      	add	r7, sp, #24
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800bd00:	23b4      	movs	r3, #180	; 0xb4
 800bd02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800bd06:	2306      	movs	r3, #6
 800bd08:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800bd0a:	232c      	movs	r3, #44	; 0x2c
 800bd0c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd0e:	2201      	movs	r2, #1
 800bd10:	21ff      	movs	r1, #255	; 0xff
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f002 fe16 	bl	800e944 <VL53L0X_WrByte>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800bd1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d107      	bne.n	800bd36 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800bd26:	2200      	movs	r2, #0
 800bd28:	214f      	movs	r1, #79	; 0x4f
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f002 fe0a 	bl	800e944 <VL53L0X_WrByte>
 800bd30:	4603      	mov	r3, r0
 800bd32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800bd36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d107      	bne.n	800bd4e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800bd3e:	222c      	movs	r2, #44	; 0x2c
 800bd40:	214e      	movs	r1, #78	; 0x4e
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f002 fdfe 	bl	800e944 <VL53L0X_WrByte>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800bd4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d107      	bne.n	800bd66 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd56:	2200      	movs	r2, #0
 800bd58:	21ff      	movs	r1, #255	; 0xff
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f002 fdf2 	bl	800e944 <VL53L0X_WrByte>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800bd66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800bd6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd72:	461a      	mov	r2, r3
 800bd74:	21b6      	movs	r1, #182	; 0xb6
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f002 fde4 	bl	800e944 <VL53L0X_WrByte>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800bd82:	2300      	movs	r3, #0
 800bd84:	627b      	str	r3, [r7, #36]	; 0x24
 800bd86:	e009      	b.n	800bd9c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800bd92:	2200      	movs	r2, #0
 800bd94:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	3301      	adds	r3, #1
 800bd9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d3f1      	bcc.n	800bd88 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d011      	beq.n	800bdce <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800bdaa:	e002      	b.n	800bdb2 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdae:	3301      	adds	r3, #1
 800bdb0:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800bdb2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb8:	4413      	add	r3, r2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff fc2a 	bl	800b614 <is_aperture>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d103      	bne.n	800bdce <VL53L0X_set_reference_spads+0xe6>
 800bdc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d3ee      	bcc.n	800bdac <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800bdda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdde:	79f9      	ldrb	r1, [r7, #7]
 800bde0:	f107 0214 	add.w	r2, r7, #20
 800bde4:	9204      	str	r2, [sp, #16]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	9203      	str	r2, [sp, #12]
 800bdea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdec:	9202      	str	r2, [sp, #8]
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	4623      	mov	r3, r4
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7ff fc83 	bl	800b704 <enable_ref_spads>
 800bdfe:	4603      	mov	r3, r0
 800be00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800be04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10c      	bne.n	800be26 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	b2da      	uxtb	r2, r3
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	79fa      	ldrb	r2, [r7, #7]
 800be22:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800be26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3734      	adds	r7, #52	; 0x34
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd90      	pop	{r4, r7, pc}

0800be32 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800be32:	b580      	push	{r7, lr}
 800be34:	b084      	sub	sp, #16
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
 800be3a:	460b      	mov	r3, r1
 800be3c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be3e:	2300      	movs	r3, #0
 800be40:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800be42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10a      	bne.n	800be60 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800be4a:	78fb      	ldrb	r3, [r7, #3]
 800be4c:	f043 0301 	orr.w	r3, r3, #1
 800be50:	b2db      	uxtb	r3, r3
 800be52:	461a      	mov	r2, r3
 800be54:	2100      	movs	r1, #0
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f002 fd74 	bl	800e944 <VL53L0X_WrByte>
 800be5c:	4603      	mov	r3, r0
 800be5e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800be60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d104      	bne.n	800be72 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f9e2 	bl	800c232 <VL53L0X_measurement_poll_for_completion>
 800be6e:	4603      	mov	r3, r0
 800be70:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800be72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d105      	bne.n	800be86 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800be7a:	2100      	movs	r1, #0
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7ff fa6d 	bl	800b35c <VL53L0X_ClearInterruptMask>
 800be82:	4603      	mov	r3, r0
 800be84:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800be86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d106      	bne.n	800be9c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800be8e:	2200      	movs	r2, #0
 800be90:	2100      	movs	r1, #0
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f002 fd56 	bl	800e944 <VL53L0X_WrByte>
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800be9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	4608      	mov	r0, r1
 800beb2:	4611      	mov	r1, r2
 800beb4:	461a      	mov	r2, r3
 800beb6:	4603      	mov	r3, r0
 800beb8:	70fb      	strb	r3, [r7, #3]
 800beba:	460b      	mov	r3, r1
 800bebc:	70bb      	strb	r3, [r7, #2]
 800bebe:	4613      	mov	r3, r2
 800bec0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800beca:	2201      	movs	r2, #1
 800becc:	21ff      	movs	r1, #255	; 0xff
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f002 fd38 	bl	800e944 <VL53L0X_WrByte>
 800bed4:	4603      	mov	r3, r0
 800bed6:	461a      	mov	r2, r3
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	4313      	orrs	r3, r2
 800bedc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bede:	2200      	movs	r2, #0
 800bee0:	2100      	movs	r1, #0
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f002 fd2e 	bl	800e944 <VL53L0X_WrByte>
 800bee8:	4603      	mov	r3, r0
 800beea:	461a      	mov	r2, r3
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	4313      	orrs	r3, r2
 800bef0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bef2:	2200      	movs	r2, #0
 800bef4:	21ff      	movs	r1, #255	; 0xff
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f002 fd24 	bl	800e944 <VL53L0X_WrByte>
 800befc:	4603      	mov	r3, r0
 800befe:	461a      	mov	r2, r3
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800bf06:	78fb      	ldrb	r3, [r7, #3]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d01e      	beq.n	800bf4a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800bf0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d009      	beq.n	800bf28 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	21cb      	movs	r1, #203	; 0xcb
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f002 fd95 	bl	800ea48 <VL53L0X_RdByte>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	461a      	mov	r2, r3
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800bf28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d02a      	beq.n	800bf86 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800bf30:	f107 030e 	add.w	r3, r7, #14
 800bf34:	461a      	mov	r2, r3
 800bf36:	21ee      	movs	r1, #238	; 0xee
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f002 fd85 	bl	800ea48 <VL53L0X_RdByte>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	461a      	mov	r2, r3
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	73fb      	strb	r3, [r7, #15]
 800bf48:	e01d      	b.n	800bf86 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800bf4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00a      	beq.n	800bf68 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800bf52:	78bb      	ldrb	r3, [r7, #2]
 800bf54:	461a      	mov	r2, r3
 800bf56:	21cb      	movs	r1, #203	; 0xcb
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f002 fcf3 	bl	800e944 <VL53L0X_WrByte>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	461a      	mov	r2, r3
 800bf62:	7bfb      	ldrb	r3, [r7, #15]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800bf68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00a      	beq.n	800bf86 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800bf70:	787b      	ldrb	r3, [r7, #1]
 800bf72:	2280      	movs	r2, #128	; 0x80
 800bf74:	21ee      	movs	r1, #238	; 0xee
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f002 fd32 	bl	800e9e0 <VL53L0X_UpdateByte>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
 800bf82:	4313      	orrs	r3, r2
 800bf84:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bf86:	2201      	movs	r2, #1
 800bf88:	21ff      	movs	r1, #255	; 0xff
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f002 fcda 	bl	800e944 <VL53L0X_WrByte>
 800bf90:	4603      	mov	r3, r0
 800bf92:	461a      	mov	r2, r3
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	4313      	orrs	r3, r2
 800bf98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f002 fcd0 	bl	800e944 <VL53L0X_WrByte>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	7bfb      	ldrb	r3, [r7, #15]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bfae:	2200      	movs	r2, #0
 800bfb0:	21ff      	movs	r1, #255	; 0xff
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f002 fcc6 	bl	800e944 <VL53L0X_WrByte>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	461a      	mov	r2, r3
 800bfbc:	7bfb      	ldrb	r3, [r7, #15]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
 800bfc4:	f023 0310 	bic.w	r3, r3, #16
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	701a      	strb	r2, [r3, #0]

	return Status;
 800bfce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b08a      	sub	sp, #40	; 0x28
 800bfde:	af04      	add	r7, sp, #16
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	460b      	mov	r3, r1
 800bfea:	71fb      	strb	r3, [r7, #7]
 800bfec:	4613      	mov	r3, r2
 800bfee:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bff0:	2300      	movs	r3, #0
 800bff2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800c000:	2300      	movs	r3, #0
 800c002:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c004:	79bb      	ldrb	r3, [r7, #6]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c010:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c012:	2201      	movs	r2, #1
 800c014:	2101      	movs	r1, #1
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f002 fc94 	bl	800e944 <VL53L0X_WrByte>
 800c01c:	4603      	mov	r3, r0
 800c01e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c020:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d105      	bne.n	800c034 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c028:	2140      	movs	r1, #64	; 0x40
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7ff ff01 	bl	800be32 <VL53L0X_perform_single_ref_calibration>
 800c030:	4603      	mov	r3, r0
 800c032:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d115      	bne.n	800c068 <VL53L0X_perform_vhv_calibration+0x8e>
 800c03c:	79fb      	ldrb	r3, [r7, #7]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d112      	bne.n	800c068 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c042:	7d39      	ldrb	r1, [r7, #20]
 800c044:	7d7a      	ldrb	r2, [r7, #21]
 800c046:	2300      	movs	r3, #0
 800c048:	9303      	str	r3, [sp, #12]
 800c04a:	2301      	movs	r3, #1
 800c04c:	9302      	str	r3, [sp, #8]
 800c04e:	f107 0313 	add.w	r3, r7, #19
 800c052:	9301      	str	r3, [sp, #4]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	460b      	mov	r3, r1
 800c05a:	2101      	movs	r1, #1
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f7ff ff23 	bl	800bea8 <VL53L0X_ref_calibration_io>
 800c062:	4603      	mov	r3, r0
 800c064:	75fb      	strb	r3, [r7, #23]
 800c066:	e002      	b.n	800c06e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2200      	movs	r2, #0
 800c06c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c06e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d112      	bne.n	800c09c <VL53L0X_perform_vhv_calibration+0xc2>
 800c076:	79bb      	ldrb	r3, [r7, #6]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00f      	beq.n	800c09c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c07c:	7dbb      	ldrb	r3, [r7, #22]
 800c07e:	461a      	mov	r2, r3
 800c080:	2101      	movs	r1, #1
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f002 fc5e 	bl	800e944 <VL53L0X_WrByte>
 800c088:	4603      	mov	r3, r0
 800c08a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c08c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d103      	bne.n	800c09c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	7dba      	ldrb	r2, [r7, #22]
 800c098:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c09c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08a      	sub	sp, #40	; 0x28
 800c0ac:	af04      	add	r7, sp, #16
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	71fb      	strb	r3, [r7, #7]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c0ce:	79bb      	ldrb	r3, [r7, #6]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d003      	beq.n	800c0dc <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c0da:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800c0dc:	2202      	movs	r2, #2
 800c0de:	2101      	movs	r1, #1
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f002 fc2f 	bl	800e944 <VL53L0X_WrByte>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d105      	bne.n	800c0fe <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f7ff fe9c 	bl	800be32 <VL53L0X_perform_single_ref_calibration>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c0fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d115      	bne.n	800c132 <VL53L0X_perform_phase_calibration+0x8a>
 800c106:	79fb      	ldrb	r3, [r7, #7]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d112      	bne.n	800c132 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c10c:	7d39      	ldrb	r1, [r7, #20]
 800c10e:	7d7a      	ldrb	r2, [r7, #21]
 800c110:	2301      	movs	r3, #1
 800c112:	9303      	str	r3, [sp, #12]
 800c114:	2300      	movs	r3, #0
 800c116:	9302      	str	r3, [sp, #8]
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	9301      	str	r3, [sp, #4]
 800c11c:	f107 0313 	add.w	r3, r7, #19
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	460b      	mov	r3, r1
 800c124:	2101      	movs	r1, #1
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f7ff febe 	bl	800bea8 <VL53L0X_ref_calibration_io>
 800c12c:	4603      	mov	r3, r0
 800c12e:	75fb      	strb	r3, [r7, #23]
 800c130:	e002      	b.n	800c138 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2200      	movs	r2, #0
 800c136:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d112      	bne.n	800c166 <VL53L0X_perform_phase_calibration+0xbe>
 800c140:	79bb      	ldrb	r3, [r7, #6]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00f      	beq.n	800c166 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c146:	7dbb      	ldrb	r3, [r7, #22]
 800c148:	461a      	mov	r2, r3
 800c14a:	2101      	movs	r1, #1
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f002 fbf9 	bl	800e944 <VL53L0X_WrByte>
 800c152:	4603      	mov	r3, r0
 800c154:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d103      	bne.n	800c166 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	7dba      	ldrb	r2, [r7, #22]
 800c162:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3718      	adds	r7, #24
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b086      	sub	sp, #24
 800c176:	af00      	add	r7, sp, #0
 800c178:	60f8      	str	r0, [r7, #12]
 800c17a:	60b9      	str	r1, [r7, #8]
 800c17c:	607a      	str	r2, [r7, #4]
 800c17e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c180:	2300      	movs	r3, #0
 800c182:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c184:	2300      	movs	r3, #0
 800c186:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c18e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800c190:	78fa      	ldrb	r2, [r7, #3]
 800c192:	2300      	movs	r3, #0
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7ff ff1f 	bl	800bfda <VL53L0X_perform_vhv_calibration>
 800c19c:	4603      	mov	r3, r0
 800c19e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800c1a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d107      	bne.n	800c1b8 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800c1a8:	78fa      	ldrb	r2, [r7, #3]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	6879      	ldr	r1, [r7, #4]
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f7ff ff7a 	bl	800c0a8 <VL53L0X_perform_phase_calibration>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800c1b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10f      	bne.n	800c1e0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c1c0:	7dbb      	ldrb	r3, [r7, #22]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	2101      	movs	r1, #1
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f002 fbbc 	bl	800e944 <VL53L0X_WrByte>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c1d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d103      	bne.n	800c1e0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	7dba      	ldrb	r2, [r7, #22]
 800c1dc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c1e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3718      	adds	r7, #24
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af04      	add	r7, sp, #16
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	70fb      	strb	r3, [r7, #3]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 800c200:	78b9      	ldrb	r1, [r7, #2]
 800c202:	78fa      	ldrb	r2, [r7, #3]
 800c204:	2301      	movs	r3, #1
 800c206:	9303      	str	r3, [sp, #12]
 800c208:	2301      	movs	r3, #1
 800c20a:	9302      	str	r3, [sp, #8]
 800c20c:	f107 030d 	add.w	r3, r7, #13
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	f107 030e 	add.w	r3, r7, #14
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	460b      	mov	r3, r1
 800c21a:	2100      	movs	r1, #0
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff fe43 	bl	800bea8 <VL53L0X_ref_calibration_io>
 800c222:	4603      	mov	r3, r0
 800c224:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 800c226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b086      	sub	sp, #24
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c23a:	2300      	movs	r3, #0
 800c23c:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800c23e:	2300      	movs	r3, #0
 800c240:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c246:	f107 030f 	add.w	r3, r7, #15
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7fe fd97 	bl	800ad80 <VL53L0X_GetMeasurementDataReady>
 800c252:	4603      	mov	r3, r0
 800c254:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800c256:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d110      	bne.n	800c280 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800c25e:	7bfb      	ldrb	r3, [r7, #15]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d00f      	beq.n	800c284 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	3301      	adds	r3, #1
 800c268:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c270:	d302      	bcc.n	800c278 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c272:	23f9      	movs	r3, #249	; 0xf9
 800c274:	75fb      	strb	r3, [r7, #23]
			break;
 800c276:	e006      	b.n	800c286 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f002 fc83 	bl	800eb84 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c27e:	e7e2      	b.n	800c246 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800c280:	bf00      	nop
 800c282:	e000      	b.n	800c286 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800c284:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800c286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c292:	b480      	push	{r7}
 800c294:	b085      	sub	sp, #20
 800c296:	af00      	add	r7, sp, #0
 800c298:	4603      	mov	r3, r0
 800c29a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c2a0:	79fb      	ldrb	r3, [r7, #7]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3714      	adds	r7, #20
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	085b      	lsrs	r3, r3, #1
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3714      	adds	r7, #20
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800c2de:	b480      	push	{r7}
 800c2e0:	b085      	sub	sp, #20
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c2ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2ee:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800c2f0:	e002      	b.n	800c2f8 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	089b      	lsrs	r3, r3, #2
 800c2f6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d8f8      	bhi.n	800c2f2 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800c300:	e017      	b.n	800c332 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	4413      	add	r3, r2
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d30b      	bcc.n	800c326 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	4413      	add	r3, r2
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	085b      	lsrs	r3, r3, #1
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	4413      	add	r3, r2
 800c322:	60fb      	str	r3, [r7, #12]
 800c324:	e002      	b.n	800c32c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	085b      	lsrs	r3, r3, #1
 800c32a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	089b      	lsrs	r3, r3, #2
 800c330:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1e4      	bne.n	800c302 <VL53L0X_isqrt+0x24>
	}

	return res;
 800c338:	68fb      	ldr	r3, [r7, #12]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b086      	sub	sp, #24
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c34e:	2300      	movs	r3, #0
 800c350:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800c352:	2200      	movs	r2, #0
 800c354:	2183      	movs	r1, #131	; 0x83
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f002 faf4 	bl	800e944 <VL53L0X_WrByte>
 800c35c:	4603      	mov	r3, r0
 800c35e:	461a      	mov	r2, r3
 800c360:	7dfb      	ldrb	r3, [r7, #23]
 800c362:	4313      	orrs	r3, r2
 800c364:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800c366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d11e      	bne.n	800c3ac <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800c372:	f107 030f 	add.w	r3, r7, #15
 800c376:	461a      	mov	r2, r3
 800c378:	2183      	movs	r1, #131	; 0x83
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f002 fb64 	bl	800ea48 <VL53L0X_RdByte>
 800c380:	4603      	mov	r3, r0
 800c382:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10a      	bne.n	800c3a0 <VL53L0X_device_read_strobe+0x5a>
 800c38a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d106      	bne.n	800c3a0 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	3301      	adds	r3, #1
 800c396:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c39e:	d3e8      	bcc.n	800c372 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c3a6:	d301      	bcc.n	800c3ac <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c3a8:	23f9      	movs	r3, #249	; 0xf9
 800c3aa:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	2183      	movs	r1, #131	; 0x83
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f002 fac7 	bl	800e944 <VL53L0X_WrByte>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800c3c0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b098      	sub	sp, #96	; 0x60
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800c3fc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800c400:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c414:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800c418:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c41c:	2b07      	cmp	r3, #7
 800c41e:	f000 8408 	beq.w	800cc32 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c422:	2201      	movs	r2, #1
 800c424:	2180      	movs	r1, #128	; 0x80
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f002 fa8c 	bl	800e944 <VL53L0X_WrByte>
 800c42c:	4603      	mov	r3, r0
 800c42e:	461a      	mov	r2, r3
 800c430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c434:	4313      	orrs	r3, r2
 800c436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c43a:	2201      	movs	r2, #1
 800c43c:	21ff      	movs	r1, #255	; 0xff
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f002 fa80 	bl	800e944 <VL53L0X_WrByte>
 800c444:	4603      	mov	r3, r0
 800c446:	461a      	mov	r2, r3
 800c448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c44c:	4313      	orrs	r3, r2
 800c44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c452:	2200      	movs	r2, #0
 800c454:	2100      	movs	r1, #0
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f002 fa74 	bl	800e944 <VL53L0X_WrByte>
 800c45c:	4603      	mov	r3, r0
 800c45e:	461a      	mov	r2, r3
 800c460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c464:	4313      	orrs	r3, r2
 800c466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c46a:	2206      	movs	r2, #6
 800c46c:	21ff      	movs	r1, #255	; 0xff
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f002 fa68 	bl	800e944 <VL53L0X_WrByte>
 800c474:	4603      	mov	r3, r0
 800c476:	461a      	mov	r2, r3
 800c478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c47c:	4313      	orrs	r3, r2
 800c47e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c482:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c486:	461a      	mov	r2, r3
 800c488:	2183      	movs	r1, #131	; 0x83
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f002 fadc 	bl	800ea48 <VL53L0X_RdByte>
 800c490:	4603      	mov	r3, r0
 800c492:	461a      	mov	r2, r3
 800c494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c498:	4313      	orrs	r3, r2
 800c49a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800c49e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4a2:	f043 0304 	orr.w	r3, r3, #4
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	2183      	movs	r1, #131	; 0x83
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f002 fa49 	bl	800e944 <VL53L0X_WrByte>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800c4c0:	2207      	movs	r2, #7
 800c4c2:	21ff      	movs	r1, #255	; 0xff
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f002 fa3d 	bl	800e944 <VL53L0X_WrByte>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800c4d8:	2201      	movs	r2, #1
 800c4da:	2181      	movs	r1, #129	; 0x81
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f002 fa31 	bl	800e944 <VL53L0X_WrByte>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f002 fb47 	bl	800eb84 <VL53L0X_PollingDelay>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4fe:	4313      	orrs	r3, r2
 800c500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c504:	2201      	movs	r2, #1
 800c506:	2180      	movs	r1, #128	; 0x80
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f002 fa1b 	bl	800e944 <VL53L0X_WrByte>
 800c50e:	4603      	mov	r3, r0
 800c510:	461a      	mov	r2, r3
 800c512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c516:	4313      	orrs	r3, r2
 800c518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800c51c:	78fb      	ldrb	r3, [r7, #3]
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	f000 8098 	beq.w	800c658 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c52c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c530:	2b00      	cmp	r3, #0
 800c532:	f040 8091 	bne.w	800c658 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c536:	226b      	movs	r2, #107	; 0x6b
 800c538:	2194      	movs	r1, #148	; 0x94
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f002 fa02 	bl	800e944 <VL53L0X_WrByte>
 800c540:	4603      	mov	r3, r0
 800c542:	461a      	mov	r2, r3
 800c544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c548:	4313      	orrs	r3, r2
 800c54a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff fef9 	bl	800c346 <VL53L0X_device_read_strobe>
 800c554:	4603      	mov	r3, r0
 800c556:	461a      	mov	r2, r3
 800c558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c55c:	4313      	orrs	r3, r2
 800c55e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c566:	461a      	mov	r2, r3
 800c568:	2190      	movs	r1, #144	; 0x90
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f002 face 	bl	800eb0c <VL53L0X_RdDWord>
 800c570:	4603      	mov	r3, r0
 800c572:	461a      	mov	r2, r3
 800c574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c578:	4313      	orrs	r3, r2
 800c57a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	0a1b      	lsrs	r3, r3, #8
 800c582:	b2db      	uxtb	r3, r3
 800c584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c588:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58e:	0bdb      	lsrs	r3, r3, #15
 800c590:	b2db      	uxtb	r3, r3
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c59a:	2224      	movs	r2, #36	; 0x24
 800c59c:	2194      	movs	r1, #148	; 0x94
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f002 f9d0 	bl	800e944 <VL53L0X_WrByte>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff fec7 	bl	800c346 <VL53L0X_device_read_strobe>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c5c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	2190      	movs	r1, #144	; 0x90
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f002 fa9c 	bl	800eb0c <VL53L0X_RdDWord>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	0e1b      	lsrs	r3, r3, #24
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	0c1b      	lsrs	r3, r3, #16
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	0a1b      	lsrs	r3, r3, #8
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c600:	2225      	movs	r2, #37	; 0x25
 800c602:	2194      	movs	r1, #148	; 0x94
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f002 f99d 	bl	800e944 <VL53L0X_WrByte>
 800c60a:	4603      	mov	r3, r0
 800c60c:	461a      	mov	r2, r3
 800c60e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c612:	4313      	orrs	r3, r2
 800c614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f7ff fe94 	bl	800c346 <VL53L0X_device_read_strobe>
 800c61e:	4603      	mov	r3, r0
 800c620:	461a      	mov	r2, r3
 800c622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c626:	4313      	orrs	r3, r2
 800c628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c62c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c630:	461a      	mov	r2, r3
 800c632:	2190      	movs	r1, #144	; 0x90
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f002 fa69 	bl	800eb0c <VL53L0X_RdDWord>
 800c63a:	4603      	mov	r3, r0
 800c63c:	461a      	mov	r2, r3
 800c63e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c642:	4313      	orrs	r3, r2
 800c644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800c648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64a:	0e1b      	lsrs	r3, r3, #24
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c652:	0c1b      	lsrs	r3, r3, #16
 800c654:	b2db      	uxtb	r3, r3
 800c656:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800c658:	78fb      	ldrb	r3, [r7, #3]
 800c65a:	f003 0302 	and.w	r3, r3, #2
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f000 8189 	beq.w	800c976 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c664:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c668:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f040 8182 	bne.w	800c976 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800c672:	2202      	movs	r2, #2
 800c674:	2194      	movs	r1, #148	; 0x94
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f002 f964 	bl	800e944 <VL53L0X_WrByte>
 800c67c:	4603      	mov	r3, r0
 800c67e:	461a      	mov	r2, r3
 800c680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c684:	4313      	orrs	r3, r2
 800c686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7ff fe5b 	bl	800c346 <VL53L0X_device_read_strobe>
 800c690:	4603      	mov	r3, r0
 800c692:	461a      	mov	r2, r3
 800c694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c698:	4313      	orrs	r3, r2
 800c69a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800c69e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	2190      	movs	r1, #144	; 0x90
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f002 f9ce 	bl	800ea48 <VL53L0X_RdByte>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c6ba:	227b      	movs	r2, #123	; 0x7b
 800c6bc:	2194      	movs	r1, #148	; 0x94
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f002 f940 	bl	800e944 <VL53L0X_WrByte>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f7ff fe37 	bl	800c346 <VL53L0X_device_read_strobe>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	461a      	mov	r2, r3
 800c6dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800c6e6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	2190      	movs	r1, #144	; 0x90
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f002 f9aa 	bl	800ea48 <VL53L0X_RdByte>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800c702:	2277      	movs	r2, #119	; 0x77
 800c704:	2194      	movs	r1, #148	; 0x94
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f002 f91c 	bl	800e944 <VL53L0X_WrByte>
 800c70c:	4603      	mov	r3, r0
 800c70e:	461a      	mov	r2, r3
 800c710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c714:	4313      	orrs	r3, r2
 800c716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7ff fe13 	bl	800c346 <VL53L0X_device_read_strobe>
 800c720:	4603      	mov	r3, r0
 800c722:	461a      	mov	r2, r3
 800c724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c728:	4313      	orrs	r3, r2
 800c72a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c72e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c732:	461a      	mov	r2, r3
 800c734:	2190      	movs	r1, #144	; 0x90
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f002 f9e8 	bl	800eb0c <VL53L0X_RdDWord>
 800c73c:	4603      	mov	r3, r0
 800c73e:	461a      	mov	r2, r3
 800c740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c744:	4313      	orrs	r3, r2
 800c746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	0e5b      	lsrs	r3, r3, #25
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c754:	b2db      	uxtb	r3, r3
 800c756:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75a:	0c9b      	lsrs	r3, r3, #18
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c762:	b2db      	uxtb	r3, r3
 800c764:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	0adb      	lsrs	r3, r3, #11
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c770:	b2db      	uxtb	r3, r3
 800c772:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	091b      	lsrs	r3, r3, #4
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	b2db      	uxtb	r3, r3
 800c786:	00db      	lsls	r3, r3, #3
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800c794:	2278      	movs	r2, #120	; 0x78
 800c796:	2194      	movs	r1, #148	; 0x94
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f002 f8d3 	bl	800e944 <VL53L0X_WrByte>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff fdca 	bl	800c346 <VL53L0X_device_read_strobe>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c7c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	2190      	movs	r1, #144	; 0x90
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f002 f99f 	bl	800eb0c <VL53L0X_RdDWord>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7de:	0f5b      	lsrs	r3, r3, #29
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7e6:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800c7e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7ec:	4413      	add	r3, r2
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	0d9b      	lsrs	r3, r3, #22
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	0bdb      	lsrs	r3, r3, #15
 800c804:	b2db      	uxtb	r3, r3
 800c806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	0a1b      	lsrs	r3, r3, #8
 800c812:	b2db      	uxtb	r3, r3
 800c814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	085b      	lsrs	r3, r3, #1
 800c820:	b2db      	uxtb	r3, r3
 800c822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c826:	b2db      	uxtb	r3, r3
 800c828:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800c82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	019b      	lsls	r3, r3, #6
 800c830:	b2db      	uxtb	r3, r3
 800c832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c836:	b2db      	uxtb	r3, r3
 800c838:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800c83c:	2279      	movs	r2, #121	; 0x79
 800c83e:	2194      	movs	r1, #148	; 0x94
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f002 f87f 	bl	800e944 <VL53L0X_WrByte>
 800c846:	4603      	mov	r3, r0
 800c848:	461a      	mov	r2, r3
 800c84a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c84e:	4313      	orrs	r3, r2
 800c850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff fd76 	bl	800c346 <VL53L0X_device_read_strobe>
 800c85a:	4603      	mov	r3, r0
 800c85c:	461a      	mov	r2, r3
 800c85e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c862:	4313      	orrs	r3, r2
 800c864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c86c:	461a      	mov	r2, r3
 800c86e:	2190      	movs	r1, #144	; 0x90
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f002 f94b 	bl	800eb0c <VL53L0X_RdDWord>
 800c876:	4603      	mov	r3, r0
 800c878:	461a      	mov	r2, r3
 800c87a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c87e:	4313      	orrs	r3, r2
 800c880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	0e9b      	lsrs	r3, r3, #26
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c88e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800c890:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c894:	4413      	add	r3, r2
 800c896:	b2db      	uxtb	r3, r3
 800c898:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	0cdb      	lsrs	r3, r3, #19
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800c8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8aa:	0b1b      	lsrs	r3, r3, #12
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b8:	095b      	lsrs	r3, r3, #5
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800c8d6:	227a      	movs	r2, #122	; 0x7a
 800c8d8:	2194      	movs	r1, #148	; 0x94
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f002 f832 	bl	800e944 <VL53L0X_WrByte>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7ff fd29 	bl	800c346 <VL53L0X_device_read_strobe>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c906:	461a      	mov	r2, r3
 800c908:	2190      	movs	r1, #144	; 0x90
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f002 f8fe 	bl	800eb0c <VL53L0X_RdDWord>
 800c910:	4603      	mov	r3, r0
 800c912:	461a      	mov	r2, r3
 800c914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c918:	4313      	orrs	r3, r2
 800c91a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	0f9b      	lsrs	r3, r3, #30
 800c922:	b2db      	uxtb	r3, r3
 800c924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c928:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800c92a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c92e:	4413      	add	r3, r2
 800c930:	b2db      	uxtb	r3, r3
 800c932:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800c934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c936:	0ddb      	lsrs	r3, r3, #23
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	0c1b      	lsrs	r3, r3, #16
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	0a5b      	lsrs	r3, r3, #9
 800c954:	b2db      	uxtb	r3, r3
 800c956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	089b      	lsrs	r3, r3, #2
 800c964:	b2db      	uxtb	r3, r3
 800c966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800c970:	2300      	movs	r3, #0
 800c972:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800c976:	78fb      	ldrb	r3, [r7, #3]
 800c978:	f003 0304 	and.w	r3, r3, #4
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 80f1 	beq.w	800cb64 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c982:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c986:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f040 80ea 	bne.w	800cb64 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c990:	227b      	movs	r2, #123	; 0x7b
 800c992:	2194      	movs	r1, #148	; 0x94
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f001 ffd5 	bl	800e944 <VL53L0X_WrByte>
 800c99a:	4603      	mov	r3, r0
 800c99c:	461a      	mov	r2, r3
 800c99e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff fccc 	bl	800c346 <VL53L0X_device_read_strobe>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800c9bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	2190      	movs	r1, #144	; 0x90
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f002 f8a1 	bl	800eb0c <VL53L0X_RdDWord>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800c9d8:	227c      	movs	r2, #124	; 0x7c
 800c9da:	2194      	movs	r1, #148	; 0x94
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f001 ffb1 	bl	800e944 <VL53L0X_WrByte>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff fca8 	bl	800c346 <VL53L0X_device_read_strobe>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800ca04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca08:	461a      	mov	r2, r3
 800ca0a:	2190      	movs	r1, #144	; 0x90
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f002 f87d 	bl	800eb0c <VL53L0X_RdDWord>
 800ca12:	4603      	mov	r3, r0
 800ca14:	461a      	mov	r2, r3
 800ca16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800ca20:	2273      	movs	r2, #115	; 0x73
 800ca22:	2194      	movs	r1, #148	; 0x94
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f001 ff8d 	bl	800e944 <VL53L0X_WrByte>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca32:	4313      	orrs	r3, r2
 800ca34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7ff fc84 	bl	800c346 <VL53L0X_device_read_strobe>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	461a      	mov	r2, r3
 800ca42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca46:	4313      	orrs	r3, r2
 800ca48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ca4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca50:	461a      	mov	r2, r3
 800ca52:	2190      	movs	r1, #144	; 0x90
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f002 f859 	bl	800eb0c <VL53L0X_RdDWord>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca62:	4313      	orrs	r3, r2
 800ca64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800ca70:	2274      	movs	r2, #116	; 0x74
 800ca72:	2194      	movs	r1, #148	; 0x94
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f001 ff65 	bl	800e944 <VL53L0X_WrByte>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca82:	4313      	orrs	r3, r2
 800ca84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff fc5c 	bl	800c346 <VL53L0X_device_read_strobe>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca96:	4313      	orrs	r3, r2
 800ca98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ca9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800caa0:	461a      	mov	r2, r3
 800caa2:	2190      	movs	r1, #144	; 0x90
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f002 f831 	bl	800eb0c <VL53L0X_RdDWord>
 800caaa:	4603      	mov	r3, r0
 800caac:	461a      	mov	r2, r3
 800caae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cab2:	4313      	orrs	r3, r2
 800cab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800cabc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cabe:	4313      	orrs	r3, r2
 800cac0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800cac2:	2275      	movs	r2, #117	; 0x75
 800cac4:	2194      	movs	r1, #148	; 0x94
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f001 ff3c 	bl	800e944 <VL53L0X_WrByte>
 800cacc:	4603      	mov	r3, r0
 800cace:	461a      	mov	r2, r3
 800cad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cad4:	4313      	orrs	r3, r2
 800cad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7ff fc33 	bl	800c346 <VL53L0X_device_read_strobe>
 800cae0:	4603      	mov	r3, r0
 800cae2:	461a      	mov	r2, r3
 800cae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cae8:	4313      	orrs	r3, r2
 800caea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800caee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800caf2:	461a      	mov	r2, r3
 800caf4:	2190      	movs	r1, #144	; 0x90
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f002 f808 	bl	800eb0c <VL53L0X_RdDWord>
 800cafc:	4603      	mov	r3, r0
 800cafe:	461a      	mov	r2, r3
 800cb00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb04:	4313      	orrs	r3, r2
 800cb06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800cb12:	2276      	movs	r2, #118	; 0x76
 800cb14:	2194      	movs	r1, #148	; 0x94
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 ff14 	bl	800e944 <VL53L0X_WrByte>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb24:	4313      	orrs	r3, r2
 800cb26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7ff fc0b 	bl	800c346 <VL53L0X_device_read_strobe>
 800cb30:	4603      	mov	r3, r0
 800cb32:	461a      	mov	r2, r3
 800cb34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cb3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cb42:	461a      	mov	r2, r3
 800cb44:	2190      	movs	r1, #144	; 0x90
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f001 ffe0 	bl	800eb0c <VL53L0X_RdDWord>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb54:	4313      	orrs	r3, r2
 800cb56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800cb5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb60:	4313      	orrs	r3, r2
 800cb62:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800cb64:	2200      	movs	r2, #0
 800cb66:	2181      	movs	r1, #129	; 0x81
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f001 feeb 	bl	800e944 <VL53L0X_WrByte>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	461a      	mov	r2, r3
 800cb72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb76:	4313      	orrs	r3, r2
 800cb78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800cb7c:	2206      	movs	r2, #6
 800cb7e:	21ff      	movs	r1, #255	; 0xff
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f001 fedf 	bl	800e944 <VL53L0X_WrByte>
 800cb86:	4603      	mov	r3, r0
 800cb88:	461a      	mov	r2, r3
 800cb8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cb94:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800cb98:	461a      	mov	r2, r3
 800cb9a:	2183      	movs	r1, #131	; 0x83
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f001 ff53 	bl	800ea48 <VL53L0X_RdByte>
 800cba2:	4603      	mov	r3, r0
 800cba4:	461a      	mov	r2, r3
 800cba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800cbb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbb4:	f023 0304 	bic.w	r3, r3, #4
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	461a      	mov	r2, r3
 800cbbc:	2183      	movs	r1, #131	; 0x83
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f001 fec0 	bl	800e944 <VL53L0X_WrByte>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	21ff      	movs	r1, #255	; 0xff
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f001 feb4 	bl	800e944 <VL53L0X_WrByte>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	461a      	mov	r2, r3
 800cbe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800cbea:	2201      	movs	r2, #1
 800cbec:	2100      	movs	r1, #0
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f001 fea8 	bl	800e944 <VL53L0X_WrByte>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cc02:	2200      	movs	r2, #0
 800cc04:	21ff      	movs	r1, #255	; 0xff
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f001 fe9c 	bl	800e944 <VL53L0X_WrByte>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	461a      	mov	r2, r3
 800cc10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc14:	4313      	orrs	r3, r2
 800cc16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2180      	movs	r1, #128	; 0x80
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f001 fe90 	bl	800e944 <VL53L0X_WrByte>
 800cc24:	4603      	mov	r3, r0
 800cc26:	461a      	mov	r2, r3
 800cc28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800cc32:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f040 808f 	bne.w	800cd5a <VL53L0X_get_info_from_device+0x98e>
 800cc3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc40:	2b07      	cmp	r3, #7
 800cc42:	f000 808a 	beq.w	800cd5a <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800cc46:	78fb      	ldrb	r3, [r7, #3]
 800cc48:	f003 0301 	and.w	r3, r3, #1
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d024      	beq.n	800cc9a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800cc50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc54:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d11e      	bne.n	800cc9a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800cc62:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800cc6c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800cc70:	2300      	movs	r3, #0
 800cc72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc74:	e00e      	b.n	800cc94 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800cc76:	f107 0208 	add.w	r2, r7, #8
 800cc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc7c:	4413      	add	r3, r2
 800cc7e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc84:	4413      	add	r3, r2
 800cc86:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800cc8a:	460a      	mov	r2, r1
 800cc8c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800cc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc90:	3301      	adds	r3, #1
 800cc92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc96:	2b05      	cmp	r3, #5
 800cc98:	dded      	ble.n	800cc76 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800cc9a:	78fb      	ldrb	r3, [r7, #3]
 800cc9c:	f003 0302 	and.w	r3, r3, #2
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d018      	beq.n	800ccd6 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800cca4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cca8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d112      	bne.n	800ccd6 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ccb0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ccba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	33f3      	adds	r3, #243	; 0xf3
 800ccc8:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800ccca:	f107 0310 	add.w	r3, r7, #16
 800ccce:	4619      	mov	r1, r3
 800ccd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccd2:	f006 fbb0 	bl	8013436 <strcpy>

		}

		if (((option & 4) == 4) &&
 800ccd6:	78fb      	ldrb	r3, [r7, #3]
 800ccd8:	f003 0304 	and.w	r3, r3, #4
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d030      	beq.n	800cd42 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800cce0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cce4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d12a      	bne.n	800cd42 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ccec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ccf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800ccfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccfe:	025b      	lsls	r3, r3, #9
 800cd00:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd06:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800cd10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d011      	beq.n	800cd3a <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800cd16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800cd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd24:	fb02 f303 	mul.w	r3, r2, r3
 800cd28:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800cd2a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800cd2e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800cd32:	425b      	negs	r3, r3
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800cd3a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800cd42:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cd46:	78fb      	ldrb	r3, [r7, #3]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800cd50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cd5a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3760      	adds	r7, #96	; 0x60
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b087      	sub	sp, #28
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	460b      	mov	r3, r1
 800cd70:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800cd72:	f240 6277 	movw	r2, #1655	; 0x677
 800cd76:	f04f 0300 	mov.w	r3, #0
 800cd7a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800cd7e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800cd82:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800cd84:	78fb      	ldrb	r3, [r7, #3]
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	fb02 f303 	mul.w	r3, r2, r3
 800cd92:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800cd94:	68bb      	ldr	r3, [r7, #8]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	371c      	adds	r7, #28
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800cda2:	b480      	push	{r7}
 800cda4:	b087      	sub	sp, #28
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d017      	beq.n	800cdec <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800cdc2:	e005      	b.n	800cdd0 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	085b      	lsrs	r3, r3, #1
 800cdc8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800cdca:	89fb      	ldrh	r3, [r7, #14]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1f4      	bne.n	800cdc4 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800cdda:	89fb      	ldrh	r3, [r7, #14]
 800cddc:	021b      	lsls	r3, r3, #8
 800cdde:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800cde8:	4413      	add	r3, r2
 800cdea:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800cdec:	8afb      	ldrh	r3, [r7, #22]

}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	371c      	adds	r7, #28
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b085      	sub	sp, #20
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	4603      	mov	r3, r0
 800ce02:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800ce04:	2300      	movs	r3, #0
 800ce06:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ce08:	88fb      	ldrh	r3, [r7, #6]
 800ce0a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800ce0c:	88fa      	ldrh	r2, [r7, #6]
 800ce0e:	0a12      	lsrs	r2, r2, #8
 800ce10:	b292      	uxth	r2, r2
 800ce12:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ce14:	3301      	adds	r3, #1
 800ce16:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800ce18:	68fb      	ldr	r3, [r7, #12]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
	...

0800ce28 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b088      	sub	sp, #32
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	4613      	mov	r3, r2
 800ce34:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f7ff ff91 	bl	800cd66 <VL53L0X_calc_macro_period_ps>
 800ce44:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ce4c:	4a0a      	ldr	r2, [pc, #40]	; (800ce78 <VL53L0X_calc_timeout_mclks+0x50>)
 800ce4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce52:	099b      	lsrs	r3, r3, #6
 800ce54:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce5c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	085b      	lsrs	r3, r3, #1
 800ce64:	441a      	add	r2, r3
	timeout_period_mclks =
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce6c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3720      	adds	r7, #32
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	10624dd3 	.word	0x10624dd3

0800ce7c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	807b      	strh	r3, [r7, #2]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800ce90:	787b      	ldrb	r3, [r7, #1]
 800ce92:	4619      	mov	r1, r3
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7ff ff66 	bl	800cd66 <VL53L0X_calc_macro_period_ps>
 800ce9a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cea2:	4a0a      	ldr	r2, [pc, #40]	; (800cecc <VL53L0X_calc_timeout_us+0x50>)
 800cea4:	fba2 2303 	umull	r2, r3, r2, r3
 800cea8:	099b      	lsrs	r3, r3, #6
 800ceaa:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800ceac:	887b      	ldrh	r3, [r7, #2]
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	fb02 f303 	mul.w	r3, r2, r3
 800ceb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800ceb8:	4a04      	ldr	r2, [pc, #16]	; (800cecc <VL53L0X_calc_timeout_us+0x50>)
 800ceba:	fba2 2303 	umull	r2, r3, r2, r3
 800cebe:	099b      	lsrs	r3, r3, #6
 800cec0:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800cec2:	697b      	ldr	r3, [r7, #20]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3718      	adds	r7, #24
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	10624dd3 	.word	0x10624dd3

0800ced0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b08c      	sub	sp, #48	; 0x30
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	460b      	mov	r3, r1
 800ceda:	607a      	str	r2, [r7, #4]
 800cedc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cede:	2300      	movs	r3, #0
 800cee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800cef6:	7afb      	ldrb	r3, [r7, #11]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d005      	beq.n	800cf08 <get_sequence_step_timeout+0x38>
 800cefc:	7afb      	ldrb	r3, [r7, #11]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d002      	beq.n	800cf08 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800cf02:	7afb      	ldrb	r3, [r7, #11]
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	d128      	bne.n	800cf5a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cf08:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	2100      	movs	r1, #0
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f7fd f9f9 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800cf16:	4603      	mov	r3, r0
 800cf18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800cf1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d109      	bne.n	800cf38 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800cf24:	f107 0320 	add.w	r3, r7, #32
 800cf28:	461a      	mov	r2, r3
 800cf2a:	2146      	movs	r1, #70	; 0x46
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f001 fd8b 	bl	800ea48 <VL53L0X_RdByte>
 800cf32:	4603      	mov	r3, r0
 800cf34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800cf38:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff ff5b 	bl	800cdfa <VL53L0X_decode_timeout>
 800cf44:	4603      	mov	r3, r0
 800cf46:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800cf48:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cf4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf4e:	4619      	mov	r1, r3
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f7ff ff93 	bl	800ce7c <VL53L0X_calc_timeout_us>
 800cf56:	62b8      	str	r0, [r7, #40]	; 0x28
 800cf58:	e092      	b.n	800d080 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800cf5a:	7afb      	ldrb	r3, [r7, #11]
 800cf5c:	2b03      	cmp	r3, #3
 800cf5e:	d135      	bne.n	800cfcc <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cf60:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cf64:	461a      	mov	r2, r3
 800cf66:	2100      	movs	r1, #0
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f7fd f9cd 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800cf74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f040 8081 	bne.w	800d080 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cf7e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cf82:	461a      	mov	r2, r3
 800cf84:	2100      	movs	r1, #0
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7fd f9be 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800cf92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d109      	bne.n	800cfae <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800cf9a:	f107 031e 	add.w	r3, r7, #30
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	2151      	movs	r1, #81	; 0x51
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f001 fd7a 	bl	800ea9c <VL53L0X_RdWord>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800cfae:	8bfb      	ldrh	r3, [r7, #30]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff ff22 	bl	800cdfa <VL53L0X_decode_timeout>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800cfba:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cfbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f7ff ff5a 	bl	800ce7c <VL53L0X_calc_timeout_us>
 800cfc8:	62b8      	str	r0, [r7, #40]	; 0x28
 800cfca:	e059      	b.n	800d080 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800cfcc:	7afb      	ldrb	r3, [r7, #11]
 800cfce:	2b04      	cmp	r3, #4
 800cfd0:	d156      	bne.n	800d080 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cfd2:	f107 0314 	add.w	r3, r7, #20
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f7fd faa1 	bl	800a520 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800cfe2:	7dfb      	ldrb	r3, [r7, #23]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d01d      	beq.n	800d024 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cfe8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cfec:	461a      	mov	r2, r3
 800cfee:	2100      	movs	r1, #0
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f7fd f989 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800cff6:	4603      	mov	r3, r0
 800cff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800cffc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10f      	bne.n	800d024 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800d004:	f107 031e 	add.w	r3, r7, #30
 800d008:	461a      	mov	r2, r3
 800d00a:	2151      	movs	r1, #81	; 0x51
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	f001 fd45 	bl	800ea9c <VL53L0X_RdWord>
 800d012:	4603      	mov	r3, r0
 800d014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d018:	8bfb      	ldrh	r3, [r7, #30]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7ff feed 	bl	800cdfa <VL53L0X_decode_timeout>
 800d020:	4603      	mov	r3, r0
 800d022:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d024:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d109      	bne.n	800d040 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d02c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d030:	461a      	mov	r2, r3
 800d032:	2101      	movs	r1, #1
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7fd f967 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800d03a:	4603      	mov	r3, r0
 800d03c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d040:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10f      	bne.n	800d068 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800d048:	f107 031c 	add.w	r3, r7, #28
 800d04c:	461a      	mov	r2, r3
 800d04e:	2171      	movs	r1, #113	; 0x71
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f001 fd23 	bl	800ea9c <VL53L0X_RdWord>
 800d056:	4603      	mov	r3, r0
 800d058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d05c:	8bbb      	ldrh	r3, [r7, #28]
 800d05e:	4618      	mov	r0, r3
 800d060:	f7ff fecb 	bl	800cdfa <VL53L0X_decode_timeout>
 800d064:	4603      	mov	r3, r0
 800d066:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800d068:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d06a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d06c:	1ad3      	subs	r3, r2, r3
 800d06e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d070:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d076:	4619      	mov	r1, r3
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f7ff feff 	bl	800ce7c <VL53L0X_calc_timeout_us>
 800d07e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d084:	601a      	str	r2, [r3, #0]

	return Status;
 800d086:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3730      	adds	r7, #48	; 0x30
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b08a      	sub	sp, #40	; 0x28
 800d096:	af00      	add	r7, sp, #0
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	460b      	mov	r3, r1
 800d09c:	607a      	str	r2, [r7, #4]
 800d09e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d0a6:	7afb      	ldrb	r3, [r7, #11]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <set_sequence_step_timeout+0x26>
 800d0ac:	7afb      	ldrb	r3, [r7, #11]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d002      	beq.n	800d0b8 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d0b2:	7afb      	ldrb	r3, [r7, #11]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d138      	bne.n	800d12a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d0b8:	f107 031b 	add.w	r3, r7, #27
 800d0bc:	461a      	mov	r2, r3
 800d0be:	2100      	movs	r1, #0
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f7fd f921 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800d0cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d11a      	bne.n	800d10a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800d0d4:	7efb      	ldrb	r3, [r7, #27]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	6879      	ldr	r1, [r7, #4]
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	f7ff fea4 	bl	800ce28 <VL53L0X_calc_timeout_mclks>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800d0e4:	8bbb      	ldrh	r3, [r7, #28]
 800d0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0ea:	d903      	bls.n	800d0f4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800d0ec:	23ff      	movs	r3, #255	; 0xff
 800d0ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d0f2:	e004      	b.n	800d0fe <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800d0f4:	8bbb      	ldrh	r3, [r7, #28]
 800d0f6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800d0f8:	3b01      	subs	r3, #1
 800d0fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d102:	b29a      	uxth	r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d10a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f040 80ab 	bne.w	800d26a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800d114:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d118:	461a      	mov	r2, r3
 800d11a:	2146      	movs	r1, #70	; 0x46
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f001 fc11 	bl	800e944 <VL53L0X_WrByte>
 800d122:	4603      	mov	r3, r0
 800d124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800d128:	e09f      	b.n	800d26a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d12a:	7afb      	ldrb	r3, [r7, #11]
 800d12c:	2b03      	cmp	r3, #3
 800d12e:	d135      	bne.n	800d19c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800d130:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d134:	2b00      	cmp	r3, #0
 800d136:	d11b      	bne.n	800d170 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d138:	f107 031b 	add.w	r3, r7, #27
 800d13c:	461a      	mov	r2, r3
 800d13e:	2100      	movs	r1, #0
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f7fd f8e1 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800d146:	4603      	mov	r3, r0
 800d148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d14c:	7efb      	ldrb	r3, [r7, #27]
 800d14e:	461a      	mov	r2, r3
 800d150:	6879      	ldr	r1, [r7, #4]
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7ff fe68 	bl	800ce28 <VL53L0X_calc_timeout_mclks>
 800d158:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800d15a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800d15c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d15e:	4618      	mov	r0, r3
 800d160:	f7ff fe1f 	bl	800cda2 <VL53L0X_encode_timeout>
 800d164:	4603      	mov	r3, r0
 800d166:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d168:	8b3a      	ldrh	r2, [r7, #24]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d170:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d174:	2b00      	cmp	r3, #0
 800d176:	d108      	bne.n	800d18a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800d178:	8b3b      	ldrh	r3, [r7, #24]
 800d17a:	461a      	mov	r2, r3
 800d17c:	2151      	movs	r1, #81	; 0x51
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f001 fc04 	bl	800e98c <VL53L0X_WrWord>
 800d184:	4603      	mov	r3, r0
 800d186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d18a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d16b      	bne.n	800d26a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800d19a:	e066      	b.n	800d26a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d19c:	7afb      	ldrb	r3, [r7, #11]
 800d19e:	2b04      	cmp	r3, #4
 800d1a0:	d160      	bne.n	800d264 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800d1a2:	f107 0310 	add.w	r3, r7, #16
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f7fd f9b9 	bl	800a520 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800d1b2:	7cfb      	ldrb	r3, [r7, #19]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d01d      	beq.n	800d1f4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d1b8:	f107 031b 	add.w	r3, r7, #27
 800d1bc:	461a      	mov	r2, r3
 800d1be:	2100      	movs	r1, #0
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f7fd f8a1 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800d1cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10f      	bne.n	800d1f4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800d1d4:	f107 0318 	add.w	r3, r7, #24
 800d1d8:	461a      	mov	r2, r3
 800d1da:	2151      	movs	r1, #81	; 0x51
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f001 fc5d 	bl	800ea9c <VL53L0X_RdWord>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800d1e8:	8b3b      	ldrh	r3, [r7, #24]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7ff fe05 	bl	800cdfa <VL53L0X_decode_timeout>
 800d1f0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800d1f2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800d1f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d109      	bne.n	800d210 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d1fc:	f107 031b 	add.w	r3, r7, #27
 800d200:	461a      	mov	r2, r3
 800d202:	2101      	movs	r1, #1
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f7fd f87f 	bl	800a308 <VL53L0X_GetVcselPulsePeriod>
 800d20a:	4603      	mov	r3, r0
 800d20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800d210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d214:	2b00      	cmp	r3, #0
 800d216:	d128      	bne.n	800d26a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d218:	7efb      	ldrb	r3, [r7, #27]
 800d21a:	461a      	mov	r2, r3
 800d21c:	6879      	ldr	r1, [r7, #4]
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f7ff fe02 	bl	800ce28 <VL53L0X_calc_timeout_mclks>
 800d224:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800d226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d228:	6a3a      	ldr	r2, [r7, #32]
 800d22a:	4413      	add	r3, r2
 800d22c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800d22e:	6a38      	ldr	r0, [r7, #32]
 800d230:	f7ff fdb7 	bl	800cda2 <VL53L0X_encode_timeout>
 800d234:	4603      	mov	r3, r0
 800d236:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800d238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d108      	bne.n	800d252 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800d240:	8bfb      	ldrh	r3, [r7, #30]
 800d242:	461a      	mov	r2, r3
 800d244:	2171      	movs	r1, #113	; 0x71
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f001 fba0 	bl	800e98c <VL53L0X_WrWord>
 800d24c:	4603      	mov	r3, r0
 800d24e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800d252:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d256:	2b00      	cmp	r3, #0
 800d258:	d107      	bne.n	800d26a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800d262:	e002      	b.n	800d26a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d264:	23fc      	movs	r3, #252	; 0xfc
 800d266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800d26a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3728      	adds	r7, #40	; 0x28
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b08a      	sub	sp, #40	; 0x28
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	460b      	mov	r3, r1
 800d280:	70fb      	strb	r3, [r7, #3]
 800d282:	4613      	mov	r3, r2
 800d284:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d286:	2300      	movs	r3, #0
 800d288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800d28c:	230c      	movs	r3, #12
 800d28e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800d292:	2312      	movs	r3, #18
 800d294:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800d298:	2308      	movs	r3, #8
 800d29a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800d29e:	230e      	movs	r3, #14
 800d2a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800d2a8:	78bb      	ldrb	r3, [r7, #2]
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d003      	beq.n	800d2bc <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d2b4:	23fc      	movs	r3, #252	; 0xfc
 800d2b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2ba:	e020      	b.n	800d2fe <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800d2bc:	78fb      	ldrb	r3, [r7, #3]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10d      	bne.n	800d2de <VL53L0X_set_vcsel_pulse_period+0x68>
 800d2c2:	78ba      	ldrb	r2, [r7, #2]
 800d2c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d304      	bcc.n	800d2d6 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800d2cc:	78ba      	ldrb	r2, [r7, #2]
 800d2ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d903      	bls.n	800d2de <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d2d6:	23fc      	movs	r3, #252	; 0xfc
 800d2d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2dc:	e00f      	b.n	800d2fe <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800d2de:	78fb      	ldrb	r3, [r7, #3]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d10c      	bne.n	800d2fe <VL53L0X_set_vcsel_pulse_period+0x88>
 800d2e4:	78ba      	ldrb	r2, [r7, #2]
 800d2e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d304      	bcc.n	800d2f8 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800d2ee:	78ba      	ldrb	r2, [r7, #2]
 800d2f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d902      	bls.n	800d2fe <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d2f8:	23fc      	movs	r3, #252	; 0xfc
 800d2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800d2fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d302:	2b00      	cmp	r3, #0
 800d304:	d002      	beq.n	800d30c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800d306:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d30a:	e239      	b.n	800d780 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800d30c:	78fb      	ldrb	r3, [r7, #3]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d150      	bne.n	800d3b4 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800d312:	78bb      	ldrb	r3, [r7, #2]
 800d314:	2b0c      	cmp	r3, #12
 800d316:	d110      	bne.n	800d33a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800d318:	2218      	movs	r2, #24
 800d31a:	2157      	movs	r1, #87	; 0x57
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f001 fb11 	bl	800e944 <VL53L0X_WrByte>
 800d322:	4603      	mov	r3, r0
 800d324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800d328:	2208      	movs	r2, #8
 800d32a:	2156      	movs	r1, #86	; 0x56
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f001 fb09 	bl	800e944 <VL53L0X_WrByte>
 800d332:	4603      	mov	r3, r0
 800d334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d338:	e17f      	b.n	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d33a:	78bb      	ldrb	r3, [r7, #2]
 800d33c:	2b0e      	cmp	r3, #14
 800d33e:	d110      	bne.n	800d362 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800d340:	2230      	movs	r2, #48	; 0x30
 800d342:	2157      	movs	r1, #87	; 0x57
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f001 fafd 	bl	800e944 <VL53L0X_WrByte>
 800d34a:	4603      	mov	r3, r0
 800d34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800d350:	2208      	movs	r2, #8
 800d352:	2156      	movs	r1, #86	; 0x56
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f001 faf5 	bl	800e944 <VL53L0X_WrByte>
 800d35a:	4603      	mov	r3, r0
 800d35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d360:	e16b      	b.n	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800d362:	78bb      	ldrb	r3, [r7, #2]
 800d364:	2b10      	cmp	r3, #16
 800d366:	d110      	bne.n	800d38a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800d368:	2240      	movs	r2, #64	; 0x40
 800d36a:	2157      	movs	r1, #87	; 0x57
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f001 fae9 	bl	800e944 <VL53L0X_WrByte>
 800d372:	4603      	mov	r3, r0
 800d374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800d378:	2208      	movs	r2, #8
 800d37a:	2156      	movs	r1, #86	; 0x56
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f001 fae1 	bl	800e944 <VL53L0X_WrByte>
 800d382:	4603      	mov	r3, r0
 800d384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d388:	e157      	b.n	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800d38a:	78bb      	ldrb	r3, [r7, #2]
 800d38c:	2b12      	cmp	r3, #18
 800d38e:	f040 8154 	bne.w	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d392:	2250      	movs	r2, #80	; 0x50
 800d394:	2157      	movs	r1, #87	; 0x57
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f001 fad4 	bl	800e944 <VL53L0X_WrByte>
 800d39c:	4603      	mov	r3, r0
 800d39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800d3a2:	2208      	movs	r2, #8
 800d3a4:	2156      	movs	r1, #86	; 0x56
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f001 facc 	bl	800e944 <VL53L0X_WrByte>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3b2:	e142      	b.n	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800d3b4:	78fb      	ldrb	r3, [r7, #3]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	f040 813f 	bne.w	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800d3bc:	78bb      	ldrb	r3, [r7, #2]
 800d3be:	2b08      	cmp	r3, #8
 800d3c0:	d14c      	bne.n	800d45c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800d3c2:	2210      	movs	r2, #16
 800d3c4:	2148      	movs	r1, #72	; 0x48
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f001 fabc 	bl	800e944 <VL53L0X_WrByte>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800d3d2:	2208      	movs	r2, #8
 800d3d4:	2147      	movs	r1, #71	; 0x47
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f001 fab4 	bl	800e944 <VL53L0X_WrByte>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d3e2:	2202      	movs	r2, #2
 800d3e4:	2132      	movs	r1, #50	; 0x32
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f001 faac 	bl	800e944 <VL53L0X_WrByte>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800d3fa:	220c      	movs	r2, #12
 800d3fc:	2130      	movs	r1, #48	; 0x30
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f001 faa0 	bl	800e944 <VL53L0X_WrByte>
 800d404:	4603      	mov	r3, r0
 800d406:	461a      	mov	r2, r3
 800d408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d40c:	4313      	orrs	r3, r2
 800d40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d412:	2201      	movs	r2, #1
 800d414:	21ff      	movs	r1, #255	; 0xff
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f001 fa94 	bl	800e944 <VL53L0X_WrByte>
 800d41c:	4603      	mov	r3, r0
 800d41e:	461a      	mov	r2, r3
 800d420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d424:	4313      	orrs	r3, r2
 800d426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d42a:	2230      	movs	r2, #48	; 0x30
 800d42c:	2130      	movs	r1, #48	; 0x30
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f001 fa88 	bl	800e944 <VL53L0X_WrByte>
 800d434:	4603      	mov	r3, r0
 800d436:	461a      	mov	r2, r3
 800d438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d43c:	4313      	orrs	r3, r2
 800d43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d442:	2200      	movs	r2, #0
 800d444:	21ff      	movs	r1, #255	; 0xff
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f001 fa7c 	bl	800e944 <VL53L0X_WrByte>
 800d44c:	4603      	mov	r3, r0
 800d44e:	461a      	mov	r2, r3
 800d450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d454:	4313      	orrs	r3, r2
 800d456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d45a:	e0ee      	b.n	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800d45c:	78bb      	ldrb	r3, [r7, #2]
 800d45e:	2b0a      	cmp	r3, #10
 800d460:	d14c      	bne.n	800d4fc <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800d462:	2228      	movs	r2, #40	; 0x28
 800d464:	2148      	movs	r1, #72	; 0x48
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f001 fa6c 	bl	800e944 <VL53L0X_WrByte>
 800d46c:	4603      	mov	r3, r0
 800d46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800d472:	2208      	movs	r2, #8
 800d474:	2147      	movs	r1, #71	; 0x47
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f001 fa64 	bl	800e944 <VL53L0X_WrByte>
 800d47c:	4603      	mov	r3, r0
 800d47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d482:	2203      	movs	r2, #3
 800d484:	2132      	movs	r1, #50	; 0x32
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f001 fa5c 	bl	800e944 <VL53L0X_WrByte>
 800d48c:	4603      	mov	r3, r0
 800d48e:	461a      	mov	r2, r3
 800d490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d494:	4313      	orrs	r3, r2
 800d496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d49a:	2209      	movs	r2, #9
 800d49c:	2130      	movs	r1, #48	; 0x30
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f001 fa50 	bl	800e944 <VL53L0X_WrByte>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	21ff      	movs	r1, #255	; 0xff
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f001 fa44 	bl	800e944 <VL53L0X_WrByte>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	461a      	mov	r2, r3
 800d4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d4ca:	2220      	movs	r2, #32
 800d4cc:	2130      	movs	r1, #48	; 0x30
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f001 fa38 	bl	800e944 <VL53L0X_WrByte>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	21ff      	movs	r1, #255	; 0xff
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f001 fa2c 	bl	800e944 <VL53L0X_WrByte>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4fa:	e09e      	b.n	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800d4fc:	78bb      	ldrb	r3, [r7, #2]
 800d4fe:	2b0c      	cmp	r3, #12
 800d500:	d14c      	bne.n	800d59c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800d502:	2238      	movs	r2, #56	; 0x38
 800d504:	2148      	movs	r1, #72	; 0x48
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f001 fa1c 	bl	800e944 <VL53L0X_WrByte>
 800d50c:	4603      	mov	r3, r0
 800d50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800d512:	2208      	movs	r2, #8
 800d514:	2147      	movs	r1, #71	; 0x47
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f001 fa14 	bl	800e944 <VL53L0X_WrByte>
 800d51c:	4603      	mov	r3, r0
 800d51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d522:	2203      	movs	r2, #3
 800d524:	2132      	movs	r1, #50	; 0x32
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f001 fa0c 	bl	800e944 <VL53L0X_WrByte>
 800d52c:	4603      	mov	r3, r0
 800d52e:	461a      	mov	r2, r3
 800d530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d534:	4313      	orrs	r3, r2
 800d536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d53a:	2208      	movs	r2, #8
 800d53c:	2130      	movs	r1, #48	; 0x30
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f001 fa00 	bl	800e944 <VL53L0X_WrByte>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d54c:	4313      	orrs	r3, r2
 800d54e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d552:	2201      	movs	r2, #1
 800d554:	21ff      	movs	r1, #255	; 0xff
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f001 f9f4 	bl	800e944 <VL53L0X_WrByte>
 800d55c:	4603      	mov	r3, r0
 800d55e:	461a      	mov	r2, r3
 800d560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d564:	4313      	orrs	r3, r2
 800d566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d56a:	2220      	movs	r2, #32
 800d56c:	2130      	movs	r1, #48	; 0x30
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f001 f9e8 	bl	800e944 <VL53L0X_WrByte>
 800d574:	4603      	mov	r3, r0
 800d576:	461a      	mov	r2, r3
 800d578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d57c:	4313      	orrs	r3, r2
 800d57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d582:	2200      	movs	r2, #0
 800d584:	21ff      	movs	r1, #255	; 0xff
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f001 f9dc 	bl	800e944 <VL53L0X_WrByte>
 800d58c:	4603      	mov	r3, r0
 800d58e:	461a      	mov	r2, r3
 800d590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d594:	4313      	orrs	r3, r2
 800d596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d59a:	e04e      	b.n	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d59c:	78bb      	ldrb	r3, [r7, #2]
 800d59e:	2b0e      	cmp	r3, #14
 800d5a0:	d14b      	bne.n	800d63a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d5a2:	2248      	movs	r2, #72	; 0x48
 800d5a4:	2148      	movs	r1, #72	; 0x48
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f001 f9cc 	bl	800e944 <VL53L0X_WrByte>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800d5b2:	2208      	movs	r2, #8
 800d5b4:	2147      	movs	r1, #71	; 0x47
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f001 f9c4 	bl	800e944 <VL53L0X_WrByte>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d5c2:	2203      	movs	r2, #3
 800d5c4:	2132      	movs	r1, #50	; 0x32
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f001 f9bc 	bl	800e944 <VL53L0X_WrByte>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d5da:	2207      	movs	r2, #7
 800d5dc:	2130      	movs	r1, #48	; 0x30
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f001 f9b0 	bl	800e944 <VL53L0X_WrByte>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	21ff      	movs	r1, #255	; 0xff
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f001 f9a4 	bl	800e944 <VL53L0X_WrByte>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	461a      	mov	r2, r3
 800d600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d604:	4313      	orrs	r3, r2
 800d606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d60a:	2220      	movs	r2, #32
 800d60c:	2130      	movs	r1, #48	; 0x30
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f001 f998 	bl	800e944 <VL53L0X_WrByte>
 800d614:	4603      	mov	r3, r0
 800d616:	461a      	mov	r2, r3
 800d618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d61c:	4313      	orrs	r3, r2
 800d61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d622:	2200      	movs	r2, #0
 800d624:	21ff      	movs	r1, #255	; 0xff
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f001 f98c 	bl	800e944 <VL53L0X_WrByte>
 800d62c:	4603      	mov	r3, r0
 800d62e:	461a      	mov	r2, r3
 800d630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d634:	4313      	orrs	r3, r2
 800d636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800d63a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d17f      	bne.n	800d742 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800d642:	78bb      	ldrb	r3, [r7, #2]
 800d644:	4618      	mov	r0, r3
 800d646:	f7fe fe37 	bl	800c2b8 <VL53L0X_encode_vcsel_period>
 800d64a:	4603      	mov	r3, r0
 800d64c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800d650:	78fb      	ldrb	r3, [r7, #3]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d002      	beq.n	800d65c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800d656:	2b01      	cmp	r3, #1
 800d658:	d045      	beq.n	800d6e6 <VL53L0X_set_vcsel_pulse_period+0x470>
 800d65a:	e06e      	b.n	800d73a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800d65c:	f107 0314 	add.w	r3, r7, #20
 800d660:	461a      	mov	r2, r3
 800d662:	2103      	movs	r1, #3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff fc33 	bl	800ced0 <get_sequence_step_timeout>
 800d66a:	4603      	mov	r3, r0
 800d66c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d670:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d674:	2b00      	cmp	r3, #0
 800d676:	d109      	bne.n	800d68c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800d678:	f107 0310 	add.w	r3, r7, #16
 800d67c:	461a      	mov	r2, r3
 800d67e:	2102      	movs	r1, #2
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7ff fc25 	bl	800ced0 <get_sequence_step_timeout>
 800d686:	4603      	mov	r3, r0
 800d688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d68c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d690:	2b00      	cmp	r3, #0
 800d692:	d109      	bne.n	800d6a8 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800d694:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d698:	461a      	mov	r2, r3
 800d69a:	2150      	movs	r1, #80	; 0x50
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f001 f951 	bl	800e944 <VL53L0X_WrByte>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800d6a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d108      	bne.n	800d6c2 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	2103      	movs	r1, #3
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7ff fceb 	bl	800d092 <set_sequence_step_timeout>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800d6c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d108      	bne.n	800d6dc <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	2102      	movs	r1, #2
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7ff fcde 	bl	800d092 <set_sequence_step_timeout>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	78ba      	ldrb	r2, [r7, #2]
 800d6e0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800d6e4:	e02e      	b.n	800d744 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800d6e6:	f107 0318 	add.w	r3, r7, #24
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	2104      	movs	r1, #4
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7ff fbee 	bl	800ced0 <get_sequence_step_timeout>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d6fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d109      	bne.n	800d716 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800d702:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d706:	461a      	mov	r2, r3
 800d708:	2170      	movs	r1, #112	; 0x70
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f001 f91a 	bl	800e944 <VL53L0X_WrByte>
 800d710:	4603      	mov	r3, r0
 800d712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800d716:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d108      	bne.n	800d730 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	461a      	mov	r2, r3
 800d722:	2104      	movs	r1, #4
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7ff fcb4 	bl	800d092 <set_sequence_step_timeout>
 800d72a:	4603      	mov	r3, r0
 800d72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	78ba      	ldrb	r2, [r7, #2]
 800d734:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800d738:	e004      	b.n	800d744 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d73a:	23fc      	movs	r3, #252	; 0xfc
 800d73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d740:	e000      	b.n	800d744 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800d742:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800d744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d109      	bne.n	800d760 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800d752:	69f9      	ldr	r1, [r7, #28]
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7fc fd99 	bl	800a28c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800d75a:	4603      	mov	r3, r0
 800d75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800d760:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d764:	2b00      	cmp	r3, #0
 800d766:	d109      	bne.n	800d77c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800d768:	f107 010f 	add.w	r1, r7, #15
 800d76c:	2301      	movs	r3, #1
 800d76e:	2200      	movs	r2, #0
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7fe fc99 	bl	800c0a8 <VL53L0X_perform_phase_calibration>
 800d776:	4603      	mov	r3, r0
 800d778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800d77c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d780:	4618      	mov	r0, r3
 800d782:	3728      	adds	r7, #40	; 0x28
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	460b      	mov	r3, r1
 800d792:	607a      	str	r2, [r7, #4]
 800d794:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d796:	2300      	movs	r3, #0
 800d798:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800d79a:	7afb      	ldrb	r3, [r7, #11]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d00a      	beq.n	800d7ba <VL53L0X_get_vcsel_pulse_period+0x32>
 800d7a4:	e013      	b.n	800d7ce <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d7a6:	f107 0316 	add.w	r3, r7, #22
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	2150      	movs	r1, #80	; 0x50
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f001 f94a 	bl	800ea48 <VL53L0X_RdByte>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d7b8:	e00b      	b.n	800d7d2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d7ba:	f107 0316 	add.w	r3, r7, #22
 800d7be:	461a      	mov	r2, r3
 800d7c0:	2170      	movs	r1, #112	; 0x70
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f001 f940 	bl	800ea48 <VL53L0X_RdByte>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d7cc:	e001      	b.n	800d7d2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d7ce:	23fc      	movs	r3, #252	; 0xfc
 800d7d0:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800d7d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d107      	bne.n	800d7ea <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800d7da:	7dbb      	ldrb	r3, [r7, #22]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7fe fd58 	bl	800c292 <VL53L0X_decode_vcsel_period>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	701a      	strb	r2, [r3, #0]

	return Status;
 800d7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3718      	adds	r7, #24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b092      	sub	sp, #72	; 0x48
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
 800d7fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d800:	2300      	movs	r3, #0
 800d802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d806:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d80a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d80c:	f240 7376 	movw	r3, #1910	; 0x776
 800d810:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800d812:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d816:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d818:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d81c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800d81e:	f240 234e 	movw	r3, #590	; 0x24e
 800d822:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800d824:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d828:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d82a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d82e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d830:	f240 2326 	movw	r3, #550	; 0x226
 800d834:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d836:	2300      	movs	r3, #0
 800d838:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800d83a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d83e:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800d844:	683a      	ldr	r2, [r7, #0]
 800d846:	6a3b      	ldr	r3, [r7, #32]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d205      	bcs.n	800d858 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d84c:	23fc      	movs	r3, #252	; 0xfc
 800d84e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800d852:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d856:	e0aa      	b.n	800d9ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800d858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d864:	f107 0314 	add.w	r3, r7, #20
 800d868:	4619      	mov	r1, r3
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7fc fe58 	bl	800a520 <VL53L0X_GetSequenceStepEnables>
 800d870:	4603      	mov	r3, r0
 800d872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800d876:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d15b      	bne.n	800d936 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800d87e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800d880:	2b00      	cmp	r3, #0
 800d882:	d105      	bne.n	800d890 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800d884:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800d886:	2b00      	cmp	r3, #0
 800d888:	d102      	bne.n	800d890 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800d88a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d052      	beq.n	800d936 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800d890:	f107 0310 	add.w	r3, r7, #16
 800d894:	461a      	mov	r2, r3
 800d896:	2102      	movs	r1, #2
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7ff fb19 	bl	800ced0 <get_sequence_step_timeout>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800d8a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800d8ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d8b0:	e07d      	b.n	800d9ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800d8b2:	7d3b      	ldrb	r3, [r7, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00f      	beq.n	800d8d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800d8b8:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800d8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8bc:	4413      	add	r3, r2
 800d8be:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800d8c0:	69fa      	ldr	r2, [r7, #28]
 800d8c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d204      	bcs.n	800d8d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800d8c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	643b      	str	r3, [r7, #64]	; 0x40
 800d8d0:	e002      	b.n	800d8d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d8d2:	23fc      	movs	r3, #252	; 0xfc
 800d8d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800d8d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800d8e0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d8e4:	e063      	b.n	800d9ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800d8e6:	7dbb      	ldrb	r3, [r7, #22]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d011      	beq.n	800d910 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800d8ec:	693a      	ldr	r2, [r7, #16]
 800d8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f0:	4413      	add	r3, r2
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d8f6:	69fa      	ldr	r2, [r7, #28]
 800d8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d204      	bcs.n	800d908 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800d8fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	643b      	str	r3, [r7, #64]	; 0x40
 800d906:	e016      	b.n	800d936 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d908:	23fc      	movs	r3, #252	; 0xfc
 800d90a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d90e:	e012      	b.n	800d936 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800d910:	7d7b      	ldrb	r3, [r7, #21]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00f      	beq.n	800d936 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d91a:	4413      	add	r3, r2
 800d91c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d91e:	69fa      	ldr	r2, [r7, #28]
 800d920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d922:	429a      	cmp	r2, r3
 800d924:	d204      	bcs.n	800d930 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800d926:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	643b      	str	r3, [r7, #64]	; 0x40
 800d92e:	e002      	b.n	800d936 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d930:	23fc      	movs	r3, #252	; 0xfc
 800d932:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d936:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d002      	beq.n	800d944 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d93e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d942:	e034      	b.n	800d9ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800d944:	7dfb      	ldrb	r3, [r7, #23]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d019      	beq.n	800d97e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800d94a:	f107 030c 	add.w	r3, r7, #12
 800d94e:	461a      	mov	r2, r3
 800d950:	2103      	movs	r1, #3
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f7ff fabc 	bl	800ced0 <get_sequence_step_timeout>
 800d958:	4603      	mov	r3, r0
 800d95a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d962:	4413      	add	r3, r2
 800d964:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d966:	69fa      	ldr	r2, [r7, #28]
 800d968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d204      	bcs.n	800d978 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800d96e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	643b      	str	r3, [r7, #64]	; 0x40
 800d976:	e002      	b.n	800d97e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d978:	23fc      	movs	r3, #252	; 0xfc
 800d97a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800d97e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d982:	2b00      	cmp	r3, #0
 800d984:	d111      	bne.n	800d9aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800d986:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00e      	beq.n	800d9aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800d98c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800d994:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d996:	2104      	movs	r1, #4
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7ff fb7a 	bl	800d092 <set_sequence_step_timeout>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	683a      	ldr	r2, [r7, #0]
 800d9a8:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800d9aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3748      	adds	r7, #72	; 0x48
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b090      	sub	sp, #64	; 0x40
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d9c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d9ca:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d9cc:	f240 7376 	movw	r3, #1910	; 0x776
 800d9d0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800d9d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d9d6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d9d8:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d9dc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800d9de:	f240 234e 	movw	r3, #590	; 0x24e
 800d9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800d9e4:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d9e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d9ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d9ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d9f0:	f240 2326 	movw	r3, #550	; 0x226
 800d9f4:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800d9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9fe:	441a      	add	r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800da04:	f107 0318 	add.w	r3, r7, #24
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7fc fd88 	bl	800a520 <VL53L0X_GetSequenceStepEnables>
 800da10:	4603      	mov	r3, r0
 800da12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800da16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d002      	beq.n	800da24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800da1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da22:	e075      	b.n	800db10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800da24:	7e3b      	ldrb	r3, [r7, #24]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d105      	bne.n	800da36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800da2a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d102      	bne.n	800da36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800da30:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800da32:	2b00      	cmp	r3, #0
 800da34:	d030      	beq.n	800da98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800da36:	f107 0310 	add.w	r3, r7, #16
 800da3a:	461a      	mov	r2, r3
 800da3c:	2102      	movs	r1, #2
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f7ff fa46 	bl	800ced0 <get_sequence_step_timeout>
 800da44:	4603      	mov	r3, r0
 800da46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800da4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d122      	bne.n	800da98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800da52:	7e3b      	ldrb	r3, [r7, #24]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d007      	beq.n	800da68 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800da5c:	6939      	ldr	r1, [r7, #16]
 800da5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da60:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800da62:	441a      	add	r2, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800da68:	7ebb      	ldrb	r3, [r7, #26]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d009      	beq.n	800da82 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800da72:	6939      	ldr	r1, [r7, #16]
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da76:	440b      	add	r3, r1
 800da78:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800da7a:	441a      	add	r2, r3
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	601a      	str	r2, [r3, #0]
 800da80:	e00a      	b.n	800da98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800da82:	7e7b      	ldrb	r3, [r7, #25]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d007      	beq.n	800da98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800da8c:	6939      	ldr	r1, [r7, #16]
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800da92:	441a      	add	r2, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800da98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d114      	bne.n	800daca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800daa0:	7efb      	ldrb	r3, [r7, #27]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d011      	beq.n	800daca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800daa6:	f107 030c 	add.w	r3, r7, #12
 800daaa:	461a      	mov	r2, r3
 800daac:	2103      	movs	r1, #3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff fa0e 	bl	800ced0 <get_sequence_step_timeout>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800dabe:	68f9      	ldr	r1, [r7, #12]
 800dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800dac4:	441a      	add	r2, r3
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800daca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d114      	bne.n	800dafc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800dad2:	7f3b      	ldrb	r3, [r7, #28]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d011      	beq.n	800dafc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800dad8:	f107 0314 	add.w	r3, r7, #20
 800dadc:	461a      	mov	r2, r3
 800dade:	2104      	movs	r1, #4
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7ff f9f5 	bl	800ced0 <get_sequence_step_timeout>
 800dae6:	4603      	mov	r3, r0
 800dae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800daf0:	6979      	ldr	r1, [r7, #20]
 800daf2:	6a3b      	ldr	r3, [r7, #32]
 800daf4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800daf6:	441a      	add	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dafc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db00:	2b00      	cmp	r3, #0
 800db02:	d103      	bne.n	800db0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800db0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800db10:	4618      	mov	r0, r3
 800db12:	3740      	adds	r7, #64	; 0x40
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b088      	sub	sp, #32
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db22:	2300      	movs	r3, #0
 800db24:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800db2a:	e0c6      	b.n	800dcba <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	4413      	add	r3, r2
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	74fb      	strb	r3, [r7, #19]
		Index++;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	3301      	adds	r3, #1
 800db3a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800db3c:	7cfb      	ldrb	r3, [r7, #19]
 800db3e:	2bff      	cmp	r3, #255	; 0xff
 800db40:	f040 808d 	bne.w	800dc5e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	683a      	ldr	r2, [r7, #0]
 800db48:	4413      	add	r3, r2
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	747b      	strb	r3, [r7, #17]
			Index++;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	3301      	adds	r3, #1
 800db52:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800db54:	7c7b      	ldrb	r3, [r7, #17]
 800db56:	2b03      	cmp	r3, #3
 800db58:	d87e      	bhi.n	800dc58 <VL53L0X_load_tuning_settings+0x140>
 800db5a:	a201      	add	r2, pc, #4	; (adr r2, 800db60 <VL53L0X_load_tuning_settings+0x48>)
 800db5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db60:	0800db71 	.word	0x0800db71
 800db64:	0800dbab 	.word	0x0800dbab
 800db68:	0800dbe5 	.word	0x0800dbe5
 800db6c:	0800dc1f 	.word	0x0800dc1f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	4413      	add	r3, r2
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	743b      	strb	r3, [r7, #16]
				Index++;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	3301      	adds	r3, #1
 800db7e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	683a      	ldr	r2, [r7, #0]
 800db84:	4413      	add	r3, r2
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	73fb      	strb	r3, [r7, #15]
				Index++;
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	3301      	adds	r3, #1
 800db8e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800db90:	7c3b      	ldrb	r3, [r7, #16]
 800db92:	b29b      	uxth	r3, r3
 800db94:	021b      	lsls	r3, r3, #8
 800db96:	b29a      	uxth	r2, r3
 800db98:	7bfb      	ldrb	r3, [r7, #15]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	4413      	add	r3, r2
 800db9e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	89ba      	ldrh	r2, [r7, #12]
 800dba4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800dba8:	e087      	b.n	800dcba <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	4413      	add	r3, r2
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	743b      	strb	r3, [r7, #16]
				Index++;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dbca:	7c3b      	ldrb	r3, [r7, #16]
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	021b      	lsls	r3, r3, #8
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	7bfb      	ldrb	r3, [r7, #15]
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	4413      	add	r3, r2
 800dbd8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	89ba      	ldrh	r2, [r7, #12]
 800dbde:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800dbe2:	e06a      	b.n	800dcba <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	683a      	ldr	r2, [r7, #0]
 800dbe8:	4413      	add	r3, r2
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	743b      	strb	r3, [r7, #16]
				Index++;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	3301      	adds	r3, #1
 800dc02:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dc04:	7c3b      	ldrb	r3, [r7, #16]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	021b      	lsls	r3, r3, #8
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	4413      	add	r3, r2
 800dc12:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	89ba      	ldrh	r2, [r7, #12]
 800dc18:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800dc1c:	e04d      	b.n	800dcba <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	683a      	ldr	r2, [r7, #0]
 800dc22:	4413      	add	r3, r2
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	743b      	strb	r3, [r7, #16]
				Index++;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	683a      	ldr	r2, [r7, #0]
 800dc32:	4413      	add	r3, r2
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dc3e:	7c3b      	ldrb	r3, [r7, #16]
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	021b      	lsls	r3, r3, #8
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	7bfb      	ldrb	r3, [r7, #15]
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	4413      	add	r3, r2
 800dc4c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	89ba      	ldrh	r2, [r7, #12]
 800dc52:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800dc56:	e030      	b.n	800dcba <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc58:	23fc      	movs	r3, #252	; 0xfc
 800dc5a:	77fb      	strb	r3, [r7, #31]
 800dc5c:	e02d      	b.n	800dcba <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800dc5e:	7cfb      	ldrb	r3, [r7, #19]
 800dc60:	2b04      	cmp	r3, #4
 800dc62:	d828      	bhi.n	800dcb6 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	4413      	add	r3, r2
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	3301      	adds	r3, #1
 800dc72:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800dc74:	2300      	movs	r3, #0
 800dc76:	61bb      	str	r3, [r7, #24]
 800dc78:	e00f      	b.n	800dc9a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	4413      	add	r3, r2
 800dc80:	7819      	ldrb	r1, [r3, #0]
 800dc82:	f107 0208 	add.w	r2, r7, #8
 800dc86:	69bb      	ldr	r3, [r7, #24]
 800dc88:	4413      	add	r3, r2
 800dc8a:	460a      	mov	r2, r1
 800dc8c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	3301      	adds	r3, #1
 800dc92:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	3301      	adds	r3, #1
 800dc98:	61bb      	str	r3, [r7, #24]
 800dc9a:	7cfb      	ldrb	r3, [r7, #19]
 800dc9c:	69ba      	ldr	r2, [r7, #24]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	dbeb      	blt.n	800dc7a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800dca2:	7cfb      	ldrb	r3, [r7, #19]
 800dca4:	f107 0208 	add.w	r2, r7, #8
 800dca8:	7cb9      	ldrb	r1, [r7, #18]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fdee 	bl	800e88c <VL53L0X_WriteMulti>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	77fb      	strb	r3, [r7, #31]
 800dcb4:	e001      	b.n	800dcba <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dcb6:	23fc      	movs	r3, #252	; 0xfc
 800dcb8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d004      	beq.n	800dcd0 <VL53L0X_load_tuning_settings+0x1b8>
 800dcc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f43f af2e 	beq.w	800db2c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dcd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3720      	adds	r7, #32
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b088      	sub	sp, #32
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dce8:	2300      	movs	r3, #0
 800dcea:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800dcf2:	f107 0313 	add.w	r3, r7, #19
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f7fc fc9d 	bl	800a638 <VL53L0X_GetXTalkCompensationEnable>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800dd02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d111      	bne.n	800dd2e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800dd0a:	7cfb      	ldrb	r3, [r7, #19]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00e      	beq.n	800dd2e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6a1b      	ldr	r3, [r3, #32]
 800dd14:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	8a9b      	ldrh	r3, [r3, #20]
 800dd1a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	fb02 f303 	mul.w	r3, r2, r3
 800dd22:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	3380      	adds	r3, #128	; 0x80
 800dd28:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800dd2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3720      	adds	r7, #32
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b086      	sub	sp, #24
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	60f8      	str	r0, [r7, #12]
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd46:	2300      	movs	r3, #0
 800dd48:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800dd52:	f107 0310 	add.w	r3, r7, #16
 800dd56:	461a      	mov	r2, r3
 800dd58:	68b9      	ldr	r1, [r7, #8]
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f7ff ffbe 	bl	800dcdc <VL53L0X_get_total_xtalk_rate>
 800dd60:	4603      	mov	r3, r0
 800dd62:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800dd64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d105      	bne.n	800dd78 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	441a      	add	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	601a      	str	r2, [r3, #0]

	return Status;
 800dd78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3718      	adds	r7, #24
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b09a      	sub	sp, #104	; 0x68
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
 800dd90:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800dd92:	2312      	movs	r3, #18
 800dd94:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800dd96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dd9a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800dd9c:	2342      	movs	r3, #66	; 0x42
 800dd9e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800dda0:	2306      	movs	r3, #6
 800dda2:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800dda4:	2307      	movs	r3, #7
 800dda6:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800ddb4:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ddbc:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ddbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddc2:	fb02 f303 	mul.w	r3, r2, r3
 800ddc6:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ddc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddca:	3380      	adds	r3, #128	; 0x80
 800ddcc:	0a1b      	lsrs	r3, r3, #8
 800ddce:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ddd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddd4:	fb02 f303 	mul.w	r3, r2, r3
 800ddd8:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d01a      	beq.n	800de1a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	029b      	lsls	r3, r3, #10
 800dde8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ddee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddf0:	4413      	add	r3, r2
 800ddf2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ddf4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddfc:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ddfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800de00:	4613      	mov	r3, r2
 800de02:	005b      	lsls	r3, r3, #1
 800de04:	4413      	add	r3, r2
 800de06:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800de08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de0a:	fb03 f303 	mul.w	r3, r3, r3
 800de0e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800de10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de16:	0c1b      	lsrs	r3, r3, #16
 800de18:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800de1e:	fb02 f303 	mul.w	r3, r2, r3
 800de22:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de2a:	0c1b      	lsrs	r3, r3, #16
 800de2c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800de2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de30:	fb03 f303 	mul.w	r3, r3, r3
 800de34:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800de36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de3c:	0c1b      	lsrs	r3, r3, #16
 800de3e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800de40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de42:	085a      	lsrs	r2, r3, #1
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	441a      	add	r2, r3
 800de48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de4e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de54:	fb02 f303 	mul.w	r3, r2, r3
 800de58:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800de5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de60:	d302      	bcc.n	800de68 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800de62:	4b54      	ldr	r3, [pc, #336]	; (800dfb4 <VL53L0X_calc_dmax+0x230>)
 800de64:	663b      	str	r3, [r7, #96]	; 0x60
 800de66:	e015      	b.n	800de94 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800de68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de6a:	085a      	lsrs	r2, r3, #1
 800de6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de6e:	441a      	add	r2, r3
 800de70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de72:	fbb2 f3f3 	udiv	r3, r2, r3
 800de76:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800de78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de7c:	fb02 f303 	mul.w	r3, r2, r3
 800de80:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800de82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de88:	0c1b      	lsrs	r3, r3, #16
 800de8a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800de8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de8e:	fb03 f303 	mul.w	r3, r3, r3
 800de92:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800de94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de96:	039b      	lsls	r3, r3, #14
 800de98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800de9c:	4a46      	ldr	r2, [pc, #280]	; (800dfb8 <VL53L0X_calc_dmax+0x234>)
 800de9e:	fba2 2303 	umull	r2, r3, r2, r3
 800dea2:	099b      	lsrs	r3, r3, #6
 800dea4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	fb03 f303 	mul.w	r3, r3, r3
 800deac:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800deae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb0:	fb03 f303 	mul.w	r3, r3, r3
 800deb4:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	3308      	adds	r3, #8
 800deba:	091b      	lsrs	r3, r3, #4
 800debc:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800debe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec0:	6a3b      	ldr	r3, [r7, #32]
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800dec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec8:	4613      	mov	r3, r2
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	4413      	add	r3, r2
 800dece:	011b      	lsls	r3, r3, #4
 800ded0:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ded8:	0b9b      	lsrs	r3, r3, #14
 800deda:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800dedc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dee0:	4413      	add	r3, r2
 800dee2:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800dee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dee6:	085b      	lsrs	r3, r3, #1
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	4413      	add	r3, r2
 800deec:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800deee:	69ba      	ldr	r2, [r7, #24]
 800def0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800def2:	fbb2 f3f3 	udiv	r3, r2, r3
 800def6:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	039b      	lsls	r3, r3, #14
 800defc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	085b      	lsrs	r3, r3, #1
 800df02:	69ba      	ldr	r2, [r7, #24]
 800df04:	4413      	add	r3, r2
 800df06:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800df08:	69ba      	ldr	r2, [r7, #24]
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df10:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df16:	fb02 f303 	mul.w	r3, r2, r3
 800df1a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800df22:	4a25      	ldr	r2, [pc, #148]	; (800dfb8 <VL53L0X_calc_dmax+0x234>)
 800df24:	fba2 2303 	umull	r2, r3, r2, r3
 800df28:	099b      	lsrs	r3, r3, #6
 800df2a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	011b      	lsls	r3, r3, #4
 800df30:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800df38:	4a1f      	ldr	r2, [pc, #124]	; (800dfb8 <VL53L0X_calc_dmax+0x234>)
 800df3a:	fba2 2303 	umull	r2, r3, r2, r3
 800df3e:	099b      	lsrs	r3, r3, #6
 800df40:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800df42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df44:	3380      	adds	r3, #128	; 0x80
 800df46:	0a1b      	lsrs	r3, r3, #8
 800df48:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d008      	beq.n	800df62 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	085a      	lsrs	r2, r3, #1
 800df54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df56:	441a      	add	r2, r3
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800df60:	e001      	b.n	800df66 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800df66:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800df68:	f7fe f9b9 	bl	800c2de <VL53L0X_isqrt>
 800df6c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d008      	beq.n	800df86 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	085a      	lsrs	r2, r3, #1
 800df78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df7a:	441a      	add	r2, r3
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df84:	e001      	b.n	800df8a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800df86:	2300      	movs	r3, #0
 800df88:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800df8a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800df8c:	f7fe f9a7 	bl	800c2de <VL53L0X_isqrt>
 800df90:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800df92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d902      	bls.n	800dfa6 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800dfa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dfa2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dfa4:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800dfa6:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3768      	adds	r7, #104	; 0x68
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	fff00000 	.word	0xfff00000
 800dfb8:	10624dd3 	.word	0x10624dd3

0800dfbc <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b0b4      	sub	sp, #208	; 0xd0
 800dfc0:	af04      	add	r7, sp, #16
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
 800dfc8:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800dfca:	f44f 7348 	mov.w	r3, #800	; 0x320
 800dfce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800dfd2:	f44f 7316 	mov.w	r3, #600	; 0x258
 800dfd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800dfda:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800dfde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800dfe2:	f241 235c 	movw	r3, #4700	; 0x125c
 800dfe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800dfea:	4b9e      	ldr	r3, [pc, #632]	; (800e264 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800dfec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800dff0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800dff4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800dff6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800dffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dffe:	fbb2 f3f3 	udiv	r3, r2, r3
 800e002:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800e004:	4b98      	ldr	r3, [pc, #608]	; (800e268 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800e006:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800e008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e00c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800e00e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800e012:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800e014:	f240 6377 	movw	r3, #1655	; 0x677
 800e018:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e01a:	2300      	movs	r3, #0
 800e01c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6a1b      	ldr	r3, [r3, #32]
 800e024:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	691b      	ldr	r3, [r3, #16]
 800e02a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e02e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800e032:	0c1b      	lsrs	r3, r3, #16
 800e034:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800e03c:	f107 0310 	add.w	r3, r7, #16
 800e040:	461a      	mov	r2, r3
 800e042:	68b9      	ldr	r1, [r7, #8]
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f7ff fe78 	bl	800dd3a <VL53L0X_get_total_signal_rate>
 800e04a:	4603      	mov	r3, r0
 800e04c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800e050:	f107 0314 	add.w	r3, r7, #20
 800e054:	461a      	mov	r2, r3
 800e056:	68b9      	ldr	r1, [r7, #8]
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f7ff fe3f 	bl	800dcdc <VL53L0X_get_total_xtalk_rate>
 800e05e:	4603      	mov	r3, r0
 800e060:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e06a:	fb02 f303 	mul.w	r3, r2, r3
 800e06e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800e070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e072:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e076:	0c1b      	lsrs	r3, r3, #16
 800e078:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e080:	fb02 f303 	mul.w	r3, r2, r3
 800e084:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800e088:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e08c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e08e:	429a      	cmp	r2, r3
 800e090:	d902      	bls.n	800e098 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800e092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e094:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800e098:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d168      	bne.n	800e172 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e0a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800e0b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e0b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f7fe feb2 	bl	800ce28 <VL53L0X_calc_timeout_mclks>
 800e0c4:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e0cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800e0d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e0da:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e0de:	461a      	mov	r2, r3
 800e0e0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f7fe fe9f 	bl	800ce28 <VL53L0X_calc_timeout_mclks>
 800e0ea:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800e0f2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e0f6:	2b08      	cmp	r3, #8
 800e0f8:	d102      	bne.n	800e100 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800e100:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e104:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800e106:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e10a:	fb02 f303 	mul.w	r3, r2, r3
 800e10e:	02db      	lsls	r3, r3, #11
 800e110:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e114:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e118:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e11c:	4a53      	ldr	r2, [pc, #332]	; (800e26c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e11e:	fba2 2303 	umull	r2, r3, r2, r3
 800e122:	099b      	lsrs	r3, r3, #6
 800e124:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800e128:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e12c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e12e:	fb02 f303 	mul.w	r3, r2, r3
 800e132:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e136:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e13a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e13e:	4a4b      	ldr	r2, [pc, #300]	; (800e26c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e140:	fba2 2303 	umull	r2, r3, r2, r3
 800e144:	099b      	lsrs	r3, r3, #6
 800e146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	3380      	adds	r3, #128	; 0x80
 800e14e:	0a1b      	lsrs	r3, r3, #8
 800e150:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800e152:	693a      	ldr	r2, [r7, #16]
 800e154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e158:	fb02 f303 	mul.w	r3, r2, r3
 800e15c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800e160:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e164:	3380      	adds	r3, #128	; 0x80
 800e166:	0a1b      	lsrs	r3, r3, #8
 800e168:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	021b      	lsls	r3, r3, #8
 800e170:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e172:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e176:	2b00      	cmp	r3, #0
 800e178:	d002      	beq.n	800e180 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800e17a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e17e:	e15e      	b.n	800e43e <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800e180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10c      	bne.n	800e1a0 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e18c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e194:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2200      	movs	r2, #0
 800e19c:	601a      	str	r2, [r3, #0]
 800e19e:	e14c      	b.n	800e43a <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800e1a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d102      	bne.n	800e1ae <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800e1ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e1b2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800e1b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1b6:	041a      	lsls	r2, r3, #16
 800e1b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800e1c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e1c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d902      	bls.n	800e1d2 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800e1cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800e1d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e1d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e1da:	fb02 f303 	mul.w	r3, r2, r3
 800e1de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800e1e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	005b      	lsls	r3, r3, #1
 800e1ea:	4413      	add	r3, r2
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe f875 	bl	800c2de <VL53L0X_isqrt>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	005b      	lsls	r3, r3, #1
 800e1f8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	891b      	ldrh	r3, [r3, #8]
 800e1fe:	461a      	mov	r2, r3
 800e200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e202:	fb02 f303 	mul.w	r3, r2, r3
 800e206:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e20a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e20c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e210:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e212:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e214:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e218:	4a14      	ldr	r2, [pc, #80]	; (800e26c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e21a:	fba2 2303 	umull	r2, r3, r2, r3
 800e21e:	099b      	lsrs	r3, r3, #6
 800e220:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800e222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e224:	041b      	lsls	r3, r3, #16
 800e226:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e22a:	4a10      	ldr	r2, [pc, #64]	; (800e26c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e22c:	fba2 2303 	umull	r2, r3, r2, r3
 800e230:	099b      	lsrs	r3, r3, #6
 800e232:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800e234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e236:	021b      	lsls	r3, r3, #8
 800e238:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800e23a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e242:	2b00      	cmp	r3, #0
 800e244:	bfb8      	it	lt
 800e246:	425b      	neglt	r3, r3
 800e248:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800e24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24c:	021b      	lsls	r3, r3, #8
 800e24e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	7e1b      	ldrb	r3, [r3, #24]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00b      	beq.n	800e270 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800e258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e25c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e260:	e033      	b.n	800e2ca <VL53L0X_calc_sigma_estimate+0x30e>
 800e262:	bf00      	nop
 800e264:	028f87ae 	.word	0x028f87ae
 800e268:	0006999a 	.word	0x0006999a
 800e26c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800e270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e276:	fbb2 f3f3 	udiv	r3, r2, r3
 800e27a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800e27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e280:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800e284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e288:	fb02 f303 	mul.w	r3, r2, r3
 800e28c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800e290:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e296:	4413      	add	r3, r2
 800e298:	0c1b      	lsrs	r3, r3, #16
 800e29a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800e29e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e2a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800e2aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2ae:	085b      	lsrs	r3, r3, #1
 800e2b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800e2b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2b8:	fb03 f303 	mul.w	r3, r3, r3
 800e2bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800e2c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2c4:	0b9b      	lsrs	r3, r3, #14
 800e2c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800e2ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2d0:	fb02 f303 	mul.w	r3, r2, r3
 800e2d4:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800e2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e2dc:	0c1b      	lsrs	r3, r3, #16
 800e2de:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e2:	fb03 f303 	mul.w	r3, r3, r3
 800e2e6:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800e2e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e2ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e2f4:	0c1b      	lsrs	r3, r3, #16
 800e2f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	fb03 f303 	mul.w	r3, r3, r3
 800e2fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800e300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	4413      	add	r3, r2
 800e306:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800e308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e30a:	f7fd ffe8 	bl	800c2de <VL53L0X_isqrt>
 800e30e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e312:	041b      	lsls	r3, r3, #16
 800e314:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e318:	3332      	adds	r3, #50	; 0x32
 800e31a:	4a4b      	ldr	r2, [pc, #300]	; (800e448 <VL53L0X_calc_sigma_estimate+0x48c>)
 800e31c:	fba2 2303 	umull	r2, r3, r2, r3
 800e320:	095a      	lsrs	r2, r3, #5
 800e322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e324:	fbb2 f3f3 	udiv	r3, r2, r3
 800e328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800e32c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e330:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800e334:	fb02 f303 	mul.w	r3, r2, r3
 800e338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800e33c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e340:	f241 3388 	movw	r3, #5000	; 0x1388
 800e344:	4413      	add	r3, r2
 800e346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800e34a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e34e:	4a3f      	ldr	r2, [pc, #252]	; (800e44c <VL53L0X_calc_sigma_estimate+0x490>)
 800e350:	fba2 2303 	umull	r2, r3, r2, r3
 800e354:	0b5b      	lsrs	r3, r3, #13
 800e356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800e35a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e35e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e360:	429a      	cmp	r2, r3
 800e362:	d902      	bls.n	800e36a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800e364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800e36a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e36e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e372:	4413      	add	r3, r2
 800e374:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800e378:	4a35      	ldr	r2, [pc, #212]	; (800e450 <VL53L0X_calc_sigma_estimate+0x494>)
 800e37a:	fba2 2303 	umull	r2, r3, r2, r3
 800e37e:	099b      	lsrs	r3, r3, #6
 800e380:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800e382:	6a3b      	ldr	r3, [r7, #32]
 800e384:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800e386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e38a:	441a      	add	r2, r3
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e392:	4618      	mov	r0, r3
 800e394:	f7fd ffa3 	bl	800c2de <VL53L0X_isqrt>
 800e398:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	021b      	lsls	r3, r3, #8
 800e39e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e3a6:	4a2a      	ldr	r2, [pc, #168]	; (800e450 <VL53L0X_calc_sigma_estimate+0x494>)
 800e3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ac:	099b      	lsrs	r3, r3, #6
 800e3ae:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800e3b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3b4:	fb03 f303 	mul.w	r3, r3, r3
 800e3b8:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	fb03 f303 	mul.w	r3, r3, r3
 800e3c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800e3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c6:	4413      	add	r3, r2
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fd ff88 	bl	800c2de <VL53L0X_isqrt>
 800e3ce:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3d6:	fb02 f303 	mul.w	r3, r2, r3
 800e3da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800e3de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d009      	beq.n	800e3f8 <VL53L0X_calc_sigma_estimate+0x43c>
 800e3e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d005      	beq.n	800e3f8 <VL53L0X_calc_sigma_estimate+0x43c>
 800e3ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e3f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d903      	bls.n	800e400 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800e3f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e406:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800e412:	6939      	ldr	r1, [r7, #16]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	9303      	str	r3, [sp, #12]
 800e418:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e41c:	9302      	str	r3, [sp, #8]
 800e41e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e422:	9301      	str	r3, [sp, #4]
 800e424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e42c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e42e:	68f8      	ldr	r0, [r7, #12]
 800e430:	f7ff fca8 	bl	800dd84 <VL53L0X_calc_dmax>
 800e434:	4603      	mov	r3, r0
 800e436:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e43a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800e43e:	4618      	mov	r0, r3
 800e440:	37c0      	adds	r7, #192	; 0xc0
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	51eb851f 	.word	0x51eb851f
 800e44c:	d1b71759 	.word	0xd1b71759
 800e450:	10624dd3 	.word	0x10624dd3

0800e454 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b090      	sub	sp, #64	; 0x40
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	607a      	str	r2, [r7, #4]
 800e45e:	461a      	mov	r2, r3
 800e460:	460b      	mov	r3, r1
 800e462:	72fb      	strb	r3, [r7, #11]
 800e464:	4613      	mov	r3, r2
 800e466:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e468:	2300      	movs	r3, #0
 800e46a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e46e:	2300      	movs	r3, #0
 800e470:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800e474:	2300      	movs	r3, #0
 800e476:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e47a:	2300      	movs	r3, #0
 800e47c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e480:	2300      	movs	r3, #0
 800e482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e486:	2300      	movs	r3, #0
 800e488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e48c:	2300      	movs	r3, #0
 800e48e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e498:	2300      	movs	r3, #0
 800e49a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e4a6:	7afb      	ldrb	r3, [r7, #11]
 800e4a8:	10db      	asrs	r3, r3, #3
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	f003 030f 	and.w	r3, r3, #15
 800e4b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e4b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d017      	beq.n	800e4ec <VL53L0X_get_pal_range_status+0x98>
 800e4bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4c0:	2b05      	cmp	r3, #5
 800e4c2:	d013      	beq.n	800e4ec <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e4c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4c8:	2b07      	cmp	r3, #7
 800e4ca:	d00f      	beq.n	800e4ec <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e4cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4d0:	2b0c      	cmp	r3, #12
 800e4d2:	d00b      	beq.n	800e4ec <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e4d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4d8:	2b0d      	cmp	r3, #13
 800e4da:	d007      	beq.n	800e4ec <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e4dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4e0:	2b0e      	cmp	r3, #14
 800e4e2:	d003      	beq.n	800e4ec <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e4e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4e8:	2b0f      	cmp	r3, #15
 800e4ea:	d103      	bne.n	800e4f4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800e4f2:	e002      	b.n	800e4fa <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e4fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d109      	bne.n	800e516 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e502:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e506:	461a      	mov	r2, r3
 800e508:	2100      	movs	r1, #0
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f7fc f980 	bl	800a810 <VL53L0X_GetLimitCheckEnable>
 800e510:	4603      	mov	r3, r0
 800e512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d02e      	beq.n	800e57c <VL53L0X_get_pal_range_status+0x128>
 800e51e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e522:	2b00      	cmp	r3, #0
 800e524:	d12a      	bne.n	800e57c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e526:	f107 0310 	add.w	r3, r7, #16
 800e52a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e52e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f7ff fd43 	bl	800dfbc <VL53L0X_calc_sigma_estimate>
 800e536:	4603      	mov	r3, r0
 800e538:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e53c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e540:	2b00      	cmp	r3, #0
 800e542:	d103      	bne.n	800e54c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	b29a      	uxth	r2, r3
 800e548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e54a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e54c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e550:	2b00      	cmp	r3, #0
 800e552:	d113      	bne.n	800e57c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e554:	f107 0320 	add.w	r3, r7, #32
 800e558:	461a      	mov	r2, r3
 800e55a:	2100      	movs	r1, #0
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f7fc f9dd 	bl	800a91c <VL53L0X_GetLimitCheckValue>
 800e562:	4603      	mov	r3, r0
 800e564:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e568:	6a3b      	ldr	r3, [r7, #32]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d006      	beq.n	800e57c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800e56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e570:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e572:	429a      	cmp	r2, r3
 800e574:	d902      	bls.n	800e57c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800e576:	2301      	movs	r3, #1
 800e578:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e57c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e580:	2b00      	cmp	r3, #0
 800e582:	d109      	bne.n	800e598 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e584:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800e588:	461a      	mov	r2, r3
 800e58a:	2102      	movs	r1, #2
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f7fc f93f 	bl	800a810 <VL53L0X_GetLimitCheckEnable>
 800e592:	4603      	mov	r3, r0
 800e594:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e598:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d044      	beq.n	800e62a <VL53L0X_get_pal_range_status+0x1d6>
 800e5a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d140      	bne.n	800e62a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e5a8:	f107 031c 	add.w	r3, r7, #28
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	2102      	movs	r1, #2
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f7fc f9b3 	bl	800a91c <VL53L0X_GetLimitCheckValue>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e5bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d107      	bne.n	800e5d4 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	21ff      	movs	r1, #255	; 0xff
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 f9bb 	bl	800e944 <VL53L0X_WrByte>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e5d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d109      	bne.n	800e5f0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800e5dc:	f107 0316 	add.w	r3, r7, #22
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	21b6      	movs	r1, #182	; 0xb6
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f000 fa59 	bl	800ea9c <VL53L0X_RdWord>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e5f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d107      	bne.n	800e608 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	21ff      	movs	r1, #255	; 0xff
 800e5fc:	68f8      	ldr	r0, [r7, #12]
 800e5fe:	f000 f9a1 	bl	800e944 <VL53L0X_WrByte>
 800e602:	4603      	mov	r3, r0
 800e604:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800e608:	8afb      	ldrh	r3, [r7, #22]
 800e60a:	025b      	lsls	r3, r3, #9
 800e60c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e612:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d006      	beq.n	800e62a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800e61c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800e61e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e620:	429a      	cmp	r2, r3
 800e622:	d902      	bls.n	800e62a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800e624:	2301      	movs	r3, #1
 800e626:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e62a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d109      	bne.n	800e646 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e636:	461a      	mov	r2, r3
 800e638:	2103      	movs	r1, #3
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7fc f8e8 	bl	800a810 <VL53L0X_GetLimitCheckEnable>
 800e640:	4603      	mov	r3, r0
 800e642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800e646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d023      	beq.n	800e696 <VL53L0X_get_pal_range_status+0x242>
 800e64e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e652:	2b00      	cmp	r3, #0
 800e654:	d11f      	bne.n	800e696 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800e656:	893b      	ldrh	r3, [r7, #8]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d102      	bne.n	800e662 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800e65c:	2300      	movs	r3, #0
 800e65e:	637b      	str	r3, [r7, #52]	; 0x34
 800e660:	e005      	b.n	800e66e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	021a      	lsls	r2, r3, #8
 800e666:	893b      	ldrh	r3, [r7, #8]
 800e668:	fbb2 f3f3 	udiv	r3, r2, r3
 800e66c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e66e:	f107 0318 	add.w	r3, r7, #24
 800e672:	461a      	mov	r2, r3
 800e674:	2103      	movs	r1, #3
 800e676:	68f8      	ldr	r0, [r7, #12]
 800e678:	f7fc f950 	bl	800a91c <VL53L0X_GetLimitCheckValue>
 800e67c:	4603      	mov	r3, r0
 800e67e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d006      	beq.n	800e696 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800e688:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800e68a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d202      	bcs.n	800e696 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800e690:	2301      	movs	r3, #1
 800e692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e696:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d14a      	bne.n	800e734 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800e69e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d103      	bne.n	800e6ae <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800e6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6a8:	22ff      	movs	r2, #255	; 0xff
 800e6aa:	701a      	strb	r2, [r3, #0]
 800e6ac:	e042      	b.n	800e734 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800e6ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d007      	beq.n	800e6c6 <VL53L0X_get_pal_range_status+0x272>
 800e6b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d003      	beq.n	800e6c6 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800e6be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d103      	bne.n	800e6ce <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800e6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6c8:	2205      	movs	r2, #5
 800e6ca:	701a      	strb	r2, [r3, #0]
 800e6cc:	e032      	b.n	800e734 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800e6ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e6d2:	2b06      	cmp	r3, #6
 800e6d4:	d003      	beq.n	800e6de <VL53L0X_get_pal_range_status+0x28a>
 800e6d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e6da:	2b09      	cmp	r3, #9
 800e6dc:	d103      	bne.n	800e6e6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800e6de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6e0:	2204      	movs	r2, #4
 800e6e2:	701a      	strb	r2, [r3, #0]
 800e6e4:	e026      	b.n	800e734 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800e6e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e6ea:	2b08      	cmp	r3, #8
 800e6ec:	d007      	beq.n	800e6fe <VL53L0X_get_pal_range_status+0x2aa>
 800e6ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e6f2:	2b0a      	cmp	r3, #10
 800e6f4:	d003      	beq.n	800e6fe <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800e6f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d103      	bne.n	800e706 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800e6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e700:	2203      	movs	r2, #3
 800e702:	701a      	strb	r2, [r3, #0]
 800e704:	e016      	b.n	800e734 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800e706:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e70a:	2b04      	cmp	r3, #4
 800e70c:	d003      	beq.n	800e716 <VL53L0X_get_pal_range_status+0x2c2>
 800e70e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e712:	2b01      	cmp	r3, #1
 800e714:	d103      	bne.n	800e71e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800e716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e718:	2202      	movs	r2, #2
 800e71a:	701a      	strb	r2, [r3, #0]
 800e71c:	e00a      	b.n	800e734 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800e71e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e722:	2b01      	cmp	r3, #1
 800e724:	d103      	bne.n	800e72e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800e726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e728:	2201      	movs	r2, #1
 800e72a:	701a      	strb	r2, [r3, #0]
 800e72c:	e002      	b.n	800e734 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800e72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e730:	2200      	movs	r2, #0
 800e732:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800e734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d102      	bne.n	800e742 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800e73c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e73e:	2200      	movs	r2, #0
 800e740:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e742:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800e746:	461a      	mov	r2, r3
 800e748:	2101      	movs	r1, #1
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f7fc f860 	bl	800a810 <VL53L0X_GetLimitCheckEnable>
 800e750:	4603      	mov	r3, r0
 800e752:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800e756:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d14f      	bne.n	800e7fe <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800e75e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e762:	2b00      	cmp	r3, #0
 800e764:	d003      	beq.n	800e76e <VL53L0X_get_pal_range_status+0x31a>
 800e766:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d103      	bne.n	800e776 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800e76e:	2301      	movs	r3, #1
 800e770:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e774:	e002      	b.n	800e77c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800e776:	2300      	movs	r3, #0
 800e778:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e782:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800e786:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e78a:	2b04      	cmp	r3, #4
 800e78c:	d003      	beq.n	800e796 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800e78e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800e792:	2b00      	cmp	r3, #0
 800e794:	d103      	bne.n	800e79e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800e796:	2301      	movs	r3, #1
 800e798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e79c:	e002      	b.n	800e7a4 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e7aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800e7ae:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d003      	beq.n	800e7be <VL53L0X_get_pal_range_status+0x36a>
 800e7b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d103      	bne.n	800e7c6 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7c4:	e002      	b.n	800e7cc <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e7d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800e7d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <VL53L0X_get_pal_range_status+0x392>
 800e7de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d103      	bne.n	800e7ee <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ec:	e002      	b.n	800e7f4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e7fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e7fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800e802:	4618      	mov	r0, r3
 800e804:	3740      	adds	r7, #64	; 0x40
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b088      	sub	sp, #32
 800e80e:	af02      	add	r7, sp, #8
 800e810:	60f8      	str	r0, [r7, #12]
 800e812:	60b9      	str	r1, [r7, #8]
 800e814:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	330a      	adds	r3, #10
 800e81a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e828:	b299      	uxth	r1, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	b29a      	uxth	r2, r3
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	4613      	mov	r3, r2
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	f7f6 fb35 	bl	8004ea4 <HAL_I2C_Master_Transmit>
 800e83a:	4603      	mov	r3, r0
 800e83c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e83e:	693b      	ldr	r3, [r7, #16]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3718      	adds	r7, #24
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e848:	b580      	push	{r7, lr}
 800e84a:	b088      	sub	sp, #32
 800e84c:	af02      	add	r7, sp, #8
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	330a      	adds	r3, #10
 800e858:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e866:	f043 0301 	orr.w	r3, r3, #1
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	b299      	uxth	r1, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	b29a      	uxth	r2, r3
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	4613      	mov	r3, r2
 800e878:	68ba      	ldr	r2, [r7, #8]
 800e87a:	f7f6 fc07 	bl	800508c <HAL_I2C_Master_Receive>
 800e87e:	4603      	mov	r3, r0
 800e880:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e882:	693b      	ldr	r3, [r7, #16]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3718      	adds	r7, #24
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	607a      	str	r2, [r7, #4]
 800e896:	603b      	str	r3, [r7, #0]
 800e898:	460b      	mov	r3, r1
 800e89a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e89c:	2300      	movs	r3, #0
 800e89e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	2b3f      	cmp	r3, #63	; 0x3f
 800e8a4:	d902      	bls.n	800e8ac <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800e8a6:	f06f 0303 	mvn.w	r3, #3
 800e8aa:	e016      	b.n	800e8da <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800e8ac:	4a0d      	ldr	r2, [pc, #52]	; (800e8e4 <VL53L0X_WriteMulti+0x58>)
 800e8ae:	7afb      	ldrb	r3, [r7, #11]
 800e8b0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800e8b2:	683a      	ldr	r2, [r7, #0]
 800e8b4:	6879      	ldr	r1, [r7, #4]
 800e8b6:	480c      	ldr	r0, [pc, #48]	; (800e8e8 <VL53L0X_WriteMulti+0x5c>)
 800e8b8:	f003 fda6 	bl	8012408 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	4908      	ldr	r1, [pc, #32]	; (800e8e4 <VL53L0X_WriteMulti+0x58>)
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	f7ff ffa0 	bl	800e80a <_I2CWrite>
 800e8ca:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d001      	beq.n	800e8d6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e8d2:	23ec      	movs	r3, #236	; 0xec
 800e8d4:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e8d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3718      	adds	r7, #24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	200099a8 	.word	0x200099a8
 800e8e8:	200099a9 	.word	0x200099a9

0800e8ec <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	607a      	str	r2, [r7, #4]
 800e8f6:	603b      	str	r3, [r7, #0]
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e900:	f107 030b 	add.w	r3, r7, #11
 800e904:	2201      	movs	r2, #1
 800e906:	4619      	mov	r1, r3
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f7ff ff7e 	bl	800e80a <_I2CWrite>
 800e90e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d002      	beq.n	800e91c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e916:	23ec      	movs	r3, #236	; 0xec
 800e918:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e91a:	e00c      	b.n	800e936 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800e91c:	683a      	ldr	r2, [r7, #0]
 800e91e:	6879      	ldr	r1, [r7, #4]
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f7ff ff91 	bl	800e848 <_I2CRead>
 800e926:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d002      	beq.n	800e934 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e92e:	23ec      	movs	r3, #236	; 0xec
 800e930:	75fb      	strb	r3, [r7, #23]
 800e932:	e000      	b.n	800e936 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800e934:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e936:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
	...

0800e944 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	460b      	mov	r3, r1
 800e94e:	70fb      	strb	r3, [r7, #3]
 800e950:	4613      	mov	r3, r2
 800e952:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e954:	2300      	movs	r3, #0
 800e956:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e958:	4a0b      	ldr	r2, [pc, #44]	; (800e988 <VL53L0X_WrByte+0x44>)
 800e95a:	78fb      	ldrb	r3, [r7, #3]
 800e95c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800e95e:	4a0a      	ldr	r2, [pc, #40]	; (800e988 <VL53L0X_WrByte+0x44>)
 800e960:	78bb      	ldrb	r3, [r7, #2]
 800e962:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e964:	2202      	movs	r2, #2
 800e966:	4908      	ldr	r1, [pc, #32]	; (800e988 <VL53L0X_WrByte+0x44>)
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f7ff ff4e 	bl	800e80a <_I2CWrite>
 800e96e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d001      	beq.n	800e97a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e976:	23ec      	movs	r3, #236	; 0xec
 800e978:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	200099a8 	.word	0x200099a8

0800e98c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	70fb      	strb	r3, [r7, #3]
 800e998:	4613      	mov	r3, r2
 800e99a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e99c:	2300      	movs	r3, #0
 800e99e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e9a0:	4a0e      	ldr	r2, [pc, #56]	; (800e9dc <VL53L0X_WrWord+0x50>)
 800e9a2:	78fb      	ldrb	r3, [r7, #3]
 800e9a4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800e9a6:	883b      	ldrh	r3, [r7, #0]
 800e9a8:	0a1b      	lsrs	r3, r3, #8
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	b2da      	uxtb	r2, r3
 800e9ae:	4b0b      	ldr	r3, [pc, #44]	; (800e9dc <VL53L0X_WrWord+0x50>)
 800e9b0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800e9b2:	883b      	ldrh	r3, [r7, #0]
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <VL53L0X_WrWord+0x50>)
 800e9b8:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800e9ba:	2203      	movs	r2, #3
 800e9bc:	4907      	ldr	r1, [pc, #28]	; (800e9dc <VL53L0X_WrWord+0x50>)
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7ff ff23 	bl	800e80a <_I2CWrite>
 800e9c4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e9cc:	23ec      	movs	r3, #236	; 0xec
 800e9ce:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e9d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3710      	adds	r7, #16
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	200099a8 	.word	0x200099a8

0800e9e0 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	4611      	mov	r1, r2
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	70fb      	strb	r3, [r7, #3]
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	70bb      	strb	r3, [r7, #2]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800e9fe:	f107 020e 	add.w	r2, r7, #14
 800ea02:	78fb      	ldrb	r3, [r7, #3]
 800ea04:	4619      	mov	r1, r3
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 f81e 	bl	800ea48 <VL53L0X_RdByte>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ea10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d110      	bne.n	800ea3a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ea18:	7bba      	ldrb	r2, [r7, #14]
 800ea1a:	78bb      	ldrb	r3, [r7, #2]
 800ea1c:	4013      	ands	r3, r2
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	787b      	ldrb	r3, [r7, #1]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ea28:	7bba      	ldrb	r2, [r7, #14]
 800ea2a:	78fb      	ldrb	r3, [r7, #3]
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7ff ff88 	bl	800e944 <VL53L0X_WrByte>
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]
 800ea38:	e000      	b.n	800ea3c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ea3a:	bf00      	nop
done:
    return Status;
 800ea3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b086      	sub	sp, #24
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	460b      	mov	r3, r1
 800ea52:	607a      	str	r2, [r7, #4]
 800ea54:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea56:	2300      	movs	r3, #0
 800ea58:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ea5a:	f107 030b 	add.w	r3, r7, #11
 800ea5e:	2201      	movs	r2, #1
 800ea60:	4619      	mov	r1, r3
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f7ff fed1 	bl	800e80a <_I2CWrite>
 800ea68:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d002      	beq.n	800ea76 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ea70:	23ec      	movs	r3, #236	; 0xec
 800ea72:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ea74:	e00c      	b.n	800ea90 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ea76:	2201      	movs	r2, #1
 800ea78:	6879      	ldr	r1, [r7, #4]
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f7ff fee4 	bl	800e848 <_I2CRead>
 800ea80:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d002      	beq.n	800ea8e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ea88:	23ec      	movs	r3, #236	; 0xec
 800ea8a:	75fb      	strb	r3, [r7, #23]
 800ea8c:	e000      	b.n	800ea90 <VL53L0X_RdByte+0x48>
    }
done:
 800ea8e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ea90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3718      	adds	r7, #24
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b086      	sub	sp, #24
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	607a      	str	r2, [r7, #4]
 800eaa8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800eaae:	f107 030b 	add.w	r3, r7, #11
 800eab2:	2201      	movs	r2, #1
 800eab4:	4619      	mov	r1, r3
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f7ff fea7 	bl	800e80a <_I2CWrite>
 800eabc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d002      	beq.n	800eaca <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eac4:	23ec      	movs	r3, #236	; 0xec
 800eac6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eac8:	e017      	b.n	800eafa <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800eaca:	2202      	movs	r2, #2
 800eacc:	490e      	ldr	r1, [pc, #56]	; (800eb08 <VL53L0X_RdWord+0x6c>)
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7ff feba 	bl	800e848 <_I2CRead>
 800ead4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d002      	beq.n	800eae2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eadc:	23ec      	movs	r3, #236	; 0xec
 800eade:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eae0:	e00b      	b.n	800eafa <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800eae2:	4b09      	ldr	r3, [pc, #36]	; (800eb08 <VL53L0X_RdWord+0x6c>)
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	021b      	lsls	r3, r3, #8
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	4b06      	ldr	r3, [pc, #24]	; (800eb08 <VL53L0X_RdWord+0x6c>)
 800eaee:	785b      	ldrb	r3, [r3, #1]
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	4413      	add	r3, r2
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800eafa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3718      	adds	r7, #24
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	200099a8 	.word	0x200099a8

0800eb0c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b086      	sub	sp, #24
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	460b      	mov	r3, r1
 800eb16:	607a      	str	r2, [r7, #4]
 800eb18:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800eb1e:	f107 030b 	add.w	r3, r7, #11
 800eb22:	2201      	movs	r2, #1
 800eb24:	4619      	mov	r1, r3
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	f7ff fe6f 	bl	800e80a <_I2CWrite>
 800eb2c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d002      	beq.n	800eb3a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eb34:	23ec      	movs	r3, #236	; 0xec
 800eb36:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eb38:	e01b      	b.n	800eb72 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800eb3a:	2204      	movs	r2, #4
 800eb3c:	4910      	ldr	r1, [pc, #64]	; (800eb80 <VL53L0X_RdDWord+0x74>)
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f7ff fe82 	bl	800e848 <_I2CRead>
 800eb44:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d002      	beq.n	800eb52 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eb4c:	23ec      	movs	r3, #236	; 0xec
 800eb4e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eb50:	e00f      	b.n	800eb72 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800eb52:	4b0b      	ldr	r3, [pc, #44]	; (800eb80 <VL53L0X_RdDWord+0x74>)
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	061a      	lsls	r2, r3, #24
 800eb58:	4b09      	ldr	r3, [pc, #36]	; (800eb80 <VL53L0X_RdDWord+0x74>)
 800eb5a:	785b      	ldrb	r3, [r3, #1]
 800eb5c:	041b      	lsls	r3, r3, #16
 800eb5e:	441a      	add	r2, r3
 800eb60:	4b07      	ldr	r3, [pc, #28]	; (800eb80 <VL53L0X_RdDWord+0x74>)
 800eb62:	789b      	ldrb	r3, [r3, #2]
 800eb64:	021b      	lsls	r3, r3, #8
 800eb66:	4413      	add	r3, r2
 800eb68:	4a05      	ldr	r2, [pc, #20]	; (800eb80 <VL53L0X_RdDWord+0x74>)
 800eb6a:	78d2      	ldrb	r2, [r2, #3]
 800eb6c:	441a      	add	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800eb72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3718      	adds	r7, #24
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	200099a8 	.word	0x200099a8

0800eb84 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800eb90:	2002      	movs	r0, #2
 800eb92:	f7f5 fc35 	bl	8004400 <HAL_Delay>
    return status;
 800eb96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <threeline_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool threeline_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_threeline_activations_map, 1, params)) {
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	2101      	movs	r1, #1
 800ebb2:	4850      	ldr	r0, [pc, #320]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ebb4:	f000 fbea 	bl	800f38c <ai_platform_get_activations_map>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f000 8090 	beq.w	800ece0 <threeline_configure_activations+0x13c>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_threeline_activations_map[0] + 100);
 800ebc0:	4b4c      	ldr	r3, [pc, #304]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	3364      	adds	r3, #100	; 0x64
 800ebc6:	4a4c      	ldr	r2, [pc, #304]	; (800ecf8 <threeline_configure_activations+0x154>)
 800ebc8:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 100);
 800ebca:	4b4a      	ldr	r3, [pc, #296]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	3364      	adds	r3, #100	; 0x64
 800ebd0:	4a49      	ldr	r2, [pc, #292]	; (800ecf8 <threeline_configure_activations+0x154>)
 800ebd2:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_conv2d_output_array.data = AI_PTR(g_threeline_activations_map[0] + 256);
 800ebd4:	4b47      	ldr	r3, [pc, #284]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ebdc:	4a47      	ldr	r2, [pc, #284]	; (800ecfc <threeline_configure_activations+0x158>)
 800ebde:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 256);
 800ebe0:	4b44      	ldr	r3, [pc, #272]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ebe8:	4a44      	ldr	r2, [pc, #272]	; (800ecfc <threeline_configure_activations+0x158>)
 800ebea:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_threeline_activations_map[0] + 256);
 800ebec:	4b41      	ldr	r3, [pc, #260]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ebf4:	4a42      	ldr	r2, [pc, #264]	; (800ed00 <threeline_configure_activations+0x15c>)
 800ebf6:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 256);
 800ebf8:	4b3e      	ldr	r3, [pc, #248]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec00:	4a3f      	ldr	r2, [pc, #252]	; (800ed00 <threeline_configure_activations+0x15c>)
 800ec02:	60d3      	str	r3, [r2, #12]
    
    dense_12_dense_output_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800ec04:	4b3b      	ldr	r3, [pc, #236]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a3e      	ldr	r2, [pc, #248]	; (800ed04 <threeline_configure_activations+0x160>)
 800ec0a:	6093      	str	r3, [r2, #8]
    dense_12_dense_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800ec0c:	4b39      	ldr	r3, [pc, #228]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a3c      	ldr	r2, [pc, #240]	; (800ed04 <threeline_configure_activations+0x160>)
 800ec12:	60d3      	str	r3, [r2, #12]
    
    dense_12_output_array.data = AI_PTR(g_threeline_activations_map[0] + 256);
 800ec14:	4b37      	ldr	r3, [pc, #220]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec1c:	4a3a      	ldr	r2, [pc, #232]	; (800ed08 <threeline_configure_activations+0x164>)
 800ec1e:	6093      	str	r3, [r2, #8]
    dense_12_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 256);
 800ec20:	4b34      	ldr	r3, [pc, #208]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec28:	4a37      	ldr	r2, [pc, #220]	; (800ed08 <threeline_configure_activations+0x164>)
 800ec2a:	60d3      	str	r3, [r2, #12]
    
    dense_13_dense_output_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800ec2c:	4b31      	ldr	r3, [pc, #196]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a36      	ldr	r2, [pc, #216]	; (800ed0c <threeline_configure_activations+0x168>)
 800ec32:	6093      	str	r3, [r2, #8]
    dense_13_dense_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800ec34:	4b2f      	ldr	r3, [pc, #188]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a34      	ldr	r2, [pc, #208]	; (800ed0c <threeline_configure_activations+0x168>)
 800ec3a:	60d3      	str	r3, [r2, #12]
    
    dense_13_output_array.data = AI_PTR(g_threeline_activations_map[0] + 256);
 800ec3c:	4b2d      	ldr	r3, [pc, #180]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec44:	4a32      	ldr	r2, [pc, #200]	; (800ed10 <threeline_configure_activations+0x16c>)
 800ec46:	6093      	str	r3, [r2, #8]
    dense_13_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 256);
 800ec48:	4b2a      	ldr	r3, [pc, #168]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec50:	4a2f      	ldr	r2, [pc, #188]	; (800ed10 <threeline_configure_activations+0x16c>)
 800ec52:	60d3      	str	r3, [r2, #12]
    
    dense_14_dense_output_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800ec54:	4b27      	ldr	r3, [pc, #156]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a2e      	ldr	r2, [pc, #184]	; (800ed14 <threeline_configure_activations+0x170>)
 800ec5a:	6093      	str	r3, [r2, #8]
    dense_14_dense_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800ec5c:	4b25      	ldr	r3, [pc, #148]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a2c      	ldr	r2, [pc, #176]	; (800ed14 <threeline_configure_activations+0x170>)
 800ec62:	60d3      	str	r3, [r2, #12]
    
    dense_14_output_array.data = AI_PTR(g_threeline_activations_map[0] + 256);
 800ec64:	4b23      	ldr	r3, [pc, #140]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec6c:	4a2a      	ldr	r2, [pc, #168]	; (800ed18 <threeline_configure_activations+0x174>)
 800ec6e:	6093      	str	r3, [r2, #8]
    dense_14_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 256);
 800ec70:	4b20      	ldr	r3, [pc, #128]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec78:	4a27      	ldr	r2, [pc, #156]	; (800ed18 <threeline_configure_activations+0x174>)
 800ec7a:	60d3      	str	r3, [r2, #12]
    
    dense_15_dense_output_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800ec7c:	4b1d      	ldr	r3, [pc, #116]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a26      	ldr	r2, [pc, #152]	; (800ed1c <threeline_configure_activations+0x178>)
 800ec82:	6093      	str	r3, [r2, #8]
    dense_15_dense_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800ec84:	4b1b      	ldr	r3, [pc, #108]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a24      	ldr	r2, [pc, #144]	; (800ed1c <threeline_configure_activations+0x178>)
 800ec8a:	60d3      	str	r3, [r2, #12]
    
    dense_15_output_array.data = AI_PTR(g_threeline_activations_map[0] + 256);
 800ec8c:	4b19      	ldr	r3, [pc, #100]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ec94:	4a22      	ldr	r2, [pc, #136]	; (800ed20 <threeline_configure_activations+0x17c>)
 800ec96:	6093      	str	r3, [r2, #8]
    dense_15_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 256);
 800ec98:	4b16      	ldr	r3, [pc, #88]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800eca0:	4a1f      	ldr	r2, [pc, #124]	; (800ed20 <threeline_configure_activations+0x17c>)
 800eca2:	60d3      	str	r3, [r2, #12]
    
    dense_16_dense_output_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800eca4:	4b13      	ldr	r3, [pc, #76]	; (800ecf4 <threeline_configure_activations+0x150>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a1e      	ldr	r2, [pc, #120]	; (800ed24 <threeline_configure_activations+0x180>)
 800ecaa:	6093      	str	r3, [r2, #8]
    dense_16_dense_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800ecac:	4b11      	ldr	r3, [pc, #68]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	4a1c      	ldr	r2, [pc, #112]	; (800ed24 <threeline_configure_activations+0x180>)
 800ecb2:	60d3      	str	r3, [r2, #12]
    
    dense_16_output_array.data = AI_PTR(g_threeline_activations_map[0] + 256);
 800ecb4:	4b0f      	ldr	r3, [pc, #60]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ecbc:	4a1a      	ldr	r2, [pc, #104]	; (800ed28 <threeline_configure_activations+0x184>)
 800ecbe:	6093      	str	r3, [r2, #8]
    dense_16_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 256);
 800ecc0:	4b0c      	ldr	r3, [pc, #48]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ecc8:	4a17      	ldr	r2, [pc, #92]	; (800ed28 <threeline_configure_activations+0x184>)
 800ecca:	60d3      	str	r3, [r2, #12]
    
    dense_17_dense_output_array.data = AI_PTR(g_threeline_activations_map[0] + 0);
 800eccc:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4a16      	ldr	r2, [pc, #88]	; (800ed2c <threeline_configure_activations+0x188>)
 800ecd2:	6093      	str	r3, [r2, #8]
    dense_17_dense_output_array.data_start = AI_PTR(g_threeline_activations_map[0] + 0);
 800ecd4:	4b07      	ldr	r3, [pc, #28]	; (800ecf4 <threeline_configure_activations+0x150>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a14      	ldr	r2, [pc, #80]	; (800ed2c <threeline_configure_activations+0x188>)
 800ecda:	60d3      	str	r3, [r2, #12]
    
    return true;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	e005      	b.n	800ecec <threeline_configure_activations+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800ece0:	2213      	movs	r2, #19
 800ece2:	2130      	movs	r1, #48	; 0x30
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 fccf 	bl	800f688 <ai_platform_network_set_error>
  return false;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	200099e8 	.word	0x200099e8
 800ecf8:	200005e4 	.word	0x200005e4
 800ecfc:	200005f4 	.word	0x200005f4
 800ed00:	20000604 	.word	0x20000604
 800ed04:	20000614 	.word	0x20000614
 800ed08:	20000624 	.word	0x20000624
 800ed0c:	20000634 	.word	0x20000634
 800ed10:	20000644 	.word	0x20000644
 800ed14:	20000654 	.word	0x20000654
 800ed18:	20000664 	.word	0x20000664
 800ed1c:	20000674 	.word	0x20000674
 800ed20:	20000684 	.word	0x20000684
 800ed24:	20000694 	.word	0x20000694
 800ed28:	200006a4 	.word	0x200006a4
 800ed2c:	200006b4 	.word	0x200006b4

0800ed30 <threeline_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool threeline_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_threeline_weights_map, 1, params)) {
 800ed3a:	683a      	ldr	r2, [r7, #0]
 800ed3c:	2101      	movs	r1, #1
 800ed3e:	4884      	ldr	r0, [pc, #528]	; (800ef50 <threeline_configure_weights+0x220>)
 800ed40:	f000 facc 	bl	800f2dc <ai_platform_get_weights_map>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f000 80f8 	beq.w	800ef3c <threeline_configure_weights+0x20c>
    /* Updating weights (byte) offsets */
    
    conv2d_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800ed4c:	4b81      	ldr	r3, [pc, #516]	; (800ef54 <threeline_configure_weights+0x224>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ed54:	4a7f      	ldr	r2, [pc, #508]	; (800ef54 <threeline_configure_weights+0x224>)
 800ed56:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 0);
 800ed58:	4b7d      	ldr	r3, [pc, #500]	; (800ef50 <threeline_configure_weights+0x220>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a7d      	ldr	r2, [pc, #500]	; (800ef54 <threeline_configure_weights+0x224>)
 800ed5e:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 0);
 800ed60:	4b7b      	ldr	r3, [pc, #492]	; (800ef50 <threeline_configure_weights+0x220>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a7b      	ldr	r2, [pc, #492]	; (800ef54 <threeline_configure_weights+0x224>)
 800ed66:	60d3      	str	r3, [r2, #12]
    
    dense_12_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ed68:	4b7b      	ldr	r3, [pc, #492]	; (800ef58 <threeline_configure_weights+0x228>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ed70:	4a79      	ldr	r2, [pc, #484]	; (800ef58 <threeline_configure_weights+0x228>)
 800ed72:	6013      	str	r3, [r2, #0]
    dense_12_dense_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 64);
 800ed74:	4b76      	ldr	r3, [pc, #472]	; (800ef50 <threeline_configure_weights+0x220>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	3340      	adds	r3, #64	; 0x40
 800ed7a:	4a77      	ldr	r2, [pc, #476]	; (800ef58 <threeline_configure_weights+0x228>)
 800ed7c:	6093      	str	r3, [r2, #8]
    dense_12_dense_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 64);
 800ed7e:	4b74      	ldr	r3, [pc, #464]	; (800ef50 <threeline_configure_weights+0x220>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	3340      	adds	r3, #64	; 0x40
 800ed84:	4a74      	ldr	r2, [pc, #464]	; (800ef58 <threeline_configure_weights+0x228>)
 800ed86:	60d3      	str	r3, [r2, #12]
    
    dense_12_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ed88:	4b74      	ldr	r3, [pc, #464]	; (800ef5c <threeline_configure_weights+0x22c>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ed90:	4a72      	ldr	r2, [pc, #456]	; (800ef5c <threeline_configure_weights+0x22c>)
 800ed92:	6013      	str	r3, [r2, #0]
    dense_12_dense_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 159808);
 800ed94:	4b6e      	ldr	r3, [pc, #440]	; (800ef50 <threeline_configure_weights+0x220>)
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	4b71      	ldr	r3, [pc, #452]	; (800ef60 <threeline_configure_weights+0x230>)
 800ed9a:	4413      	add	r3, r2
 800ed9c:	4a6f      	ldr	r2, [pc, #444]	; (800ef5c <threeline_configure_weights+0x22c>)
 800ed9e:	6093      	str	r3, [r2, #8]
    dense_12_dense_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 159808);
 800eda0:	4b6b      	ldr	r3, [pc, #428]	; (800ef50 <threeline_configure_weights+0x220>)
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	4b6e      	ldr	r3, [pc, #440]	; (800ef60 <threeline_configure_weights+0x230>)
 800eda6:	4413      	add	r3, r2
 800eda8:	4a6c      	ldr	r2, [pc, #432]	; (800ef5c <threeline_configure_weights+0x22c>)
 800edaa:	60d3      	str	r3, [r2, #12]
    
    dense_13_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800edac:	4b6d      	ldr	r3, [pc, #436]	; (800ef64 <threeline_configure_weights+0x234>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800edb4:	4a6b      	ldr	r2, [pc, #428]	; (800ef64 <threeline_configure_weights+0x234>)
 800edb6:	6013      	str	r3, [r2, #0]
    dense_13_dense_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 160064);
 800edb8:	4b65      	ldr	r3, [pc, #404]	; (800ef50 <threeline_configure_weights+0x220>)
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	4b6a      	ldr	r3, [pc, #424]	; (800ef68 <threeline_configure_weights+0x238>)
 800edbe:	4413      	add	r3, r2
 800edc0:	4a68      	ldr	r2, [pc, #416]	; (800ef64 <threeline_configure_weights+0x234>)
 800edc2:	6093      	str	r3, [r2, #8]
    dense_13_dense_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 160064);
 800edc4:	4b62      	ldr	r3, [pc, #392]	; (800ef50 <threeline_configure_weights+0x220>)
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	4b67      	ldr	r3, [pc, #412]	; (800ef68 <threeline_configure_weights+0x238>)
 800edca:	4413      	add	r3, r2
 800edcc:	4a65      	ldr	r2, [pc, #404]	; (800ef64 <threeline_configure_weights+0x234>)
 800edce:	60d3      	str	r3, [r2, #12]
    
    dense_13_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800edd0:	4b66      	ldr	r3, [pc, #408]	; (800ef6c <threeline_configure_weights+0x23c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800edd8:	4a64      	ldr	r2, [pc, #400]	; (800ef6c <threeline_configure_weights+0x23c>)
 800edda:	6013      	str	r3, [r2, #0]
    dense_13_dense_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 176448);
 800eddc:	4b5c      	ldr	r3, [pc, #368]	; (800ef50 <threeline_configure_weights+0x220>)
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	4b63      	ldr	r3, [pc, #396]	; (800ef70 <threeline_configure_weights+0x240>)
 800ede2:	4413      	add	r3, r2
 800ede4:	4a61      	ldr	r2, [pc, #388]	; (800ef6c <threeline_configure_weights+0x23c>)
 800ede6:	6093      	str	r3, [r2, #8]
    dense_13_dense_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 176448);
 800ede8:	4b59      	ldr	r3, [pc, #356]	; (800ef50 <threeline_configure_weights+0x220>)
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	4b60      	ldr	r3, [pc, #384]	; (800ef70 <threeline_configure_weights+0x240>)
 800edee:	4413      	add	r3, r2
 800edf0:	4a5e      	ldr	r2, [pc, #376]	; (800ef6c <threeline_configure_weights+0x23c>)
 800edf2:	60d3      	str	r3, [r2, #12]
    
    dense_14_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800edf4:	4b5f      	ldr	r3, [pc, #380]	; (800ef74 <threeline_configure_weights+0x244>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800edfc:	4a5d      	ldr	r2, [pc, #372]	; (800ef74 <threeline_configure_weights+0x244>)
 800edfe:	6013      	str	r3, [r2, #0]
    dense_14_dense_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 176704);
 800ee00:	4b53      	ldr	r3, [pc, #332]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	4b5c      	ldr	r3, [pc, #368]	; (800ef78 <threeline_configure_weights+0x248>)
 800ee06:	4413      	add	r3, r2
 800ee08:	4a5a      	ldr	r2, [pc, #360]	; (800ef74 <threeline_configure_weights+0x244>)
 800ee0a:	6093      	str	r3, [r2, #8]
    dense_14_dense_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 176704);
 800ee0c:	4b50      	ldr	r3, [pc, #320]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	4b59      	ldr	r3, [pc, #356]	; (800ef78 <threeline_configure_weights+0x248>)
 800ee12:	4413      	add	r3, r2
 800ee14:	4a57      	ldr	r2, [pc, #348]	; (800ef74 <threeline_configure_weights+0x244>)
 800ee16:	60d3      	str	r3, [r2, #12]
    
    dense_14_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ee18:	4b58      	ldr	r3, [pc, #352]	; (800ef7c <threeline_configure_weights+0x24c>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee20:	4a56      	ldr	r2, [pc, #344]	; (800ef7c <threeline_configure_weights+0x24c>)
 800ee22:	6013      	str	r3, [r2, #0]
    dense_14_dense_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 193088);
 800ee24:	4b4a      	ldr	r3, [pc, #296]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	4b55      	ldr	r3, [pc, #340]	; (800ef80 <threeline_configure_weights+0x250>)
 800ee2a:	4413      	add	r3, r2
 800ee2c:	4a53      	ldr	r2, [pc, #332]	; (800ef7c <threeline_configure_weights+0x24c>)
 800ee2e:	6093      	str	r3, [r2, #8]
    dense_14_dense_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 193088);
 800ee30:	4b47      	ldr	r3, [pc, #284]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	4b52      	ldr	r3, [pc, #328]	; (800ef80 <threeline_configure_weights+0x250>)
 800ee36:	4413      	add	r3, r2
 800ee38:	4a50      	ldr	r2, [pc, #320]	; (800ef7c <threeline_configure_weights+0x24c>)
 800ee3a:	60d3      	str	r3, [r2, #12]
    
    dense_15_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ee3c:	4b51      	ldr	r3, [pc, #324]	; (800ef84 <threeline_configure_weights+0x254>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee44:	4a4f      	ldr	r2, [pc, #316]	; (800ef84 <threeline_configure_weights+0x254>)
 800ee46:	6013      	str	r3, [r2, #0]
    dense_15_dense_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 193344);
 800ee48:	4b41      	ldr	r3, [pc, #260]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	4b4e      	ldr	r3, [pc, #312]	; (800ef88 <threeline_configure_weights+0x258>)
 800ee4e:	4413      	add	r3, r2
 800ee50:	4a4c      	ldr	r2, [pc, #304]	; (800ef84 <threeline_configure_weights+0x254>)
 800ee52:	6093      	str	r3, [r2, #8]
    dense_15_dense_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 193344);
 800ee54:	4b3e      	ldr	r3, [pc, #248]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	4b4b      	ldr	r3, [pc, #300]	; (800ef88 <threeline_configure_weights+0x258>)
 800ee5a:	4413      	add	r3, r2
 800ee5c:	4a49      	ldr	r2, [pc, #292]	; (800ef84 <threeline_configure_weights+0x254>)
 800ee5e:	60d3      	str	r3, [r2, #12]
    
    dense_15_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ee60:	4b4a      	ldr	r3, [pc, #296]	; (800ef8c <threeline_configure_weights+0x25c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee68:	4a48      	ldr	r2, [pc, #288]	; (800ef8c <threeline_configure_weights+0x25c>)
 800ee6a:	6013      	str	r3, [r2, #0]
    dense_15_dense_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 209728);
 800ee6c:	4b38      	ldr	r3, [pc, #224]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	4b47      	ldr	r3, [pc, #284]	; (800ef90 <threeline_configure_weights+0x260>)
 800ee72:	4413      	add	r3, r2
 800ee74:	4a45      	ldr	r2, [pc, #276]	; (800ef8c <threeline_configure_weights+0x25c>)
 800ee76:	6093      	str	r3, [r2, #8]
    dense_15_dense_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 209728);
 800ee78:	4b35      	ldr	r3, [pc, #212]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	4b44      	ldr	r3, [pc, #272]	; (800ef90 <threeline_configure_weights+0x260>)
 800ee7e:	4413      	add	r3, r2
 800ee80:	4a42      	ldr	r2, [pc, #264]	; (800ef8c <threeline_configure_weights+0x25c>)
 800ee82:	60d3      	str	r3, [r2, #12]
    
    dense_16_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ee84:	4b43      	ldr	r3, [pc, #268]	; (800ef94 <threeline_configure_weights+0x264>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee8c:	4a41      	ldr	r2, [pc, #260]	; (800ef94 <threeline_configure_weights+0x264>)
 800ee8e:	6013      	str	r3, [r2, #0]
    dense_16_dense_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 209984);
 800ee90:	4b2f      	ldr	r3, [pc, #188]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	4b40      	ldr	r3, [pc, #256]	; (800ef98 <threeline_configure_weights+0x268>)
 800ee96:	4413      	add	r3, r2
 800ee98:	4a3e      	ldr	r2, [pc, #248]	; (800ef94 <threeline_configure_weights+0x264>)
 800ee9a:	6093      	str	r3, [r2, #8]
    dense_16_dense_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 209984);
 800ee9c:	4b2c      	ldr	r3, [pc, #176]	; (800ef50 <threeline_configure_weights+0x220>)
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	4b3d      	ldr	r3, [pc, #244]	; (800ef98 <threeline_configure_weights+0x268>)
 800eea2:	4413      	add	r3, r2
 800eea4:	4a3b      	ldr	r2, [pc, #236]	; (800ef94 <threeline_configure_weights+0x264>)
 800eea6:	60d3      	str	r3, [r2, #12]
    
    dense_16_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800eea8:	4b3c      	ldr	r3, [pc, #240]	; (800ef9c <threeline_configure_weights+0x26c>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eeb0:	4a3a      	ldr	r2, [pc, #232]	; (800ef9c <threeline_configure_weights+0x26c>)
 800eeb2:	6013      	str	r3, [r2, #0]
    dense_16_dense_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 226368);
 800eeb4:	4b26      	ldr	r3, [pc, #152]	; (800ef50 <threeline_configure_weights+0x220>)
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	4b39      	ldr	r3, [pc, #228]	; (800efa0 <threeline_configure_weights+0x270>)
 800eeba:	4413      	add	r3, r2
 800eebc:	4a37      	ldr	r2, [pc, #220]	; (800ef9c <threeline_configure_weights+0x26c>)
 800eebe:	6093      	str	r3, [r2, #8]
    dense_16_dense_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 226368);
 800eec0:	4b23      	ldr	r3, [pc, #140]	; (800ef50 <threeline_configure_weights+0x220>)
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	4b36      	ldr	r3, [pc, #216]	; (800efa0 <threeline_configure_weights+0x270>)
 800eec6:	4413      	add	r3, r2
 800eec8:	4a34      	ldr	r2, [pc, #208]	; (800ef9c <threeline_configure_weights+0x26c>)
 800eeca:	60d3      	str	r3, [r2, #12]
    
    dense_17_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800eecc:	4b35      	ldr	r3, [pc, #212]	; (800efa4 <threeline_configure_weights+0x274>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eed4:	4a33      	ldr	r2, [pc, #204]	; (800efa4 <threeline_configure_weights+0x274>)
 800eed6:	6013      	str	r3, [r2, #0]
    dense_17_dense_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 226624);
 800eed8:	4b1d      	ldr	r3, [pc, #116]	; (800ef50 <threeline_configure_weights+0x220>)
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	4b32      	ldr	r3, [pc, #200]	; (800efa8 <threeline_configure_weights+0x278>)
 800eede:	4413      	add	r3, r2
 800eee0:	4a30      	ldr	r2, [pc, #192]	; (800efa4 <threeline_configure_weights+0x274>)
 800eee2:	6093      	str	r3, [r2, #8]
    dense_17_dense_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 226624);
 800eee4:	4b1a      	ldr	r3, [pc, #104]	; (800ef50 <threeline_configure_weights+0x220>)
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	4b2f      	ldr	r3, [pc, #188]	; (800efa8 <threeline_configure_weights+0x278>)
 800eeea:	4413      	add	r3, r2
 800eeec:	4a2d      	ldr	r2, [pc, #180]	; (800efa4 <threeline_configure_weights+0x274>)
 800eeee:	60d3      	str	r3, [r2, #12]
    
    dense_17_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800eef0:	4b2e      	ldr	r3, [pc, #184]	; (800efac <threeline_configure_weights+0x27c>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eef8:	4a2c      	ldr	r2, [pc, #176]	; (800efac <threeline_configure_weights+0x27c>)
 800eefa:	6013      	str	r3, [r2, #0]
    dense_17_dense_bias_array.data = AI_PTR(g_threeline_weights_map[0] + 227648);
 800eefc:	4b14      	ldr	r3, [pc, #80]	; (800ef50 <threeline_configure_weights+0x220>)
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	4b2b      	ldr	r3, [pc, #172]	; (800efb0 <threeline_configure_weights+0x280>)
 800ef02:	4413      	add	r3, r2
 800ef04:	4a29      	ldr	r2, [pc, #164]	; (800efac <threeline_configure_weights+0x27c>)
 800ef06:	6093      	str	r3, [r2, #8]
    dense_17_dense_bias_array.data_start = AI_PTR(g_threeline_weights_map[0] + 227648);
 800ef08:	4b11      	ldr	r3, [pc, #68]	; (800ef50 <threeline_configure_weights+0x220>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	4b28      	ldr	r3, [pc, #160]	; (800efb0 <threeline_configure_weights+0x280>)
 800ef0e:	4413      	add	r3, r2
 800ef10:	4a26      	ldr	r2, [pc, #152]	; (800efac <threeline_configure_weights+0x27c>)
 800ef12:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800ef14:	4b27      	ldr	r3, [pc, #156]	; (800efb4 <threeline_configure_weights+0x284>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef1c:	4a25      	ldr	r2, [pc, #148]	; (800efb4 <threeline_configure_weights+0x284>)
 800ef1e:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_weights_array.data = AI_PTR(g_threeline_weights_map[0] + 227664);
 800ef20:	4b0b      	ldr	r3, [pc, #44]	; (800ef50 <threeline_configure_weights+0x220>)
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	4b24      	ldr	r3, [pc, #144]	; (800efb8 <threeline_configure_weights+0x288>)
 800ef26:	4413      	add	r3, r2
 800ef28:	4a22      	ldr	r2, [pc, #136]	; (800efb4 <threeline_configure_weights+0x284>)
 800ef2a:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_weights_array.data_start = AI_PTR(g_threeline_weights_map[0] + 227664);
 800ef2c:	4b08      	ldr	r3, [pc, #32]	; (800ef50 <threeline_configure_weights+0x220>)
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	4b21      	ldr	r3, [pc, #132]	; (800efb8 <threeline_configure_weights+0x288>)
 800ef32:	4413      	add	r3, r2
 800ef34:	4a1f      	ldr	r2, [pc, #124]	; (800efb4 <threeline_configure_weights+0x284>)
 800ef36:	60d3      	str	r3, [r2, #12]
    
    return true;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e005      	b.n	800ef48 <threeline_configure_weights+0x218>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ef3c:	2212      	movs	r2, #18
 800ef3e:	2130      	movs	r1, #48	; 0x30
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 fba1 	bl	800f688 <ai_platform_network_set_error>
  return false;
 800ef46:	2300      	movs	r3, #0
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	200099ec 	.word	0x200099ec
 800ef54:	20000514 	.word	0x20000514
 800ef58:	20000524 	.word	0x20000524
 800ef5c:	20000534 	.word	0x20000534
 800ef60:	00027040 	.word	0x00027040
 800ef64:	20000544 	.word	0x20000544
 800ef68:	00027140 	.word	0x00027140
 800ef6c:	20000554 	.word	0x20000554
 800ef70:	0002b140 	.word	0x0002b140
 800ef74:	20000564 	.word	0x20000564
 800ef78:	0002b240 	.word	0x0002b240
 800ef7c:	20000574 	.word	0x20000574
 800ef80:	0002f240 	.word	0x0002f240
 800ef84:	20000584 	.word	0x20000584
 800ef88:	0002f340 	.word	0x0002f340
 800ef8c:	20000594 	.word	0x20000594
 800ef90:	00033340 	.word	0x00033340
 800ef94:	200005a4 	.word	0x200005a4
 800ef98:	00033440 	.word	0x00033440
 800ef9c:	200005b4 	.word	0x200005b4
 800efa0:	00037440 	.word	0x00037440
 800efa4:	200005c4 	.word	0x200005c4
 800efa8:	00037540 	.word	0x00037540
 800efac:	200005d4 	.word	0x200005d4
 800efb0:	00037940 	.word	0x00037940
 800efb4:	200006c4 	.word	0x200006c4
 800efb8:	00037950 	.word	0x00037950

0800efbc <ai_threeline_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_threeline_get_error(ai_handle network)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fa53 	bl	800f470 <ai_platform_network_get_error>
 800efca:	4603      	mov	r3, r0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <ai_threeline_create>:

AI_API_ENTRY
ai_error ai_threeline_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af02      	add	r7, sp, #8
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800efde:	2300      	movs	r3, #0
 800efe0:	9301      	str	r3, [sp, #4]
 800efe2:	2305      	movs	r3, #5
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	2301      	movs	r3, #1
 800efe8:	4a04      	ldr	r2, [pc, #16]	; (800effc <ai_threeline_create+0x28>)
 800efea:	6839      	ldr	r1, [r7, #0]
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 fe65 	bl	800fcbc <ai_platform_network_create>
 800eff2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3708      	adds	r7, #8
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	20001300 	.word	0x20001300

0800f000 <ai_threeline_create_and_init>:

AI_API_ENTRY
ai_error ai_threeline_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b096      	sub	sp, #88	; 0x58
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_threeline_create(network, AI_THREELINE_DATA_CONFIG);
 800f00c:	2100      	movs	r1, #0
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f7ff ffe0 	bl	800efd4 <ai_threeline_create>
 800f014:	4603      	mov	r3, r0
 800f016:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800f018:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d001      	beq.n	800f024 <ai_threeline_create_and_init+0x24>
        return err;
 800f020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f022:	e05d      	b.n	800f0e0 <ai_threeline_create_and_init+0xe0>
    if (ai_threeline_data_params_get(&params) != true) {
 800f024:	f107 0314 	add.w	r3, r7, #20
 800f028:	4618      	mov	r0, r3
 800f02a:	f000 f8dd 	bl	800f1e8 <ai_threeline_data_params_get>
 800f02e:	4603      	mov	r3, r0
 800f030:	f083 0301 	eor.w	r3, r3, #1
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d008      	beq.n	800f04c <ai_threeline_create_and_init+0x4c>
        err = ai_threeline_get_error(*network);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4618      	mov	r0, r3
 800f040:	f7ff ffbc 	bl	800efbc <ai_threeline_get_error>
 800f044:	4603      	mov	r3, r0
 800f046:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800f048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f04a:	e049      	b.n	800f0e0 <ai_threeline_create_and_init+0xe0>
    }
#if defined(AI_THREELINE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d016      	beq.n	800f080 <ai_threeline_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f052:	2300      	movs	r3, #0
 800f054:	657b      	str	r3, [r7, #84]	; 0x54
 800f056:	e00e      	b.n	800f076 <ai_threeline_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800f058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f05a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	68ba      	ldr	r2, [r7, #8]
 800f060:	4413      	add	r3, r2
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	f107 0314 	add.w	r3, r7, #20
 800f068:	330c      	adds	r3, #12
 800f06a:	4618      	mov	r0, r3
 800f06c:	f000 f922 	bl	800f2b4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f072:	3301      	adds	r3, #1
 800f074:	657b      	str	r3, [r7, #84]	; 0x54
 800f076:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f078:	461a      	mov	r2, r3
 800f07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f07c:	4293      	cmp	r3, r2
 800f07e:	dbeb      	blt.n	800f058 <ai_threeline_create_and_init+0x58>
    }
#endif
#if defined(AI_THREELINE_DATA_WEIGHTS_COUNT)
    if (weights) {
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d016      	beq.n	800f0b4 <ai_threeline_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f086:	2300      	movs	r3, #0
 800f088:	653b      	str	r3, [r7, #80]	; 0x50
 800f08a:	e00e      	b.n	800f0aa <ai_threeline_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800f08c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	4413      	add	r3, r2
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	f107 0314 	add.w	r3, r7, #20
 800f09c:	3304      	adds	r3, #4
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 f908 	bl	800f2b4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f0a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	653b      	str	r3, [r7, #80]	; 0x50
 800f0aa:	8b7b      	ldrh	r3, [r7, #26]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	dbeb      	blt.n	800f08c <ai_threeline_create_and_init+0x8c>
    }
#endif
    if (ai_threeline_init(*network, &params) != true) {
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f107 0214 	add.w	r2, r7, #20
 800f0bc:	4611      	mov	r1, r2
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 f846 	bl	800f150 <ai_threeline_init>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	f083 0301 	eor.w	r3, r3, #1
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d006      	beq.n	800f0de <ai_threeline_create_and_init+0xde>
        err = ai_threeline_get_error(*network);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7ff ff71 	bl	800efbc <ai_threeline_get_error>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800f0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3758      	adds	r7, #88	; 0x58
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <ai_threeline_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_threeline_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d104      	bne.n	800f102 <ai_threeline_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f0f8:	4b06      	ldr	r3, [pc, #24]	; (800f114 <ai_threeline_inputs_get+0x2c>)
 800f0fa:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4a06      	ldr	r2, [pc, #24]	; (800f118 <ai_threeline_inputs_get+0x30>)
 800f100:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800f102:	6839      	ldr	r1, [r7, #0]
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f000 fac5 	bl	800f694 <ai_platform_inputs_get>
 800f10a:	4603      	mov	r3, r0
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3708      	adds	r7, #8
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	20001300 	.word	0x20001300
 800f118:	a1c00100 	.word	0xa1c00100

0800f11c <ai_threeline_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_threeline_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d104      	bne.n	800f136 <ai_threeline_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f12c:	4b06      	ldr	r3, [pc, #24]	; (800f148 <ai_threeline_outputs_get+0x2c>)
 800f12e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	4a06      	ldr	r2, [pc, #24]	; (800f14c <ai_threeline_outputs_get+0x30>)
 800f134:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 fc37 	bl	800f9ac <ai_platform_outputs_get>
 800f13e:	4603      	mov	r3, r0
}
 800f140:	4618      	mov	r0, r3
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	20001300 	.word	0x20001300
 800f14c:	a1c00100 	.word	0xa1c00100

0800f150 <ai_threeline_init>:
}

AI_API_ENTRY
ai_bool ai_threeline_init(
  ai_handle network, const ai_network_params* params)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f15a:	6839      	ldr	r1, [r7, #0]
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 ff87 	bl	8010070 <ai_platform_network_init>
 800f162:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d101      	bne.n	800f16e <ai_threeline_init+0x1e>
 800f16a:	2300      	movs	r3, #0
 800f16c:	e028      	b.n	800f1c0 <ai_threeline_init+0x70>

  ai_bool ok = true;
 800f16e:	2301      	movs	r3, #1
 800f170:	72fb      	strb	r3, [r7, #11]
  ok &= threeline_configure_weights(net_ctx, params);
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f7ff fddb 	bl	800ed30 <threeline_configure_weights>
 800f17a:	4603      	mov	r3, r0
 800f17c:	461a      	mov	r2, r3
 800f17e:	7afb      	ldrb	r3, [r7, #11]
 800f180:	4013      	ands	r3, r2
 800f182:	2b00      	cmp	r3, #0
 800f184:	bf14      	ite	ne
 800f186:	2301      	movne	r3, #1
 800f188:	2300      	moveq	r3, #0
 800f18a:	72fb      	strb	r3, [r7, #11]
  ok &= threeline_configure_activations(net_ctx, params);
 800f18c:	6839      	ldr	r1, [r7, #0]
 800f18e:	68f8      	ldr	r0, [r7, #12]
 800f190:	f7ff fd08 	bl	800eba4 <threeline_configure_activations>
 800f194:	4603      	mov	r3, r0
 800f196:	461a      	mov	r2, r3
 800f198:	7afb      	ldrb	r3, [r7, #11]
 800f19a:	4013      	ands	r3, r2
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	bf14      	ite	ne
 800f1a0:	2301      	movne	r3, #1
 800f1a2:	2300      	moveq	r3, #0
 800f1a4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f001 f8fe 	bl	80103a8 <ai_platform_network_post_init>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	7afb      	ldrb	r3, [r7, #11]
 800f1b2:	4013      	ands	r3, r2
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	bf14      	ite	ne
 800f1b8:	2301      	movne	r3, #1
 800f1ba:	2300      	moveq	r3, #0
 800f1bc:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f1be:	7afb      	ldrb	r3, [r7, #11]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <ai_threeline_run>:


AI_API_ENTRY
ai_i32 ai_threeline_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	68b9      	ldr	r1, [r7, #8]
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f001 fa0f 	bl	80105fc <ai_platform_network_process>
 800f1de:	4603      	mov	r3, r0
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <ai_threeline_data_params_get>:
 * @ingroup threeline_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_threeline_data_params_get(ai_network_params* params)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d101      	bne.n	800f1fa <ai_threeline_data_params_get+0x12>
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	e016      	b.n	800f228 <ai_threeline_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800f1fa:	4a0d      	ldr	r2, [pc, #52]	; (800f230 <ai_threeline_data_params_get+0x48>)
 800f1fc:	f107 0310 	add.w	r3, r7, #16
 800f200:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f204:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_THREELINE_DATA_ACTIVATIONS_COUNT, g_threeline_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800f208:	4a0a      	ldr	r2, [pc, #40]	; (800f234 <ai_threeline_data_params_get+0x4c>)
 800f20a:	f107 0308 	add.w	r3, r7, #8
 800f20e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f212:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_THREELINE_DATA_WEIGHTS_COUNT, g_threeline_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800f216:	f107 0210 	add.w	r2, r7, #16
 800f21a:	f107 0308 	add.w	r3, r7, #8
 800f21e:	4619      	mov	r1, r3
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f90b 	bl	800f43c <ai_platform_bind_network_params>
 800f226:	4603      	mov	r3, r0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3718      	adds	r7, #24
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	080189f0 	.word	0x080189f0
 800f234:	080189f8 	.word	0x080189f8

0800f238 <ai_buffer_get_size>:
 800f238:	b368      	cbz	r0, 800f296 <ai_buffer_get_size+0x5e>
 800f23a:	4b17      	ldr	r3, [pc, #92]	; (800f298 <ai_buffer_get_size+0x60>)
 800f23c:	4a17      	ldr	r2, [pc, #92]	; (800f29c <ai_buffer_get_size+0x64>)
 800f23e:	b410      	push	{r4}
 800f240:	6804      	ldr	r4, [r0, #0]
 800f242:	4023      	ands	r3, r4
 800f244:	4293      	cmp	r3, r2
 800f246:	d123      	bne.n	800f290 <ai_buffer_get_size+0x58>
 800f248:	b311      	cbz	r1, 800f290 <ai_buffer_get_size+0x58>
 800f24a:	6984      	ldr	r4, [r0, #24]
 800f24c:	6862      	ldr	r2, [r4, #4]
 800f24e:	321f      	adds	r2, #31
 800f250:	f022 021f 	bic.w	r2, r2, #31
 800f254:	7d03      	ldrb	r3, [r0, #20]
 800f256:	6941      	ldr	r1, [r0, #20]
 800f258:	f1a3 0301 	sub.w	r3, r3, #1
 800f25c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800f260:	fab3 f383 	clz	r3, r3
 800f264:	095b      	lsrs	r3, r3, #5
 800f266:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800f26a:	da0c      	bge.n	800f286 <ai_buffer_get_size+0x4e>
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d103      	bne.n	800f278 <ai_buffer_get_size+0x40>
 800f270:	2802      	cmp	r0, #2
 800f272:	f04f 0302 	mov.w	r3, #2
 800f276:	d006      	beq.n	800f286 <ai_buffer_get_size+0x4e>
 800f278:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800f27c:	3301      	adds	r3, #1
 800f27e:	4298      	cmp	r0, r3
 800f280:	fb01 f202 	mul.w	r2, r1, r2
 800f284:	d1f2      	bne.n	800f26c <ai_buffer_get_size+0x34>
 800f286:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f28a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f28e:	4770      	bx	lr
 800f290:	6984      	ldr	r4, [r0, #24]
 800f292:	6862      	ldr	r2, [r4, #4]
 800f294:	e7de      	b.n	800f254 <ai_buffer_get_size+0x1c>
 800f296:	4770      	bx	lr
 800f298:	017fffff 	.word	0x017fffff
 800f29c:	000400c0 	.word	0x000400c0

0800f2a0 <ai_buffer_array_sane>:
 800f2a0:	b138      	cbz	r0, 800f2b2 <ai_buffer_array_sane+0x12>
 800f2a2:	6843      	ldr	r3, [r0, #4]
 800f2a4:	b123      	cbz	r3, 800f2b0 <ai_buffer_array_sane+0x10>
 800f2a6:	8840      	ldrh	r0, [r0, #2]
 800f2a8:	3800      	subs	r0, #0
 800f2aa:	bf18      	it	ne
 800f2ac:	2001      	movne	r0, #1
 800f2ae:	4770      	bx	lr
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	4770      	bx	lr

0800f2b4 <ai_buffer_array_item_set_address>:
 800f2b4:	b150      	cbz	r0, 800f2cc <ai_buffer_array_item_set_address+0x18>
 800f2b6:	6843      	ldr	r3, [r0, #4]
 800f2b8:	b14b      	cbz	r3, 800f2ce <ai_buffer_array_item_set_address+0x1a>
 800f2ba:	8840      	ldrh	r0, [r0, #2]
 800f2bc:	b900      	cbnz	r0, 800f2c0 <ai_buffer_array_item_set_address+0xc>
 800f2be:	4770      	bx	lr
 800f2c0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f2c4:	2001      	movs	r0, #1
 800f2c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f2ca:	604a      	str	r2, [r1, #4]
 800f2cc:	4770      	bx	lr
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop

0800f2d4 <_ai_platform_acquire_crc>:
 800f2d4:	2001      	movs	r0, #1
 800f2d6:	4770      	bx	lr

0800f2d8 <_ai_platform_release_crc>:
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop

0800f2dc <ai_platform_get_weights_map>:
 800f2dc:	2900      	cmp	r1, #0
 800f2de:	bf18      	it	ne
 800f2e0:	2800      	cmpne	r0, #0
 800f2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e4:	bf0c      	ite	eq
 800f2e6:	2401      	moveq	r4, #1
 800f2e8:	2400      	movne	r4, #0
 800f2ea:	2a00      	cmp	r2, #0
 800f2ec:	bf08      	it	eq
 800f2ee:	f044 0401 	orreq.w	r4, r4, #1
 800f2f2:	b114      	cbz	r4, 800f2fa <ai_platform_get_weights_map+0x1e>
 800f2f4:	2400      	movs	r4, #0
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2fa:	4616      	mov	r6, r2
 800f2fc:	4b22      	ldr	r3, [pc, #136]	; (800f388 <ai_platform_get_weights_map+0xac>)
 800f2fe:	6812      	ldr	r2, [r2, #0]
 800f300:	4605      	mov	r5, r0
 800f302:	460f      	mov	r7, r1
 800f304:	429a      	cmp	r2, r3
 800f306:	d022      	beq.n	800f34e <ai_platform_get_weights_map+0x72>
 800f308:	6870      	ldr	r0, [r6, #4]
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d0f2      	beq.n	800f2f4 <ai_platform_get_weights_map+0x18>
 800f30e:	6806      	ldr	r6, [r0, #0]
 800f310:	429e      	cmp	r6, r3
 800f312:	d006      	beq.n	800f322 <ai_platform_get_weights_map+0x46>
 800f314:	f1a1 0401 	sub.w	r4, r1, #1
 800f318:	6028      	str	r0, [r5, #0]
 800f31a:	fab4 f484 	clz	r4, r4
 800f31e:	0964      	lsrs	r4, r4, #5
 800f320:	e7e9      	b.n	800f2f6 <ai_platform_get_weights_map+0x1a>
 800f322:	3d04      	subs	r5, #4
 800f324:	4602      	mov	r2, r0
 800f326:	4621      	mov	r1, r4
 800f328:	e000      	b.n	800f32c <ai_platform_get_weights_map+0x50>
 800f32a:	4619      	mov	r1, r3
 800f32c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f330:	42b3      	cmp	r3, r6
 800f332:	d025      	beq.n	800f380 <ai_platform_get_weights_map+0xa4>
 800f334:	f845 3f04 	str.w	r3, [r5, #4]!
 800f338:	1c4b      	adds	r3, r1, #1
 800f33a:	429f      	cmp	r7, r3
 800f33c:	d8f5      	bhi.n	800f32a <ai_platform_get_weights_map+0x4e>
 800f33e:	d1da      	bne.n	800f2f6 <ai_platform_get_weights_map+0x1a>
 800f340:	3102      	adds	r1, #2
 800f342:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f346:	42b3      	cmp	r3, r6
 800f348:	d1d5      	bne.n	800f2f6 <ai_platform_get_weights_map+0x1a>
 800f34a:	2401      	movs	r4, #1
 800f34c:	e7d3      	b.n	800f2f6 <ai_platform_get_weights_map+0x1a>
 800f34e:	1d30      	adds	r0, r6, #4
 800f350:	f7ff ffa6 	bl	800f2a0 <ai_buffer_array_sane>
 800f354:	2800      	cmp	r0, #0
 800f356:	d0cd      	beq.n	800f2f4 <ai_platform_get_weights_map+0x18>
 800f358:	88f3      	ldrh	r3, [r6, #6]
 800f35a:	429f      	cmp	r7, r3
 800f35c:	d1ca      	bne.n	800f2f4 <ai_platform_get_weights_map+0x18>
 800f35e:	3d04      	subs	r5, #4
 800f360:	4622      	mov	r2, r4
 800f362:	68b3      	ldr	r3, [r6, #8]
 800f364:	4423      	add	r3, r4
 800f366:	341c      	adds	r4, #28
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	b123      	cbz	r3, 800f376 <ai_platform_get_weights_map+0x9a>
 800f36c:	3201      	adds	r2, #1
 800f36e:	f845 3f04 	str.w	r3, [r5, #4]!
 800f372:	4297      	cmp	r7, r2
 800f374:	d8f5      	bhi.n	800f362 <ai_platform_get_weights_map+0x86>
 800f376:	1abc      	subs	r4, r7, r2
 800f378:	fab4 f484 	clz	r4, r4
 800f37c:	0964      	lsrs	r4, r4, #5
 800f37e:	e7ba      	b.n	800f2f6 <ai_platform_get_weights_map+0x1a>
 800f380:	428f      	cmp	r7, r1
 800f382:	d1b8      	bne.n	800f2f6 <ai_platform_get_weights_map+0x1a>
 800f384:	e7e1      	b.n	800f34a <ai_platform_get_weights_map+0x6e>
 800f386:	bf00      	nop
 800f388:	a1facade 	.word	0xa1facade

0800f38c <ai_platform_get_activations_map>:
 800f38c:	2900      	cmp	r1, #0
 800f38e:	bf18      	it	ne
 800f390:	2800      	cmpne	r0, #0
 800f392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f394:	bf0c      	ite	eq
 800f396:	2401      	moveq	r4, #1
 800f398:	2400      	movne	r4, #0
 800f39a:	2a00      	cmp	r2, #0
 800f39c:	bf08      	it	eq
 800f39e:	f044 0401 	orreq.w	r4, r4, #1
 800f3a2:	b114      	cbz	r4, 800f3aa <ai_platform_get_activations_map+0x1e>
 800f3a4:	2400      	movs	r4, #0
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3aa:	4616      	mov	r6, r2
 800f3ac:	4b22      	ldr	r3, [pc, #136]	; (800f438 <ai_platform_get_activations_map+0xac>)
 800f3ae:	6812      	ldr	r2, [r2, #0]
 800f3b0:	4605      	mov	r5, r0
 800f3b2:	460f      	mov	r7, r1
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d022      	beq.n	800f3fe <ai_platform_get_activations_map+0x72>
 800f3b8:	6a30      	ldr	r0, [r6, #32]
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	d0f2      	beq.n	800f3a4 <ai_platform_get_activations_map+0x18>
 800f3be:	6806      	ldr	r6, [r0, #0]
 800f3c0:	429e      	cmp	r6, r3
 800f3c2:	d006      	beq.n	800f3d2 <ai_platform_get_activations_map+0x46>
 800f3c4:	f1a1 0401 	sub.w	r4, r1, #1
 800f3c8:	6028      	str	r0, [r5, #0]
 800f3ca:	fab4 f484 	clz	r4, r4
 800f3ce:	0964      	lsrs	r4, r4, #5
 800f3d0:	e7e9      	b.n	800f3a6 <ai_platform_get_activations_map+0x1a>
 800f3d2:	3d04      	subs	r5, #4
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	e000      	b.n	800f3dc <ai_platform_get_activations_map+0x50>
 800f3da:	4619      	mov	r1, r3
 800f3dc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f3e0:	42b3      	cmp	r3, r6
 800f3e2:	d026      	beq.n	800f432 <ai_platform_get_activations_map+0xa6>
 800f3e4:	f845 3f04 	str.w	r3, [r5, #4]!
 800f3e8:	1c4b      	adds	r3, r1, #1
 800f3ea:	429f      	cmp	r7, r3
 800f3ec:	d8f5      	bhi.n	800f3da <ai_platform_get_activations_map+0x4e>
 800f3ee:	d1da      	bne.n	800f3a6 <ai_platform_get_activations_map+0x1a>
 800f3f0:	3102      	adds	r1, #2
 800f3f2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f3f6:	42b3      	cmp	r3, r6
 800f3f8:	d1d5      	bne.n	800f3a6 <ai_platform_get_activations_map+0x1a>
 800f3fa:	2401      	movs	r4, #1
 800f3fc:	e7d3      	b.n	800f3a6 <ai_platform_get_activations_map+0x1a>
 800f3fe:	f106 000c 	add.w	r0, r6, #12
 800f402:	f7ff ff4d 	bl	800f2a0 <ai_buffer_array_sane>
 800f406:	2800      	cmp	r0, #0
 800f408:	d0cc      	beq.n	800f3a4 <ai_platform_get_activations_map+0x18>
 800f40a:	89f3      	ldrh	r3, [r6, #14]
 800f40c:	429f      	cmp	r7, r3
 800f40e:	d1c9      	bne.n	800f3a4 <ai_platform_get_activations_map+0x18>
 800f410:	3d04      	subs	r5, #4
 800f412:	4622      	mov	r2, r4
 800f414:	6933      	ldr	r3, [r6, #16]
 800f416:	4423      	add	r3, r4
 800f418:	341c      	adds	r4, #28
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	b123      	cbz	r3, 800f428 <ai_platform_get_activations_map+0x9c>
 800f41e:	3201      	adds	r2, #1
 800f420:	f845 3f04 	str.w	r3, [r5, #4]!
 800f424:	4297      	cmp	r7, r2
 800f426:	d8f5      	bhi.n	800f414 <ai_platform_get_activations_map+0x88>
 800f428:	1abc      	subs	r4, r7, r2
 800f42a:	fab4 f484 	clz	r4, r4
 800f42e:	0964      	lsrs	r4, r4, #5
 800f430:	e7b9      	b.n	800f3a6 <ai_platform_get_activations_map+0x1a>
 800f432:	428f      	cmp	r7, r1
 800f434:	d1b7      	bne.n	800f3a6 <ai_platform_get_activations_map+0x1a>
 800f436:	e7e0      	b.n	800f3fa <ai_platform_get_activations_map+0x6e>
 800f438:	a1facade 	.word	0xa1facade

0800f43c <ai_platform_bind_network_params>:
 800f43c:	2a00      	cmp	r2, #0
 800f43e:	bf18      	it	ne
 800f440:	2900      	cmpne	r1, #0
 800f442:	d010      	beq.n	800f466 <ai_platform_bind_network_params+0x2a>
 800f444:	b178      	cbz	r0, 800f466 <ai_platform_bind_network_params+0x2a>
 800f446:	4603      	mov	r3, r0
 800f448:	4808      	ldr	r0, [pc, #32]	; (800f46c <ai_platform_bind_network_params+0x30>)
 800f44a:	f103 0c0c 	add.w	ip, r3, #12
 800f44e:	f843 0b04 	str.w	r0, [r3], #4
 800f452:	c903      	ldmia	r1, {r0, r1}
 800f454:	e883 0003 	stmia.w	r3, {r0, r1}
 800f458:	2301      	movs	r3, #1
 800f45a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f45e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f462:	4618      	mov	r0, r3
 800f464:	4770      	bx	lr
 800f466:	2300      	movs	r3, #0
 800f468:	4618      	mov	r0, r3
 800f46a:	4770      	bx	lr
 800f46c:	a1facade 	.word	0xa1facade

0800f470 <ai_platform_network_get_error>:
 800f470:	b510      	push	{r4, lr}
 800f472:	2800      	cmp	r0, #0
 800f474:	d03f      	beq.n	800f4f6 <ai_platform_network_get_error+0x86>
 800f476:	4b7d      	ldr	r3, [pc, #500]	; (800f66c <ai_platform_network_get_error+0x1fc>)
 800f478:	4604      	mov	r4, r0
 800f47a:	6802      	ldr	r2, [r0, #0]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d13a      	bne.n	800f4f6 <ai_platform_network_get_error+0x86>
 800f480:	f7ff ff28 	bl	800f2d4 <_ai_platform_acquire_crc>
 800f484:	4b7a      	ldr	r3, [pc, #488]	; (800f670 <ai_platform_network_get_error+0x200>)
 800f486:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f490:	189a      	adds	r2, r3, r2
 800f492:	2a01      	cmp	r2, #1
 800f494:	f240 8086 	bls.w	800f5a4 <ai_platform_network_get_error+0x134>
 800f498:	f240 4249 	movw	r2, #1097	; 0x449
 800f49c:	4293      	cmp	r3, r2
 800f49e:	f000 8081 	beq.w	800f5a4 <ai_platform_network_get_error+0x134>
 800f4a2:	4a74      	ldr	r2, [pc, #464]	; (800f674 <ai_platform_network_get_error+0x204>)
 800f4a4:	6813      	ldr	r3, [r2, #0]
 800f4a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f4aa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f4ae:	f000 8087 	beq.w	800f5c0 <ai_platform_network_get_error+0x150>
 800f4b2:	6813      	ldr	r3, [r2, #0]
 800f4b4:	f240 4183 	movw	r1, #1155	; 0x483
 800f4b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f4bc:	428b      	cmp	r3, r1
 800f4be:	f000 80a9 	beq.w	800f614 <ai_platform_network_get_error+0x1a4>
 800f4c2:	6813      	ldr	r3, [r2, #0]
 800f4c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f4c8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f4cc:	f000 80c0 	beq.w	800f650 <ai_platform_network_get_error+0x1e0>
 800f4d0:	6813      	ldr	r3, [r2, #0]
 800f4d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f040 8082 	bne.w	800f5e0 <ai_platform_network_get_error+0x170>
 800f4dc:	4a66      	ldr	r2, [pc, #408]	; (800f678 <ai_platform_network_get_error+0x208>)
 800f4de:	2301      	movs	r3, #1
 800f4e0:	6093      	str	r3, [r2, #8]
 800f4e2:	6893      	ldr	r3, [r2, #8]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1fc      	bne.n	800f4e2 <ai_platform_network_get_error+0x72>
 800f4e8:	4964      	ldr	r1, [pc, #400]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f4ea:	4b65      	ldr	r3, [pc, #404]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f4ec:	6011      	str	r1, [r2, #0]
 800f4ee:	6812      	ldr	r2, [r2, #0]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d075      	beq.n	800f5e0 <ai_platform_network_get_error+0x170>
 800f4f4:	e7fe      	b.n	800f4f4 <ai_platform_network_get_error+0x84>
 800f4f6:	f7ff feed 	bl	800f2d4 <_ai_platform_acquire_crc>
 800f4fa:	4b5d      	ldr	r3, [pc, #372]	; (800f670 <ai_platform_network_get_error+0x200>)
 800f4fc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f506:	185a      	adds	r2, r3, r1
 800f508:	2a01      	cmp	r2, #1
 800f50a:	d929      	bls.n	800f560 <ai_platform_network_get_error+0xf0>
 800f50c:	f240 4249 	movw	r2, #1097	; 0x449
 800f510:	4293      	cmp	r3, r2
 800f512:	d025      	beq.n	800f560 <ai_platform_network_get_error+0xf0>
 800f514:	4a57      	ldr	r2, [pc, #348]	; (800f674 <ai_platform_network_get_error+0x204>)
 800f516:	6813      	ldr	r3, [r2, #0]
 800f518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f51c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f520:	d02b      	beq.n	800f57a <ai_platform_network_get_error+0x10a>
 800f522:	6813      	ldr	r3, [r2, #0]
 800f524:	f240 4183 	movw	r1, #1155	; 0x483
 800f528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f52c:	428b      	cmp	r3, r1
 800f52e:	d060      	beq.n	800f5f2 <ai_platform_network_get_error+0x182>
 800f530:	6813      	ldr	r3, [r2, #0]
 800f532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f536:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f53a:	d07c      	beq.n	800f636 <ai_platform_network_get_error+0x1c6>
 800f53c:	6813      	ldr	r3, [r2, #0]
 800f53e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f542:	2b00      	cmp	r3, #0
 800f544:	d129      	bne.n	800f59a <ai_platform_network_get_error+0x12a>
 800f546:	4a4c      	ldr	r2, [pc, #304]	; (800f678 <ai_platform_network_get_error+0x208>)
 800f548:	2301      	movs	r3, #1
 800f54a:	6093      	str	r3, [r2, #8]
 800f54c:	6893      	ldr	r3, [r2, #8]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1fc      	bne.n	800f54c <ai_platform_network_get_error+0xdc>
 800f552:	494a      	ldr	r1, [pc, #296]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f554:	4b4a      	ldr	r3, [pc, #296]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f556:	6011      	str	r1, [r2, #0]
 800f558:	6812      	ldr	r2, [r2, #0]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d01d      	beq.n	800f59a <ai_platform_network_get_error+0x12a>
 800f55e:	e7fe      	b.n	800f55e <ai_platform_network_get_error+0xee>
 800f560:	4a45      	ldr	r2, [pc, #276]	; (800f678 <ai_platform_network_get_error+0x208>)
 800f562:	2301      	movs	r3, #1
 800f564:	6093      	str	r3, [r2, #8]
 800f566:	6893      	ldr	r3, [r2, #8]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1fc      	bne.n	800f566 <ai_platform_network_get_error+0xf6>
 800f56c:	4943      	ldr	r1, [pc, #268]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f56e:	4b44      	ldr	r3, [pc, #272]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f570:	6011      	str	r1, [r2, #0]
 800f572:	6812      	ldr	r2, [r2, #0]
 800f574:	429a      	cmp	r2, r3
 800f576:	d010      	beq.n	800f59a <ai_platform_network_get_error+0x12a>
 800f578:	e7fe      	b.n	800f578 <ai_platform_network_get_error+0x108>
 800f57a:	4a42      	ldr	r2, [pc, #264]	; (800f684 <ai_platform_network_get_error+0x214>)
 800f57c:	2301      	movs	r3, #1
 800f57e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f582:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1fb      	bne.n	800f582 <ai_platform_network_get_error+0x112>
 800f58a:	493c      	ldr	r1, [pc, #240]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f58c:	4b3c      	ldr	r3, [pc, #240]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f58e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f592:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f596:	429a      	cmp	r2, r3
 800f598:	d111      	bne.n	800f5be <ai_platform_network_get_error+0x14e>
 800f59a:	f7ff fe9d 	bl	800f2d8 <_ai_platform_release_crc>
 800f59e:	f241 0010 	movw	r0, #4112	; 0x1010
 800f5a2:	bd10      	pop	{r4, pc}
 800f5a4:	4a34      	ldr	r2, [pc, #208]	; (800f678 <ai_platform_network_get_error+0x208>)
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	6093      	str	r3, [r2, #8]
 800f5aa:	6893      	ldr	r3, [r2, #8]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d1fc      	bne.n	800f5aa <ai_platform_network_get_error+0x13a>
 800f5b0:	4932      	ldr	r1, [pc, #200]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f5b2:	4b33      	ldr	r3, [pc, #204]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f5b4:	6011      	str	r1, [r2, #0]
 800f5b6:	6812      	ldr	r2, [r2, #0]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d011      	beq.n	800f5e0 <ai_platform_network_get_error+0x170>
 800f5bc:	e7fe      	b.n	800f5bc <ai_platform_network_get_error+0x14c>
 800f5be:	e7fe      	b.n	800f5be <ai_platform_network_get_error+0x14e>
 800f5c0:	4a30      	ldr	r2, [pc, #192]	; (800f684 <ai_platform_network_get_error+0x214>)
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f5c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d1fb      	bne.n	800f5c8 <ai_platform_network_get_error+0x158>
 800f5d0:	492a      	ldr	r1, [pc, #168]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f5d2:	4b2b      	ldr	r3, [pc, #172]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f5d4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f5d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d107      	bne.n	800f5f0 <ai_platform_network_get_error+0x180>
 800f5e0:	f7ff fe7a 	bl	800f2d8 <_ai_platform_release_crc>
 800f5e4:	f104 0010 	add.w	r0, r4, #16
 800f5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5ec:	f001 bae4 	b.w	8010bb8 <core_get_error>
 800f5f0:	e7fe      	b.n	800f5f0 <ai_platform_network_get_error+0x180>
 800f5f2:	4a24      	ldr	r2, [pc, #144]	; (800f684 <ai_platform_network_get_error+0x214>)
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f5fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1fb      	bne.n	800f5fa <ai_platform_network_get_error+0x18a>
 800f602:	491e      	ldr	r1, [pc, #120]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f604:	4b1e      	ldr	r3, [pc, #120]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f606:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f60a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f60e:	429a      	cmp	r2, r3
 800f610:	d0c3      	beq.n	800f59a <ai_platform_network_get_error+0x12a>
 800f612:	e7fe      	b.n	800f612 <ai_platform_network_get_error+0x1a2>
 800f614:	4a1b      	ldr	r2, [pc, #108]	; (800f684 <ai_platform_network_get_error+0x214>)
 800f616:	2301      	movs	r3, #1
 800f618:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f61c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1fb      	bne.n	800f61c <ai_platform_network_get_error+0x1ac>
 800f624:	4915      	ldr	r1, [pc, #84]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f626:	4b16      	ldr	r3, [pc, #88]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f628:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f62c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f630:	429a      	cmp	r2, r3
 800f632:	d0d5      	beq.n	800f5e0 <ai_platform_network_get_error+0x170>
 800f634:	e7fe      	b.n	800f634 <ai_platform_network_get_error+0x1c4>
 800f636:	4a10      	ldr	r2, [pc, #64]	; (800f678 <ai_platform_network_get_error+0x208>)
 800f638:	2301      	movs	r3, #1
 800f63a:	6093      	str	r3, [r2, #8]
 800f63c:	6893      	ldr	r3, [r2, #8]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d1fc      	bne.n	800f63c <ai_platform_network_get_error+0x1cc>
 800f642:	490e      	ldr	r1, [pc, #56]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f644:	4b0e      	ldr	r3, [pc, #56]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f646:	6011      	str	r1, [r2, #0]
 800f648:	6812      	ldr	r2, [r2, #0]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d0a5      	beq.n	800f59a <ai_platform_network_get_error+0x12a>
 800f64e:	e7fe      	b.n	800f64e <ai_platform_network_get_error+0x1de>
 800f650:	4a09      	ldr	r2, [pc, #36]	; (800f678 <ai_platform_network_get_error+0x208>)
 800f652:	2301      	movs	r3, #1
 800f654:	6093      	str	r3, [r2, #8]
 800f656:	6893      	ldr	r3, [r2, #8]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1fc      	bne.n	800f656 <ai_platform_network_get_error+0x1e6>
 800f65c:	4907      	ldr	r1, [pc, #28]	; (800f67c <ai_platform_network_get_error+0x20c>)
 800f65e:	4b08      	ldr	r3, [pc, #32]	; (800f680 <ai_platform_network_get_error+0x210>)
 800f660:	6011      	str	r1, [r2, #0]
 800f662:	6812      	ldr	r2, [r2, #0]
 800f664:	429a      	cmp	r2, r3
 800f666:	d0bb      	beq.n	800f5e0 <ai_platform_network_get_error+0x170>
 800f668:	e7fe      	b.n	800f668 <ai_platform_network_get_error+0x1f8>
 800f66a:	bf00      	nop
 800f66c:	a1c00100 	.word	0xa1c00100
 800f670:	e0042000 	.word	0xe0042000
 800f674:	5c001000 	.word	0x5c001000
 800f678:	40023000 	.word	0x40023000
 800f67c:	f407a5c2 	.word	0xf407a5c2
 800f680:	b5e8b5cd 	.word	0xb5e8b5cd
 800f684:	58024000 	.word	0x58024000

0800f688 <ai_platform_network_set_error>:
 800f688:	b110      	cbz	r0, 800f690 <ai_platform_network_set_error+0x8>
 800f68a:	3010      	adds	r0, #16
 800f68c:	f001 ba9a 	b.w	8010bc4 <core_set_error>
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop

0800f694 <ai_platform_inputs_get>:
 800f694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f698:	b085      	sub	sp, #20
 800f69a:	9102      	str	r1, [sp, #8]
 800f69c:	2800      	cmp	r0, #0
 800f69e:	f000 8093 	beq.w	800f7c8 <ai_platform_inputs_get+0x134>
 800f6a2:	4baa      	ldr	r3, [pc, #680]	; (800f94c <ai_platform_inputs_get+0x2b8>)
 800f6a4:	4681      	mov	r9, r0
 800f6a6:	6802      	ldr	r2, [r0, #0]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	f040 808d 	bne.w	800f7c8 <ai_platform_inputs_get+0x134>
 800f6ae:	f7ff fe11 	bl	800f2d4 <_ai_platform_acquire_crc>
 800f6b2:	4ba7      	ldr	r3, [pc, #668]	; (800f950 <ai_platform_inputs_get+0x2bc>)
 800f6b4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f6be:	189a      	adds	r2, r3, r2
 800f6c0:	2a01      	cmp	r2, #1
 800f6c2:	f240 80da 	bls.w	800f87a <ai_platform_inputs_get+0x1e6>
 800f6c6:	f240 4249 	movw	r2, #1097	; 0x449
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	f000 80d5 	beq.w	800f87a <ai_platform_inputs_get+0x1e6>
 800f6d0:	4aa0      	ldr	r2, [pc, #640]	; (800f954 <ai_platform_inputs_get+0x2c0>)
 800f6d2:	6813      	ldr	r3, [r2, #0]
 800f6d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f6d8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f6dc:	f000 80dc 	beq.w	800f898 <ai_platform_inputs_get+0x204>
 800f6e0:	6813      	ldr	r3, [r2, #0]
 800f6e2:	f240 4183 	movw	r1, #1155	; 0x483
 800f6e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f6ea:	428b      	cmp	r3, r1
 800f6ec:	f000 810e 	beq.w	800f90c <ai_platform_inputs_get+0x278>
 800f6f0:	6813      	ldr	r3, [r2, #0]
 800f6f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f6f6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f6fa:	f000 8143 	beq.w	800f984 <ai_platform_inputs_get+0x2f0>
 800f6fe:	6813      	ldr	r3, [r2, #0]
 800f700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f704:	2b00      	cmp	r3, #0
 800f706:	f000 8113 	beq.w	800f930 <ai_platform_inputs_get+0x29c>
 800f70a:	f7ff fde5 	bl	800f2d8 <_ai_platform_release_crc>
 800f70e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800f712:	2b00      	cmp	r3, #0
 800f714:	f000 80d2 	beq.w	800f8bc <ai_platform_inputs_get+0x228>
 800f718:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800f71c:	f1ba 0f00 	cmp.w	sl, #0
 800f720:	f000 80cc 	beq.w	800f8bc <ai_platform_inputs_get+0x228>
 800f724:	2100      	movs	r1, #0
 800f726:	f8cd 900c 	str.w	r9, [sp, #12]
 800f72a:	460d      	mov	r5, r1
 800f72c:	4689      	mov	r9, r1
 800f72e:	e016      	b.n	800f75e <ai_platform_inputs_get+0xca>
 800f730:	9a01      	ldr	r2, [sp, #4]
 800f732:	2301      	movs	r3, #1
 800f734:	f848 3002 	str.w	r3, [r8, r2]
 800f738:	69b2      	ldr	r2, [r6, #24]
 800f73a:	f04f 0301 	mov.w	r3, #1
 800f73e:	6856      	ldr	r6, [r2, #4]
 800f740:	3501      	adds	r5, #1
 800f742:	f109 091c 	add.w	r9, r9, #28
 800f746:	7523      	strb	r3, [r4, #20]
 800f748:	2300      	movs	r3, #0
 800f74a:	6962      	ldr	r2, [r4, #20]
 800f74c:	60a7      	str	r7, [r4, #8]
 800f74e:	f36b 221f 	bfi	r2, fp, #8, #24
 800f752:	6126      	str	r6, [r4, #16]
 800f754:	61a1      	str	r1, [r4, #24]
 800f756:	60e3      	str	r3, [r4, #12]
 800f758:	6162      	str	r2, [r4, #20]
 800f75a:	e9c4 0c00 	strd	r0, ip, [r4]
 800f75e:	f8ba 3000 	ldrh.w	r3, [sl]
 800f762:	b2ac      	uxth	r4, r5
 800f764:	42ab      	cmp	r3, r5
 800f766:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800f76a:	9301      	str	r3, [sp, #4]
 800f76c:	f240 80b5 	bls.w	800f8da <ai_platform_inputs_get+0x246>
 800f770:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	f000 80b0 	beq.w	800f8da <ai_platform_inputs_get+0x246>
 800f77a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800f77e:	2e00      	cmp	r6, #0
 800f780:	f000 80ab 	beq.w	800f8da <ai_platform_inputs_get+0x246>
 800f784:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f788:	69b2      	ldr	r2, [r6, #24]
 800f78a:	68f1      	ldr	r1, [r6, #12]
 800f78c:	6810      	ldr	r0, [r2, #0]
 800f78e:	9100      	str	r1, [sp, #0]
 800f790:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800f794:	68b3      	ldr	r3, [r6, #8]
 800f796:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800f79a:	444c      	add	r4, r9
 800f79c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800f7a0:	f002 fd40 	bl	8012224 <ai_array_to_buffer_fmt>
 800f7a4:	69b2      	ldr	r2, [r6, #24]
 800f7a6:	9900      	ldr	r1, [sp, #0]
 800f7a8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800f7ac:	2f00      	cmp	r7, #0
 800f7ae:	d0c4      	beq.n	800f73a <ai_platform_inputs_get+0xa6>
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800f7b6:	6832      	ldr	r2, [r6, #0]
 800f7b8:	607a      	str	r2, [r7, #4]
 800f7ba:	b112      	cbz	r2, 800f7c2 <ai_platform_inputs_get+0x12e>
 800f7bc:	8852      	ldrh	r2, [r2, #2]
 800f7be:	2a00      	cmp	r2, #0
 800f7c0:	d1b6      	bne.n	800f730 <ai_platform_inputs_get+0x9c>
 800f7c2:	69b2      	ldr	r2, [r6, #24]
 800f7c4:	2700      	movs	r7, #0
 800f7c6:	e7b8      	b.n	800f73a <ai_platform_inputs_get+0xa6>
 800f7c8:	f7ff fd84 	bl	800f2d4 <_ai_platform_acquire_crc>
 800f7cc:	4b60      	ldr	r3, [pc, #384]	; (800f950 <ai_platform_inputs_get+0x2bc>)
 800f7ce:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f7d8:	185a      	adds	r2, r3, r1
 800f7da:	2a01      	cmp	r2, #1
 800f7dc:	d92a      	bls.n	800f834 <ai_platform_inputs_get+0x1a0>
 800f7de:	f240 4249 	movw	r2, #1097	; 0x449
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d026      	beq.n	800f834 <ai_platform_inputs_get+0x1a0>
 800f7e6:	4a5b      	ldr	r2, [pc, #364]	; (800f954 <ai_platform_inputs_get+0x2c0>)
 800f7e8:	6813      	ldr	r3, [r2, #0]
 800f7ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f7ee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f7f2:	d02c      	beq.n	800f84e <ai_platform_inputs_get+0x1ba>
 800f7f4:	6813      	ldr	r3, [r2, #0]
 800f7f6:	f240 4183 	movw	r1, #1155	; 0x483
 800f7fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f7fe:	428b      	cmp	r3, r1
 800f800:	d073      	beq.n	800f8ea <ai_platform_inputs_get+0x256>
 800f802:	6813      	ldr	r3, [r2, #0]
 800f804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f808:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f80c:	f000 80ac 	beq.w	800f968 <ai_platform_inputs_get+0x2d4>
 800f810:	6813      	ldr	r3, [r2, #0]
 800f812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f816:	2b00      	cmp	r3, #0
 800f818:	d129      	bne.n	800f86e <ai_platform_inputs_get+0x1da>
 800f81a:	4a4f      	ldr	r2, [pc, #316]	; (800f958 <ai_platform_inputs_get+0x2c4>)
 800f81c:	2301      	movs	r3, #1
 800f81e:	6093      	str	r3, [r2, #8]
 800f820:	6893      	ldr	r3, [r2, #8]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1fc      	bne.n	800f820 <ai_platform_inputs_get+0x18c>
 800f826:	494d      	ldr	r1, [pc, #308]	; (800f95c <ai_platform_inputs_get+0x2c8>)
 800f828:	4b4d      	ldr	r3, [pc, #308]	; (800f960 <ai_platform_inputs_get+0x2cc>)
 800f82a:	6011      	str	r1, [r2, #0]
 800f82c:	6812      	ldr	r2, [r2, #0]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d01d      	beq.n	800f86e <ai_platform_inputs_get+0x1da>
 800f832:	e7fe      	b.n	800f832 <ai_platform_inputs_get+0x19e>
 800f834:	4a48      	ldr	r2, [pc, #288]	; (800f958 <ai_platform_inputs_get+0x2c4>)
 800f836:	2301      	movs	r3, #1
 800f838:	6093      	str	r3, [r2, #8]
 800f83a:	6893      	ldr	r3, [r2, #8]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1fc      	bne.n	800f83a <ai_platform_inputs_get+0x1a6>
 800f840:	4946      	ldr	r1, [pc, #280]	; (800f95c <ai_platform_inputs_get+0x2c8>)
 800f842:	4b47      	ldr	r3, [pc, #284]	; (800f960 <ai_platform_inputs_get+0x2cc>)
 800f844:	6011      	str	r1, [r2, #0]
 800f846:	6812      	ldr	r2, [r2, #0]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d010      	beq.n	800f86e <ai_platform_inputs_get+0x1da>
 800f84c:	e7fe      	b.n	800f84c <ai_platform_inputs_get+0x1b8>
 800f84e:	4a45      	ldr	r2, [pc, #276]	; (800f964 <ai_platform_inputs_get+0x2d0>)
 800f850:	2301      	movs	r3, #1
 800f852:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f856:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d1fb      	bne.n	800f856 <ai_platform_inputs_get+0x1c2>
 800f85e:	493f      	ldr	r1, [pc, #252]	; (800f95c <ai_platform_inputs_get+0x2c8>)
 800f860:	4b3f      	ldr	r3, [pc, #252]	; (800f960 <ai_platform_inputs_get+0x2cc>)
 800f862:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f866:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d113      	bne.n	800f896 <ai_platform_inputs_get+0x202>
 800f86e:	f7ff fd33 	bl	800f2d8 <_ai_platform_release_crc>
 800f872:	2000      	movs	r0, #0
 800f874:	b005      	add	sp, #20
 800f876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f87a:	4a37      	ldr	r2, [pc, #220]	; (800f958 <ai_platform_inputs_get+0x2c4>)
 800f87c:	2301      	movs	r3, #1
 800f87e:	6093      	str	r3, [r2, #8]
 800f880:	6893      	ldr	r3, [r2, #8]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1fc      	bne.n	800f880 <ai_platform_inputs_get+0x1ec>
 800f886:	4b35      	ldr	r3, [pc, #212]	; (800f95c <ai_platform_inputs_get+0x2c8>)
 800f888:	6013      	str	r3, [r2, #0]
 800f88a:	4b35      	ldr	r3, [pc, #212]	; (800f960 <ai_platform_inputs_get+0x2cc>)
 800f88c:	6812      	ldr	r2, [r2, #0]
 800f88e:	429a      	cmp	r2, r3
 800f890:	f43f af3b 	beq.w	800f70a <ai_platform_inputs_get+0x76>
 800f894:	e7fe      	b.n	800f894 <ai_platform_inputs_get+0x200>
 800f896:	e7fe      	b.n	800f896 <ai_platform_inputs_get+0x202>
 800f898:	4a32      	ldr	r2, [pc, #200]	; (800f964 <ai_platform_inputs_get+0x2d0>)
 800f89a:	2301      	movs	r3, #1
 800f89c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f8a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1fb      	bne.n	800f8a0 <ai_platform_inputs_get+0x20c>
 800f8a8:	4b2c      	ldr	r3, [pc, #176]	; (800f95c <ai_platform_inputs_get+0x2c8>)
 800f8aa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f8ae:	4b2c      	ldr	r3, [pc, #176]	; (800f960 <ai_platform_inputs_get+0x2cc>)
 800f8b0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	f43f af28 	beq.w	800f70a <ai_platform_inputs_get+0x76>
 800f8ba:	e7fe      	b.n	800f8ba <ai_platform_inputs_get+0x226>
 800f8bc:	2400      	movs	r4, #0
 800f8be:	2218      	movs	r2, #24
 800f8c0:	2111      	movs	r1, #17
 800f8c2:	f109 0010 	add.w	r0, r9, #16
 800f8c6:	f001 f97d 	bl	8010bc4 <core_set_error>
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	9b02      	ldr	r3, [sp, #8]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d0d0      	beq.n	800f874 <ai_platform_inputs_get+0x1e0>
 800f8d2:	801c      	strh	r4, [r3, #0]
 800f8d4:	b005      	add	sp, #20
 800f8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8da:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f8de:	2c00      	cmp	r4, #0
 800f8e0:	d0ec      	beq.n	800f8bc <ai_platform_inputs_get+0x228>
 800f8e2:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f8e6:	6858      	ldr	r0, [r3, #4]
 800f8e8:	e7f0      	b.n	800f8cc <ai_platform_inputs_get+0x238>
 800f8ea:	4a1e      	ldr	r2, [pc, #120]	; (800f964 <ai_platform_inputs_get+0x2d0>)
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f8f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1fb      	bne.n	800f8f2 <ai_platform_inputs_get+0x25e>
 800f8fa:	4918      	ldr	r1, [pc, #96]	; (800f95c <ai_platform_inputs_get+0x2c8>)
 800f8fc:	4b18      	ldr	r3, [pc, #96]	; (800f960 <ai_platform_inputs_get+0x2cc>)
 800f8fe:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f902:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f906:	429a      	cmp	r2, r3
 800f908:	d0b1      	beq.n	800f86e <ai_platform_inputs_get+0x1da>
 800f90a:	e7fe      	b.n	800f90a <ai_platform_inputs_get+0x276>
 800f90c:	4a15      	ldr	r2, [pc, #84]	; (800f964 <ai_platform_inputs_get+0x2d0>)
 800f90e:	2301      	movs	r3, #1
 800f910:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f914:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1fb      	bne.n	800f914 <ai_platform_inputs_get+0x280>
 800f91c:	4b0f      	ldr	r3, [pc, #60]	; (800f95c <ai_platform_inputs_get+0x2c8>)
 800f91e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f922:	4b0f      	ldr	r3, [pc, #60]	; (800f960 <ai_platform_inputs_get+0x2cc>)
 800f924:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f928:	429a      	cmp	r2, r3
 800f92a:	f43f aeee 	beq.w	800f70a <ai_platform_inputs_get+0x76>
 800f92e:	e7fe      	b.n	800f92e <ai_platform_inputs_get+0x29a>
 800f930:	4a09      	ldr	r2, [pc, #36]	; (800f958 <ai_platform_inputs_get+0x2c4>)
 800f932:	2301      	movs	r3, #1
 800f934:	6093      	str	r3, [r2, #8]
 800f936:	6893      	ldr	r3, [r2, #8]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1fc      	bne.n	800f936 <ai_platform_inputs_get+0x2a2>
 800f93c:	4b07      	ldr	r3, [pc, #28]	; (800f95c <ai_platform_inputs_get+0x2c8>)
 800f93e:	6013      	str	r3, [r2, #0]
 800f940:	4b07      	ldr	r3, [pc, #28]	; (800f960 <ai_platform_inputs_get+0x2cc>)
 800f942:	6812      	ldr	r2, [r2, #0]
 800f944:	429a      	cmp	r2, r3
 800f946:	f43f aee0 	beq.w	800f70a <ai_platform_inputs_get+0x76>
 800f94a:	e7fe      	b.n	800f94a <ai_platform_inputs_get+0x2b6>
 800f94c:	a1c00100 	.word	0xa1c00100
 800f950:	e0042000 	.word	0xe0042000
 800f954:	5c001000 	.word	0x5c001000
 800f958:	40023000 	.word	0x40023000
 800f95c:	f407a5c2 	.word	0xf407a5c2
 800f960:	b5e8b5cd 	.word	0xb5e8b5cd
 800f964:	58024000 	.word	0x58024000
 800f968:	4a0d      	ldr	r2, [pc, #52]	; (800f9a0 <ai_platform_inputs_get+0x30c>)
 800f96a:	2301      	movs	r3, #1
 800f96c:	6093      	str	r3, [r2, #8]
 800f96e:	6893      	ldr	r3, [r2, #8]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d1fc      	bne.n	800f96e <ai_platform_inputs_get+0x2da>
 800f974:	490b      	ldr	r1, [pc, #44]	; (800f9a4 <ai_platform_inputs_get+0x310>)
 800f976:	4b0c      	ldr	r3, [pc, #48]	; (800f9a8 <ai_platform_inputs_get+0x314>)
 800f978:	6011      	str	r1, [r2, #0]
 800f97a:	6812      	ldr	r2, [r2, #0]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	f43f af76 	beq.w	800f86e <ai_platform_inputs_get+0x1da>
 800f982:	e7fe      	b.n	800f982 <ai_platform_inputs_get+0x2ee>
 800f984:	4a06      	ldr	r2, [pc, #24]	; (800f9a0 <ai_platform_inputs_get+0x30c>)
 800f986:	2301      	movs	r3, #1
 800f988:	6093      	str	r3, [r2, #8]
 800f98a:	6893      	ldr	r3, [r2, #8]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1fc      	bne.n	800f98a <ai_platform_inputs_get+0x2f6>
 800f990:	4b04      	ldr	r3, [pc, #16]	; (800f9a4 <ai_platform_inputs_get+0x310>)
 800f992:	6013      	str	r3, [r2, #0]
 800f994:	4b04      	ldr	r3, [pc, #16]	; (800f9a8 <ai_platform_inputs_get+0x314>)
 800f996:	6812      	ldr	r2, [r2, #0]
 800f998:	429a      	cmp	r2, r3
 800f99a:	f43f aeb6 	beq.w	800f70a <ai_platform_inputs_get+0x76>
 800f99e:	e7fe      	b.n	800f99e <ai_platform_inputs_get+0x30a>
 800f9a0:	40023000 	.word	0x40023000
 800f9a4:	f407a5c2 	.word	0xf407a5c2
 800f9a8:	b5e8b5cd 	.word	0xb5e8b5cd

0800f9ac <ai_platform_outputs_get>:
 800f9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b0:	b085      	sub	sp, #20
 800f9b2:	9102      	str	r1, [sp, #8]
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	f000 808f 	beq.w	800fad8 <ai_platform_outputs_get+0x12c>
 800f9ba:	4ba8      	ldr	r3, [pc, #672]	; (800fc5c <ai_platform_outputs_get+0x2b0>)
 800f9bc:	4681      	mov	r9, r0
 800f9be:	6802      	ldr	r2, [r0, #0]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	f040 8089 	bne.w	800fad8 <ai_platform_outputs_get+0x12c>
 800f9c6:	f7ff fc85 	bl	800f2d4 <_ai_platform_acquire_crc>
 800f9ca:	4ba5      	ldr	r3, [pc, #660]	; (800fc60 <ai_platform_outputs_get+0x2b4>)
 800f9cc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f9d6:	189a      	adds	r2, r3, r2
 800f9d8:	2a01      	cmp	r2, #1
 800f9da:	f240 80d6 	bls.w	800fb8a <ai_platform_outputs_get+0x1de>
 800f9de:	f240 4249 	movw	r2, #1097	; 0x449
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	f000 80d1 	beq.w	800fb8a <ai_platform_outputs_get+0x1de>
 800f9e8:	4a9e      	ldr	r2, [pc, #632]	; (800fc64 <ai_platform_outputs_get+0x2b8>)
 800f9ea:	6813      	ldr	r3, [r2, #0]
 800f9ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f9f0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f9f4:	f000 80d8 	beq.w	800fba8 <ai_platform_outputs_get+0x1fc>
 800f9f8:	6813      	ldr	r3, [r2, #0]
 800f9fa:	f240 4183 	movw	r1, #1155	; 0x483
 800f9fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa02:	428b      	cmp	r3, r1
 800fa04:	f000 8109 	beq.w	800fc1a <ai_platform_outputs_get+0x26e>
 800fa08:	6813      	ldr	r3, [r2, #0]
 800fa0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa0e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fa12:	f000 813f 	beq.w	800fc94 <ai_platform_outputs_get+0x2e8>
 800fa16:	6813      	ldr	r3, [r2, #0]
 800fa18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f000 810e 	beq.w	800fc3e <ai_platform_outputs_get+0x292>
 800fa22:	f7ff fc59 	bl	800f2d8 <_ai_platform_release_crc>
 800fa26:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	f240 80db 	bls.w	800fbe6 <ai_platform_outputs_get+0x23a>
 800fa30:	2100      	movs	r1, #0
 800fa32:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800fa36:	f8cd 900c 	str.w	r9, [sp, #12]
 800fa3a:	460d      	mov	r5, r1
 800fa3c:	4689      	mov	r9, r1
 800fa3e:	e016      	b.n	800fa6e <ai_platform_outputs_get+0xc2>
 800fa40:	9a01      	ldr	r2, [sp, #4]
 800fa42:	2301      	movs	r3, #1
 800fa44:	f848 3002 	str.w	r3, [r8, r2]
 800fa48:	69b2      	ldr	r2, [r6, #24]
 800fa4a:	f04f 0301 	mov.w	r3, #1
 800fa4e:	6856      	ldr	r6, [r2, #4]
 800fa50:	3501      	adds	r5, #1
 800fa52:	f109 091c 	add.w	r9, r9, #28
 800fa56:	7523      	strb	r3, [r4, #20]
 800fa58:	2300      	movs	r3, #0
 800fa5a:	6962      	ldr	r2, [r4, #20]
 800fa5c:	60a7      	str	r7, [r4, #8]
 800fa5e:	f36b 221f 	bfi	r2, fp, #8, #24
 800fa62:	6126      	str	r6, [r4, #16]
 800fa64:	61a1      	str	r1, [r4, #24]
 800fa66:	60e3      	str	r3, [r4, #12]
 800fa68:	6162      	str	r2, [r4, #20]
 800fa6a:	e9c4 0c00 	strd	r0, ip, [r4]
 800fa6e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800fa72:	b2ac      	uxth	r4, r5
 800fa74:	42ab      	cmp	r3, r5
 800fa76:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fa7a:	9301      	str	r3, [sp, #4]
 800fa7c:	f240 80a6 	bls.w	800fbcc <ai_platform_outputs_get+0x220>
 800fa80:	f8da 3010 	ldr.w	r3, [sl, #16]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f000 80a1 	beq.w	800fbcc <ai_platform_outputs_get+0x220>
 800fa8a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fa8e:	2e00      	cmp	r6, #0
 800fa90:	f000 809c 	beq.w	800fbcc <ai_platform_outputs_get+0x220>
 800fa94:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fa98:	69b2      	ldr	r2, [r6, #24]
 800fa9a:	68f1      	ldr	r1, [r6, #12]
 800fa9c:	6810      	ldr	r0, [r2, #0]
 800fa9e:	9100      	str	r1, [sp, #0]
 800faa0:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800faa4:	68b3      	ldr	r3, [r6, #8]
 800faa6:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800faaa:	444c      	add	r4, r9
 800faac:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fab0:	f002 fbb8 	bl	8012224 <ai_array_to_buffer_fmt>
 800fab4:	69b2      	ldr	r2, [r6, #24]
 800fab6:	9900      	ldr	r1, [sp, #0]
 800fab8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800fabc:	2f00      	cmp	r7, #0
 800fabe:	d0c4      	beq.n	800fa4a <ai_platform_outputs_get+0x9e>
 800fac0:	2200      	movs	r2, #0
 800fac2:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800fac6:	6832      	ldr	r2, [r6, #0]
 800fac8:	607a      	str	r2, [r7, #4]
 800faca:	b112      	cbz	r2, 800fad2 <ai_platform_outputs_get+0x126>
 800facc:	8852      	ldrh	r2, [r2, #2]
 800face:	2a00      	cmp	r2, #0
 800fad0:	d1b6      	bne.n	800fa40 <ai_platform_outputs_get+0x94>
 800fad2:	69b2      	ldr	r2, [r6, #24]
 800fad4:	2700      	movs	r7, #0
 800fad6:	e7b8      	b.n	800fa4a <ai_platform_outputs_get+0x9e>
 800fad8:	f7ff fbfc 	bl	800f2d4 <_ai_platform_acquire_crc>
 800fadc:	4b60      	ldr	r3, [pc, #384]	; (800fc60 <ai_platform_outputs_get+0x2b4>)
 800fade:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fae8:	185a      	adds	r2, r3, r1
 800faea:	2a01      	cmp	r2, #1
 800faec:	d92a      	bls.n	800fb44 <ai_platform_outputs_get+0x198>
 800faee:	f240 4249 	movw	r2, #1097	; 0x449
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d026      	beq.n	800fb44 <ai_platform_outputs_get+0x198>
 800faf6:	4a5b      	ldr	r2, [pc, #364]	; (800fc64 <ai_platform_outputs_get+0x2b8>)
 800faf8:	6813      	ldr	r3, [r2, #0]
 800fafa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fafe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fb02:	d02c      	beq.n	800fb5e <ai_platform_outputs_get+0x1b2>
 800fb04:	6813      	ldr	r3, [r2, #0]
 800fb06:	f240 4183 	movw	r1, #1155	; 0x483
 800fb0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb0e:	428b      	cmp	r3, r1
 800fb10:	d072      	beq.n	800fbf8 <ai_platform_outputs_get+0x24c>
 800fb12:	6813      	ldr	r3, [r2, #0]
 800fb14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb18:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fb1c:	f000 80ac 	beq.w	800fc78 <ai_platform_outputs_get+0x2cc>
 800fb20:	6813      	ldr	r3, [r2, #0]
 800fb22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d129      	bne.n	800fb7e <ai_platform_outputs_get+0x1d2>
 800fb2a:	4a4f      	ldr	r2, [pc, #316]	; (800fc68 <ai_platform_outputs_get+0x2bc>)
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	6093      	str	r3, [r2, #8]
 800fb30:	6893      	ldr	r3, [r2, #8]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1fc      	bne.n	800fb30 <ai_platform_outputs_get+0x184>
 800fb36:	494d      	ldr	r1, [pc, #308]	; (800fc6c <ai_platform_outputs_get+0x2c0>)
 800fb38:	4b4d      	ldr	r3, [pc, #308]	; (800fc70 <ai_platform_outputs_get+0x2c4>)
 800fb3a:	6011      	str	r1, [r2, #0]
 800fb3c:	6812      	ldr	r2, [r2, #0]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d01d      	beq.n	800fb7e <ai_platform_outputs_get+0x1d2>
 800fb42:	e7fe      	b.n	800fb42 <ai_platform_outputs_get+0x196>
 800fb44:	4a48      	ldr	r2, [pc, #288]	; (800fc68 <ai_platform_outputs_get+0x2bc>)
 800fb46:	2301      	movs	r3, #1
 800fb48:	6093      	str	r3, [r2, #8]
 800fb4a:	6893      	ldr	r3, [r2, #8]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d1fc      	bne.n	800fb4a <ai_platform_outputs_get+0x19e>
 800fb50:	4946      	ldr	r1, [pc, #280]	; (800fc6c <ai_platform_outputs_get+0x2c0>)
 800fb52:	4b47      	ldr	r3, [pc, #284]	; (800fc70 <ai_platform_outputs_get+0x2c4>)
 800fb54:	6011      	str	r1, [r2, #0]
 800fb56:	6812      	ldr	r2, [r2, #0]
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d010      	beq.n	800fb7e <ai_platform_outputs_get+0x1d2>
 800fb5c:	e7fe      	b.n	800fb5c <ai_platform_outputs_get+0x1b0>
 800fb5e:	4a45      	ldr	r2, [pc, #276]	; (800fc74 <ai_platform_outputs_get+0x2c8>)
 800fb60:	2301      	movs	r3, #1
 800fb62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fb66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1fb      	bne.n	800fb66 <ai_platform_outputs_get+0x1ba>
 800fb6e:	493f      	ldr	r1, [pc, #252]	; (800fc6c <ai_platform_outputs_get+0x2c0>)
 800fb70:	4b3f      	ldr	r3, [pc, #252]	; (800fc70 <ai_platform_outputs_get+0x2c4>)
 800fb72:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800fb76:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d113      	bne.n	800fba6 <ai_platform_outputs_get+0x1fa>
 800fb7e:	f7ff fbab 	bl	800f2d8 <_ai_platform_release_crc>
 800fb82:	2000      	movs	r0, #0
 800fb84:	b005      	add	sp, #20
 800fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8a:	4a37      	ldr	r2, [pc, #220]	; (800fc68 <ai_platform_outputs_get+0x2bc>)
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	6093      	str	r3, [r2, #8]
 800fb90:	6893      	ldr	r3, [r2, #8]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d1fc      	bne.n	800fb90 <ai_platform_outputs_get+0x1e4>
 800fb96:	4b35      	ldr	r3, [pc, #212]	; (800fc6c <ai_platform_outputs_get+0x2c0>)
 800fb98:	6013      	str	r3, [r2, #0]
 800fb9a:	4b35      	ldr	r3, [pc, #212]	; (800fc70 <ai_platform_outputs_get+0x2c4>)
 800fb9c:	6812      	ldr	r2, [r2, #0]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	f43f af3f 	beq.w	800fa22 <ai_platform_outputs_get+0x76>
 800fba4:	e7fe      	b.n	800fba4 <ai_platform_outputs_get+0x1f8>
 800fba6:	e7fe      	b.n	800fba6 <ai_platform_outputs_get+0x1fa>
 800fba8:	4a32      	ldr	r2, [pc, #200]	; (800fc74 <ai_platform_outputs_get+0x2c8>)
 800fbaa:	2301      	movs	r3, #1
 800fbac:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fbb0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d1fb      	bne.n	800fbb0 <ai_platform_outputs_get+0x204>
 800fbb8:	4b2c      	ldr	r3, [pc, #176]	; (800fc6c <ai_platform_outputs_get+0x2c0>)
 800fbba:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fbbe:	4b2c      	ldr	r3, [pc, #176]	; (800fc70 <ai_platform_outputs_get+0x2c4>)
 800fbc0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	f43f af2c 	beq.w	800fa22 <ai_platform_outputs_get+0x76>
 800fbca:	e7fe      	b.n	800fbca <ai_platform_outputs_get+0x21e>
 800fbcc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fbd0:	b14c      	cbz	r4, 800fbe6 <ai_platform_outputs_get+0x23a>
 800fbd2:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fbd6:	6858      	ldr	r0, [r3, #4]
 800fbd8:	9b02      	ldr	r3, [sp, #8]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d0d2      	beq.n	800fb84 <ai_platform_outputs_get+0x1d8>
 800fbde:	801c      	strh	r4, [r3, #0]
 800fbe0:	b005      	add	sp, #20
 800fbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe6:	2400      	movs	r4, #0
 800fbe8:	2218      	movs	r2, #24
 800fbea:	2111      	movs	r1, #17
 800fbec:	f109 0010 	add.w	r0, r9, #16
 800fbf0:	f000 ffe8 	bl	8010bc4 <core_set_error>
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	e7ef      	b.n	800fbd8 <ai_platform_outputs_get+0x22c>
 800fbf8:	4a1e      	ldr	r2, [pc, #120]	; (800fc74 <ai_platform_outputs_get+0x2c8>)
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fc00:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1fb      	bne.n	800fc00 <ai_platform_outputs_get+0x254>
 800fc08:	4918      	ldr	r1, [pc, #96]	; (800fc6c <ai_platform_outputs_get+0x2c0>)
 800fc0a:	4b19      	ldr	r3, [pc, #100]	; (800fc70 <ai_platform_outputs_get+0x2c4>)
 800fc0c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800fc10:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d0b2      	beq.n	800fb7e <ai_platform_outputs_get+0x1d2>
 800fc18:	e7fe      	b.n	800fc18 <ai_platform_outputs_get+0x26c>
 800fc1a:	4a16      	ldr	r2, [pc, #88]	; (800fc74 <ai_platform_outputs_get+0x2c8>)
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fc22:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1fb      	bne.n	800fc22 <ai_platform_outputs_get+0x276>
 800fc2a:	4b10      	ldr	r3, [pc, #64]	; (800fc6c <ai_platform_outputs_get+0x2c0>)
 800fc2c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fc30:	4b0f      	ldr	r3, [pc, #60]	; (800fc70 <ai_platform_outputs_get+0x2c4>)
 800fc32:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fc36:	429a      	cmp	r2, r3
 800fc38:	f43f aef3 	beq.w	800fa22 <ai_platform_outputs_get+0x76>
 800fc3c:	e7fe      	b.n	800fc3c <ai_platform_outputs_get+0x290>
 800fc3e:	4a0a      	ldr	r2, [pc, #40]	; (800fc68 <ai_platform_outputs_get+0x2bc>)
 800fc40:	2301      	movs	r3, #1
 800fc42:	6093      	str	r3, [r2, #8]
 800fc44:	6893      	ldr	r3, [r2, #8]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1fc      	bne.n	800fc44 <ai_platform_outputs_get+0x298>
 800fc4a:	4b08      	ldr	r3, [pc, #32]	; (800fc6c <ai_platform_outputs_get+0x2c0>)
 800fc4c:	6013      	str	r3, [r2, #0]
 800fc4e:	4b08      	ldr	r3, [pc, #32]	; (800fc70 <ai_platform_outputs_get+0x2c4>)
 800fc50:	6812      	ldr	r2, [r2, #0]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	f43f aee5 	beq.w	800fa22 <ai_platform_outputs_get+0x76>
 800fc58:	e7fe      	b.n	800fc58 <ai_platform_outputs_get+0x2ac>
 800fc5a:	bf00      	nop
 800fc5c:	a1c00100 	.word	0xa1c00100
 800fc60:	e0042000 	.word	0xe0042000
 800fc64:	5c001000 	.word	0x5c001000
 800fc68:	40023000 	.word	0x40023000
 800fc6c:	f407a5c2 	.word	0xf407a5c2
 800fc70:	b5e8b5cd 	.word	0xb5e8b5cd
 800fc74:	58024000 	.word	0x58024000
 800fc78:	4a0d      	ldr	r2, [pc, #52]	; (800fcb0 <ai_platform_outputs_get+0x304>)
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	6093      	str	r3, [r2, #8]
 800fc7e:	6893      	ldr	r3, [r2, #8]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d1fc      	bne.n	800fc7e <ai_platform_outputs_get+0x2d2>
 800fc84:	490b      	ldr	r1, [pc, #44]	; (800fcb4 <ai_platform_outputs_get+0x308>)
 800fc86:	4b0c      	ldr	r3, [pc, #48]	; (800fcb8 <ai_platform_outputs_get+0x30c>)
 800fc88:	6011      	str	r1, [r2, #0]
 800fc8a:	6812      	ldr	r2, [r2, #0]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	f43f af76 	beq.w	800fb7e <ai_platform_outputs_get+0x1d2>
 800fc92:	e7fe      	b.n	800fc92 <ai_platform_outputs_get+0x2e6>
 800fc94:	4a06      	ldr	r2, [pc, #24]	; (800fcb0 <ai_platform_outputs_get+0x304>)
 800fc96:	2301      	movs	r3, #1
 800fc98:	6093      	str	r3, [r2, #8]
 800fc9a:	6893      	ldr	r3, [r2, #8]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1fc      	bne.n	800fc9a <ai_platform_outputs_get+0x2ee>
 800fca0:	4b04      	ldr	r3, [pc, #16]	; (800fcb4 <ai_platform_outputs_get+0x308>)
 800fca2:	6013      	str	r3, [r2, #0]
 800fca4:	4b04      	ldr	r3, [pc, #16]	; (800fcb8 <ai_platform_outputs_get+0x30c>)
 800fca6:	6812      	ldr	r2, [r2, #0]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	f43f aeba 	beq.w	800fa22 <ai_platform_outputs_get+0x76>
 800fcae:	e7fe      	b.n	800fcae <ai_platform_outputs_get+0x302>
 800fcb0:	40023000 	.word	0x40023000
 800fcb4:	f407a5c2 	.word	0xf407a5c2
 800fcb8:	b5e8b5cd 	.word	0xb5e8b5cd

0800fcbc <ai_platform_network_create>:
 800fcbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcc0:	b083      	sub	sp, #12
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	4615      	mov	r5, r2
 800fcc6:	461e      	mov	r6, r3
 800fcc8:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800fccc:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800fcd0:	f7ff fb00 	bl	800f2d4 <_ai_platform_acquire_crc>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	f000 80bd 	beq.w	800fe54 <ai_platform_network_create+0x198>
 800fcda:	4ba5      	ldr	r3, [pc, #660]	; (800ff70 <ai_platform_network_create+0x2b4>)
 800fcdc:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800fce0:	4601      	mov	r1, r0
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fce8:	eb03 020c 	add.w	r2, r3, ip
 800fcec:	2a01      	cmp	r2, #1
 800fcee:	f240 80a8 	bls.w	800fe42 <ai_platform_network_create+0x186>
 800fcf2:	f240 4249 	movw	r2, #1097	; 0x449
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	f000 80a3 	beq.w	800fe42 <ai_platform_network_create+0x186>
 800fcfc:	4a9d      	ldr	r2, [pc, #628]	; (800ff74 <ai_platform_network_create+0x2b8>)
 800fcfe:	6813      	ldr	r3, [r2, #0]
 800fd00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd04:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fd08:	f000 80b9 	beq.w	800fe7e <ai_platform_network_create+0x1c2>
 800fd0c:	6813      	ldr	r3, [r2, #0]
 800fd0e:	f240 4c83 	movw	ip, #1155	; 0x483
 800fd12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd16:	4563      	cmp	r3, ip
 800fd18:	f000 80a1 	beq.w	800fe5e <ai_platform_network_create+0x1a2>
 800fd1c:	6813      	ldr	r3, [r2, #0]
 800fd1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd22:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fd26:	f000 8153 	beq.w	800ffd0 <ai_platform_network_create+0x314>
 800fd2a:	6813      	ldr	r3, [r2, #0]
 800fd2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f040 808d 	bne.w	800fe50 <ai_platform_network_create+0x194>
 800fd36:	4a90      	ldr	r2, [pc, #576]	; (800ff78 <ai_platform_network_create+0x2bc>)
 800fd38:	2318      	movs	r3, #24
 800fd3a:	6093      	str	r3, [r2, #8]
 800fd3c:	6893      	ldr	r3, [r2, #8]
 800fd3e:	2b18      	cmp	r3, #24
 800fd40:	f040 8086 	bne.w	800fe50 <ai_platform_network_create+0x194>
 800fd44:	2301      	movs	r3, #1
 800fd46:	6093      	str	r3, [r2, #8]
 800fd48:	6893      	ldr	r3, [r2, #8]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d1fc      	bne.n	800fd48 <ai_platform_network_create+0x8c>
 800fd4e:	4608      	mov	r0, r1
 800fd50:	f7ff fac2 	bl	800f2d8 <_ai_platform_release_crc>
 800fd54:	f7ff fabe 	bl	800f2d4 <_ai_platform_acquire_crc>
 800fd58:	4b85      	ldr	r3, [pc, #532]	; (800ff70 <ai_platform_network_create+0x2b4>)
 800fd5a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd64:	189a      	adds	r2, r3, r2
 800fd66:	2a01      	cmp	r2, #1
 800fd68:	f240 809f 	bls.w	800feaa <ai_platform_network_create+0x1ee>
 800fd6c:	f240 4249 	movw	r2, #1097	; 0x449
 800fd70:	4293      	cmp	r3, r2
 800fd72:	f000 809a 	beq.w	800feaa <ai_platform_network_create+0x1ee>
 800fd76:	4a7f      	ldr	r2, [pc, #508]	; (800ff74 <ai_platform_network_create+0x2b8>)
 800fd78:	6813      	ldr	r3, [r2, #0]
 800fd7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd7e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fd82:	f000 80a0 	beq.w	800fec6 <ai_platform_network_create+0x20a>
 800fd86:	6813      	ldr	r3, [r2, #0]
 800fd88:	f240 4183 	movw	r1, #1155	; 0x483
 800fd8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd90:	428b      	cmp	r3, r1
 800fd92:	f000 80bf 	beq.w	800ff14 <ai_platform_network_create+0x258>
 800fd96:	6813      	ldr	r3, [r2, #0]
 800fd98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd9c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fda0:	f000 8123 	beq.w	800ffea <ai_platform_network_create+0x32e>
 800fda4:	6813      	ldr	r3, [r2, #0]
 800fda6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f000 80c4 	beq.w	800ff38 <ai_platform_network_create+0x27c>
 800fdb0:	f7ff fa92 	bl	800f2d8 <_ai_platform_release_crc>
 800fdb4:	2c00      	cmp	r4, #0
 800fdb6:	f000 80aa 	beq.w	800ff0e <ai_platform_network_create+0x252>
 800fdba:	4b70      	ldr	r3, [pc, #448]	; (800ff7c <ai_platform_network_create+0x2c0>)
 800fdbc:	602b      	str	r3, [r5, #0]
 800fdbe:	6025      	str	r5, [r4, #0]
 800fdc0:	f000 fef8 	bl	8010bb4 <core_init>
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	f000 8090 	beq.w	800feea <ai_platform_network_create+0x22e>
 800fdca:	f7ff fa83 	bl	800f2d4 <_ai_platform_acquire_crc>
 800fdce:	4b68      	ldr	r3, [pc, #416]	; (800ff70 <ai_platform_network_create+0x2b4>)
 800fdd0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdda:	185a      	adds	r2, r3, r1
 800fddc:	2a01      	cmp	r2, #1
 800fdde:	f240 80b9 	bls.w	800ff54 <ai_platform_network_create+0x298>
 800fde2:	f240 4249 	movw	r2, #1097	; 0x449
 800fde6:	4293      	cmp	r3, r2
 800fde8:	f000 80b4 	beq.w	800ff54 <ai_platform_network_create+0x298>
 800fdec:	4a61      	ldr	r2, [pc, #388]	; (800ff74 <ai_platform_network_create+0x2b8>)
 800fdee:	6813      	ldr	r3, [r2, #0]
 800fdf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdf4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fdf8:	f000 80c8 	beq.w	800ff8c <ai_platform_network_create+0x2d0>
 800fdfc:	6813      	ldr	r3, [r2, #0]
 800fdfe:	f240 4183 	movw	r1, #1155	; 0x483
 800fe02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe06:	428b      	cmp	r3, r1
 800fe08:	f000 8107 	beq.w	801001a <ai_platform_network_create+0x35e>
 800fe0c:	6813      	ldr	r3, [r2, #0]
 800fe0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe12:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fe16:	f000 8111 	beq.w	801003c <ai_platform_network_create+0x380>
 800fe1a:	6813      	ldr	r3, [r2, #0]
 800fe1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	f040 80c3 	bne.w	800ffac <ai_platform_network_create+0x2f0>
 800fe26:	4b54      	ldr	r3, [pc, #336]	; (800ff78 <ai_platform_network_create+0x2bc>)
 800fe28:	2201      	movs	r2, #1
 800fe2a:	609a      	str	r2, [r3, #8]
 800fe2c:	689a      	ldr	r2, [r3, #8]
 800fe2e:	2a00      	cmp	r2, #0
 800fe30:	d1fc      	bne.n	800fe2c <ai_platform_network_create+0x170>
 800fe32:	4a53      	ldr	r2, [pc, #332]	; (800ff80 <ai_platform_network_create+0x2c4>)
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	4b52      	ldr	r3, [pc, #328]	; (800ff84 <ai_platform_network_create+0x2c8>)
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	f000 80b6 	beq.w	800ffac <ai_platform_network_create+0x2f0>
 800fe40:	e7fe      	b.n	800fe40 <ai_platform_network_create+0x184>
 800fe42:	4b4d      	ldr	r3, [pc, #308]	; (800ff78 <ai_platform_network_create+0x2bc>)
 800fe44:	2218      	movs	r2, #24
 800fe46:	609a      	str	r2, [r3, #8]
 800fe48:	689a      	ldr	r2, [r3, #8]
 800fe4a:	2a18      	cmp	r2, #24
 800fe4c:	d027      	beq.n	800fe9e <ai_platform_network_create+0x1e2>
 800fe4e:	4608      	mov	r0, r1
 800fe50:	f7ff fa42 	bl	800f2d8 <_ai_platform_release_crc>
 800fe54:	f244 1033 	movw	r0, #16691	; 0x4133
 800fe58:	b003      	add	sp, #12
 800fe5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe5e:	4a4a      	ldr	r2, [pc, #296]	; (800ff88 <ai_platform_network_create+0x2cc>)
 800fe60:	2318      	movs	r3, #24
 800fe62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fe66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fe6a:	2b18      	cmp	r3, #24
 800fe6c:	d1f0      	bne.n	800fe50 <ai_platform_network_create+0x194>
 800fe6e:	2301      	movs	r3, #1
 800fe70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fe74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d1fb      	bne.n	800fe74 <ai_platform_network_create+0x1b8>
 800fe7c:	e767      	b.n	800fd4e <ai_platform_network_create+0x92>
 800fe7e:	4a42      	ldr	r2, [pc, #264]	; (800ff88 <ai_platform_network_create+0x2cc>)
 800fe80:	2318      	movs	r3, #24
 800fe82:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fe86:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fe8a:	2b18      	cmp	r3, #24
 800fe8c:	d1e0      	bne.n	800fe50 <ai_platform_network_create+0x194>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fe94:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1fb      	bne.n	800fe94 <ai_platform_network_create+0x1d8>
 800fe9c:	e757      	b.n	800fd4e <ai_platform_network_create+0x92>
 800fe9e:	2201      	movs	r2, #1
 800fea0:	609a      	str	r2, [r3, #8]
 800fea2:	689a      	ldr	r2, [r3, #8]
 800fea4:	2a00      	cmp	r2, #0
 800fea6:	d1fc      	bne.n	800fea2 <ai_platform_network_create+0x1e6>
 800fea8:	e751      	b.n	800fd4e <ai_platform_network_create+0x92>
 800feaa:	4a33      	ldr	r2, [pc, #204]	; (800ff78 <ai_platform_network_create+0x2bc>)
 800feac:	2301      	movs	r3, #1
 800feae:	6093      	str	r3, [r2, #8]
 800feb0:	6891      	ldr	r1, [r2, #8]
 800feb2:	2900      	cmp	r1, #0
 800feb4:	d1fc      	bne.n	800feb0 <ai_platform_network_create+0x1f4>
 800feb6:	4b32      	ldr	r3, [pc, #200]	; (800ff80 <ai_platform_network_create+0x2c4>)
 800feb8:	6013      	str	r3, [r2, #0]
 800feba:	4b32      	ldr	r3, [pc, #200]	; (800ff84 <ai_platform_network_create+0x2c8>)
 800febc:	6812      	ldr	r2, [r2, #0]
 800febe:	429a      	cmp	r2, r3
 800fec0:	f43f af76 	beq.w	800fdb0 <ai_platform_network_create+0xf4>
 800fec4:	e7fe      	b.n	800fec4 <ai_platform_network_create+0x208>
 800fec6:	4a30      	ldr	r2, [pc, #192]	; (800ff88 <ai_platform_network_create+0x2cc>)
 800fec8:	2301      	movs	r3, #1
 800feca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fece:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d1fb      	bne.n	800fece <ai_platform_network_create+0x212>
 800fed6:	4b2a      	ldr	r3, [pc, #168]	; (800ff80 <ai_platform_network_create+0x2c4>)
 800fed8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fedc:	4b29      	ldr	r3, [pc, #164]	; (800ff84 <ai_platform_network_create+0x2c8>)
 800fede:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fee2:	429a      	cmp	r2, r3
 800fee4:	f43f af64 	beq.w	800fdb0 <ai_platform_network_create+0xf4>
 800fee8:	e7fe      	b.n	800fee8 <ai_platform_network_create+0x22c>
 800feea:	f04f 0930 	mov.w	r9, #48	; 0x30
 800feee:	2300      	movs	r3, #0
 800fef0:	6023      	str	r3, [r4, #0]
 800fef2:	2410      	movs	r4, #16
 800fef4:	4642      	mov	r2, r8
 800fef6:	4639      	mov	r1, r7
 800fef8:	4630      	mov	r0, r6
 800fefa:	f002 fa37 	bl	801236c <ai_version_get>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2000      	movs	r0, #0
 800ff02:	64ab      	str	r3, [r5, #72]	; 0x48
 800ff04:	f369 0007 	bfi	r0, r9, #0, #8
 800ff08:	f364 201f 	bfi	r0, r4, #8, #24
 800ff0c:	e7a4      	b.n	800fe58 <ai_platform_network_create+0x19c>
 800ff0e:	f241 0010 	movw	r0, #4112	; 0x1010
 800ff12:	e7a1      	b.n	800fe58 <ai_platform_network_create+0x19c>
 800ff14:	4a1c      	ldr	r2, [pc, #112]	; (800ff88 <ai_platform_network_create+0x2cc>)
 800ff16:	2301      	movs	r3, #1
 800ff18:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ff1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1fb      	bne.n	800ff1c <ai_platform_network_create+0x260>
 800ff24:	4b16      	ldr	r3, [pc, #88]	; (800ff80 <ai_platform_network_create+0x2c4>)
 800ff26:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ff2a:	4b16      	ldr	r3, [pc, #88]	; (800ff84 <ai_platform_network_create+0x2c8>)
 800ff2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ff30:	429a      	cmp	r2, r3
 800ff32:	f43f af3d 	beq.w	800fdb0 <ai_platform_network_create+0xf4>
 800ff36:	e7fe      	b.n	800ff36 <ai_platform_network_create+0x27a>
 800ff38:	4a0f      	ldr	r2, [pc, #60]	; (800ff78 <ai_platform_network_create+0x2bc>)
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	6093      	str	r3, [r2, #8]
 800ff3e:	6893      	ldr	r3, [r2, #8]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d1fc      	bne.n	800ff3e <ai_platform_network_create+0x282>
 800ff44:	4b0e      	ldr	r3, [pc, #56]	; (800ff80 <ai_platform_network_create+0x2c4>)
 800ff46:	6013      	str	r3, [r2, #0]
 800ff48:	4b0e      	ldr	r3, [pc, #56]	; (800ff84 <ai_platform_network_create+0x2c8>)
 800ff4a:	6812      	ldr	r2, [r2, #0]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	f43f af2f 	beq.w	800fdb0 <ai_platform_network_create+0xf4>
 800ff52:	e7fe      	b.n	800ff52 <ai_platform_network_create+0x296>
 800ff54:	4a08      	ldr	r2, [pc, #32]	; (800ff78 <ai_platform_network_create+0x2bc>)
 800ff56:	2301      	movs	r3, #1
 800ff58:	6093      	str	r3, [r2, #8]
 800ff5a:	6893      	ldr	r3, [r2, #8]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1fc      	bne.n	800ff5a <ai_platform_network_create+0x29e>
 800ff60:	4b07      	ldr	r3, [pc, #28]	; (800ff80 <ai_platform_network_create+0x2c4>)
 800ff62:	6013      	str	r3, [r2, #0]
 800ff64:	4b07      	ldr	r3, [pc, #28]	; (800ff84 <ai_platform_network_create+0x2c8>)
 800ff66:	6812      	ldr	r2, [r2, #0]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d01f      	beq.n	800ffac <ai_platform_network_create+0x2f0>
 800ff6c:	e7fe      	b.n	800ff6c <ai_platform_network_create+0x2b0>
 800ff6e:	bf00      	nop
 800ff70:	e0042000 	.word	0xe0042000
 800ff74:	5c001000 	.word	0x5c001000
 800ff78:	40023000 	.word	0x40023000
 800ff7c:	a1c00100 	.word	0xa1c00100
 800ff80:	f407a5c2 	.word	0xf407a5c2
 800ff84:	b5e8b5cd 	.word	0xb5e8b5cd
 800ff88:	58024000 	.word	0x58024000
 800ff8c:	4a33      	ldr	r2, [pc, #204]	; (801005c <ai_platform_network_create+0x3a0>)
 800ff8e:	2301      	movs	r3, #1
 800ff90:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ff94:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d1fb      	bne.n	800ff94 <ai_platform_network_create+0x2d8>
 800ff9c:	4b30      	ldr	r3, [pc, #192]	; (8010060 <ai_platform_network_create+0x3a4>)
 800ff9e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ffa2:	4b30      	ldr	r3, [pc, #192]	; (8010064 <ai_platform_network_create+0x3a8>)
 800ffa4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d12c      	bne.n	8010006 <ai_platform_network_create+0x34a>
 800ffac:	f7ff f994 	bl	800f2d8 <_ai_platform_release_crc>
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	4639      	mov	r1, r7
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f002 f9d9 	bl	801236c <ai_version_get>
 800ffba:	4681      	mov	r9, r0
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	2105      	movs	r1, #5
 800ffc0:	2001      	movs	r0, #1
 800ffc2:	f002 f9d3 	bl	801236c <ai_version_get>
 800ffc6:	4581      	cmp	r9, r0
 800ffc8:	d01e      	beq.n	8010008 <ai_platform_network_create+0x34c>
 800ffca:	f04f 0901 	mov.w	r9, #1
 800ffce:	e78e      	b.n	800feee <ai_platform_network_create+0x232>
 800ffd0:	4b25      	ldr	r3, [pc, #148]	; (8010068 <ai_platform_network_create+0x3ac>)
 800ffd2:	2218      	movs	r2, #24
 800ffd4:	609a      	str	r2, [r3, #8]
 800ffd6:	689a      	ldr	r2, [r3, #8]
 800ffd8:	2a18      	cmp	r2, #24
 800ffda:	f47f af39 	bne.w	800fe50 <ai_platform_network_create+0x194>
 800ffde:	2201      	movs	r2, #1
 800ffe0:	609a      	str	r2, [r3, #8]
 800ffe2:	689a      	ldr	r2, [r3, #8]
 800ffe4:	2a00      	cmp	r2, #0
 800ffe6:	d1fc      	bne.n	800ffe2 <ai_platform_network_create+0x326>
 800ffe8:	e6b1      	b.n	800fd4e <ai_platform_network_create+0x92>
 800ffea:	4a1f      	ldr	r2, [pc, #124]	; (8010068 <ai_platform_network_create+0x3ac>)
 800ffec:	2301      	movs	r3, #1
 800ffee:	6093      	str	r3, [r2, #8]
 800fff0:	6893      	ldr	r3, [r2, #8]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1fc      	bne.n	800fff0 <ai_platform_network_create+0x334>
 800fff6:	4b1a      	ldr	r3, [pc, #104]	; (8010060 <ai_platform_network_create+0x3a4>)
 800fff8:	6013      	str	r3, [r2, #0]
 800fffa:	4b1a      	ldr	r3, [pc, #104]	; (8010064 <ai_platform_network_create+0x3a8>)
 800fffc:	6812      	ldr	r2, [r2, #0]
 800fffe:	429a      	cmp	r2, r3
 8010000:	f43f aed6 	beq.w	800fdb0 <ai_platform_network_create+0xf4>
 8010004:	e7fe      	b.n	8010004 <ai_platform_network_create+0x348>
 8010006:	e7fe      	b.n	8010006 <ai_platform_network_create+0x34a>
 8010008:	4b18      	ldr	r3, [pc, #96]	; (801006c <ai_platform_network_create+0x3b0>)
 801000a:	a801      	add	r0, sp, #4
 801000c:	9301      	str	r3, [sp, #4]
 801000e:	f000 fde5 	bl	8010bdc <ai_check_custom_types>
 8010012:	b300      	cbz	r0, 8010056 <ai_platform_network_create+0x39a>
 8010014:	2400      	movs	r4, #0
 8010016:	46a1      	mov	r9, r4
 8010018:	e76c      	b.n	800fef4 <ai_platform_network_create+0x238>
 801001a:	4b10      	ldr	r3, [pc, #64]	; (801005c <ai_platform_network_create+0x3a0>)
 801001c:	2201      	movs	r2, #1
 801001e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8010022:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8010026:	2a00      	cmp	r2, #0
 8010028:	d1fb      	bne.n	8010022 <ai_platform_network_create+0x366>
 801002a:	4a0d      	ldr	r2, [pc, #52]	; (8010060 <ai_platform_network_create+0x3a4>)
 801002c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8010030:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8010034:	4b0b      	ldr	r3, [pc, #44]	; (8010064 <ai_platform_network_create+0x3a8>)
 8010036:	429a      	cmp	r2, r3
 8010038:	d0b8      	beq.n	800ffac <ai_platform_network_create+0x2f0>
 801003a:	e7fe      	b.n	801003a <ai_platform_network_create+0x37e>
 801003c:	4b0a      	ldr	r3, [pc, #40]	; (8010068 <ai_platform_network_create+0x3ac>)
 801003e:	2201      	movs	r2, #1
 8010040:	609a      	str	r2, [r3, #8]
 8010042:	689a      	ldr	r2, [r3, #8]
 8010044:	2a00      	cmp	r2, #0
 8010046:	d1fc      	bne.n	8010042 <ai_platform_network_create+0x386>
 8010048:	4a05      	ldr	r2, [pc, #20]	; (8010060 <ai_platform_network_create+0x3a4>)
 801004a:	601a      	str	r2, [r3, #0]
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	4b05      	ldr	r3, [pc, #20]	; (8010064 <ai_platform_network_create+0x3a8>)
 8010050:	429a      	cmp	r2, r3
 8010052:	d0ab      	beq.n	800ffac <ai_platform_network_create+0x2f0>
 8010054:	e7fe      	b.n	8010054 <ai_platform_network_create+0x398>
 8010056:	f04f 0902 	mov.w	r9, #2
 801005a:	e748      	b.n	800feee <ai_platform_network_create+0x232>
 801005c:	58024000 	.word	0x58024000
 8010060:	f407a5c2 	.word	0xf407a5c2
 8010064:	b5e8b5cd 	.word	0xb5e8b5cd
 8010068:	40023000 	.word	0x40023000
 801006c:	84048403 	.word	0x84048403

08010070 <ai_platform_network_init>:
 8010070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010074:	2800      	cmp	r0, #0
 8010076:	d052      	beq.n	801011e <ai_platform_network_init+0xae>
 8010078:	4bab      	ldr	r3, [pc, #684]	; (8010328 <ai_platform_network_init+0x2b8>)
 801007a:	4604      	mov	r4, r0
 801007c:	6802      	ldr	r2, [r0, #0]
 801007e:	429a      	cmp	r2, r3
 8010080:	d14d      	bne.n	801011e <ai_platform_network_init+0xae>
 8010082:	460d      	mov	r5, r1
 8010084:	f7ff f926 	bl	800f2d4 <_ai_platform_acquire_crc>
 8010088:	4ba8      	ldr	r3, [pc, #672]	; (801032c <ai_platform_network_init+0x2bc>)
 801008a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010094:	189a      	adds	r2, r3, r2
 8010096:	2a01      	cmp	r2, #1
 8010098:	f240 809b 	bls.w	80101d2 <ai_platform_network_init+0x162>
 801009c:	f240 4249 	movw	r2, #1097	; 0x449
 80100a0:	4293      	cmp	r3, r2
 80100a2:	f000 8096 	beq.w	80101d2 <ai_platform_network_init+0x162>
 80100a6:	4aa2      	ldr	r2, [pc, #648]	; (8010330 <ai_platform_network_init+0x2c0>)
 80100a8:	6813      	ldr	r3, [r2, #0]
 80100aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100ae:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80100b2:	f000 809d 	beq.w	80101f0 <ai_platform_network_init+0x180>
 80100b6:	6813      	ldr	r3, [r2, #0]
 80100b8:	f240 4183 	movw	r1, #1155	; 0x483
 80100bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100c0:	428b      	cmp	r3, r1
 80100c2:	f000 80e4 	beq.w	801028e <ai_platform_network_init+0x21e>
 80100c6:	6813      	ldr	r3, [r2, #0]
 80100c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100cc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80100d0:	f000 811b 	beq.w	801030a <ai_platform_network_init+0x29a>
 80100d4:	6813      	ldr	r3, [r2, #0]
 80100d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f000 80f9 	beq.w	80102d2 <ai_platform_network_init+0x262>
 80100e0:	f7ff f8fa 	bl	800f2d8 <_ai_platform_release_crc>
 80100e4:	2d00      	cmp	r5, #0
 80100e6:	f000 8147 	beq.w	8010378 <ai_platform_network_init+0x308>
 80100ea:	4b92      	ldr	r3, [pc, #584]	; (8010334 <ai_platform_network_init+0x2c4>)
 80100ec:	682a      	ldr	r2, [r5, #0]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	f040 8090 	bne.w	8010214 <ai_platform_network_init+0x1a4>
 80100f4:	692b      	ldr	r3, [r5, #16]
 80100f6:	89ae      	ldrh	r6, [r5, #12]
 80100f8:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 80100fc:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8010100:	62a3      	str	r3, [r4, #40]	; 0x28
 8010102:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8010106:	2303      	movs	r3, #3
 8010108:	84a6      	strh	r6, [r4, #36]	; 0x24
 801010a:	4626      	mov	r6, r4
 801010c:	4620      	mov	r0, r4
 801010e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8010112:	60e3      	str	r3, [r4, #12]
 8010114:	f000 fd8a 	bl	8010c2c <ai_layers_init_all>
 8010118:	4630      	mov	r0, r6
 801011a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801011e:	f7ff f8d9 	bl	800f2d4 <_ai_platform_acquire_crc>
 8010122:	4b82      	ldr	r3, [pc, #520]	; (801032c <ai_platform_network_init+0x2bc>)
 8010124:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801012e:	185a      	adds	r2, r3, r1
 8010130:	2a01      	cmp	r2, #1
 8010132:	d92b      	bls.n	801018c <ai_platform_network_init+0x11c>
 8010134:	f240 4249 	movw	r2, #1097	; 0x449
 8010138:	4293      	cmp	r3, r2
 801013a:	d027      	beq.n	801018c <ai_platform_network_init+0x11c>
 801013c:	4a7c      	ldr	r2, [pc, #496]	; (8010330 <ai_platform_network_init+0x2c0>)
 801013e:	6813      	ldr	r3, [r2, #0]
 8010140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010144:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010148:	d02d      	beq.n	80101a6 <ai_platform_network_init+0x136>
 801014a:	6813      	ldr	r3, [r2, #0]
 801014c:	f240 4183 	movw	r1, #1155	; 0x483
 8010150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010154:	428b      	cmp	r3, r1
 8010156:	f000 8089 	beq.w	801026c <ai_platform_network_init+0x1fc>
 801015a:	6813      	ldr	r3, [r2, #0]
 801015c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010160:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010164:	f000 80c3 	beq.w	80102ee <ai_platform_network_init+0x27e>
 8010168:	6813      	ldr	r3, [r2, #0]
 801016a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801016e:	2b00      	cmp	r3, #0
 8010170:	d129      	bne.n	80101c6 <ai_platform_network_init+0x156>
 8010172:	4a71      	ldr	r2, [pc, #452]	; (8010338 <ai_platform_network_init+0x2c8>)
 8010174:	2301      	movs	r3, #1
 8010176:	6093      	str	r3, [r2, #8]
 8010178:	6893      	ldr	r3, [r2, #8]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1fc      	bne.n	8010178 <ai_platform_network_init+0x108>
 801017e:	496f      	ldr	r1, [pc, #444]	; (801033c <ai_platform_network_init+0x2cc>)
 8010180:	4b6f      	ldr	r3, [pc, #444]	; (8010340 <ai_platform_network_init+0x2d0>)
 8010182:	6011      	str	r1, [r2, #0]
 8010184:	6812      	ldr	r2, [r2, #0]
 8010186:	429a      	cmp	r2, r3
 8010188:	d01d      	beq.n	80101c6 <ai_platform_network_init+0x156>
 801018a:	e7fe      	b.n	801018a <ai_platform_network_init+0x11a>
 801018c:	4a6a      	ldr	r2, [pc, #424]	; (8010338 <ai_platform_network_init+0x2c8>)
 801018e:	2301      	movs	r3, #1
 8010190:	6093      	str	r3, [r2, #8]
 8010192:	6893      	ldr	r3, [r2, #8]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d1fc      	bne.n	8010192 <ai_platform_network_init+0x122>
 8010198:	4968      	ldr	r1, [pc, #416]	; (801033c <ai_platform_network_init+0x2cc>)
 801019a:	4b69      	ldr	r3, [pc, #420]	; (8010340 <ai_platform_network_init+0x2d0>)
 801019c:	6011      	str	r1, [r2, #0]
 801019e:	6812      	ldr	r2, [r2, #0]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d010      	beq.n	80101c6 <ai_platform_network_init+0x156>
 80101a4:	e7fe      	b.n	80101a4 <ai_platform_network_init+0x134>
 80101a6:	4a67      	ldr	r2, [pc, #412]	; (8010344 <ai_platform_network_init+0x2d4>)
 80101a8:	2301      	movs	r3, #1
 80101aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80101ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1fb      	bne.n	80101ae <ai_platform_network_init+0x13e>
 80101b6:	4961      	ldr	r1, [pc, #388]	; (801033c <ai_platform_network_init+0x2cc>)
 80101b8:	4b61      	ldr	r3, [pc, #388]	; (8010340 <ai_platform_network_init+0x2d0>)
 80101ba:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80101be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d113      	bne.n	80101ee <ai_platform_network_init+0x17e>
 80101c6:	2600      	movs	r6, #0
 80101c8:	f7ff f886 	bl	800f2d8 <_ai_platform_release_crc>
 80101cc:	4630      	mov	r0, r6
 80101ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101d2:	4a59      	ldr	r2, [pc, #356]	; (8010338 <ai_platform_network_init+0x2c8>)
 80101d4:	2301      	movs	r3, #1
 80101d6:	6093      	str	r3, [r2, #8]
 80101d8:	6893      	ldr	r3, [r2, #8]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1fc      	bne.n	80101d8 <ai_platform_network_init+0x168>
 80101de:	4b57      	ldr	r3, [pc, #348]	; (801033c <ai_platform_network_init+0x2cc>)
 80101e0:	6013      	str	r3, [r2, #0]
 80101e2:	4b57      	ldr	r3, [pc, #348]	; (8010340 <ai_platform_network_init+0x2d0>)
 80101e4:	6812      	ldr	r2, [r2, #0]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	f43f af7a 	beq.w	80100e0 <ai_platform_network_init+0x70>
 80101ec:	e7fe      	b.n	80101ec <ai_platform_network_init+0x17c>
 80101ee:	e7fe      	b.n	80101ee <ai_platform_network_init+0x17e>
 80101f0:	4a54      	ldr	r2, [pc, #336]	; (8010344 <ai_platform_network_init+0x2d4>)
 80101f2:	2301      	movs	r3, #1
 80101f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80101f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d1fb      	bne.n	80101f8 <ai_platform_network_init+0x188>
 8010200:	4b4e      	ldr	r3, [pc, #312]	; (801033c <ai_platform_network_init+0x2cc>)
 8010202:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010206:	4b4e      	ldr	r3, [pc, #312]	; (8010340 <ai_platform_network_init+0x2d0>)
 8010208:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801020c:	429a      	cmp	r2, r3
 801020e:	f43f af67 	beq.w	80100e0 <ai_platform_network_init+0x70>
 8010212:	e7fe      	b.n	8010212 <ai_platform_network_init+0x1a2>
 8010214:	2101      	movs	r1, #1
 8010216:	4628      	mov	r0, r5
 8010218:	f105 081c 	add.w	r8, r5, #28
 801021c:	686e      	ldr	r6, [r5, #4]
 801021e:	f7ff f80b 	bl	800f238 <ai_buffer_get_size>
 8010222:	4607      	mov	r7, r0
 8010224:	2101      	movs	r1, #1
 8010226:	4640      	mov	r0, r8
 8010228:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801022c:	f7ff f804 	bl	800f238 <ai_buffer_get_size>
 8010230:	2f00      	cmp	r7, #0
 8010232:	d13e      	bne.n	80102b2 <ai_platform_network_init+0x242>
 8010234:	2800      	cmp	r0, #0
 8010236:	f000 808e 	beq.w	8010356 <ai_platform_network_init+0x2e6>
 801023a:	f1b9 0f00 	cmp.w	r9, #0
 801023e:	f000 8094 	beq.w	801036a <ai_platform_network_init+0x2fa>
 8010242:	f04f 0c01 	mov.w	ip, #1
 8010246:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8010248:	2600      	movs	r6, #0
 801024a:	83e7      	strh	r7, [r4, #30]
 801024c:	4563      	cmp	r3, ip
 801024e:	83a6      	strh	r6, [r4, #28]
 8010250:	d37a      	bcc.n	8010348 <ai_platform_network_init+0x2d8>
 8010252:	f1bc 0f00 	cmp.w	ip, #0
 8010256:	f000 809c 	beq.w	8010392 <ai_platform_network_init+0x322>
 801025a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801025c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8010260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010262:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8010266:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801026a:	e74c      	b.n	8010106 <ai_platform_network_init+0x96>
 801026c:	4a35      	ldr	r2, [pc, #212]	; (8010344 <ai_platform_network_init+0x2d4>)
 801026e:	2301      	movs	r3, #1
 8010270:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010274:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010278:	2b00      	cmp	r3, #0
 801027a:	d1fb      	bne.n	8010274 <ai_platform_network_init+0x204>
 801027c:	492f      	ldr	r1, [pc, #188]	; (801033c <ai_platform_network_init+0x2cc>)
 801027e:	4b30      	ldr	r3, [pc, #192]	; (8010340 <ai_platform_network_init+0x2d0>)
 8010280:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010284:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010288:	429a      	cmp	r2, r3
 801028a:	d09c      	beq.n	80101c6 <ai_platform_network_init+0x156>
 801028c:	e7fe      	b.n	801028c <ai_platform_network_init+0x21c>
 801028e:	4a2d      	ldr	r2, [pc, #180]	; (8010344 <ai_platform_network_init+0x2d4>)
 8010290:	2301      	movs	r3, #1
 8010292:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010296:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801029a:	2b00      	cmp	r3, #0
 801029c:	d1fb      	bne.n	8010296 <ai_platform_network_init+0x226>
 801029e:	4b27      	ldr	r3, [pc, #156]	; (801033c <ai_platform_network_init+0x2cc>)
 80102a0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80102a4:	4b26      	ldr	r3, [pc, #152]	; (8010340 <ai_platform_network_init+0x2d0>)
 80102a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80102aa:	429a      	cmp	r2, r3
 80102ac:	f43f af18 	beq.w	80100e0 <ai_platform_network_init+0x70>
 80102b0:	e7fe      	b.n	80102b0 <ai_platform_network_init+0x240>
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d153      	bne.n	801035e <ai_platform_network_init+0x2ee>
 80102b6:	4680      	mov	r8, r0
 80102b8:	4684      	mov	ip, r0
 80102ba:	2e00      	cmp	r6, #0
 80102bc:	d063      	beq.n	8010386 <ai_platform_network_init+0x316>
 80102be:	8be6      	ldrh	r6, [r4, #30]
 80102c0:	2e00      	cmp	r6, #0
 80102c2:	d168      	bne.n	8010396 <ai_platform_network_init+0x326>
 80102c4:	2212      	movs	r2, #18
 80102c6:	2116      	movs	r1, #22
 80102c8:	f104 0010 	add.w	r0, r4, #16
 80102cc:	f000 fc7a 	bl	8010bc4 <core_set_error>
 80102d0:	e77c      	b.n	80101cc <ai_platform_network_init+0x15c>
 80102d2:	4a19      	ldr	r2, [pc, #100]	; (8010338 <ai_platform_network_init+0x2c8>)
 80102d4:	2301      	movs	r3, #1
 80102d6:	6093      	str	r3, [r2, #8]
 80102d8:	6893      	ldr	r3, [r2, #8]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1fc      	bne.n	80102d8 <ai_platform_network_init+0x268>
 80102de:	4b17      	ldr	r3, [pc, #92]	; (801033c <ai_platform_network_init+0x2cc>)
 80102e0:	6013      	str	r3, [r2, #0]
 80102e2:	4b17      	ldr	r3, [pc, #92]	; (8010340 <ai_platform_network_init+0x2d0>)
 80102e4:	6812      	ldr	r2, [r2, #0]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	f43f aefa 	beq.w	80100e0 <ai_platform_network_init+0x70>
 80102ec:	e7fe      	b.n	80102ec <ai_platform_network_init+0x27c>
 80102ee:	4a12      	ldr	r2, [pc, #72]	; (8010338 <ai_platform_network_init+0x2c8>)
 80102f0:	2301      	movs	r3, #1
 80102f2:	6093      	str	r3, [r2, #8]
 80102f4:	6893      	ldr	r3, [r2, #8]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1fc      	bne.n	80102f4 <ai_platform_network_init+0x284>
 80102fa:	4910      	ldr	r1, [pc, #64]	; (801033c <ai_platform_network_init+0x2cc>)
 80102fc:	4b10      	ldr	r3, [pc, #64]	; (8010340 <ai_platform_network_init+0x2d0>)
 80102fe:	6011      	str	r1, [r2, #0]
 8010300:	6812      	ldr	r2, [r2, #0]
 8010302:	429a      	cmp	r2, r3
 8010304:	f43f af5f 	beq.w	80101c6 <ai_platform_network_init+0x156>
 8010308:	e7fe      	b.n	8010308 <ai_platform_network_init+0x298>
 801030a:	4a0b      	ldr	r2, [pc, #44]	; (8010338 <ai_platform_network_init+0x2c8>)
 801030c:	2301      	movs	r3, #1
 801030e:	6093      	str	r3, [r2, #8]
 8010310:	6893      	ldr	r3, [r2, #8]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1fc      	bne.n	8010310 <ai_platform_network_init+0x2a0>
 8010316:	4b09      	ldr	r3, [pc, #36]	; (801033c <ai_platform_network_init+0x2cc>)
 8010318:	6013      	str	r3, [r2, #0]
 801031a:	4b09      	ldr	r3, [pc, #36]	; (8010340 <ai_platform_network_init+0x2d0>)
 801031c:	6812      	ldr	r2, [r2, #0]
 801031e:	429a      	cmp	r2, r3
 8010320:	f43f aede 	beq.w	80100e0 <ai_platform_network_init+0x70>
 8010324:	e7fe      	b.n	8010324 <ai_platform_network_init+0x2b4>
 8010326:	bf00      	nop
 8010328:	a1c00100 	.word	0xa1c00100
 801032c:	e0042000 	.word	0xe0042000
 8010330:	5c001000 	.word	0x5c001000
 8010334:	a1facade 	.word	0xa1facade
 8010338:	40023000 	.word	0x40023000
 801033c:	f407a5c2 	.word	0xf407a5c2
 8010340:	b5e8b5cd 	.word	0xb5e8b5cd
 8010344:	58024000 	.word	0x58024000
 8010348:	2213      	movs	r2, #19
 801034a:	2116      	movs	r1, #22
 801034c:	f104 0010 	add.w	r0, r4, #16
 8010350:	f000 fc38 	bl	8010bc4 <core_set_error>
 8010354:	e73a      	b.n	80101cc <ai_platform_network_init+0x15c>
 8010356:	4607      	mov	r7, r0
 8010358:	4680      	mov	r8, r0
 801035a:	4684      	mov	ip, r0
 801035c:	e773      	b.n	8010246 <ai_platform_network_init+0x1d6>
 801035e:	f1b9 0f00 	cmp.w	r9, #0
 8010362:	d002      	beq.n	801036a <ai_platform_network_init+0x2fa>
 8010364:	f04f 0c01 	mov.w	ip, #1
 8010368:	e7a7      	b.n	80102ba <ai_platform_network_init+0x24a>
 801036a:	2110      	movs	r1, #16
 801036c:	2213      	movs	r2, #19
 801036e:	2600      	movs	r6, #0
 8010370:	1860      	adds	r0, r4, r1
 8010372:	f000 fc27 	bl	8010bc4 <core_set_error>
 8010376:	e729      	b.n	80101cc <ai_platform_network_init+0x15c>
 8010378:	2110      	movs	r1, #16
 801037a:	2211      	movs	r2, #17
 801037c:	462e      	mov	r6, r5
 801037e:	1860      	adds	r0, r4, r1
 8010380:	f000 fc20 	bl	8010bc4 <core_set_error>
 8010384:	e722      	b.n	80101cc <ai_platform_network_init+0x15c>
 8010386:	2110      	movs	r1, #16
 8010388:	2212      	movs	r2, #18
 801038a:	1860      	adds	r0, r4, r1
 801038c:	f000 fc1a 	bl	8010bc4 <core_set_error>
 8010390:	e71c      	b.n	80101cc <ai_platform_network_init+0x15c>
 8010392:	4666      	mov	r6, ip
 8010394:	e6b7      	b.n	8010106 <ai_platform_network_init+0x96>
 8010396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010398:	6a26      	ldr	r6, [r4, #32]
 801039a:	2701      	movs	r7, #1
 801039c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801039e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80103a2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80103a6:	e74e      	b.n	8010246 <ai_platform_network_init+0x1d6>

080103a8 <ai_platform_network_post_init>:
 80103a8:	b538      	push	{r3, r4, r5, lr}
 80103aa:	2800      	cmp	r0, #0
 80103ac:	d04e      	beq.n	801044c <ai_platform_network_post_init+0xa4>
 80103ae:	4b8c      	ldr	r3, [pc, #560]	; (80105e0 <ai_platform_network_post_init+0x238>)
 80103b0:	4604      	mov	r4, r0
 80103b2:	6802      	ldr	r2, [r0, #0]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d149      	bne.n	801044c <ai_platform_network_post_init+0xa4>
 80103b8:	f7fe ff8c 	bl	800f2d4 <_ai_platform_acquire_crc>
 80103bc:	4b89      	ldr	r3, [pc, #548]	; (80105e4 <ai_platform_network_post_init+0x23c>)
 80103be:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103c8:	189a      	adds	r2, r3, r2
 80103ca:	2a01      	cmp	r2, #1
 80103cc:	f240 8095 	bls.w	80104fa <ai_platform_network_post_init+0x152>
 80103d0:	f240 4249 	movw	r2, #1097	; 0x449
 80103d4:	4293      	cmp	r3, r2
 80103d6:	f000 8090 	beq.w	80104fa <ai_platform_network_post_init+0x152>
 80103da:	4a83      	ldr	r2, [pc, #524]	; (80105e8 <ai_platform_network_post_init+0x240>)
 80103dc:	6813      	ldr	r3, [r2, #0]
 80103de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103e2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80103e6:	f000 8096 	beq.w	8010516 <ai_platform_network_post_init+0x16e>
 80103ea:	6813      	ldr	r3, [r2, #0]
 80103ec:	f240 4183 	movw	r1, #1155	; 0x483
 80103f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103f4:	428b      	cmp	r3, r1
 80103f6:	f000 80b8 	beq.w	801056a <ai_platform_network_post_init+0x1c2>
 80103fa:	6813      	ldr	r3, [r2, #0]
 80103fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010400:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010404:	f000 80de 	beq.w	80105c4 <ai_platform_network_post_init+0x21c>
 8010408:	6813      	ldr	r3, [r2, #0]
 801040a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801040e:	2b00      	cmp	r3, #0
 8010410:	f000 80bd 	beq.w	801058e <ai_platform_network_post_init+0x1e6>
 8010414:	f7fe ff60 	bl	800f2d8 <_ai_platform_release_crc>
 8010418:	68e3      	ldr	r3, [r4, #12]
 801041a:	f013 0502 	ands.w	r5, r3, #2
 801041e:	f000 808c 	beq.w	801053a <ai_platform_network_post_init+0x192>
 8010422:	4620      	mov	r0, r4
 8010424:	f000 fc10 	bl	8010c48 <ai_layers_post_init_all>
 8010428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801042a:	b16b      	cbz	r3, 8010448 <ai_platform_network_post_init+0xa0>
 801042c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801042e:	e007      	b.n	8010440 <ai_platform_network_post_init+0x98>
 8010430:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8010434:	4798      	blx	r3
 8010436:	692b      	ldr	r3, [r5, #16]
 8010438:	b133      	cbz	r3, 8010448 <ai_platform_network_post_init+0xa0>
 801043a:	42ab      	cmp	r3, r5
 801043c:	461d      	mov	r5, r3
 801043e:	d003      	beq.n	8010448 <ai_platform_network_post_init+0xa0>
 8010440:	4629      	mov	r1, r5
 8010442:	2000      	movs	r0, #0
 8010444:	2d00      	cmp	r5, #0
 8010446:	d1f3      	bne.n	8010430 <ai_platform_network_post_init+0x88>
 8010448:	2001      	movs	r0, #1
 801044a:	bd38      	pop	{r3, r4, r5, pc}
 801044c:	f7fe ff42 	bl	800f2d4 <_ai_platform_acquire_crc>
 8010450:	4b64      	ldr	r3, [pc, #400]	; (80105e4 <ai_platform_network_post_init+0x23c>)
 8010452:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801045c:	185a      	adds	r2, r3, r1
 801045e:	2a01      	cmp	r2, #1
 8010460:	d92a      	bls.n	80104b8 <ai_platform_network_post_init+0x110>
 8010462:	f240 4249 	movw	r2, #1097	; 0x449
 8010466:	4293      	cmp	r3, r2
 8010468:	d026      	beq.n	80104b8 <ai_platform_network_post_init+0x110>
 801046a:	4a5f      	ldr	r2, [pc, #380]	; (80105e8 <ai_platform_network_post_init+0x240>)
 801046c:	6813      	ldr	r3, [r2, #0]
 801046e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010472:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010476:	d02c      	beq.n	80104d2 <ai_platform_network_post_init+0x12a>
 8010478:	6813      	ldr	r3, [r2, #0]
 801047a:	f240 4183 	movw	r1, #1155	; 0x483
 801047e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010482:	428b      	cmp	r3, r1
 8010484:	d060      	beq.n	8010548 <ai_platform_network_post_init+0x1a0>
 8010486:	6813      	ldr	r3, [r2, #0]
 8010488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801048c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010490:	f000 808b 	beq.w	80105aa <ai_platform_network_post_init+0x202>
 8010494:	6813      	ldr	r3, [r2, #0]
 8010496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801049a:	2b00      	cmp	r3, #0
 801049c:	d129      	bne.n	80104f2 <ai_platform_network_post_init+0x14a>
 801049e:	4a53      	ldr	r2, [pc, #332]	; (80105ec <ai_platform_network_post_init+0x244>)
 80104a0:	2301      	movs	r3, #1
 80104a2:	6093      	str	r3, [r2, #8]
 80104a4:	6893      	ldr	r3, [r2, #8]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1fc      	bne.n	80104a4 <ai_platform_network_post_init+0xfc>
 80104aa:	4951      	ldr	r1, [pc, #324]	; (80105f0 <ai_platform_network_post_init+0x248>)
 80104ac:	4b51      	ldr	r3, [pc, #324]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 80104ae:	6011      	str	r1, [r2, #0]
 80104b0:	6812      	ldr	r2, [r2, #0]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d01d      	beq.n	80104f2 <ai_platform_network_post_init+0x14a>
 80104b6:	e7fe      	b.n	80104b6 <ai_platform_network_post_init+0x10e>
 80104b8:	4a4c      	ldr	r2, [pc, #304]	; (80105ec <ai_platform_network_post_init+0x244>)
 80104ba:	2301      	movs	r3, #1
 80104bc:	6093      	str	r3, [r2, #8]
 80104be:	6893      	ldr	r3, [r2, #8]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d1fc      	bne.n	80104be <ai_platform_network_post_init+0x116>
 80104c4:	494a      	ldr	r1, [pc, #296]	; (80105f0 <ai_platform_network_post_init+0x248>)
 80104c6:	4b4b      	ldr	r3, [pc, #300]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 80104c8:	6011      	str	r1, [r2, #0]
 80104ca:	6812      	ldr	r2, [r2, #0]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d010      	beq.n	80104f2 <ai_platform_network_post_init+0x14a>
 80104d0:	e7fe      	b.n	80104d0 <ai_platform_network_post_init+0x128>
 80104d2:	4a49      	ldr	r2, [pc, #292]	; (80105f8 <ai_platform_network_post_init+0x250>)
 80104d4:	2301      	movs	r3, #1
 80104d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80104da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1fb      	bne.n	80104da <ai_platform_network_post_init+0x132>
 80104e2:	4943      	ldr	r1, [pc, #268]	; (80105f0 <ai_platform_network_post_init+0x248>)
 80104e4:	4b43      	ldr	r3, [pc, #268]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 80104e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80104ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d110      	bne.n	8010514 <ai_platform_network_post_init+0x16c>
 80104f2:	f7fe fef1 	bl	800f2d8 <_ai_platform_release_crc>
 80104f6:	2000      	movs	r0, #0
 80104f8:	bd38      	pop	{r3, r4, r5, pc}
 80104fa:	4a3c      	ldr	r2, [pc, #240]	; (80105ec <ai_platform_network_post_init+0x244>)
 80104fc:	2301      	movs	r3, #1
 80104fe:	6093      	str	r3, [r2, #8]
 8010500:	6893      	ldr	r3, [r2, #8]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1fc      	bne.n	8010500 <ai_platform_network_post_init+0x158>
 8010506:	493a      	ldr	r1, [pc, #232]	; (80105f0 <ai_platform_network_post_init+0x248>)
 8010508:	4b3a      	ldr	r3, [pc, #232]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 801050a:	6011      	str	r1, [r2, #0]
 801050c:	6812      	ldr	r2, [r2, #0]
 801050e:	429a      	cmp	r2, r3
 8010510:	d080      	beq.n	8010414 <ai_platform_network_post_init+0x6c>
 8010512:	e7fe      	b.n	8010512 <ai_platform_network_post_init+0x16a>
 8010514:	e7fe      	b.n	8010514 <ai_platform_network_post_init+0x16c>
 8010516:	4a38      	ldr	r2, [pc, #224]	; (80105f8 <ai_platform_network_post_init+0x250>)
 8010518:	2301      	movs	r3, #1
 801051a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801051e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1fb      	bne.n	801051e <ai_platform_network_post_init+0x176>
 8010526:	4932      	ldr	r1, [pc, #200]	; (80105f0 <ai_platform_network_post_init+0x248>)
 8010528:	4b32      	ldr	r3, [pc, #200]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 801052a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801052e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010532:	429a      	cmp	r2, r3
 8010534:	f43f af6e 	beq.w	8010414 <ai_platform_network_post_init+0x6c>
 8010538:	e7fe      	b.n	8010538 <ai_platform_network_post_init+0x190>
 801053a:	2210      	movs	r2, #16
 801053c:	2111      	movs	r1, #17
 801053e:	18a0      	adds	r0, r4, r2
 8010540:	f000 fb40 	bl	8010bc4 <core_set_error>
 8010544:	4628      	mov	r0, r5
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	4a2b      	ldr	r2, [pc, #172]	; (80105f8 <ai_platform_network_post_init+0x250>)
 801054a:	2301      	movs	r3, #1
 801054c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010550:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010554:	2b00      	cmp	r3, #0
 8010556:	d1fb      	bne.n	8010550 <ai_platform_network_post_init+0x1a8>
 8010558:	4925      	ldr	r1, [pc, #148]	; (80105f0 <ai_platform_network_post_init+0x248>)
 801055a:	4b26      	ldr	r3, [pc, #152]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 801055c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010560:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010564:	429a      	cmp	r2, r3
 8010566:	d0c4      	beq.n	80104f2 <ai_platform_network_post_init+0x14a>
 8010568:	e7fe      	b.n	8010568 <ai_platform_network_post_init+0x1c0>
 801056a:	4a23      	ldr	r2, [pc, #140]	; (80105f8 <ai_platform_network_post_init+0x250>)
 801056c:	2301      	movs	r3, #1
 801056e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010572:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1fb      	bne.n	8010572 <ai_platform_network_post_init+0x1ca>
 801057a:	491d      	ldr	r1, [pc, #116]	; (80105f0 <ai_platform_network_post_init+0x248>)
 801057c:	4b1d      	ldr	r3, [pc, #116]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 801057e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010582:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010586:	429a      	cmp	r2, r3
 8010588:	f43f af44 	beq.w	8010414 <ai_platform_network_post_init+0x6c>
 801058c:	e7fe      	b.n	801058c <ai_platform_network_post_init+0x1e4>
 801058e:	4a17      	ldr	r2, [pc, #92]	; (80105ec <ai_platform_network_post_init+0x244>)
 8010590:	2301      	movs	r3, #1
 8010592:	6093      	str	r3, [r2, #8]
 8010594:	6893      	ldr	r3, [r2, #8]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d1fc      	bne.n	8010594 <ai_platform_network_post_init+0x1ec>
 801059a:	4915      	ldr	r1, [pc, #84]	; (80105f0 <ai_platform_network_post_init+0x248>)
 801059c:	4b15      	ldr	r3, [pc, #84]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 801059e:	6011      	str	r1, [r2, #0]
 80105a0:	6812      	ldr	r2, [r2, #0]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	f43f af36 	beq.w	8010414 <ai_platform_network_post_init+0x6c>
 80105a8:	e7fe      	b.n	80105a8 <ai_platform_network_post_init+0x200>
 80105aa:	4a10      	ldr	r2, [pc, #64]	; (80105ec <ai_platform_network_post_init+0x244>)
 80105ac:	2301      	movs	r3, #1
 80105ae:	6093      	str	r3, [r2, #8]
 80105b0:	6893      	ldr	r3, [r2, #8]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1fc      	bne.n	80105b0 <ai_platform_network_post_init+0x208>
 80105b6:	490e      	ldr	r1, [pc, #56]	; (80105f0 <ai_platform_network_post_init+0x248>)
 80105b8:	4b0e      	ldr	r3, [pc, #56]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 80105ba:	6011      	str	r1, [r2, #0]
 80105bc:	6812      	ldr	r2, [r2, #0]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d097      	beq.n	80104f2 <ai_platform_network_post_init+0x14a>
 80105c2:	e7fe      	b.n	80105c2 <ai_platform_network_post_init+0x21a>
 80105c4:	4a09      	ldr	r2, [pc, #36]	; (80105ec <ai_platform_network_post_init+0x244>)
 80105c6:	2301      	movs	r3, #1
 80105c8:	6093      	str	r3, [r2, #8]
 80105ca:	6893      	ldr	r3, [r2, #8]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1fc      	bne.n	80105ca <ai_platform_network_post_init+0x222>
 80105d0:	4907      	ldr	r1, [pc, #28]	; (80105f0 <ai_platform_network_post_init+0x248>)
 80105d2:	4b08      	ldr	r3, [pc, #32]	; (80105f4 <ai_platform_network_post_init+0x24c>)
 80105d4:	6011      	str	r1, [r2, #0]
 80105d6:	6812      	ldr	r2, [r2, #0]
 80105d8:	429a      	cmp	r2, r3
 80105da:	f43f af1b 	beq.w	8010414 <ai_platform_network_post_init+0x6c>
 80105de:	e7fe      	b.n	80105de <ai_platform_network_post_init+0x236>
 80105e0:	a1c00100 	.word	0xa1c00100
 80105e4:	e0042000 	.word	0xe0042000
 80105e8:	5c001000 	.word	0x5c001000
 80105ec:	40023000 	.word	0x40023000
 80105f0:	f407a5c2 	.word	0xf407a5c2
 80105f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80105f8:	58024000 	.word	0x58024000

080105fc <ai_platform_network_process>:
 80105fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010600:	b085      	sub	sp, #20
 8010602:	460e      	mov	r6, r1
 8010604:	4605      	mov	r5, r0
 8010606:	9201      	str	r2, [sp, #4]
 8010608:	b120      	cbz	r0, 8010614 <ai_platform_network_process+0x18>
 801060a:	4b24      	ldr	r3, [pc, #144]	; (801069c <ai_platform_network_process+0xa0>)
 801060c:	6802      	ldr	r2, [r0, #0]
 801060e:	429a      	cmp	r2, r3
 8010610:	bf18      	it	ne
 8010612:	2500      	movne	r5, #0
 8010614:	f7fe fe5e 	bl	800f2d4 <_ai_platform_acquire_crc>
 8010618:	4b21      	ldr	r3, [pc, #132]	; (80106a0 <ai_platform_network_process+0xa4>)
 801061a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010624:	185a      	adds	r2, r3, r1
 8010626:	2a01      	cmp	r2, #1
 8010628:	d92b      	bls.n	8010682 <ai_platform_network_process+0x86>
 801062a:	f240 4249 	movw	r2, #1097	; 0x449
 801062e:	4293      	cmp	r3, r2
 8010630:	d027      	beq.n	8010682 <ai_platform_network_process+0x86>
 8010632:	4a1c      	ldr	r2, [pc, #112]	; (80106a4 <ai_platform_network_process+0xa8>)
 8010634:	6813      	ldr	r3, [r2, #0]
 8010636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801063a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801063e:	d039      	beq.n	80106b4 <ai_platform_network_process+0xb8>
 8010640:	6813      	ldr	r3, [r2, #0]
 8010642:	f240 4183 	movw	r1, #1155	; 0x483
 8010646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801064a:	428b      	cmp	r3, r1
 801064c:	f000 819c 	beq.w	8010988 <ai_platform_network_process+0x38c>
 8010650:	6813      	ldr	r3, [r2, #0]
 8010652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010656:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801065a:	f000 8179 	beq.w	8010950 <ai_platform_network_process+0x354>
 801065e:	6813      	ldr	r3, [r2, #0]
 8010660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010664:	2b00      	cmp	r3, #0
 8010666:	d136      	bne.n	80106d6 <ai_platform_network_process+0xda>
 8010668:	4a0f      	ldr	r2, [pc, #60]	; (80106a8 <ai_platform_network_process+0xac>)
 801066a:	2301      	movs	r3, #1
 801066c:	6093      	str	r3, [r2, #8]
 801066e:	6893      	ldr	r3, [r2, #8]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1fc      	bne.n	801066e <ai_platform_network_process+0x72>
 8010674:	4b0d      	ldr	r3, [pc, #52]	; (80106ac <ai_platform_network_process+0xb0>)
 8010676:	6013      	str	r3, [r2, #0]
 8010678:	4b0d      	ldr	r3, [pc, #52]	; (80106b0 <ai_platform_network_process+0xb4>)
 801067a:	6812      	ldr	r2, [r2, #0]
 801067c:	429a      	cmp	r2, r3
 801067e:	d02a      	beq.n	80106d6 <ai_platform_network_process+0xda>
 8010680:	e7fe      	b.n	8010680 <ai_platform_network_process+0x84>
 8010682:	4a09      	ldr	r2, [pc, #36]	; (80106a8 <ai_platform_network_process+0xac>)
 8010684:	2301      	movs	r3, #1
 8010686:	6093      	str	r3, [r2, #8]
 8010688:	6893      	ldr	r3, [r2, #8]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d1fc      	bne.n	8010688 <ai_platform_network_process+0x8c>
 801068e:	4b07      	ldr	r3, [pc, #28]	; (80106ac <ai_platform_network_process+0xb0>)
 8010690:	6013      	str	r3, [r2, #0]
 8010692:	4b07      	ldr	r3, [pc, #28]	; (80106b0 <ai_platform_network_process+0xb4>)
 8010694:	6812      	ldr	r2, [r2, #0]
 8010696:	429a      	cmp	r2, r3
 8010698:	d01d      	beq.n	80106d6 <ai_platform_network_process+0xda>
 801069a:	e7fe      	b.n	801069a <ai_platform_network_process+0x9e>
 801069c:	a1c00100 	.word	0xa1c00100
 80106a0:	e0042000 	.word	0xe0042000
 80106a4:	5c001000 	.word	0x5c001000
 80106a8:	40023000 	.word	0x40023000
 80106ac:	f407a5c2 	.word	0xf407a5c2
 80106b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80106b4:	4ab0      	ldr	r2, [pc, #704]	; (8010978 <ai_platform_network_process+0x37c>)
 80106b6:	2301      	movs	r3, #1
 80106b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80106bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d1fb      	bne.n	80106bc <ai_platform_network_process+0xc0>
 80106c4:	4bad      	ldr	r3, [pc, #692]	; (801097c <ai_platform_network_process+0x380>)
 80106c6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80106ca:	4bad      	ldr	r3, [pc, #692]	; (8010980 <ai_platform_network_process+0x384>)
 80106cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80106d0:	429a      	cmp	r2, r3
 80106d2:	f040 812b 	bne.w	801092c <ai_platform_network_process+0x330>
 80106d6:	f7fe fdff 	bl	800f2d8 <_ai_platform_release_crc>
 80106da:	2d00      	cmp	r5, #0
 80106dc:	f000 8172 	beq.w	80109c4 <ai_platform_network_process+0x3c8>
 80106e0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	f000 8123 	beq.w	801092e <ai_platform_network_process+0x332>
 80106e8:	68eb      	ldr	r3, [r5, #12]
 80106ea:	2200      	movs	r2, #0
 80106ec:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80106f0:	f003 0303 	and.w	r3, r3, #3
 80106f4:	616a      	str	r2, [r5, #20]
 80106f6:	2b03      	cmp	r3, #3
 80106f8:	f040 811f 	bne.w	801093a <ai_platform_network_process+0x33e>
 80106fc:	2e00      	cmp	r6, #0
 80106fe:	f000 8156 	beq.w	80109ae <ai_platform_network_process+0x3b2>
 8010702:	fab8 f788 	clz	r7, r8
 8010706:	097f      	lsrs	r7, r7, #5
 8010708:	f1b8 0f00 	cmp.w	r8, #0
 801070c:	f000 814f 	beq.w	80109ae <ai_platform_network_process+0x3b2>
 8010710:	f8b8 3000 	ldrh.w	r3, [r8]
 8010714:	2b00      	cmp	r3, #0
 8010716:	f000 814a 	beq.w	80109ae <ai_platform_network_process+0x3b2>
 801071a:	69b3      	ldr	r3, [r6, #24]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8010722:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d072      	beq.n	8010810 <ai_platform_network_process+0x214>
 801072a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801072e:	2c00      	cmp	r4, #0
 8010730:	d06e      	beq.n	8010810 <ai_platform_network_process+0x214>
 8010732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010736:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801073a:	f8d3 a000 	ldr.w	sl, [r3]
 801073e:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8010742:	f000 8133 	beq.w	80109ac <ai_platform_network_process+0x3b0>
 8010746:	69a3      	ldr	r3, [r4, #24]
 8010748:	2101      	movs	r1, #1
 801074a:	4630      	mov	r0, r6
 801074c:	685d      	ldr	r5, [r3, #4]
 801074e:	f7fe fd73 	bl	800f238 <ai_buffer_get_size>
 8010752:	4285      	cmp	r5, r0
 8010754:	f0c0 8138 	bcc.w	80109c8 <ai_platform_network_process+0x3cc>
 8010758:	68e0      	ldr	r0, [r4, #12]
 801075a:	69b1      	ldr	r1, [r6, #24]
 801075c:	68c2      	ldr	r2, [r0, #12]
 801075e:	68cb      	ldr	r3, [r1, #12]
 8010760:	429a      	cmp	r2, r3
 8010762:	f040 8131 	bne.w	80109c8 <ai_platform_network_process+0x3cc>
 8010766:	6882      	ldr	r2, [r0, #8]
 8010768:	688b      	ldr	r3, [r1, #8]
 801076a:	429a      	cmp	r2, r3
 801076c:	f040 812c 	bne.w	80109c8 <ai_platform_network_process+0x3cc>
 8010770:	6842      	ldr	r2, [r0, #4]
 8010772:	684b      	ldr	r3, [r1, #4]
 8010774:	429a      	cmp	r2, r3
 8010776:	f040 8127 	bne.w	80109c8 <ai_platform_network_process+0x3cc>
 801077a:	69a3      	ldr	r3, [r4, #24]
 801077c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010780:	f001 fde4 	bl	801234c <ai_array_get_data_byte_size>
 8010784:	4605      	mov	r5, r0
 8010786:	4620      	mov	r0, r4
 8010788:	f001 fdf6 	bl	8012378 <get_tensor_byte_size>
 801078c:	4285      	cmp	r5, r0
 801078e:	f0c0 811b 	bcc.w	80109c8 <ai_platform_network_process+0x3cc>
 8010792:	69a3      	ldr	r3, [r4, #24]
 8010794:	6818      	ldr	r0, [r3, #0]
 8010796:	f001 fd45 	bl	8012224 <ai_array_to_buffer_fmt>
 801079a:	6833      	ldr	r3, [r6, #0]
 801079c:	4058      	eors	r0, r3
 801079e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80107a2:	f040 81c8 	bne.w	8010b36 <ai_platform_network_process+0x53a>
 80107a6:	6873      	ldr	r3, [r6, #4]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	f000 81bb 	beq.w	8010b24 <ai_platform_network_process+0x528>
 80107ae:	69b3      	ldr	r3, [r6, #24]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f000 81c8 	beq.w	8010b48 <ai_platform_network_process+0x54c>
 80107b8:	9a02      	ldr	r2, [sp, #8]
 80107ba:	4620      	mov	r0, r4
 80107bc:	3701      	adds	r7, #1
 80107be:	361c      	adds	r6, #28
 80107c0:	429a      	cmp	r2, r3
 80107c2:	bf38      	it	cc
 80107c4:	461a      	movcc	r2, r3
 80107c6:	9202      	str	r2, [sp, #8]
 80107c8:	f001 fdd6 	bl	8012378 <get_tensor_byte_size>
 80107cc:	f8c9 0008 	str.w	r0, [r9, #8]
 80107d0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	fb00 f303 	mul.w	r3, r0, r3
 80107da:	f8c9 300c 	str.w	r3, [r9, #12]
 80107de:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80107e2:	440b      	add	r3, r1
 80107e4:	f8c9 1004 	str.w	r1, [r9, #4]
 80107e8:	f84a 300b 	str.w	r3, [sl, fp]
 80107ec:	69a0      	ldr	r0, [r4, #24]
 80107ee:	6803      	ldr	r3, [r0, #0]
 80107f0:	009a      	lsls	r2, r3, #2
 80107f2:	f100 80bb 	bmi.w	801096c <ai_platform_network_process+0x370>
 80107f6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80107fa:	1a9b      	subs	r3, r3, r2
 80107fc:	4419      	add	r1, r3
 80107fe:	6081      	str	r1, [r0, #8]
 8010800:	69a3      	ldr	r3, [r4, #24]
 8010802:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010806:	60da      	str	r2, [r3, #12]
 8010808:	f8b8 3000 	ldrh.w	r3, [r8]
 801080c:	42bb      	cmp	r3, r7
 801080e:	d888      	bhi.n	8010722 <ai_platform_network_process+0x126>
 8010810:	9d03      	ldr	r5, [sp, #12]
 8010812:	9b01      	ldr	r3, [sp, #4]
 8010814:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8010816:	2b00      	cmp	r3, #0
 8010818:	f000 819f 	beq.w	8010b5a <ai_platform_network_process+0x55e>
 801081c:	2a01      	cmp	r2, #1
 801081e:	f240 8179 	bls.w	8010b14 <ai_platform_network_process+0x518>
 8010822:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8010826:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801082a:	2b00      	cmp	r3, #0
 801082c:	f000 8172 	beq.w	8010b14 <ai_platform_network_process+0x518>
 8010830:	9e01      	ldr	r6, [sp, #4]
 8010832:	2700      	movs	r7, #0
 8010834:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010838:	2b00      	cmp	r3, #0
 801083a:	f000 80d3 	beq.w	80109e4 <ai_platform_network_process+0x3e8>
 801083e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010842:	2c00      	cmp	r4, #0
 8010844:	f000 80ce 	beq.w	80109e4 <ai_platform_network_process+0x3e8>
 8010848:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801084c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010850:	f8d3 8000 	ldr.w	r8, [r3]
 8010854:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8010858:	f000 819d 	beq.w	8010b96 <ai_platform_network_process+0x59a>
 801085c:	69a3      	ldr	r3, [r4, #24]
 801085e:	2101      	movs	r1, #1
 8010860:	4630      	mov	r0, r6
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	9301      	str	r3, [sp, #4]
 8010866:	f7fe fce7 	bl	800f238 <ai_buffer_get_size>
 801086a:	9b01      	ldr	r3, [sp, #4]
 801086c:	4283      	cmp	r3, r0
 801086e:	f0c0 8151 	bcc.w	8010b14 <ai_platform_network_process+0x518>
 8010872:	68e0      	ldr	r0, [r4, #12]
 8010874:	69b1      	ldr	r1, [r6, #24]
 8010876:	68c2      	ldr	r2, [r0, #12]
 8010878:	68cb      	ldr	r3, [r1, #12]
 801087a:	429a      	cmp	r2, r3
 801087c:	f040 814a 	bne.w	8010b14 <ai_platform_network_process+0x518>
 8010880:	6882      	ldr	r2, [r0, #8]
 8010882:	688b      	ldr	r3, [r1, #8]
 8010884:	429a      	cmp	r2, r3
 8010886:	f040 8145 	bne.w	8010b14 <ai_platform_network_process+0x518>
 801088a:	6842      	ldr	r2, [r0, #4]
 801088c:	684b      	ldr	r3, [r1, #4]
 801088e:	429a      	cmp	r2, r3
 8010890:	f040 8140 	bne.w	8010b14 <ai_platform_network_process+0x518>
 8010894:	69a3      	ldr	r3, [r4, #24]
 8010896:	e9d3 0100 	ldrd	r0, r1, [r3]
 801089a:	f001 fd57 	bl	801234c <ai_array_get_data_byte_size>
 801089e:	9001      	str	r0, [sp, #4]
 80108a0:	4620      	mov	r0, r4
 80108a2:	f001 fd69 	bl	8012378 <get_tensor_byte_size>
 80108a6:	9b01      	ldr	r3, [sp, #4]
 80108a8:	4283      	cmp	r3, r0
 80108aa:	f0c0 8133 	bcc.w	8010b14 <ai_platform_network_process+0x518>
 80108ae:	69a3      	ldr	r3, [r4, #24]
 80108b0:	6818      	ldr	r0, [r3, #0]
 80108b2:	f001 fcb7 	bl	8012224 <ai_array_to_buffer_fmt>
 80108b6:	6833      	ldr	r3, [r6, #0]
 80108b8:	4058      	eors	r0, r3
 80108ba:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80108be:	f040 815a 	bne.w	8010b76 <ai_platform_network_process+0x57a>
 80108c2:	6873      	ldr	r3, [r6, #4]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f000 814e 	beq.w	8010b66 <ai_platform_network_process+0x56a>
 80108ca:	69b3      	ldr	r3, [r6, #24]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f000 8159 	beq.w	8010b86 <ai_platform_network_process+0x58a>
 80108d4:	9a02      	ldr	r2, [sp, #8]
 80108d6:	4620      	mov	r0, r4
 80108d8:	3701      	adds	r7, #1
 80108da:	361c      	adds	r6, #28
 80108dc:	429a      	cmp	r2, r3
 80108de:	bf38      	it	cc
 80108e0:	461a      	movcc	r2, r3
 80108e2:	9202      	str	r2, [sp, #8]
 80108e4:	f001 fd48 	bl	8012378 <get_tensor_byte_size>
 80108e8:	f8ca 0008 	str.w	r0, [sl, #8]
 80108ec:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	fb00 f303 	mul.w	r3, r0, r3
 80108f6:	f8ca 300c 	str.w	r3, [sl, #12]
 80108fa:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80108fe:	440b      	add	r3, r1
 8010900:	f8ca 1004 	str.w	r1, [sl, #4]
 8010904:	f848 300b 	str.w	r3, [r8, fp]
 8010908:	69a0      	ldr	r0, [r4, #24]
 801090a:	6803      	ldr	r3, [r0, #0]
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	d464      	bmi.n	80109da <ai_platform_network_process+0x3de>
 8010910:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010914:	1a9b      	subs	r3, r3, r2
 8010916:	4419      	add	r1, r3
 8010918:	6081      	str	r1, [r0, #8]
 801091a:	69a3      	ldr	r3, [r4, #24]
 801091c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010920:	60da      	str	r2, [r3, #12]
 8010922:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010926:	429f      	cmp	r7, r3
 8010928:	d384      	bcc.n	8010834 <ai_platform_network_process+0x238>
 801092a:	e05b      	b.n	80109e4 <ai_platform_network_process+0x3e8>
 801092c:	e7fe      	b.n	801092c <ai_platform_network_process+0x330>
 801092e:	68ea      	ldr	r2, [r5, #12]
 8010930:	616b      	str	r3, [r5, #20]
 8010932:	f002 0203 	and.w	r2, r2, #3
 8010936:	2a03      	cmp	r2, #3
 8010938:	d039      	beq.n	80109ae <ai_platform_network_process+0x3b2>
 801093a:	2230      	movs	r2, #48	; 0x30
 801093c:	2111      	movs	r1, #17
 801093e:	f105 0010 	add.w	r0, r5, #16
 8010942:	2400      	movs	r4, #0
 8010944:	f000 f93e 	bl	8010bc4 <core_set_error>
 8010948:	4620      	mov	r0, r4
 801094a:	b005      	add	sp, #20
 801094c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010950:	4a0c      	ldr	r2, [pc, #48]	; (8010984 <ai_platform_network_process+0x388>)
 8010952:	2301      	movs	r3, #1
 8010954:	6093      	str	r3, [r2, #8]
 8010956:	6893      	ldr	r3, [r2, #8]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d1fc      	bne.n	8010956 <ai_platform_network_process+0x35a>
 801095c:	4b07      	ldr	r3, [pc, #28]	; (801097c <ai_platform_network_process+0x380>)
 801095e:	6013      	str	r3, [r2, #0]
 8010960:	4b07      	ldr	r3, [pc, #28]	; (8010980 <ai_platform_network_process+0x384>)
 8010962:	6812      	ldr	r2, [r2, #0]
 8010964:	429a      	cmp	r2, r3
 8010966:	f43f aeb6 	beq.w	80106d6 <ai_platform_network_process+0xda>
 801096a:	e7fe      	b.n	801096a <ai_platform_network_process+0x36e>
 801096c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010970:	429f      	cmp	r7, r3
 8010972:	f4ff aed6 	bcc.w	8010722 <ai_platform_network_process+0x126>
 8010976:	e74b      	b.n	8010810 <ai_platform_network_process+0x214>
 8010978:	58024000 	.word	0x58024000
 801097c:	f407a5c2 	.word	0xf407a5c2
 8010980:	b5e8b5cd 	.word	0xb5e8b5cd
 8010984:	40023000 	.word	0x40023000
 8010988:	4a87      	ldr	r2, [pc, #540]	; (8010ba8 <ai_platform_network_process+0x5ac>)
 801098a:	2301      	movs	r3, #1
 801098c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010990:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010994:	2b00      	cmp	r3, #0
 8010996:	d1fb      	bne.n	8010990 <ai_platform_network_process+0x394>
 8010998:	4b84      	ldr	r3, [pc, #528]	; (8010bac <ai_platform_network_process+0x5b0>)
 801099a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801099e:	4b84      	ldr	r3, [pc, #528]	; (8010bb0 <ai_platform_network_process+0x5b4>)
 80109a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80109a4:	429a      	cmp	r2, r3
 80109a6:	f43f ae96 	beq.w	80106d6 <ai_platform_network_process+0xda>
 80109aa:	e7fe      	b.n	80109aa <ai_platform_network_process+0x3ae>
 80109ac:	9d03      	ldr	r5, [sp, #12]
 80109ae:	2400      	movs	r4, #0
 80109b0:	2217      	movs	r2, #23
 80109b2:	2112      	movs	r1, #18
 80109b4:	f105 0010 	add.w	r0, r5, #16
 80109b8:	f000 f904 	bl	8010bc4 <core_set_error>
 80109bc:	4620      	mov	r0, r4
 80109be:	b005      	add	sp, #20
 80109c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c4:	462c      	mov	r4, r5
 80109c6:	e7bf      	b.n	8010948 <ai_platform_network_process+0x34c>
 80109c8:	9d03      	ldr	r5, [sp, #12]
 80109ca:	2218      	movs	r2, #24
 80109cc:	2112      	movs	r1, #18
 80109ce:	2400      	movs	r4, #0
 80109d0:	f105 0010 	add.w	r0, r5, #16
 80109d4:	f000 f8f6 	bl	8010bc4 <core_set_error>
 80109d8:	e7b6      	b.n	8010948 <ai_platform_network_process+0x34c>
 80109da:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80109de:	429f      	cmp	r7, r3
 80109e0:	f4ff af28 	bcc.w	8010834 <ai_platform_network_process+0x238>
 80109e4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80109e8:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80109ea:	82ab      	strh	r3, [r5, #20]
 80109ec:	2a00      	cmp	r2, #0
 80109ee:	f040 808b 	bne.w	8010b08 <ai_platform_network_process+0x50c>
 80109f2:	4616      	mov	r6, r2
 80109f4:	4617      	mov	r7, r2
 80109f6:	8aec      	ldrh	r4, [r5, #22]
 80109f8:	429c      	cmp	r4, r3
 80109fa:	d2a5      	bcs.n	8010948 <ai_platform_network_process+0x34c>
 80109fc:	46ab      	mov	fp, r5
 80109fe:	2e00      	cmp	r6, #0
 8010a00:	d030      	beq.n	8010a64 <ai_platform_network_process+0x468>
 8010a02:	f04f 0800 	mov.w	r8, #0
 8010a06:	e014      	b.n	8010a32 <ai_platform_network_process+0x436>
 8010a08:	6882      	ldr	r2, [r0, #8]
 8010a0a:	68c5      	ldr	r5, [r0, #12]
 8010a0c:	6863      	ldr	r3, [r4, #4]
 8010a0e:	1b52      	subs	r2, r2, r5
 8010a10:	4413      	add	r3, r2
 8010a12:	6083      	str	r3, [r0, #8]
 8010a14:	698b      	ldr	r3, [r1, #24]
 8010a16:	6862      	ldr	r2, [r4, #4]
 8010a18:	60da      	str	r2, [r3, #12]
 8010a1a:	f859 200a 	ldr.w	r2, [r9, sl]
 8010a1e:	f108 0801 	add.w	r8, r8, #1
 8010a22:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8010a26:	440b      	add	r3, r1
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d301      	bcc.n	8010a30 <ai_platform_network_process+0x434>
 8010a2c:	68e3      	ldr	r3, [r4, #12]
 8010a2e:	1ad3      	subs	r3, r2, r3
 8010a30:	6063      	str	r3, [r4, #4]
 8010a32:	8833      	ldrh	r3, [r6, #0]
 8010a34:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8010a38:	4543      	cmp	r3, r8
 8010a3a:	d913      	bls.n	8010a64 <ai_platform_network_process+0x468>
 8010a3c:	6873      	ldr	r3, [r6, #4]
 8010a3e:	b18b      	cbz	r3, 8010a64 <ai_platform_network_process+0x468>
 8010a40:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8010a44:	b171      	cbz	r1, 8010a64 <ai_platform_network_process+0x468>
 8010a46:	6988      	ldr	r0, [r1, #24]
 8010a48:	68b2      	ldr	r2, [r6, #8]
 8010a4a:	6803      	ldr	r3, [r0, #0]
 8010a4c:	f8d2 9000 	ldr.w	r9, [r2]
 8010a50:	009d      	lsls	r5, r3, #2
 8010a52:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8010a56:	d5d7      	bpl.n	8010a08 <ai_platform_network_process+0x40c>
 8010a58:	6881      	ldr	r1, [r0, #8]
 8010a5a:	68a2      	ldr	r2, [r4, #8]
 8010a5c:	6860      	ldr	r0, [r4, #4]
 8010a5e:	f001 fb59 	bl	8012114 <st_int8_copy>
 8010a62:	e7da      	b.n	8010a1a <ai_platform_network_process+0x41e>
 8010a64:	4658      	mov	r0, fp
 8010a66:	f000 f903 	bl	8010c70 <ai_layers_forward_all>
 8010a6a:	2f00      	cmp	r7, #0
 8010a6c:	d03d      	beq.n	8010aea <ai_platform_network_process+0x4ee>
 8010a6e:	2400      	movs	r4, #0
 8010a70:	e016      	b.n	8010aa0 <ai_platform_network_process+0x4a4>
 8010a72:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8010a76:	f859 100a 	ldr.w	r1, [r9, sl]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	428b      	cmp	r3, r1
 8010a7e:	d302      	bcc.n	8010a86 <ai_platform_network_process+0x48a>
 8010a80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a84:	1acb      	subs	r3, r1, r3
 8010a86:	f8c8 3004 	str.w	r3, [r8, #4]
 8010a8a:	6981      	ldr	r1, [r0, #24]
 8010a8c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8010a90:	1b52      	subs	r2, r2, r5
 8010a92:	4413      	add	r3, r2
 8010a94:	608b      	str	r3, [r1, #8]
 8010a96:	6983      	ldr	r3, [r0, #24]
 8010a98:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010a9c:	60da      	str	r2, [r3, #12]
 8010a9e:	3401      	adds	r4, #1
 8010aa0:	883b      	ldrh	r3, [r7, #0]
 8010aa2:	42a3      	cmp	r3, r4
 8010aa4:	d921      	bls.n	8010aea <ai_platform_network_process+0x4ee>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	b1fb      	cbz	r3, 8010aea <ai_platform_network_process+0x4ee>
 8010aaa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010aae:	b1e0      	cbz	r0, 8010aea <ai_platform_network_process+0x4ee>
 8010ab0:	68ba      	ldr	r2, [r7, #8]
 8010ab2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8010ab6:	6983      	ldr	r3, [r0, #24]
 8010ab8:	f8d2 9000 	ldr.w	r9, [r2]
 8010abc:	681a      	ldr	r2, [r3, #0]
 8010abe:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8010ac2:	0092      	lsls	r2, r2, #2
 8010ac4:	d5d5      	bpl.n	8010a72 <ai_platform_network_process+0x476>
 8010ac6:	6898      	ldr	r0, [r3, #8]
 8010ac8:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8010acc:	f001 fb22 	bl	8012114 <st_int8_copy>
 8010ad0:	f859 200a 	ldr.w	r2, [r9, sl]
 8010ad4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8010ad8:	440b      	add	r3, r1
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d302      	bcc.n	8010ae4 <ai_platform_network_process+0x4e8>
 8010ade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ae2:	1ad3      	subs	r3, r2, r3
 8010ae4:	f8c8 3004 	str.w	r3, [r8, #4]
 8010ae8:	e7d9      	b.n	8010a9e <ai_platform_network_process+0x4a2>
 8010aea:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8010aee:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8010af2:	3401      	adds	r4, #1
 8010af4:	b2a4      	uxth	r4, r4
 8010af6:	42a3      	cmp	r3, r4
 8010af8:	f8ab 4016 	strh.w	r4, [fp, #22]
 8010afc:	f63f af7f 	bhi.w	80109fe <ai_platform_network_process+0x402>
 8010b00:	4620      	mov	r0, r4
 8010b02:	b005      	add	sp, #20
 8010b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b08:	2a01      	cmp	r2, #1
 8010b0a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8010b0c:	d029      	beq.n	8010b62 <ai_platform_network_process+0x566>
 8010b0e:	f106 070c 	add.w	r7, r6, #12
 8010b12:	e770      	b.n	80109f6 <ai_platform_network_process+0x3fa>
 8010b14:	2218      	movs	r2, #24
 8010b16:	2113      	movs	r1, #19
 8010b18:	f105 0010 	add.w	r0, r5, #16
 8010b1c:	2400      	movs	r4, #0
 8010b1e:	f000 f851 	bl	8010bc4 <core_set_error>
 8010b22:	e711      	b.n	8010948 <ai_platform_network_process+0x34c>
 8010b24:	9d03      	ldr	r5, [sp, #12]
 8010b26:	4604      	mov	r4, r0
 8010b28:	2217      	movs	r2, #23
 8010b2a:	2112      	movs	r1, #18
 8010b2c:	f105 0010 	add.w	r0, r5, #16
 8010b30:	f000 f848 	bl	8010bc4 <core_set_error>
 8010b34:	e708      	b.n	8010948 <ai_platform_network_process+0x34c>
 8010b36:	9d03      	ldr	r5, [sp, #12]
 8010b38:	2219      	movs	r2, #25
 8010b3a:	2112      	movs	r1, #18
 8010b3c:	2400      	movs	r4, #0
 8010b3e:	f105 0010 	add.w	r0, r5, #16
 8010b42:	f000 f83f 	bl	8010bc4 <core_set_error>
 8010b46:	e6ff      	b.n	8010948 <ai_platform_network_process+0x34c>
 8010b48:	9d03      	ldr	r5, [sp, #12]
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	2221      	movs	r2, #33	; 0x21
 8010b4e:	2112      	movs	r1, #18
 8010b50:	f105 0010 	add.w	r0, r5, #16
 8010b54:	f000 f836 	bl	8010bc4 <core_set_error>
 8010b58:	e6f6      	b.n	8010948 <ai_platform_network_process+0x34c>
 8010b5a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010b5e:	82ab      	strh	r3, [r5, #20]
 8010b60:	e744      	b.n	80109ec <ai_platform_network_process+0x3f0>
 8010b62:	2700      	movs	r7, #0
 8010b64:	e747      	b.n	80109f6 <ai_platform_network_process+0x3fa>
 8010b66:	4604      	mov	r4, r0
 8010b68:	2217      	movs	r2, #23
 8010b6a:	2113      	movs	r1, #19
 8010b6c:	f105 0010 	add.w	r0, r5, #16
 8010b70:	f000 f828 	bl	8010bc4 <core_set_error>
 8010b74:	e6e8      	b.n	8010948 <ai_platform_network_process+0x34c>
 8010b76:	2219      	movs	r2, #25
 8010b78:	2113      	movs	r1, #19
 8010b7a:	f105 0010 	add.w	r0, r5, #16
 8010b7e:	2400      	movs	r4, #0
 8010b80:	f000 f820 	bl	8010bc4 <core_set_error>
 8010b84:	e6e0      	b.n	8010948 <ai_platform_network_process+0x34c>
 8010b86:	4604      	mov	r4, r0
 8010b88:	2221      	movs	r2, #33	; 0x21
 8010b8a:	2113      	movs	r1, #19
 8010b8c:	f105 0010 	add.w	r0, r5, #16
 8010b90:	f000 f818 	bl	8010bc4 <core_set_error>
 8010b94:	e6d8      	b.n	8010948 <ai_platform_network_process+0x34c>
 8010b96:	2217      	movs	r2, #23
 8010b98:	2113      	movs	r1, #19
 8010b9a:	f105 0010 	add.w	r0, r5, #16
 8010b9e:	4654      	mov	r4, sl
 8010ba0:	f000 f810 	bl	8010bc4 <core_set_error>
 8010ba4:	e6d0      	b.n	8010948 <ai_platform_network_process+0x34c>
 8010ba6:	bf00      	nop
 8010ba8:	58024000 	.word	0x58024000
 8010bac:	f407a5c2 	.word	0xf407a5c2
 8010bb0:	b5e8b5cd 	.word	0xb5e8b5cd

08010bb4 <core_init>:
 8010bb4:	2001      	movs	r0, #1
 8010bb6:	4770      	bx	lr

08010bb8 <core_get_error>:
 8010bb8:	4603      	mov	r3, r0
 8010bba:	2200      	movs	r2, #0
 8010bbc:	6800      	ldr	r0, [r0, #0]
 8010bbe:	601a      	str	r2, [r3, #0]
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop

08010bc4 <core_set_error>:
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	7800      	ldrb	r0, [r0, #0]
 8010bc8:	b108      	cbz	r0, 8010bce <core_set_error+0xa>
 8010bca:	2000      	movs	r0, #0
 8010bcc:	4770      	bx	lr
 8010bce:	7019      	strb	r1, [r3, #0]
 8010bd0:	2001      	movs	r0, #1
 8010bd2:	6819      	ldr	r1, [r3, #0]
 8010bd4:	f362 211f 	bfi	r1, r2, #8, #24
 8010bd8:	6019      	str	r1, [r3, #0]
 8010bda:	4770      	bx	lr

08010bdc <ai_check_custom_types>:
 8010bdc:	b082      	sub	sp, #8
 8010bde:	4b12      	ldr	r3, [pc, #72]	; (8010c28 <ai_check_custom_types+0x4c>)
 8010be0:	9301      	str	r3, [sp, #4]
 8010be2:	b118      	cbz	r0, 8010bec <ai_check_custom_types+0x10>
 8010be4:	7803      	ldrb	r3, [r0, #0]
 8010be6:	2b03      	cmp	r3, #3
 8010be8:	d002      	beq.n	8010bf0 <ai_check_custom_types+0x14>
 8010bea:	2000      	movs	r0, #0
 8010bec:	b002      	add	sp, #8
 8010bee:	4770      	bx	lr
 8010bf0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d004      	beq.n	8010c02 <ai_check_custom_types+0x26>
 8010bf8:	2001      	movs	r0, #1
 8010bfa:	f080 0001 	eor.w	r0, r0, #1
 8010bfe:	b002      	add	sp, #8
 8010c00:	4770      	bx	lr
 8010c02:	7842      	ldrb	r2, [r0, #1]
 8010c04:	3001      	adds	r0, #1
 8010c06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d1f4      	bne.n	8010bf8 <ai_check_custom_types+0x1c>
 8010c0e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010c12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d1ee      	bne.n	8010bf8 <ai_check_custom_types+0x1c>
 8010c1a:	7842      	ldrb	r2, [r0, #1]
 8010c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d1e9      	bne.n	8010bf8 <ai_check_custom_types+0x1c>
 8010c24:	2000      	movs	r0, #0
 8010c26:	e7e8      	b.n	8010bfa <ai_check_custom_types+0x1e>
 8010c28:	84048403 	.word	0x84048403

08010c2c <ai_layers_init_all>:
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c30:	b13b      	cbz	r3, 8010c42 <ai_layers_init_all+0x16>
 8010c32:	691a      	ldr	r2, [r3, #16]
 8010c34:	3101      	adds	r1, #1
 8010c36:	60d8      	str	r0, [r3, #12]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	d001      	beq.n	8010c42 <ai_layers_init_all+0x16>
 8010c3e:	2a00      	cmp	r2, #0
 8010c40:	d1f6      	bne.n	8010c30 <ai_layers_init_all+0x4>
 8010c42:	4608      	mov	r0, r1
 8010c44:	4770      	bx	lr
 8010c46:	bf00      	nop

08010c48 <ai_layers_post_init_all>:
 8010c48:	b538      	push	{r3, r4, r5, lr}
 8010c4a:	2500      	movs	r5, #0
 8010c4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010c4e:	b16c      	cbz	r4, 8010c6c <ai_layers_post_init_all+0x24>
 8010c50:	6863      	ldr	r3, [r4, #4]
 8010c52:	07db      	lsls	r3, r3, #31
 8010c54:	d504      	bpl.n	8010c60 <ai_layers_post_init_all+0x18>
 8010c56:	6a23      	ldr	r3, [r4, #32]
 8010c58:	4620      	mov	r0, r4
 8010c5a:	b10b      	cbz	r3, 8010c60 <ai_layers_post_init_all+0x18>
 8010c5c:	3501      	adds	r5, #1
 8010c5e:	4798      	blx	r3
 8010c60:	6923      	ldr	r3, [r4, #16]
 8010c62:	42a3      	cmp	r3, r4
 8010c64:	461c      	mov	r4, r3
 8010c66:	d001      	beq.n	8010c6c <ai_layers_post_init_all+0x24>
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1f0      	bne.n	8010c4e <ai_layers_post_init_all+0x6>
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	bd38      	pop	{r3, r4, r5, pc}

08010c70 <ai_layers_forward_all>:
 8010c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c74:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8010c78:	4604      	mov	r4, r0
 8010c7a:	f1b8 0f00 	cmp.w	r8, #0
 8010c7e:	d02a      	beq.n	8010cd6 <ai_layers_forward_all+0x66>
 8010c80:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8010c82:	6381      	str	r1, [r0, #56]	; 0x38
 8010c84:	b319      	cbz	r1, 8010cce <ai_layers_forward_all+0x5e>
 8010c86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010c88:	2001      	movs	r0, #1
 8010c8a:	47c0      	blx	r8
 8010c8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010c8e:	b1f6      	cbz	r6, 8010cce <ai_layers_forward_all+0x5e>
 8010c90:	2700      	movs	r7, #0
 8010c92:	4631      	mov	r1, r6
 8010c94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010c96:	2002      	movs	r0, #2
 8010c98:	47c0      	blx	r8
 8010c9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	696b      	ldr	r3, [r5, #20]
 8010ca0:	4798      	blx	r3
 8010ca2:	692e      	ldr	r6, [r5, #16]
 8010ca4:	2003      	movs	r0, #3
 8010ca6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010ca8:	42b5      	cmp	r5, r6
 8010caa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010cac:	d007      	beq.n	8010cbe <ai_layers_forward_all+0x4e>
 8010cae:	47c0      	blx	r8
 8010cb0:	3701      	adds	r7, #1
 8010cb2:	63a6      	str	r6, [r4, #56]	; 0x38
 8010cb4:	2e00      	cmp	r6, #0
 8010cb6:	d1ec      	bne.n	8010c92 <ai_layers_forward_all+0x22>
 8010cb8:	4638      	mov	r0, r7
 8010cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbe:	2003      	movs	r0, #3
 8010cc0:	3701      	adds	r7, #1
 8010cc2:	47c0      	blx	r8
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	4638      	mov	r0, r7
 8010cc8:	63a3      	str	r3, [r4, #56]	; 0x38
 8010cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cce:	2700      	movs	r7, #0
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cd6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8010cd8:	6385      	str	r5, [r0, #56]	; 0x38
 8010cda:	2d00      	cmp	r5, #0
 8010cdc:	d0f7      	beq.n	8010cce <ai_layers_forward_all+0x5e>
 8010cde:	4647      	mov	r7, r8
 8010ce0:	696b      	ldr	r3, [r5, #20]
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	4798      	blx	r3
 8010ce6:	462b      	mov	r3, r5
 8010ce8:	692d      	ldr	r5, [r5, #16]
 8010cea:	429d      	cmp	r5, r3
 8010cec:	d004      	beq.n	8010cf8 <ai_layers_forward_all+0x88>
 8010cee:	3701      	adds	r7, #1
 8010cf0:	63a5      	str	r5, [r4, #56]	; 0x38
 8010cf2:	2d00      	cmp	r5, #0
 8010cf4:	d1f4      	bne.n	8010ce0 <ai_layers_forward_all+0x70>
 8010cf6:	e7df      	b.n	8010cb8 <ai_layers_forward_all+0x48>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	3701      	adds	r7, #1
 8010cfc:	63a3      	str	r3, [r4, #56]	; 0x38
 8010cfe:	e7db      	b.n	8010cb8 <ai_layers_forward_all+0x48>

08010d00 <ai_dict_decompress_f32>:
 8010d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d04:	9d08      	ldr	r5, [sp, #32]
 8010d06:	2b04      	cmp	r3, #4
 8010d08:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010d0c:	d00e      	beq.n	8010d2c <ai_dict_decompress_f32+0x2c>
 8010d0e:	2b08      	cmp	r3, #8
 8010d10:	d10a      	bne.n	8010d28 <ai_dict_decompress_f32+0x28>
 8010d12:	42a8      	cmp	r0, r5
 8010d14:	d208      	bcs.n	8010d28 <ai_dict_decompress_f32+0x28>
 8010d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	f840 3b04 	str.w	r3, [r0], #4
 8010d24:	4285      	cmp	r5, r0
 8010d26:	d8f6      	bhi.n	8010d16 <ai_dict_decompress_f32+0x16>
 8010d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d2c:	9b07      	ldr	r3, [sp, #28]
 8010d2e:	085e      	lsrs	r6, r3, #1
 8010d30:	f003 0701 	and.w	r7, r3, #1
 8010d34:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8010d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8010d3c:	42a8      	cmp	r0, r5
 8010d3e:	d2f3      	bcs.n	8010d28 <ai_dict_decompress_f32+0x28>
 8010d40:	b33e      	cbz	r6, 8010d92 <ai_dict_decompress_f32+0x92>
 8010d42:	f100 0e08 	add.w	lr, r0, #8
 8010d46:	f101 3cff 	add.w	ip, r1, #4294967295
 8010d4a:	eb01 0408 	add.w	r4, r1, r8
 8010d4e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010d52:	f10e 0e08 	add.w	lr, lr, #8
 8010d56:	091b      	lsrs	r3, r3, #4
 8010d58:	4564      	cmp	r4, ip
 8010d5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f84e 3c10 	str.w	r3, [lr, #-16]
 8010d64:	f89c 3000 	ldrb.w	r3, [ip]
 8010d68:	f003 030f 	and.w	r3, r3, #15
 8010d6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8010d76:	d1ea      	bne.n	8010d4e <ai_dict_decompress_f32+0x4e>
 8010d78:	4431      	add	r1, r6
 8010d7a:	4448      	add	r0, r9
 8010d7c:	2f00      	cmp	r7, #0
 8010d7e:	d0dd      	beq.n	8010d3c <ai_dict_decompress_f32+0x3c>
 8010d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d84:	091b      	lsrs	r3, r3, #4
 8010d86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f840 3b04 	str.w	r3, [r0], #4
 8010d90:	e7d4      	b.n	8010d3c <ai_dict_decompress_f32+0x3c>
 8010d92:	2f00      	cmp	r7, #0
 8010d94:	d1f4      	bne.n	8010d80 <ai_dict_decompress_f32+0x80>
 8010d96:	42a8      	cmp	r0, r5
 8010d98:	d3fd      	bcc.n	8010d96 <ai_dict_decompress_f32+0x96>
 8010d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d9e:	bf00      	nop

08010da0 <forward_conv2d_if32of32wf32>:
 8010da0:	6982      	ldr	r2, [r0, #24]
 8010da2:	8813      	ldrh	r3, [r2, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f000 8092 	beq.w	8010ece <forward_conv2d_if32of32wf32+0x12e>
 8010daa:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8010dae:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8010db2:	b102      	cbz	r2, 8010db6 <forward_conv2d_if32of32wf32+0x16>
 8010db4:	6812      	ldr	r2, [r2, #0]
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	f000 80b3 	beq.w	8010f22 <forward_conv2d_if32of32wf32+0x182>
 8010dbc:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8010dc0:	b101      	cbz	r1, 8010dc4 <forward_conv2d_if32of32wf32+0x24>
 8010dc2:	6809      	ldr	r1, [r1, #0]
 8010dc4:	2b02      	cmp	r3, #2
 8010dc6:	f000 8084 	beq.w	8010ed2 <forward_conv2d_if32of32wf32+0x132>
 8010dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dce:	f8dc 601c 	ldr.w	r6, [ip, #28]
 8010dd2:	b0a1      	sub	sp, #132	; 0x84
 8010dd4:	2e00      	cmp	r6, #0
 8010dd6:	f000 809d 	beq.w	8010f14 <forward_conv2d_if32of32wf32+0x174>
 8010dda:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 8010dde:	6834      	ldr	r4, [r6, #0]
 8010de0:	2d01      	cmp	r5, #1
 8010de2:	f240 8099 	bls.w	8010f18 <forward_conv2d_if32of32wf32+0x178>
 8010de6:	6876      	ldr	r6, [r6, #4]
 8010de8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8010dec:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8010df0:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010df4:	6992      	ldr	r2, [r2, #24]
 8010df6:	9713      	str	r7, [sp, #76]	; 0x4c
 8010df8:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8010dfc:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8010e00:	9714      	str	r7, [sp, #80]	; 0x50
 8010e02:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8010e06:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8010e0a:	9715      	str	r7, [sp, #84]	; 0x54
 8010e0c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8010e10:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8010e14:	9716      	str	r7, [sp, #88]	; 0x58
 8010e16:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8010e1a:	69a2      	ldr	r2, [r4, #24]
 8010e1c:	9717      	str	r7, [sp, #92]	; 0x5c
 8010e1e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010e22:	9718      	str	r7, [sp, #96]	; 0x60
 8010e24:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8010e26:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8010e2a:	9719      	str	r7, [sp, #100]	; 0x64
 8010e2c:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 8010e2e:	69c0      	ldr	r0, [r0, #28]
 8010e30:	971a      	str	r7, [sp, #104]	; 0x68
 8010e32:	901f      	str	r0, [sp, #124]	; 0x7c
 8010e34:	f8be 0000 	ldrh.w	r0, [lr]
 8010e38:	901b      	str	r0, [sp, #108]	; 0x6c
 8010e3a:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8010e3e:	901c      	str	r0, [sp, #112]	; 0x70
 8010e40:	b2a8      	uxth	r0, r5
 8010e42:	901d      	str	r0, [sp, #116]	; 0x74
 8010e44:	b2a0      	uxth	r0, r4
 8010e46:	901e      	str	r0, [sp, #120]	; 0x78
 8010e48:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8010e4c:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 8010e50:	b10e      	cbz	r6, 8010e56 <forward_conv2d_if32of32wf32+0xb6>
 8010e52:	69b0      	ldr	r0, [r6, #24]
 8010e54:	6886      	ldr	r6, [r0, #8]
 8010e56:	b2a4      	uxth	r4, r4
 8010e58:	6989      	ldr	r1, [r1, #24]
 8010e5a:	f108 30ff 	add.w	r0, r8, #4294967295
 8010e5e:	b2ad      	uxth	r5, r5
 8010e60:	3c01      	subs	r4, #1
 8010e62:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8010e66:	3d01      	subs	r5, #1
 8010e68:	6811      	ldr	r1, [r2, #0]
 8010e6a:	fb00 8404 	mla	r4, r0, r4, r8
 8010e6e:	1e78      	subs	r0, r7, #1
 8010e70:	fb00 7505 	mla	r5, r0, r5, r7
 8010e74:	f3c1 4043 	ubfx	r0, r1, #17, #4
 8010e78:	2804      	cmp	r0, #4
 8010e7a:	d02d      	beq.n	8010ed8 <forward_conv2d_if32of32wf32+0x138>
 8010e7c:	2808      	cmp	r0, #8
 8010e7e:	d02b      	beq.n	8010ed8 <forward_conv2d_if32of32wf32+0x138>
 8010e80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e82:	464a      	mov	r2, r9
 8010e84:	940c      	str	r4, [sp, #48]	; 0x30
 8010e86:	4651      	mov	r1, sl
 8010e88:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8010e8a:	4658      	mov	r0, fp
 8010e8c:	9706      	str	r7, [sp, #24]
 8010e8e:	940f      	str	r4, [sp, #60]	; 0x3c
 8010e90:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 8010e94:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8010e9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010ea0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010ea2:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8010ea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ea8:	9305      	str	r3, [sp, #20]
 8010eaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010eac:	9304      	str	r3, [sp, #16]
 8010eae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010eb0:	9303      	str	r3, [sp, #12]
 8010eb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010eb4:	9302      	str	r3, [sp, #8]
 8010eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010eb8:	9301      	str	r3, [sp, #4]
 8010eba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010ebc:	9300      	str	r3, [sp, #0]
 8010ebe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010ec0:	9310      	str	r3, [sp, #64]	; 0x40
 8010ec2:	4633      	mov	r3, r6
 8010ec4:	f000 fe9e 	bl	8011c04 <forward_lite_conv2d_if32of32wf32>
 8010ec8:	b021      	add	sp, #132	; 0x84
 8010eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	deff      	udf	#255	; 0xff
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	deff      	udf	#255	; 0xff
 8010ed8:	68d2      	ldr	r2, [r2, #12]
 8010eda:	2a00      	cmp	r2, #0
 8010edc:	d0d0      	beq.n	8010e80 <forward_conv2d_if32of32wf32+0xe0>
 8010ede:	2b03      	cmp	r3, #3
 8010ee0:	d022      	beq.n	8010f28 <forward_conv2d_if32of32wf32+0x188>
 8010ee2:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 8010ee6:	b1cb      	cbz	r3, 8010f1c <forward_conv2d_if32of32wf32+0x17c>
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	b1bb      	cbz	r3, 8010f1c <forward_conv2d_if32of32wf32+0x17c>
 8010eec:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8010ef0:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 8010ef4:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8010ef8:	410b      	asrs	r3, r1
 8010efa:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	9101      	str	r1, [sp, #4]
 8010f02:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010f04:	9100      	str	r1, [sp, #0]
 8010f06:	4649      	mov	r1, r9
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	bf18      	it	ne
 8010f0c:	4681      	movne	r9, r0
 8010f0e:	f7ff fef7 	bl	8010d00 <ai_dict_decompress_f32>
 8010f12:	e7b5      	b.n	8010e80 <forward_conv2d_if32of32wf32+0xe0>
 8010f14:	4634      	mov	r4, r6
 8010f16:	e767      	b.n	8010de8 <forward_conv2d_if32of32wf32+0x48>
 8010f18:	2600      	movs	r6, #0
 8010f1a:	e765      	b.n	8010de8 <forward_conv2d_if32of32wf32+0x48>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	699b      	ldr	r3, [r3, #24]
 8010f20:	deff      	udf	#255	; 0xff
 8010f22:	2300      	movs	r3, #0
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	deff      	udf	#255	; 0xff
 8010f28:	2300      	movs	r3, #0
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	deff      	udf	#255	; 0xff
 8010f2e:	bf00      	nop

08010f30 <forward_dense>:
 8010f30:	6983      	ldr	r3, [r0, #24]
 8010f32:	881a      	ldrh	r2, [r3, #0]
 8010f34:	2a00      	cmp	r2, #0
 8010f36:	f000 80f0 	beq.w	801111a <forward_dense+0x1ea>
 8010f3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f3e:	ed2d 8b02 	vpush	{d8}
 8010f42:	6858      	ldr	r0, [r3, #4]
 8010f44:	b09b      	sub	sp, #108	; 0x6c
 8010f46:	6845      	ldr	r5, [r0, #4]
 8010f48:	b105      	cbz	r5, 8010f4c <forward_dense+0x1c>
 8010f4a:	682d      	ldr	r5, [r5, #0]
 8010f4c:	2a01      	cmp	r2, #1
 8010f4e:	f000 840a 	beq.w	8011766 <forward_dense+0x836>
 8010f52:	6906      	ldr	r6, [r0, #16]
 8010f54:	b106      	cbz	r6, 8010f58 <forward_dense+0x28>
 8010f56:	6836      	ldr	r6, [r6, #0]
 8010f58:	2a02      	cmp	r2, #2
 8010f5a:	f000 80e0 	beq.w	801111e <forward_dense+0x1ee>
 8010f5e:	69c3      	ldr	r3, [r0, #28]
 8010f60:	930d      	str	r3, [sp, #52]	; 0x34
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	f000 83f1 	beq.w	801174a <forward_dense+0x81a>
 8010f68:	4619      	mov	r1, r3
 8010f6a:	8b03      	ldrh	r3, [r0, #24]
 8010f6c:	6809      	ldr	r1, [r1, #0]
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	910f      	str	r1, [sp, #60]	; 0x3c
 8010f72:	f240 83ec 	bls.w	801174e <forward_dense+0x81e>
 8010f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8010f82:	2a03      	cmp	r2, #3
 8010f84:	68eb      	ldr	r3, [r5, #12]
 8010f86:	68f7      	ldr	r7, [r6, #12]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	687c      	ldr	r4, [r7, #4]
 8010f8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8010f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8010f92:	4621      	mov	r1, r4
 8010f94:	9419      	str	r4, [sp, #100]	; 0x64
 8010f96:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8010f9a:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 8010f9e:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8010fa2:	fb01 f404 	mul.w	r4, r1, r4
 8010fa6:	fa4e f10c 	asr.w	r1, lr, ip
 8010faa:	9116      	str	r1, [sp, #88]	; 0x58
 8010fac:	f000 83d8 	beq.w	8011760 <forward_dense+0x830>
 8010fb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010fb2:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8010fb6:	2a00      	cmp	r2, #0
 8010fb8:	f000 83c2 	beq.w	8011740 <forward_dense+0x810>
 8010fbc:	6812      	ldr	r2, [r2, #0]
 8010fbe:	2a00      	cmp	r2, #0
 8010fc0:	f000 83be 	beq.w	8011740 <forward_dense+0x810>
 8010fc4:	2b04      	cmp	r3, #4
 8010fc6:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8010fca:	f000 83a8 	beq.w	801171e <forward_dense+0x7ee>
 8010fce:	2b08      	cmp	r3, #8
 8010fd0:	f000 83a5 	beq.w	801171e <forward_dense+0x7ee>
 8010fd4:	f04f 0a00 	mov.w	sl, #0
 8010fd8:	69ab      	ldr	r3, [r5, #24]
 8010fda:	fb07 f404 	mul.w	r4, r7, r4
 8010fde:	69b2      	ldr	r2, [r6, #24]
 8010fe0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8010fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fe6:	6892      	ldr	r2, [r2, #8]
 8010fe8:	695b      	ldr	r3, [r3, #20]
 8010fea:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8010fee:	9206      	str	r2, [sp, #24]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	428a      	cmp	r2, r1
 8010ff4:	9110      	str	r1, [sp, #64]	; 0x40
 8010ff6:	9304      	str	r3, [sp, #16]
 8010ff8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010ffa:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8010ffe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011002:	900e      	str	r0, [sp, #56]	; 0x38
 8011004:	9303      	str	r3, [sp, #12]
 8011006:	f080 8380 	bcs.w	801170a <forward_dense+0x7da>
 801100a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801100c:	4654      	mov	r4, sl
 801100e:	4bb9      	ldr	r3, [pc, #740]	; (80112f4 <forward_dense+0x3c4>)
 8011010:	46ca      	mov	sl, r9
 8011012:	08d0      	lsrs	r0, r2, #3
 8011014:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 80112f8 <forward_dense+0x3c8>
 8011018:	4413      	add	r3, r2
 801101a:	9009      	str	r0, [sp, #36]	; 0x24
 801101c:	0099      	lsls	r1, r3, #2
 801101e:	f022 0301 	bic.w	r3, r2, #1
 8011022:	f002 0201 	and.w	r2, r2, #1
 8011026:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801102a:	9118      	str	r1, [sp, #96]	; 0x60
 801102c:	920a      	str	r2, [sp, #40]	; 0x28
 801102e:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 8011032:	9305      	str	r3, [sp, #20]
 8011034:	f101 0320 	add.w	r3, r1, #32
 8011038:	9207      	str	r2, [sp, #28]
 801103a:	9311      	str	r3, [sp, #68]	; 0x44
 801103c:	444b      	add	r3, r9
 801103e:	469b      	mov	fp, r3
 8011040:	930b      	str	r3, [sp, #44]	; 0x2c
 8011042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011044:	699b      	ldr	r3, [r3, #24]
 8011046:	689a      	ldr	r2, [r3, #8]
 8011048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801104a:	b10b      	cbz	r3, 8011050 <forward_dense+0x120>
 801104c:	699b      	ldr	r3, [r3, #24]
 801104e:	689b      	ldr	r3, [r3, #8]
 8011050:	2c00      	cmp	r4, #0
 8011052:	f000 834b 	beq.w	80116ec <forward_dense+0x7bc>
 8011056:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011058:	2904      	cmp	r1, #4
 801105a:	f000 826a 	beq.w	8011532 <forward_dense+0x602>
 801105e:	9903      	ldr	r1, [sp, #12]
 8011060:	9806      	ldr	r0, [sp, #24]
 8011062:	4281      	cmp	r1, r0
 8011064:	f240 8356 	bls.w	8011714 <forward_dense+0x7e4>
 8011068:	4686      	mov	lr, r0
 801106a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801106c:	eb00 090a 	add.w	r9, r0, sl
 8011070:	0941      	lsrs	r1, r0, #5
 8011072:	f10a 0004 	add.w	r0, sl, #4
 8011076:	f8cd 9020 	str.w	r9, [sp, #32]
 801107a:	9012      	str	r0, [sp, #72]	; 0x48
 801107c:	1c48      	adds	r0, r1, #1
 801107e:	00c9      	lsls	r1, r1, #3
 8011080:	3110      	adds	r1, #16
 8011082:	9115      	str	r1, [sp, #84]	; 0x54
 8011084:	00c1      	lsls	r1, r0, #3
 8011086:	9113      	str	r1, [sp, #76]	; 0x4c
 8011088:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 801108c:	9114      	str	r1, [sp, #80]	; 0x50
 801108e:	f1a9 0104 	sub.w	r1, r9, #4
 8011092:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8011096:	910c      	str	r1, [sp, #48]	; 0x30
 8011098:	2b00      	cmp	r3, #0
 801109a:	f000 8128 	beq.w	80112ee <forward_dense+0x3be>
 801109e:	ecb3 5a01 	vldmia	r3!, {s10}
 80110a2:	f1b9 0f07 	cmp.w	r9, #7
 80110a6:	d83d      	bhi.n	8011124 <forward_dense+0x1f4>
 80110a8:	45da      	cmp	sl, fp
 80110aa:	d211      	bcs.n	80110d0 <forward_dense+0x1a0>
 80110ac:	eddf 7a92 	vldr	s15, [pc, #584]	; 80112f8 <forward_dense+0x3c8>
 80110b0:	4650      	mov	r0, sl
 80110b2:	4615      	mov	r5, r2
 80110b4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80110b8:	ecb0 7a01 	vldmia	r0!, {s14}
 80110bc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80110c0:	4558      	cmp	r0, fp
 80110c2:	edd1 6a00 	vldr	s13, [r1]
 80110c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80110ca:	d3f3      	bcc.n	80110b4 <forward_dense+0x184>
 80110cc:	ee35 5a27 	vadd.f32	s10, s10, s15
 80110d0:	9904      	ldr	r1, [sp, #16]
 80110d2:	ecae 5a01 	vstmia	lr!, {s10}
 80110d6:	440a      	add	r2, r1
 80110d8:	9903      	ldr	r1, [sp, #12]
 80110da:	458e      	cmp	lr, r1
 80110dc:	d3dc      	bcc.n	8011098 <forward_dense+0x168>
 80110de:	9a06      	ldr	r2, [sp, #24]
 80110e0:	1a8b      	subs	r3, r1, r2
 80110e2:	3b01      	subs	r3, #1
 80110e4:	f023 0303 	bic.w	r3, r3, #3
 80110e8:	3304      	adds	r3, #4
 80110ea:	18d3      	adds	r3, r2, r3
 80110ec:	4619      	mov	r1, r3
 80110ee:	9306      	str	r3, [sp, #24]
 80110f0:	9b03      	ldr	r3, [sp, #12]
 80110f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80110f6:	4413      	add	r3, r2
 80110f8:	9a07      	ldr	r2, [sp, #28]
 80110fa:	4281      	cmp	r1, r0
 80110fc:	9303      	str	r3, [sp, #12]
 80110fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011100:	441a      	add	r2, r3
 8011102:	449b      	add	fp, r3
 8011104:	9207      	str	r2, [sp, #28]
 8011106:	9a05      	ldr	r2, [sp, #20]
 8011108:	441a      	add	r2, r3
 801110a:	9205      	str	r2, [sp, #20]
 801110c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801110e:	4692      	mov	sl, r2
 8011110:	f080 82fb 	bcs.w	801170a <forward_dense+0x7da>
 8011114:	441a      	add	r2, r3
 8011116:	920b      	str	r2, [sp, #44]	; 0x2c
 8011118:	e793      	b.n	8011042 <forward_dense+0x112>
 801111a:	6853      	ldr	r3, [r2, #4]
 801111c:	deff      	udf	#255	; 0xff
 801111e:	2300      	movs	r3, #0
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	deff      	udf	#255	; 0xff
 8011124:	f002 0103 	and.w	r1, r2, #3
 8011128:	2902      	cmp	r1, #2
 801112a:	f000 81e6 	beq.w	80114fa <forward_dense+0x5ca>
 801112e:	2903      	cmp	r1, #3
 8011130:	f000 80e4 	beq.w	80112fc <forward_dense+0x3cc>
 8011134:	2901      	cmp	r1, #1
 8011136:	f000 81ef 	beq.w	8011518 <forward_dense+0x5e8>
 801113a:	9908      	ldr	r1, [sp, #32]
 801113c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80112f8 <forward_dense+0x3c8>
 8011140:	458a      	cmp	sl, r1
 8011142:	f200 82e9 	bhi.w	8011718 <forward_dense+0x7e8>
 8011146:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011148:	f102 0108 	add.w	r1, r2, #8
 801114c:	f10a 0020 	add.w	r0, sl, #32
 8011150:	18ae      	adds	r6, r5, r2
 8011152:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8011156:	3108      	adds	r1, #8
 8011158:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 801115c:	3020      	adds	r0, #32
 801115e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011162:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8011166:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 801116a:	edd5 7a00 	vldr	s15, [r5]
 801116e:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8011172:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011176:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 801117a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801117e:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8011182:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8011186:	edd5 2a00 	vldr	s5, [r5]
 801118a:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 801118e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8011192:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8011196:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801119a:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 801119e:	ed95 3a00 	vldr	s6, [r5]
 80111a2:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80111a6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80111aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80111ae:	edd5 3a00 	vldr	s7, [r5]
 80111b2:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80111b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80111ba:	eee3 7a84 	vfma.f32	s15, s7, s8
 80111be:	ed95 4a00 	vldr	s8, [r5]
 80111c2:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80111c6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80111ca:	eee4 7a24 	vfma.f32	s15, s8, s9
 80111ce:	edd5 4a00 	vldr	s9, [r5]
 80111d2:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80111d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80111da:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80111de:	edd5 5a00 	vldr	s11, [r5]
 80111e2:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80111e6:	428e      	cmp	r6, r1
 80111e8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80111ec:	eee5 7a86 	vfma.f32	s15, s11, s12
 80111f0:	ed95 6a00 	vldr	s12, [r5]
 80111f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80111f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80111fc:	d1a9      	bne.n	8011152 <forward_dense+0x222>
 80111fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011200:	1850      	adds	r0, r2, r1
 8011202:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011204:	4559      	cmp	r1, fp
 8011206:	d26f      	bcs.n	80112e8 <forward_dense+0x3b8>
 8011208:	7805      	ldrb	r5, [r0, #0]
 801120a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801120e:	edd5 7a00 	vldr	s15, [r5]
 8011212:	460d      	mov	r5, r1
 8011214:	ecf5 6a01 	vldmia	r5!, {s13}
 8011218:	45ab      	cmp	fp, r5
 801121a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801121e:	d963      	bls.n	80112e8 <forward_dense+0x3b8>
 8011220:	7845      	ldrb	r5, [r0, #1]
 8011222:	edd1 6a01 	vldr	s13, [r1, #4]
 8011226:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801122a:	edd5 7a00 	vldr	s15, [r5]
 801122e:	f101 0508 	add.w	r5, r1, #8
 8011232:	45ab      	cmp	fp, r5
 8011234:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011238:	d956      	bls.n	80112e8 <forward_dense+0x3b8>
 801123a:	7885      	ldrb	r5, [r0, #2]
 801123c:	edd1 6a02 	vldr	s13, [r1, #8]
 8011240:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011244:	edd5 7a00 	vldr	s15, [r5]
 8011248:	f101 050c 	add.w	r5, r1, #12
 801124c:	45ab      	cmp	fp, r5
 801124e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011252:	d949      	bls.n	80112e8 <forward_dense+0x3b8>
 8011254:	78c5      	ldrb	r5, [r0, #3]
 8011256:	edd1 6a03 	vldr	s13, [r1, #12]
 801125a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801125e:	edd5 7a00 	vldr	s15, [r5]
 8011262:	f101 0510 	add.w	r5, r1, #16
 8011266:	45ab      	cmp	fp, r5
 8011268:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801126c:	d93c      	bls.n	80112e8 <forward_dense+0x3b8>
 801126e:	7905      	ldrb	r5, [r0, #4]
 8011270:	edd1 6a04 	vldr	s13, [r1, #16]
 8011274:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011278:	edd5 7a00 	vldr	s15, [r5]
 801127c:	f101 0514 	add.w	r5, r1, #20
 8011280:	45ab      	cmp	fp, r5
 8011282:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011286:	d92f      	bls.n	80112e8 <forward_dense+0x3b8>
 8011288:	7945      	ldrb	r5, [r0, #5]
 801128a:	edd1 6a05 	vldr	s13, [r1, #20]
 801128e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011292:	edd5 7a00 	vldr	s15, [r5]
 8011296:	f101 0518 	add.w	r5, r1, #24
 801129a:	45ab      	cmp	fp, r5
 801129c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80112a0:	d922      	bls.n	80112e8 <forward_dense+0x3b8>
 80112a2:	7985      	ldrb	r5, [r0, #6]
 80112a4:	edd1 6a06 	vldr	s13, [r1, #24]
 80112a8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80112ac:	edd5 7a00 	vldr	s15, [r5]
 80112b0:	f101 051c 	add.w	r5, r1, #28
 80112b4:	45ab      	cmp	fp, r5
 80112b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80112ba:	d915      	bls.n	80112e8 <forward_dense+0x3b8>
 80112bc:	79c5      	ldrb	r5, [r0, #7]
 80112be:	edd1 6a07 	vldr	s13, [r1, #28]
 80112c2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80112c6:	edd5 7a00 	vldr	s15, [r5]
 80112ca:	f101 0520 	add.w	r5, r1, #32
 80112ce:	45ab      	cmp	fp, r5
 80112d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80112d4:	d908      	bls.n	80112e8 <forward_dense+0x3b8>
 80112d6:	edd1 7a08 	vldr	s15, [r1, #32]
 80112da:	7a01      	ldrb	r1, [r0, #8]
 80112dc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80112e0:	edd1 6a00 	vldr	s13, [r1]
 80112e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80112e8:	ee35 5a07 	vadd.f32	s10, s10, s14
 80112ec:	e6f0      	b.n	80110d0 <forward_dense+0x1a0>
 80112ee:	ed9f 5a02 	vldr	s10, [pc, #8]	; 80112f8 <forward_dense+0x3c8>
 80112f2:	e6d6      	b.n	80110a2 <forward_dense+0x172>
 80112f4:	3ffffff8 	.word	0x3ffffff8
 80112f8:	00000000 	.word	0x00000000
 80112fc:	eeb0 7a48 	vmov.f32	s14, s16
 8011300:	4650      	mov	r0, sl
 8011302:	4611      	mov	r1, r2
 8011304:	468c      	mov	ip, r1
 8011306:	4606      	mov	r6, r0
 8011308:	f81c 5b01 	ldrb.w	r5, [ip], #1
 801130c:	ecf6 7a01 	vldmia	r6!, {s15}
 8011310:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011314:	edd5 6a00 	vldr	s13, [r5]
 8011318:	9d08      	ldr	r5, [sp, #32]
 801131a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801131e:	42ae      	cmp	r6, r5
 8011320:	d866      	bhi.n	80113f0 <forward_dense+0x4c0>
 8011322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011324:	f101 0711 	add.w	r7, r1, #17
 8011328:	3109      	adds	r1, #9
 801132a:	eba5 0800 	sub.w	r8, r5, r0
 801132e:	3024      	adds	r0, #36	; 0x24
 8011330:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8011334:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8011338:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 801133c:	3108      	adds	r1, #8
 801133e:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8011342:	3020      	adds	r0, #32
 8011344:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011348:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 801134c:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8011350:	edd5 7a00 	vldr	s15, [r5]
 8011354:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8011358:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801135c:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8011360:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011364:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8011368:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 801136c:	edd5 2a00 	vldr	s5, [r5]
 8011370:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8011374:	eee2 7a83 	vfma.f32	s15, s5, s6
 8011378:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 801137c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011380:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8011384:	ed95 3a00 	vldr	s6, [r5]
 8011388:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 801138c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011390:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011394:	edd5 3a00 	vldr	s7, [r5]
 8011398:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 801139c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80113a0:	eee3 7a84 	vfma.f32	s15, s7, s8
 80113a4:	ed95 4a00 	vldr	s8, [r5]
 80113a8:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80113ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80113b0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80113b4:	edd5 4a00 	vldr	s9, [r5]
 80113b8:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80113bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80113c0:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80113c4:	edd5 5a00 	vldr	s11, [r5]
 80113c8:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80113cc:	428f      	cmp	r7, r1
 80113ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80113d2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80113d6:	ed95 6a00 	vldr	s12, [r5]
 80113da:	eee6 7a26 	vfma.f32	s15, s12, s13
 80113de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80113e2:	d1a9      	bne.n	8011338 <forward_dense+0x408>
 80113e4:	f108 0801 	add.w	r8, r8, #1
 80113e8:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80113ec:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 80113f0:	455e      	cmp	r6, fp
 80113f2:	f4bf af79 	bcs.w	80112e8 <forward_dense+0x3b8>
 80113f6:	f89c 1000 	ldrb.w	r1, [ip]
 80113fa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80113fe:	edd1 7a00 	vldr	s15, [r1]
 8011402:	4631      	mov	r1, r6
 8011404:	ecf1 6a01 	vldmia	r1!, {s13}
 8011408:	458b      	cmp	fp, r1
 801140a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801140e:	f67f af6b 	bls.w	80112e8 <forward_dense+0x3b8>
 8011412:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8011416:	edd6 6a01 	vldr	s13, [r6, #4]
 801141a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801141e:	edd1 7a00 	vldr	s15, [r1]
 8011422:	f106 0108 	add.w	r1, r6, #8
 8011426:	458b      	cmp	fp, r1
 8011428:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801142c:	f67f af5c 	bls.w	80112e8 <forward_dense+0x3b8>
 8011430:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8011434:	edd6 6a02 	vldr	s13, [r6, #8]
 8011438:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801143c:	edd1 7a00 	vldr	s15, [r1]
 8011440:	f106 010c 	add.w	r1, r6, #12
 8011444:	458b      	cmp	fp, r1
 8011446:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801144a:	f67f af4d 	bls.w	80112e8 <forward_dense+0x3b8>
 801144e:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8011452:	edd6 6a03 	vldr	s13, [r6, #12]
 8011456:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801145a:	edd1 7a00 	vldr	s15, [r1]
 801145e:	f106 0110 	add.w	r1, r6, #16
 8011462:	458b      	cmp	fp, r1
 8011464:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011468:	f67f af3e 	bls.w	80112e8 <forward_dense+0x3b8>
 801146c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8011470:	edd6 6a04 	vldr	s13, [r6, #16]
 8011474:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011478:	edd1 7a00 	vldr	s15, [r1]
 801147c:	f106 0114 	add.w	r1, r6, #20
 8011480:	458b      	cmp	fp, r1
 8011482:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011486:	f67f af2f 	bls.w	80112e8 <forward_dense+0x3b8>
 801148a:	f89c 1005 	ldrb.w	r1, [ip, #5]
 801148e:	edd6 6a05 	vldr	s13, [r6, #20]
 8011492:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011496:	edd1 7a00 	vldr	s15, [r1]
 801149a:	f106 0118 	add.w	r1, r6, #24
 801149e:	458b      	cmp	fp, r1
 80114a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114a4:	f67f af20 	bls.w	80112e8 <forward_dense+0x3b8>
 80114a8:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80114ac:	edd6 6a06 	vldr	s13, [r6, #24]
 80114b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80114b4:	edd1 7a00 	vldr	s15, [r1]
 80114b8:	f106 011c 	add.w	r1, r6, #28
 80114bc:	458b      	cmp	fp, r1
 80114be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114c2:	f67f af11 	bls.w	80112e8 <forward_dense+0x3b8>
 80114c6:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80114ca:	edd6 6a07 	vldr	s13, [r6, #28]
 80114ce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80114d2:	edd1 7a00 	vldr	s15, [r1]
 80114d6:	f106 0120 	add.w	r1, r6, #32
 80114da:	458b      	cmp	fp, r1
 80114dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114e0:	f67f af02 	bls.w	80112e8 <forward_dense+0x3b8>
 80114e4:	f89c 1008 	ldrb.w	r1, [ip, #8]
 80114e8:	edd6 7a08 	vldr	s15, [r6, #32]
 80114ec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80114f0:	edd1 6a00 	vldr	s13, [r1]
 80114f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114f8:	e6f6      	b.n	80112e8 <forward_dense+0x3b8>
 80114fa:	eeb0 7a48 	vmov.f32	s14, s16
 80114fe:	4650      	mov	r0, sl
 8011500:	4611      	mov	r1, r2
 8011502:	f811 5b01 	ldrb.w	r5, [r1], #1
 8011506:	ecf0 7a01 	vldmia	r0!, {s15}
 801150a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801150e:	edd5 6a00 	vldr	s13, [r5]
 8011512:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011516:	e6f5      	b.n	8011304 <forward_dense+0x3d4>
 8011518:	4611      	mov	r1, r2
 801151a:	edda 7a00 	vldr	s15, [sl]
 801151e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011520:	f811 5b01 	ldrb.w	r5, [r1], #1
 8011524:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011528:	ed95 7a00 	vldr	s14, [r5]
 801152c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011530:	e7e7      	b.n	8011502 <forward_dense+0x5d2>
 8011532:	9803      	ldr	r0, [sp, #12]
 8011534:	9906      	ldr	r1, [sp, #24]
 8011536:	4288      	cmp	r0, r1
 8011538:	f67f adda 	bls.w	80110f0 <forward_dense+0x1c0>
 801153c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801153e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8011542:	468b      	mov	fp, r1
 8011544:	f100 0c01 	add.w	ip, r0, #1
 8011548:	9805      	ldr	r0, [sp, #20]
 801154a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801154e:	3801      	subs	r0, #1
 8011550:	9008      	str	r0, [sp, #32]
 8011552:	2b00      	cmp	r3, #0
 8011554:	f000 80bf 	beq.w	80116d6 <forward_dense+0x7a6>
 8011558:	9909      	ldr	r1, [sp, #36]	; 0x24
 801155a:	ecf3 2a01 	vldmia	r3!, {s5}
 801155e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 80112f8 <forward_dense+0x3c8>
 8011562:	2900      	cmp	r1, #0
 8011564:	f000 80bf 	beq.w	80116e6 <forward_dense+0x7b6>
 8011568:	1d10      	adds	r0, r2, #4
 801156a:	f10a 0120 	add.w	r1, sl, #32
 801156e:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8011572:	3004      	adds	r0, #4
 8011574:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8011578:	3120      	adds	r1, #32
 801157a:	f007 0e0f 	and.w	lr, r7, #15
 801157e:	093f      	lsrs	r7, r7, #4
 8011580:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8011584:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8011588:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 801158c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8011590:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8011594:	edde 7a00 	vldr	s15, [lr]
 8011598:	ed97 3a00 	vldr	s6, [r7]
 801159c:	0937      	lsrs	r7, r6, #4
 801159e:	ee67 7a82 	vmul.f32	s15, s15, s4
 80115a2:	f006 060f 	and.w	r6, r6, #15
 80115a6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80115aa:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 80115ae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80115b2:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 80115b6:	eee3 7a04 	vfma.f32	s15, s6, s8
 80115ba:	ed97 3a00 	vldr	s6, [r7]
 80115be:	ed96 4a00 	vldr	s8, [r6]
 80115c2:	092e      	lsrs	r6, r5, #4
 80115c4:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 80115c8:	f005 050f 	and.w	r5, r5, #15
 80115cc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80115d0:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 80115d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115d8:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 80115dc:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 80115e0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80115e4:	eee4 7a05 	vfma.f32	s15, s8, s10
 80115e8:	ed96 4a00 	vldr	s8, [r6]
 80115ec:	ed95 5a00 	vldr	s10, [r5]
 80115f0:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 80115f4:	4560      	cmp	r0, ip
 80115f6:	ea4f 1615 	mov.w	r6, r5, lsr #4
 80115fa:	f005 050f 	and.w	r5, r5, #15
 80115fe:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011602:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011606:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801160a:	eee5 7a06 	vfma.f32	s15, s10, s12
 801160e:	ed96 5a00 	vldr	s10, [r6]
 8011612:	ed95 6a00 	vldr	s12, [r5]
 8011616:	eee5 7a25 	vfma.f32	s15, s10, s11
 801161a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801161e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011622:	d1a4      	bne.n	801156e <forward_dense+0x63e>
 8011624:	f1ac 0804 	sub.w	r8, ip, #4
 8011628:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801162c:	9905      	ldr	r1, [sp, #20]
 801162e:	458e      	cmp	lr, r1
 8011630:	d229      	bcs.n	8011686 <forward_dense+0x756>
 8011632:	9908      	ldr	r1, [sp, #32]
 8011634:	f10e 0008 	add.w	r0, lr, #8
 8011638:	f108 36ff 	add.w	r6, r8, #4294967295
 801163c:	eba1 070e 	sub.w	r7, r1, lr
 8011640:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8011644:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8011648:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801164c:	3008      	adds	r0, #8
 801164e:	ed50 5a03 	vldr	s11, [r0, #-12]
 8011652:	f001 050f 	and.w	r5, r1, #15
 8011656:	0909      	lsrs	r1, r1, #4
 8011658:	ed50 6a04 	vldr	s13, [r0, #-16]
 801165c:	42b7      	cmp	r7, r6
 801165e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011662:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011666:	edd5 7a00 	vldr	s15, [r5]
 801166a:	ed91 6a00 	vldr	s12, [r1]
 801166e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011672:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011676:	ee37 7a27 	vadd.f32	s14, s14, s15
 801167a:	d1e5      	bne.n	8011648 <forward_dense+0x718>
 801167c:	f109 0901 	add.w	r9, r9, #1
 8011680:	44c8      	add	r8, r9
 8011682:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8011686:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011688:	b1c1      	cbz	r1, 80116bc <forward_dense+0x78c>
 801168a:	f898 1000 	ldrb.w	r1, [r8]
 801168e:	edde 7a00 	vldr	s15, [lr]
 8011692:	0909      	lsrs	r1, r1, #4
 8011694:	9804      	ldr	r0, [sp, #16]
 8011696:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801169a:	4402      	add	r2, r0
 801169c:	4484      	add	ip, r0
 801169e:	edd1 6a00 	vldr	s13, [r1]
 80116a2:	9903      	ldr	r1, [sp, #12]
 80116a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116a8:	ee72 2a87 	vadd.f32	s5, s5, s14
 80116ac:	eceb 2a01 	vstmia	fp!, {s5}
 80116b0:	4559      	cmp	r1, fp
 80116b2:	f63f af4e 	bhi.w	8011552 <forward_dense+0x622>
 80116b6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80116ba:	e510      	b.n	80110de <forward_dense+0x1ae>
 80116bc:	9904      	ldr	r1, [sp, #16]
 80116be:	ee32 7a87 	vadd.f32	s14, s5, s14
 80116c2:	440a      	add	r2, r1
 80116c4:	448c      	add	ip, r1
 80116c6:	9903      	ldr	r1, [sp, #12]
 80116c8:	ecab 7a01 	vstmia	fp!, {s14}
 80116cc:	458b      	cmp	fp, r1
 80116ce:	d2f2      	bcs.n	80116b6 <forward_dense+0x786>
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	f47f af41 	bne.w	8011558 <forward_dense+0x628>
 80116d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116d8:	eef0 2a48 	vmov.f32	s5, s16
 80116dc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 801176c <forward_dense+0x83c>
 80116e0:	2900      	cmp	r1, #0
 80116e2:	f47f af41 	bne.w	8011568 <forward_dense+0x638>
 80116e6:	46d6      	mov	lr, sl
 80116e8:	4690      	mov	r8, r2
 80116ea:	e79f      	b.n	801162c <forward_dense+0x6fc>
 80116ec:	9819      	ldr	r0, [sp, #100]	; 0x64
 80116ee:	4651      	mov	r1, sl
 80116f0:	9d06      	ldr	r5, [sp, #24]
 80116f2:	9001      	str	r0, [sp, #4]
 80116f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80116f6:	9000      	str	r0, [sp, #0]
 80116f8:	4628      	mov	r0, r5
 80116fa:	f000 fbe3 	bl	8011ec4 <forward_lite_dense_if32of32wf32>
 80116fe:	462b      	mov	r3, r5
 8011700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011702:	4413      	add	r3, r2
 8011704:	4619      	mov	r1, r3
 8011706:	9306      	str	r3, [sp, #24]
 8011708:	e4f2      	b.n	80110f0 <forward_dense+0x1c0>
 801170a:	b01b      	add	sp, #108	; 0x6c
 801170c:	ecbd 8b02 	vpop	{d8}
 8011710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011714:	4601      	mov	r1, r0
 8011716:	e4eb      	b.n	80110f0 <forward_dense+0x1c0>
 8011718:	4651      	mov	r1, sl
 801171a:	4610      	mov	r0, r2
 801171c:	e572      	b.n	8011204 <forward_dense+0x2d4>
 801171e:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8011722:	f1b9 0f00 	cmp.w	r9, #0
 8011726:	d016      	beq.n	8011756 <forward_dense+0x826>
 8011728:	e9d9 0100 	ldrd	r0, r1, [r9]
 801172c:	f000 fde6 	bl	80122fc <ai_array_get_byte_size>
 8011730:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8011734:	4602      	mov	r2, r0
 8011736:	4640      	mov	r0, r8
 8011738:	4651      	mov	r1, sl
 801173a:	f000 fceb 	bl	8012114 <st_int8_copy>
 801173e:	e44b      	b.n	8010fd8 <forward_dense+0xa8>
 8011740:	2b04      	cmp	r3, #4
 8011742:	d00a      	beq.n	801175a <forward_dense+0x82a>
 8011744:	f04f 0900 	mov.w	r9, #0
 8011748:	e441      	b.n	8010fce <forward_dense+0x9e>
 801174a:	930f      	str	r3, [sp, #60]	; 0x3c
 801174c:	e417      	b.n	8010f7e <forward_dense+0x4e>
 801174e:	2300      	movs	r3, #0
 8011750:	930d      	str	r3, [sp, #52]	; 0x34
 8011752:	460b      	mov	r3, r1
 8011754:	e413      	b.n	8010f7e <forward_dense+0x4e>
 8011756:	46c2      	mov	sl, r8
 8011758:	e43e      	b.n	8010fd8 <forward_dense+0xa8>
 801175a:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 801175e:	e43b      	b.n	8010fd8 <forward_dense+0xa8>
 8011760:	2300      	movs	r3, #0
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	deff      	udf	#255	; 0xff
 8011766:	2300      	movs	r3, #0
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	deff      	udf	#255	; 0xff
 801176c:	00000000 	.word	0x00000000

08011770 <forward_relu>:
 8011770:	6982      	ldr	r2, [r0, #24]
 8011772:	8813      	ldrh	r3, [r2, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d05b      	beq.n	8011830 <forward_relu+0xc0>
 8011778:	6851      	ldr	r1, [r2, #4]
 801177a:	684a      	ldr	r2, [r1, #4]
 801177c:	b102      	cbz	r2, 8011780 <forward_relu+0x10>
 801177e:	6812      	ldr	r2, [r2, #0]
 8011780:	2b01      	cmp	r3, #1
 8011782:	f000 8123 	beq.w	80119cc <forward_relu+0x25c>
 8011786:	b470      	push	{r4, r5, r6}
 8011788:	690b      	ldr	r3, [r1, #16]
 801178a:	b103      	cbz	r3, 801178e <forward_relu+0x1e>
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	69c6      	ldr	r6, [r0, #28]
 8011790:	2e00      	cmp	r6, #0
 8011792:	f000 809e 	beq.w	80118d2 <forward_relu+0x162>
 8011796:	6871      	ldr	r1, [r6, #4]
 8011798:	6998      	ldr	r0, [r3, #24]
 801179a:	2901      	cmp	r1, #1
 801179c:	f000 80c3 	beq.w	8011926 <forward_relu+0x1b6>
 80117a0:	6893      	ldr	r3, [r2, #8]
 80117a2:	6991      	ldr	r1, [r2, #24]
 80117a4:	0a1b      	lsrs	r3, r3, #8
 80117a6:	6880      	ldr	r0, [r0, #8]
 80117a8:	688d      	ldr	r5, [r1, #8]
 80117aa:	f000 80f2 	beq.w	8011992 <forward_relu+0x222>
 80117ae:	68d4      	ldr	r4, [r2, #12]
 80117b0:	2201      	movs	r2, #1
 80117b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80117b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80117ba:	42a3      	cmp	r3, r4
 80117bc:	fb01 f202 	mul.w	r2, r1, r2
 80117c0:	d1f9      	bne.n	80117b6 <forward_relu+0x46>
 80117c2:	68b3      	ldr	r3, [r6, #8]
 80117c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80117c8:	edd3 6a00 	vldr	s13, [r3]
 80117cc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80117d0:	ed93 6a01 	vldr	s12, [r3, #4]
 80117d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117d8:	d42c      	bmi.n	8011834 <forward_relu+0xc4>
 80117da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80117de:	4413      	add	r3, r2
 80117e0:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80117e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80117e8:	4295      	cmp	r5, r2
 80117ea:	d81f      	bhi.n	801182c <forward_relu+0xbc>
 80117ec:	3204      	adds	r2, #4
 80117ee:	1d01      	adds	r1, r0, #4
 80117f0:	e00d      	b.n	801180e <forward_relu+0x9e>
 80117f2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80117f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117fa:	db03      	blt.n	8011804 <forward_relu+0x94>
 80117fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011800:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011804:	3b08      	subs	r3, #8
 8011806:	ed61 7a01 	vstmdb	r1!, {s15}
 801180a:	429d      	cmp	r5, r3
 801180c:	d80e      	bhi.n	801182c <forward_relu+0xbc>
 801180e:	4613      	mov	r3, r2
 8011810:	ed72 7a01 	vldmdb	r2!, {s15}
 8011814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801181c:	d9e9      	bls.n	80117f2 <forward_relu+0x82>
 801181e:	3b08      	subs	r3, #8
 8011820:	eef0 7a47 	vmov.f32	s15, s14
 8011824:	429d      	cmp	r5, r3
 8011826:	ed61 7a01 	vstmdb	r1!, {s15}
 801182a:	d9f0      	bls.n	801180e <forward_relu+0x9e>
 801182c:	bc70      	pop	{r4, r5, r6}
 801182e:	4770      	bx	lr
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	deff      	udf	#255	; 0xff
 8011834:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011838:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801183c:	4411      	add	r1, r2
 801183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011842:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8011846:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801184a:	d11f      	bne.n	801188c <forward_relu+0x11c>
 801184c:	429d      	cmp	r5, r3
 801184e:	d8ed      	bhi.n	801182c <forward_relu+0xbc>
 8011850:	1b5d      	subs	r5, r3, r5
 8011852:	1d1a      	adds	r2, r3, #4
 8011854:	1d01      	adds	r1, r0, #4
 8011856:	2000      	movs	r0, #0
 8011858:	f025 0503 	bic.w	r5, r5, #3
 801185c:	1b5b      	subs	r3, r3, r5
 801185e:	ed72 7a01 	vldmdb	r2!, {s15}
 8011862:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801186a:	dc0a      	bgt.n	8011882 <forward_relu+0x112>
 801186c:	429a      	cmp	r2, r3
 801186e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8011872:	d0db      	beq.n	801182c <forward_relu+0xbc>
 8011874:	ed72 7a01 	vldmdb	r2!, {s15}
 8011878:	eef4 7ae6 	vcmpe.f32	s15, s13
 801187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011880:	ddf4      	ble.n	801186c <forward_relu+0xfc>
 8011882:	429a      	cmp	r2, r3
 8011884:	ed61 7a01 	vstmdb	r1!, {s15}
 8011888:	d1e9      	bne.n	801185e <forward_relu+0xee>
 801188a:	e7cf      	b.n	801182c <forward_relu+0xbc>
 801188c:	429d      	cmp	r5, r3
 801188e:	d8cd      	bhi.n	801182c <forward_relu+0xbc>
 8011890:	1b5d      	subs	r5, r3, r5
 8011892:	1d1a      	adds	r2, r3, #4
 8011894:	1d01      	adds	r1, r0, #4
 8011896:	f025 0503 	bic.w	r5, r5, #3
 801189a:	1b5b      	subs	r3, r3, r5
 801189c:	ed72 7a01 	vldmdb	r2!, {s15}
 80118a0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80118a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a8:	db0e      	blt.n	80118c8 <forward_relu+0x158>
 80118aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80118ae:	4293      	cmp	r3, r2
 80118b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80118b4:	ed61 7a01 	vstmdb	r1!, {s15}
 80118b8:	d0b8      	beq.n	801182c <forward_relu+0xbc>
 80118ba:	ed72 7a01 	vldmdb	r2!, {s15}
 80118be:	eef4 6ae7 	vcmpe.f32	s13, s15
 80118c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c6:	daf0      	bge.n	80118aa <forward_relu+0x13a>
 80118c8:	4293      	cmp	r3, r2
 80118ca:	ed61 7a01 	vstmdb	r1!, {s15}
 80118ce:	d1e5      	bne.n	801189c <forward_relu+0x12c>
 80118d0:	e7ac      	b.n	801182c <forward_relu+0xbc>
 80118d2:	6999      	ldr	r1, [r3, #24]
 80118d4:	6893      	ldr	r3, [r2, #8]
 80118d6:	6990      	ldr	r0, [r2, #24]
 80118d8:	0a1b      	lsrs	r3, r3, #8
 80118da:	6889      	ldr	r1, [r1, #8]
 80118dc:	6884      	ldr	r4, [r0, #8]
 80118de:	d06e      	beq.n	80119be <forward_relu+0x24e>
 80118e0:	68d5      	ldr	r5, [r2, #12]
 80118e2:	2201      	movs	r2, #1
 80118e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80118e8:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80118ec:	429d      	cmp	r5, r3
 80118ee:	fb00 f202 	mul.w	r2, r0, r2
 80118f2:	d1f9      	bne.n	80118e8 <forward_relu+0x178>
 80118f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80118f8:	4413      	add	r3, r2
 80118fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80118fe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011902:	4294      	cmp	r4, r2
 8011904:	d892      	bhi.n	801182c <forward_relu+0xbc>
 8011906:	3204      	adds	r2, #4
 8011908:	3104      	adds	r1, #4
 801190a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80119d4 <forward_relu+0x264>
 801190e:	4613      	mov	r3, r2
 8011910:	ed72 7a01 	vldmdb	r2!, {s15}
 8011914:	3b08      	subs	r3, #8
 8011916:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801191a:	ed61 7a01 	vstmdb	r1!, {s15}
 801191e:	429c      	cmp	r4, r3
 8011920:	d9f5      	bls.n	801190e <forward_relu+0x19e>
 8011922:	bc70      	pop	{r4, r5, r6}
 8011924:	4770      	bx	lr
 8011926:	6993      	ldr	r3, [r2, #24]
 8011928:	6880      	ldr	r0, [r0, #8]
 801192a:	689c      	ldr	r4, [r3, #8]
 801192c:	6893      	ldr	r3, [r2, #8]
 801192e:	0a1b      	lsrs	r3, r3, #8
 8011930:	d047      	beq.n	80119c2 <forward_relu+0x252>
 8011932:	68d5      	ldr	r5, [r2, #12]
 8011934:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011938:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801193c:	42ab      	cmp	r3, r5
 801193e:	fb02 f101 	mul.w	r1, r2, r1
 8011942:	d1f9      	bne.n	8011938 <forward_relu+0x1c8>
 8011944:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8011948:	68b3      	ldr	r3, [r6, #8]
 801194a:	440a      	add	r2, r1
 801194c:	ed93 7a00 	vldr	s14, [r3]
 8011950:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011954:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8011958:	429c      	cmp	r4, r3
 801195a:	f63f af67 	bhi.w	801182c <forward_relu+0xbc>
 801195e:	1d02      	adds	r2, r0, #4
 8011960:	3304      	adds	r3, #4
 8011962:	2000      	movs	r0, #0
 8011964:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011968:	1f19      	subs	r1, r3, #4
 801196a:	3b08      	subs	r3, #8
 801196c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011974:	d406      	bmi.n	8011984 <forward_relu+0x214>
 8011976:	429c      	cmp	r4, r3
 8011978:	f842 0d04 	str.w	r0, [r2, #-4]!
 801197c:	f63f af56 	bhi.w	801182c <forward_relu+0xbc>
 8011980:	460b      	mov	r3, r1
 8011982:	e7ef      	b.n	8011964 <forward_relu+0x1f4>
 8011984:	429c      	cmp	r4, r3
 8011986:	ed62 7a01 	vstmdb	r2!, {s15}
 801198a:	f63f af4f 	bhi.w	801182c <forward_relu+0xbc>
 801198e:	460b      	mov	r3, r1
 8011990:	e7e8      	b.n	8011964 <forward_relu+0x1f4>
 8011992:	68b3      	ldr	r3, [r6, #8]
 8011994:	ed93 7a02 	vldr	s14, [r3, #8]
 8011998:	edd3 6a00 	vldr	s13, [r3]
 801199c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80119a0:	ed93 6a01 	vldr	s12, [r3, #4]
 80119a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a8:	d401      	bmi.n	80119ae <forward_relu+0x23e>
 80119aa:	462a      	mov	r2, r5
 80119ac:	e71e      	b.n	80117ec <forward_relu+0x7c>
 80119ae:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80119b2:	462b      	mov	r3, r5
 80119b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b8:	f47f af6a 	bne.w	8011890 <forward_relu+0x120>
 80119bc:	e748      	b.n	8011850 <forward_relu+0xe0>
 80119be:	4622      	mov	r2, r4
 80119c0:	e7a1      	b.n	8011906 <forward_relu+0x196>
 80119c2:	68b2      	ldr	r2, [r6, #8]
 80119c4:	4623      	mov	r3, r4
 80119c6:	ed92 7a00 	vldr	s14, [r2]
 80119ca:	e7c8      	b.n	801195e <forward_relu+0x1ee>
 80119cc:	2300      	movs	r3, #0
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	deff      	udf	#255	; 0xff
 80119d2:	bf00      	nop
 80119d4:	00000000 	.word	0x00000000

080119d8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 80119d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119dc:	ed2d 8b0c 	vpush	{d8-d13}
 80119e0:	b08d      	sub	sp, #52	; 0x34
 80119e2:	461d      	mov	r5, r3
 80119e4:	9003      	str	r0, [sp, #12]
 80119e6:	9207      	str	r2, [sp, #28]
 80119e8:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80119ea:	9308      	str	r3, [sp, #32]
 80119ec:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80119f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80119f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80119f4:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
 80119f8:	fb00 f002 	mul.w	r0, r0, r2
 80119fc:	9004      	str	r0, [sp, #16]
 80119fe:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 8011a02:	9009      	str	r0, [sp, #36]	; 0x24
 8011a04:	2c00      	cmp	r4, #0
 8011a06:	f000 80ed 	beq.w	8011be4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 8011a0a:	009c      	lsls	r4, r3, #2
 8011a0c:	fb00 f305 	mul.w	r3, r0, r5
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	9405      	str	r4, [sp, #20]
 8011a14:	9306      	str	r3, [sp, #24]
 8011a16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011a18:	fb03 f305 	mul.w	r3, r3, r5
 8011a1c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011a20:	9301      	str	r3, [sp, #4]
 8011a22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011a24:	425b      	negs	r3, r3
 8011a26:	9300      	str	r3, [sp, #0]
 8011a28:	2300      	movs	r3, #0
 8011a2a:	9302      	str	r3, [sp, #8]
 8011a2c:	00ab      	lsls	r3, r5, #2
 8011a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8011a30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	f2c0 80dd 	blt.w	8011bf2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 8011a38:	9e01      	ldr	r6, [sp, #4]
 8011a3a:	2000      	movs	r0, #0
 8011a3c:	9d04      	ldr	r5, [sp, #16]
 8011a3e:	9b07      	ldr	r3, [sp, #28]
 8011a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a42:	9900      	ldr	r1, [sp, #0]
 8011a44:	fb05 3502 	mla	r5, r5, r2, r3
 8011a48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011a4a:	440b      	add	r3, r1
 8011a4c:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011a4e:	428b      	cmp	r3, r1
 8011a50:	bf94      	ite	ls
 8011a52:	ebc0 0003 	rsbls	r0, r0, r3
 8011a56:	ebc0 0001 	rsbhi	r0, r0, r1
 8011a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011a5c:	f1bb 0f00 	cmp.w	fp, #0
 8011a60:	eba3 0a00 	sub.w	sl, r3, r0
 8011a64:	9b08      	ldr	r3, [sp, #32]
 8011a66:	eba1 0900 	sub.w	r9, r1, r0
 8011a6a:	fb03 f000 	mul.w	r0, r3, r0
 8011a6e:	f340 80c6 	ble.w	8011bfe <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 8011a72:	f020 040f 	bic.w	r4, r0, #15
 8011a76:	eeb0 7a40 	vmov.f32	s14, s0
 8011a7a:	fb02 fa0a 	mul.w	sl, r2, sl
 8011a7e:	f04f 0c00 	mov.w	ip, #0
 8011a82:	f104 38ff 	add.w	r8, r4, #4294967295
 8011a86:	fb02 f909 	mul.w	r9, r2, r9
 8011a8a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011a8e:	f108 0801 	add.w	r8, r8, #1
 8011a92:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8011a96:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8011a9a:	2c00      	cmp	r4, #0
 8011a9c:	f340 80a7 	ble.w	8011bee <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8011aa0:	f106 0240 	add.w	r2, r6, #64	; 0x40
 8011aa4:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8011aa8:	2100      	movs	r1, #0
 8011aaa:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8011aae:	3110      	adds	r1, #16
 8011ab0:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8011ab4:	3340      	adds	r3, #64	; 0x40
 8011ab6:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8011aba:	42a1      	cmp	r1, r4
 8011abc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011ac0:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8011ac4:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8011ac8:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8011acc:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8011ad0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011ad4:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8011ad8:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 8011adc:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 8011ae0:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 8011ae4:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 8011ae8:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 8011aec:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011af0:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 8011af4:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 8011af8:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 8011afc:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 8011b00:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8011b04:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 8011b08:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8011b0c:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8011b10:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8011b14:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8011b18:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8011b1c:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8011b20:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 8011b24:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8011b28:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8011b2c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8011b30:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8011b34:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8011b38:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8011b3c:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8011b40:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8011b44:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8011b48:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8011b4c:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8011b50:	eeea 7a29 	vfma.f32	s15, s20, s19
 8011b54:	eee9 7a28 	vfma.f32	s15, s18, s17
 8011b58:	eee8 7a20 	vfma.f32	s15, s16, s1
 8011b5c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011b60:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011b64:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011b68:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011b6c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011b70:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011b78:	db97      	blt.n	8011aaa <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 8011b7a:	4476      	add	r6, lr
 8011b7c:	4475      	add	r5, lr
 8011b7e:	4647      	mov	r7, r8
 8011b80:	42b8      	cmp	r0, r7
 8011b82:	dd10      	ble.n	8011ba6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 8011b84:	463b      	mov	r3, r7
 8011b86:	4631      	mov	r1, r6
 8011b88:	462a      	mov	r2, r5
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	ecf2 6a01 	vldmia	r2!, {s13}
 8011b90:	ecf1 7a01 	vldmia	r1!, {s15}
 8011b94:	4298      	cmp	r0, r3
 8011b96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011b9a:	d1f6      	bne.n	8011b8a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8011b9c:	1bc7      	subs	r7, r0, r7
 8011b9e:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8011ba2:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8011ba6:	f10c 0c01 	add.w	ip, ip, #1
 8011baa:	4456      	add	r6, sl
 8011bac:	444d      	add	r5, r9
 8011bae:	45dc      	cmp	ip, fp
 8011bb0:	f47f af73 	bne.w	8011a9a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 8011bb4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8011bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011bb8:	9a03      	ldr	r2, [sp, #12]
 8011bba:	4401      	add	r1, r0
 8011bbc:	9b02      	ldr	r3, [sp, #8]
 8011bbe:	ed82 7a00 	vstr	s14, [r2]
 8011bc2:	9128      	str	r1, [sp, #160]	; 0xa0
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	9905      	ldr	r1, [sp, #20]
 8011bc8:	9302      	str	r3, [sp, #8]
 8011bca:	440a      	add	r2, r1
 8011bcc:	9906      	ldr	r1, [sp, #24]
 8011bce:	9203      	str	r2, [sp, #12]
 8011bd0:	9a00      	ldr	r2, [sp, #0]
 8011bd2:	1a12      	subs	r2, r2, r0
 8011bd4:	9200      	str	r2, [sp, #0]
 8011bd6:	9a01      	ldr	r2, [sp, #4]
 8011bd8:	440a      	add	r2, r1
 8011bda:	9201      	str	r2, [sp, #4]
 8011bdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011bde:	4293      	cmp	r3, r2
 8011be0:	f47f af26 	bne.w	8011a30 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 8011be4:	b00d      	add	sp, #52	; 0x34
 8011be6:	ecbd 8b0c 	vpop	{d8-d13}
 8011bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bee:	2700      	movs	r7, #0
 8011bf0:	e7c6      	b.n	8011b80 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 8011bf2:	9a00      	ldr	r2, [sp, #0]
 8011bf4:	9b04      	ldr	r3, [sp, #16]
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011bfa:	189d      	adds	r5, r3, r2
 8011bfc:	e71f      	b.n	8011a3e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 8011bfe:	eeb0 7a40 	vmov.f32	s14, s0
 8011c02:	e7d7      	b.n	8011bb4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

08011c04 <forward_lite_conv2d_if32of32wf32>:
 8011c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c08:	ed2d 8b02 	vpush	{d8}
 8011c0c:	b09f      	sub	sp, #124	; 0x7c
 8011c0e:	4686      	mov	lr, r0
 8011c10:	4694      	mov	ip, r2
 8011c12:	af08      	add	r7, sp, #32
 8011c14:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 8011c18:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011c1a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011c1e:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 8011c22:	424e      	negs	r6, r1
 8011c24:	64fc      	str	r4, [r7, #76]	; 0x4c
 8011c26:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	613a      	str	r2, [r7, #16]
 8011c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c30:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011c34:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 8011c38:	617d      	str	r5, [r7, #20]
 8011c3a:	633e      	str	r6, [r7, #48]	; 0x30
 8011c3c:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 8011c40:	2c00      	cmp	r4, #0
 8011c42:	f000 8092 	beq.w	8011d6a <forward_lite_conv2d_if32of32wf32+0x166>
 8011c46:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8011c4a:	6379      	str	r1, [r7, #52]	; 0x34
 8011c4c:	fb04 f202 	mul.w	r2, r4, r2
 8011c50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011c54:	4244      	negs	r4, r0
 8011c56:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 8011ec0 <forward_lite_conv2d_if32of32wf32+0x2bc>
 8011c5a:	653c      	str	r4, [r7, #80]	; 0x50
 8011c5c:	fb03 f402 	mul.w	r4, r3, r2
 8011c60:	fb03 f201 	mul.w	r2, r3, r1
 8011c64:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011c6c:	63bc      	str	r4, [r7, #56]	; 0x38
 8011c6e:	fb01 f10a 	mul.w	r1, r1, sl
 8011c72:	0089      	lsls	r1, r1, #2
 8011c74:	61b9      	str	r1, [r7, #24]
 8011c76:	fb05 f102 	mul.w	r1, r5, r2
 8011c7a:	4655      	mov	r5, sl
 8011c7c:	fb06 f202 	mul.w	r2, r6, r2
 8011c80:	46da      	mov	sl, fp
 8011c82:	0089      	lsls	r1, r1, #2
 8011c84:	61f9      	str	r1, [r7, #28]
 8011c86:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 8011c8a:	f10b 0207 	add.w	r2, fp, #7
 8011c8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8011c90:	f022 0107 	bic.w	r1, r2, #7
 8011c94:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 8011c98:	60f9      	str	r1, [r7, #12]
 8011c9a:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 8011c9e:	60ba      	str	r2, [r7, #8]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	6239      	str	r1, [r7, #32]
 8011ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8011ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ca8:	2a00      	cmp	r2, #0
 8011caa:	f2c0 80d5 	blt.w	8011e58 <forward_lite_conv2d_if32of32wf32+0x254>
 8011cae:	2200      	movs	r2, #0
 8011cb0:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 8011cb4:	657a      	str	r2, [r7, #84]	; 0x54
 8011cb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011cb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011cbc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8011cc0:	440a      	add	r2, r1
 8011cc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011cc4:	4282      	cmp	r2, r0
 8011cc6:	bf94      	ite	ls
 8011cc8:	ebc1 0102 	rsbls	r1, r1, r2
 8011ccc:	ebc1 0100 	rsbhi	r1, r1, r0
 8011cd0:	6a3a      	ldr	r2, [r7, #32]
 8011cd2:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011cd6:	6439      	str	r1, [r7, #64]	; 0x40
 8011cd8:	d24d      	bcs.n	8011d76 <forward_lite_conv2d_if32of32wf32+0x172>
 8011cda:	b385      	cbz	r5, 8011d3e <forward_lite_conv2d_if32of32wf32+0x13a>
 8011cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011cde:	2a00      	cmp	r2, #0
 8011ce0:	f000 80bf 	beq.w	8011e62 <forward_lite_conv2d_if32of32wf32+0x25e>
 8011ce4:	4659      	mov	r1, fp
 8011ce6:	4691      	mov	r9, r2
 8011ce8:	46d3      	mov	fp, sl
 8011cea:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8011cee:	693e      	ldr	r6, [r7, #16]
 8011cf0:	2400      	movs	r4, #0
 8011cf2:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8011cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cf8:	3401      	adds	r4, #1
 8011cfa:	ecb9 0a01 	vldmia	r9!, {s0}
 8011cfe:	4640      	mov	r0, r8
 8011d00:	9207      	str	r2, [sp, #28]
 8011d02:	f108 0804 	add.w	r8, r8, #4
 8011d06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d08:	e9cd a205 	strd	sl, r2, [sp, #20]
 8011d0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d0e:	9204      	str	r2, [sp, #16]
 8011d10:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011d14:	9203      	str	r2, [sp, #12]
 8011d16:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011d1a:	9202      	str	r2, [sp, #8]
 8011d1c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011d20:	e9cd 5200 	strd	r5, r2, [sp]
 8011d24:	4632      	mov	r2, r6
 8011d26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011d2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8011d2c:	445e      	add	r6, fp
 8011d2e:	f7ff fe53 	bl	80119d8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011d32:	42a5      	cmp	r5, r4
 8011d34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011d36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011d3a:	d1dc      	bne.n	8011cf6 <forward_lite_conv2d_if32of32wf32+0xf2>
 8011d3c:	46da      	mov	sl, fp
 8011d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d40:	69b8      	ldr	r0, [r7, #24]
 8011d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d44:	4401      	add	r1, r0
 8011d46:	6978      	ldr	r0, [r7, #20]
 8011d48:	3201      	adds	r2, #1
 8011d4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d4e:	627a      	str	r2, [r7, #36]	; 0x24
 8011d50:	4401      	add	r1, r0
 8011d52:	6339      	str	r1, [r7, #48]	; 0x30
 8011d54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011d56:	1a09      	subs	r1, r1, r0
 8011d58:	69f8      	ldr	r0, [r7, #28]
 8011d5a:	6379      	str	r1, [r7, #52]	; 0x34
 8011d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d5e:	4401      	add	r1, r0
 8011d60:	62b9      	str	r1, [r7, #40]	; 0x28
 8011d62:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011d66:	4291      	cmp	r1, r2
 8011d68:	d19d      	bne.n	8011ca6 <forward_lite_conv2d_if32of32wf32+0xa2>
 8011d6a:	375c      	adds	r7, #92	; 0x5c
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	ecbd 8b02 	vpop	{d8}
 8011d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d76:	466a      	mov	r2, sp
 8011d78:	ee08 2a90 	vmov	s17, r2
 8011d7c:	68fa      	ldr	r2, [r7, #12]
 8011d7e:	ebad 0d02 	sub.w	sp, sp, r2
 8011d82:	aa08      	add	r2, sp, #32
 8011d84:	2d00      	cmp	r5, #0
 8011d86:	d03d      	beq.n	8011e04 <forward_lite_conv2d_if32of32wf32+0x200>
 8011d88:	6938      	ldr	r0, [r7, #16]
 8011d8a:	4659      	mov	r1, fp
 8011d8c:	68bc      	ldr	r4, [r7, #8]
 8011d8e:	46ab      	mov	fp, r5
 8011d90:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 8011d94:	f04f 0800 	mov.w	r8, #0
 8011d98:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d9e:	b138      	cbz	r0, 8011db0 <forward_lite_conv2d_if32of32wf32+0x1ac>
 8011da0:	4628      	mov	r0, r5
 8011da2:	4694      	mov	ip, r2
 8011da4:	f850 eb04 	ldr.w	lr, [r0], #4
 8011da8:	42a0      	cmp	r0, r4
 8011daa:	f84c eb04 	str.w	lr, [ip], #4
 8011dae:	d1f9      	bne.n	8011da4 <forward_lite_conv2d_if32of32wf32+0x1a0>
 8011db0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011db2:	f108 0801 	add.w	r8, r8, #1
 8011db6:	b348      	cbz	r0, 8011e0c <forward_lite_conv2d_if32of32wf32+0x208>
 8011db8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011dba:	4455      	add	r5, sl
 8011dbc:	ecb6 0a01 	vldmia	r6!, {s0}
 8011dc0:	4454      	add	r4, sl
 8011dc2:	9007      	str	r0, [sp, #28]
 8011dc4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011dc6:	9006      	str	r0, [sp, #24]
 8011dc8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011dca:	9005      	str	r0, [sp, #20]
 8011dcc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011dce:	9004      	str	r0, [sp, #16]
 8011dd0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011dd4:	9003      	str	r0, [sp, #12]
 8011dd6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8011dda:	9002      	str	r0, [sp, #8]
 8011ddc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011de0:	e9cd b000 	strd	fp, r0, [sp]
 8011de4:	4648      	mov	r0, r9
 8011de6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011dea:	f109 0904 	add.w	r9, r9, #4
 8011dee:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8011df2:	f7ff fdf1 	bl	80119d8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011df6:	45d8      	cmp	r8, fp
 8011df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011dfc:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8011e00:	d1cc      	bne.n	8011d9c <forward_lite_conv2d_if32of32wf32+0x198>
 8011e02:	465d      	mov	r5, fp
 8011e04:	ee18 2a90 	vmov	r2, s17
 8011e08:	4695      	mov	sp, r2
 8011e0a:	e798      	b.n	8011d3e <forward_lite_conv2d_if32of32wf32+0x13a>
 8011e0c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011e0e:	eeb0 0a48 	vmov.f32	s0, s16
 8011e12:	4455      	add	r5, sl
 8011e14:	4454      	add	r4, sl
 8011e16:	9007      	str	r0, [sp, #28]
 8011e18:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011e1a:	9006      	str	r0, [sp, #24]
 8011e1c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011e1e:	9005      	str	r0, [sp, #20]
 8011e20:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011e22:	9004      	str	r0, [sp, #16]
 8011e24:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011e28:	9003      	str	r0, [sp, #12]
 8011e2a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8011e2e:	9002      	str	r0, [sp, #8]
 8011e30:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011e34:	e9cd b000 	strd	fp, r0, [sp]
 8011e38:	4648      	mov	r0, r9
 8011e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011e3e:	f109 0904 	add.w	r9, r9, #4
 8011e42:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8011e46:	f7ff fdc7 	bl	80119d8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011e4a:	45c3      	cmp	fp, r8
 8011e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011e50:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8011e54:	d1a2      	bne.n	8011d9c <forward_lite_conv2d_if32of32wf32+0x198>
 8011e56:	e7d4      	b.n	8011e02 <forward_lite_conv2d_if32of32wf32+0x1fe>
 8011e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e5a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8011e5e:	657a      	str	r2, [r7, #84]	; 0x54
 8011e60:	e729      	b.n	8011cb6 <forward_lite_conv2d_if32of32wf32+0xb2>
 8011e62:	4659      	mov	r1, fp
 8011e64:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8011e68:	46d3      	mov	fp, sl
 8011e6a:	693e      	ldr	r6, [r7, #16]
 8011e6c:	4614      	mov	r4, r2
 8011e6e:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 8011e72:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8011e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e78:	3401      	adds	r4, #1
 8011e7a:	4640      	mov	r0, r8
 8011e7c:	eeb0 0a48 	vmov.f32	s0, s16
 8011e80:	9207      	str	r2, [sp, #28]
 8011e82:	f108 0804 	add.w	r8, r8, #4
 8011e86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011e88:	f8cd 9010 	str.w	r9, [sp, #16]
 8011e8c:	e9cd a205 	strd	sl, r2, [sp, #20]
 8011e90:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011e94:	9203      	str	r2, [sp, #12]
 8011e96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011e9a:	9202      	str	r2, [sp, #8]
 8011e9c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011ea0:	e9cd 5200 	strd	r5, r2, [sp]
 8011ea4:	4632      	mov	r2, r6
 8011ea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011eaa:	6579      	str	r1, [r7, #84]	; 0x54
 8011eac:	445e      	add	r6, fp
 8011eae:	f7ff fd93 	bl	80119d8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011eb2:	42a5      	cmp	r5, r4
 8011eb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011eba:	d1dc      	bne.n	8011e76 <forward_lite_conv2d_if32of32wf32+0x272>
 8011ebc:	e73e      	b.n	8011d3c <forward_lite_conv2d_if32of32wf32+0x138>
 8011ebe:	bf00      	nop
 8011ec0:	00000000 	.word	0x00000000

08011ec4 <forward_lite_dense_if32of32wf32>:
 8011ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec8:	ed2d 8b0c 	vpush	{d8-d13}
 8011ecc:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 8011ed0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8011ed4:	4287      	cmp	r7, r0
 8011ed6:	f240 8105 	bls.w	80120e4 <forward_lite_dense_if32of32wf32+0x220>
 8011eda:	f1a6 0810 	sub.w	r8, r6, #16
 8011ede:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8011ee2:	4605      	mov	r5, r0
 8011ee4:	f006 0b0f 	and.w	fp, r6, #15
 8011ee8:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011eec:	f108 0801 	add.w	r8, r8, #1
 8011ef0:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8011ef4:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8011ef8:	2e0f      	cmp	r6, #15
 8011efa:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8012110 <forward_lite_dense_if32of32wf32+0x24c>
 8011efe:	f240 8102 	bls.w	8012106 <forward_lite_dense_if32of32wf32+0x242>
 8011f02:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8011f06:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8011f0a:	46b6      	mov	lr, r6
 8011f0c:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8011f10:	f1ae 0e10 	sub.w	lr, lr, #16
 8011f14:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8011f18:	3440      	adds	r4, #64	; 0x40
 8011f1a:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 8011f1e:	f1be 0f0f 	cmp.w	lr, #15
 8011f22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011f26:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 8011f2a:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8011f2e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8011f32:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 8011f36:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011f3a:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8011f3e:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8011f42:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 8011f46:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 8011f4a:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8011f4e:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8011f52:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011f56:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 8011f5a:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8011f5e:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8011f62:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 8011f66:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 8011f6a:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8011f6e:	eeed 7a26 	vfma.f32	s15, s26, s13
 8011f72:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 8011f76:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 8011f7a:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8011f7e:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8011f82:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 8011f86:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 8011f8a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8011f8e:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8011f92:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8011f96:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8011f9a:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8011f9e:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8011fa2:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8011fa6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011faa:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8011fae:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8011fb2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011fb6:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011fba:	eee8 7a88 	vfma.f32	s15, s17, s16
 8011fbe:	eee0 7a20 	vfma.f32	s15, s0, s1
 8011fc2:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011fc6:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011fca:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011fce:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011fd2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011fd6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011fda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011fde:	d895      	bhi.n	8011f0c <forward_lite_dense_if32of32wf32+0x48>
 8011fe0:	eb02 0e0a 	add.w	lr, r2, sl
 8011fe4:	465c      	mov	r4, fp
 8011fe6:	46c4      	mov	ip, r8
 8011fe8:	2c00      	cmp	r4, #0
 8011fea:	d075      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 8011fec:	eddc 6a00 	vldr	s13, [ip]
 8011ff0:	2c01      	cmp	r4, #1
 8011ff2:	edde 7a00 	vldr	s15, [lr]
 8011ff6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011ffa:	d06d      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 8011ffc:	eddc 6a01 	vldr	s13, [ip, #4]
 8012000:	2c02      	cmp	r4, #2
 8012002:	edde 7a01 	vldr	s15, [lr, #4]
 8012006:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801200a:	d065      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801200c:	eddc 6a02 	vldr	s13, [ip, #8]
 8012010:	2c03      	cmp	r4, #3
 8012012:	edde 7a02 	vldr	s15, [lr, #8]
 8012016:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801201a:	d05d      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801201c:	eddc 6a03 	vldr	s13, [ip, #12]
 8012020:	2c04      	cmp	r4, #4
 8012022:	edde 7a03 	vldr	s15, [lr, #12]
 8012026:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801202a:	d055      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801202c:	eddc 6a04 	vldr	s13, [ip, #16]
 8012030:	2c05      	cmp	r4, #5
 8012032:	edde 7a04 	vldr	s15, [lr, #16]
 8012036:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801203a:	d04d      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801203c:	eddc 6a05 	vldr	s13, [ip, #20]
 8012040:	2c06      	cmp	r4, #6
 8012042:	edde 7a05 	vldr	s15, [lr, #20]
 8012046:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801204a:	d045      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801204c:	eddc 6a06 	vldr	s13, [ip, #24]
 8012050:	2c07      	cmp	r4, #7
 8012052:	edde 7a06 	vldr	s15, [lr, #24]
 8012056:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801205a:	d03d      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801205c:	eddc 6a07 	vldr	s13, [ip, #28]
 8012060:	2c08      	cmp	r4, #8
 8012062:	edde 7a07 	vldr	s15, [lr, #28]
 8012066:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801206a:	d035      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801206c:	eddc 6a08 	vldr	s13, [ip, #32]
 8012070:	2c09      	cmp	r4, #9
 8012072:	edde 7a08 	vldr	s15, [lr, #32]
 8012076:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801207a:	d02d      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801207c:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8012080:	2c0a      	cmp	r4, #10
 8012082:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8012086:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801208a:	d025      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801208c:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8012090:	2c0b      	cmp	r4, #11
 8012092:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8012096:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801209a:	d01d      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 801209c:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80120a0:	2c0c      	cmp	r4, #12
 80120a2:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80120a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80120aa:	d015      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 80120ac:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80120b0:	3c0d      	subs	r4, #13
 80120b2:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80120b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80120ba:	d00d      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 80120bc:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80120c0:	2c01      	cmp	r4, #1
 80120c2:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80120c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80120ca:	d005      	beq.n	80120d8 <forward_lite_dense_if32of32wf32+0x214>
 80120cc:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80120d0:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80120d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80120d8:	eca5 7a01 	vstmia	r5!, {s14}
 80120dc:	42af      	cmp	r7, r5
 80120de:	444a      	add	r2, r9
 80120e0:	f63f af0a 	bhi.w	8011ef8 <forward_lite_dense_if32of32wf32+0x34>
 80120e4:	b15b      	cbz	r3, 80120fe <forward_lite_dense_if32of32wf32+0x23a>
 80120e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80120e8:	b14a      	cbz	r2, 80120fe <forward_lite_dense_if32of32wf32+0x23a>
 80120ea:	edd0 7a00 	vldr	s15, [r0]
 80120ee:	ecb3 7a01 	vldmia	r3!, {s14}
 80120f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80120f6:	ece0 7a01 	vstmia	r0!, {s15}
 80120fa:	4287      	cmp	r7, r0
 80120fc:	d1f5      	bne.n	80120ea <forward_lite_dense_if32of32wf32+0x226>
 80120fe:	ecbd 8b0c 	vpop	{d8-d13}
 8012102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012106:	4634      	mov	r4, r6
 8012108:	4696      	mov	lr, r2
 801210a:	468c      	mov	ip, r1
 801210c:	e76c      	b.n	8011fe8 <forward_lite_dense_if32of32wf32+0x124>
 801210e:	bf00      	nop
 8012110:	00000000 	.word	0x00000000

08012114 <st_int8_copy>:
 8012114:	4288      	cmp	r0, r1
 8012116:	d010      	beq.n	801213a <st_int8_copy+0x26>
 8012118:	b17a      	cbz	r2, 801213a <st_int8_copy+0x26>
 801211a:	4288      	cmp	r0, r1
 801211c:	eb00 0302 	add.w	r3, r0, r2
 8012120:	d20c      	bcs.n	801213c <st_int8_copy+0x28>
 8012122:	428b      	cmp	r3, r1
 8012124:	d90a      	bls.n	801213c <st_int8_copy+0x28>
 8012126:	4283      	cmp	r3, r0
 8012128:	440a      	add	r2, r1
 801212a:	d906      	bls.n	801213a <st_int8_copy+0x26>
 801212c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8012130:	4283      	cmp	r3, r0
 8012132:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8012136:	d1f9      	bne.n	801212c <st_int8_copy+0x18>
 8012138:	4770      	bx	lr
 801213a:	4770      	bx	lr
 801213c:	078b      	lsls	r3, r1, #30
 801213e:	d102      	bne.n	8012146 <st_int8_copy+0x32>
 8012140:	e008      	b.n	8012154 <st_int8_copy+0x40>
 8012142:	2a00      	cmp	r2, #0
 8012144:	d04d      	beq.n	80121e2 <st_int8_copy+0xce>
 8012146:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801214a:	3a01      	subs	r2, #1
 801214c:	f801 3b01 	strb.w	r3, [r1], #1
 8012150:	078b      	lsls	r3, r1, #30
 8012152:	d1f6      	bne.n	8012142 <st_int8_copy+0x2e>
 8012154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012158:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 801215c:	d05e      	beq.n	801221c <st_int8_copy+0x108>
 801215e:	ea40 0301 	orr.w	r3, r0, r1
 8012162:	075b      	lsls	r3, r3, #29
 8012164:	d13e      	bne.n	80121e4 <st_int8_copy+0xd0>
 8012166:	f10e 33ff 	add.w	r3, lr, #4294967295
 801216a:	2b01      	cmp	r3, #1
 801216c:	d93a      	bls.n	80121e4 <st_int8_copy+0xd0>
 801216e:	f100 0310 	add.w	r3, r0, #16
 8012172:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012176:	f101 0c10 	add.w	ip, r1, #16
 801217a:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 801217e:	3310      	adds	r3, #16
 8012180:	f10c 0c10 	add.w	ip, ip, #16
 8012184:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8012188:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 801218c:	4573      	cmp	r3, lr
 801218e:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8012192:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8012196:	d1f2      	bne.n	801217e <st_int8_copy+0x6a>
 8012198:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801219c:	4421      	add	r1, r4
 801219e:	4420      	add	r0, r4
 80121a0:	f002 0203 	and.w	r2, r2, #3
 80121a4:	b16b      	cbz	r3, 80121c2 <st_int8_copy+0xae>
 80121a6:	6804      	ldr	r4, [r0, #0]
 80121a8:	600c      	str	r4, [r1, #0]
 80121aa:	1e5c      	subs	r4, r3, #1
 80121ac:	d005      	beq.n	80121ba <st_int8_copy+0xa6>
 80121ae:	6845      	ldr	r5, [r0, #4]
 80121b0:	2c01      	cmp	r4, #1
 80121b2:	604d      	str	r5, [r1, #4]
 80121b4:	d001      	beq.n	80121ba <st_int8_copy+0xa6>
 80121b6:	6884      	ldr	r4, [r0, #8]
 80121b8:	608c      	str	r4, [r1, #8]
 80121ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80121be:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80121c2:	b162      	cbz	r2, 80121de <st_int8_copy+0xca>
 80121c4:	f990 3000 	ldrsb.w	r3, [r0]
 80121c8:	3a01      	subs	r2, #1
 80121ca:	700b      	strb	r3, [r1, #0]
 80121cc:	d007      	beq.n	80121de <st_int8_copy+0xca>
 80121ce:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80121d2:	2a01      	cmp	r2, #1
 80121d4:	704b      	strb	r3, [r1, #1]
 80121d6:	d002      	beq.n	80121de <st_int8_copy+0xca>
 80121d8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80121dc:	708b      	strb	r3, [r1, #2]
 80121de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e2:	4770      	bx	lr
 80121e4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80121e8:	460b      	mov	r3, r1
 80121ea:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80121ee:	4684      	mov	ip, r0
 80121f0:	f8dc 8000 	ldr.w	r8, [ip]
 80121f4:	3310      	adds	r3, #16
 80121f6:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80121fa:	f10c 0c10 	add.w	ip, ip, #16
 80121fe:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8012202:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8012206:	f843 8c10 	str.w	r8, [r3, #-16]
 801220a:	f843 7c0c 	str.w	r7, [r3, #-12]
 801220e:	f843 6c08 	str.w	r6, [r3, #-8]
 8012212:	f843 5c04 	str.w	r5, [r3, #-4]
 8012216:	459e      	cmp	lr, r3
 8012218:	d1ea      	bne.n	80121f0 <st_int8_copy+0xdc>
 801221a:	e7bd      	b.n	8012198 <st_int8_copy+0x84>
 801221c:	0893      	lsrs	r3, r2, #2
 801221e:	f002 0203 	and.w	r2, r2, #3
 8012222:	e7bf      	b.n	80121a4 <st_int8_copy+0x90>

08012224 <ai_array_to_buffer_fmt>:
 8012224:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012228:	2b02      	cmp	r3, #2
 801222a:	d050      	beq.n	80122ce <ai_array_to_buffer_fmt+0xaa>
 801222c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8012230:	4b29      	ldr	r3, [pc, #164]	; (80122d8 <ai_array_to_buffer_fmt+0xb4>)
 8012232:	429a      	cmp	r2, r3
 8012234:	d00b      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 8012236:	dc1c      	bgt.n	8012272 <ai_array_to_buffer_fmt+0x4e>
 8012238:	4b28      	ldr	r3, [pc, #160]	; (80122dc <ai_array_to_buffer_fmt+0xb8>)
 801223a:	429a      	cmp	r2, r3
 801223c:	d007      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 801223e:	dd0b      	ble.n	8012258 <ai_array_to_buffer_fmt+0x34>
 8012240:	4b27      	ldr	r3, [pc, #156]	; (80122e0 <ai_array_to_buffer_fmt+0xbc>)
 8012242:	429a      	cmp	r2, r3
 8012244:	d003      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 8012246:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801224a:	429a      	cmp	r2, r3
 801224c:	d131      	bne.n	80122b2 <ai_array_to_buffer_fmt+0x8e>
 801224e:	4613      	mov	r3, r2
 8012250:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012254:	4318      	orrs	r0, r3
 8012256:	4770      	bx	lr
 8012258:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801225c:	429a      	cmp	r2, r3
 801225e:	d0f6      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 8012260:	dd2c      	ble.n	80122bc <ai_array_to_buffer_fmt+0x98>
 8012262:	4b20      	ldr	r3, [pc, #128]	; (80122e4 <ai_array_to_buffer_fmt+0xc0>)
 8012264:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012268:	429a      	cmp	r2, r3
 801226a:	bf18      	it	ne
 801226c:	2340      	movne	r3, #64	; 0x40
 801226e:	4318      	orrs	r0, r3
 8012270:	4770      	bx	lr
 8012272:	4b1d      	ldr	r3, [pc, #116]	; (80122e8 <ai_array_to_buffer_fmt+0xc4>)
 8012274:	429a      	cmp	r2, r3
 8012276:	d0ea      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 8012278:	dd0e      	ble.n	8012298 <ai_array_to_buffer_fmt+0x74>
 801227a:	4b1c      	ldr	r3, [pc, #112]	; (80122ec <ai_array_to_buffer_fmt+0xc8>)
 801227c:	429a      	cmp	r2, r3
 801227e:	d0e6      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 8012280:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8012284:	429a      	cmp	r2, r3
 8012286:	d0e2      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 8012288:	4b19      	ldr	r3, [pc, #100]	; (80122f0 <ai_array_to_buffer_fmt+0xcc>)
 801228a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801228e:	429a      	cmp	r2, r3
 8012290:	bf18      	it	ne
 8012292:	2340      	movne	r3, #64	; 0x40
 8012294:	4318      	orrs	r0, r3
 8012296:	4770      	bx	lr
 8012298:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801229c:	429a      	cmp	r2, r3
 801229e:	d0d6      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 80122a0:	3307      	adds	r3, #7
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d0d3      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 80122a6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80122aa:	429a      	cmp	r2, r3
 80122ac:	bf18      	it	ne
 80122ae:	2340      	movne	r3, #64	; 0x40
 80122b0:	e7ce      	b.n	8012250 <ai_array_to_buffer_fmt+0x2c>
 80122b2:	4b10      	ldr	r3, [pc, #64]	; (80122f4 <ai_array_to_buffer_fmt+0xd0>)
 80122b4:	429a      	cmp	r2, r3
 80122b6:	bf18      	it	ne
 80122b8:	2340      	movne	r3, #64	; 0x40
 80122ba:	e7c9      	b.n	8012250 <ai_array_to_buffer_fmt+0x2c>
 80122bc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d0c4      	beq.n	801224e <ai_array_to_buffer_fmt+0x2a>
 80122c4:	3380      	adds	r3, #128	; 0x80
 80122c6:	429a      	cmp	r2, r3
 80122c8:	bf18      	it	ne
 80122ca:	2340      	movne	r3, #64	; 0x40
 80122cc:	e7c0      	b.n	8012250 <ai_array_to_buffer_fmt+0x2c>
 80122ce:	4b0a      	ldr	r3, [pc, #40]	; (80122f8 <ai_array_to_buffer_fmt+0xd4>)
 80122d0:	4003      	ands	r3, r0
 80122d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80122d6:	e7bb      	b.n	8012250 <ai_array_to_buffer_fmt+0x2c>
 80122d8:	00840040 	.word	0x00840040
 80122dc:	00040840 	.word	0x00040840
 80122e0:	00041040 	.word	0x00041040
 80122e4:	00040447 	.word	0x00040447
 80122e8:	00840840 	.word	0x00840840
 80122ec:	00841040 	.word	0x00841040
 80122f0:	0084084f 	.word	0x0084084f
 80122f4:	0004084f 	.word	0x0004084f
 80122f8:	00803fff 	.word	0x00803fff

080122fc <ai_array_get_byte_size>:
 80122fc:	b319      	cbz	r1, 8012346 <ai_array_get_byte_size+0x4a>
 80122fe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012302:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8012306:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 801230a:	11c0      	asrs	r0, r0, #7
 801230c:	fb03 f101 	mul.w	r1, r3, r1
 8012310:	2a04      	cmp	r2, #4
 8012312:	f101 0107 	add.w	r1, r1, #7
 8012316:	f021 0107 	bic.w	r1, r1, #7
 801231a:	fa21 f10c 	lsr.w	r1, r1, ip
 801231e:	d00b      	beq.n	8012338 <ai_array_get_byte_size+0x3c>
 8012320:	2a08      	cmp	r2, #8
 8012322:	d002      	beq.n	801232a <ai_array_get_byte_size+0x2e>
 8012324:	3107      	adds	r1, #7
 8012326:	08c8      	lsrs	r0, r1, #3
 8012328:	4770      	bx	lr
 801232a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801232e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8012332:	3107      	adds	r1, #7
 8012334:	08c8      	lsrs	r0, r1, #3
 8012336:	4770      	bx	lr
 8012338:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801233c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8012340:	3107      	adds	r1, #7
 8012342:	08c8      	lsrs	r0, r1, #3
 8012344:	4770      	bx	lr
 8012346:	4608      	mov	r0, r1
 8012348:	4770      	bx	lr
 801234a:	bf00      	nop

0801234c <ai_array_get_data_byte_size>:
 801234c:	b161      	cbz	r1, 8012368 <ai_array_get_data_byte_size+0x1c>
 801234e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012352:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8012356:	fb03 f101 	mul.w	r1, r3, r1
 801235a:	1dc8      	adds	r0, r1, #7
 801235c:	f020 0007 	bic.w	r0, r0, #7
 8012360:	40d0      	lsrs	r0, r2
 8012362:	3007      	adds	r0, #7
 8012364:	08c0      	lsrs	r0, r0, #3
 8012366:	4770      	bx	lr
 8012368:	4608      	mov	r0, r1
 801236a:	4770      	bx	lr

0801236c <ai_version_get>:
 801236c:	0212      	lsls	r2, r2, #8
 801236e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012372:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8012376:	4770      	bx	lr

08012378 <get_tensor_byte_size>:
 8012378:	b430      	push	{r4, r5}
 801237a:	6985      	ldr	r5, [r0, #24]
 801237c:	68c4      	ldr	r4, [r0, #12]
 801237e:	6941      	ldr	r1, [r0, #20]
 8012380:	4b06      	ldr	r3, [pc, #24]	; (801239c <get_tensor_byte_size+0x24>)
 8012382:	6828      	ldr	r0, [r5, #0]
 8012384:	4a06      	ldr	r2, [pc, #24]	; (80123a0 <get_tensor_byte_size+0x28>)
 8012386:	4003      	ands	r3, r0
 8012388:	68c9      	ldr	r1, [r1, #12]
 801238a:	68e0      	ldr	r0, [r4, #12]
 801238c:	4293      	cmp	r3, r2
 801238e:	fb01 f000 	mul.w	r0, r1, r0
 8012392:	d101      	bne.n	8012398 <get_tensor_byte_size+0x20>
 8012394:	3007      	adds	r0, #7
 8012396:	08c0      	lsrs	r0, r0, #3
 8012398:	bc30      	pop	{r4, r5}
 801239a:	4770      	bx	lr
 801239c:	017fffff 	.word	0x017fffff
 80123a0:	000400c0 	.word	0x000400c0

080123a4 <__errno>:
 80123a4:	4b01      	ldr	r3, [pc, #4]	; (80123ac <__errno+0x8>)
 80123a6:	6818      	ldr	r0, [r3, #0]
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop
 80123ac:	200013a4 	.word	0x200013a4

080123b0 <__libc_init_array>:
 80123b0:	b570      	push	{r4, r5, r6, lr}
 80123b2:	4d0d      	ldr	r5, [pc, #52]	; (80123e8 <__libc_init_array+0x38>)
 80123b4:	4c0d      	ldr	r4, [pc, #52]	; (80123ec <__libc_init_array+0x3c>)
 80123b6:	1b64      	subs	r4, r4, r5
 80123b8:	10a4      	asrs	r4, r4, #2
 80123ba:	2600      	movs	r6, #0
 80123bc:	42a6      	cmp	r6, r4
 80123be:	d109      	bne.n	80123d4 <__libc_init_array+0x24>
 80123c0:	4d0b      	ldr	r5, [pc, #44]	; (80123f0 <__libc_init_array+0x40>)
 80123c2:	4c0c      	ldr	r4, [pc, #48]	; (80123f4 <__libc_init_array+0x44>)
 80123c4:	f006 f8b4 	bl	8018530 <_init>
 80123c8:	1b64      	subs	r4, r4, r5
 80123ca:	10a4      	asrs	r4, r4, #2
 80123cc:	2600      	movs	r6, #0
 80123ce:	42a6      	cmp	r6, r4
 80123d0:	d105      	bne.n	80123de <__libc_init_array+0x2e>
 80123d2:	bd70      	pop	{r4, r5, r6, pc}
 80123d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80123d8:	4798      	blx	r3
 80123da:	3601      	adds	r6, #1
 80123dc:	e7ee      	b.n	80123bc <__libc_init_array+0xc>
 80123de:	f855 3b04 	ldr.w	r3, [r5], #4
 80123e2:	4798      	blx	r3
 80123e4:	3601      	adds	r6, #1
 80123e6:	e7f2      	b.n	80123ce <__libc_init_array+0x1e>
 80123e8:	08050a40 	.word	0x08050a40
 80123ec:	08050a40 	.word	0x08050a40
 80123f0:	08050a40 	.word	0x08050a40
 80123f4:	08050a44 	.word	0x08050a44

080123f8 <malloc>:
 80123f8:	4b02      	ldr	r3, [pc, #8]	; (8012404 <malloc+0xc>)
 80123fa:	4601      	mov	r1, r0
 80123fc:	6818      	ldr	r0, [r3, #0]
 80123fe:	f000 b885 	b.w	801250c <_malloc_r>
 8012402:	bf00      	nop
 8012404:	200013a4 	.word	0x200013a4

08012408 <memcpy>:
 8012408:	440a      	add	r2, r1
 801240a:	4291      	cmp	r1, r2
 801240c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012410:	d100      	bne.n	8012414 <memcpy+0xc>
 8012412:	4770      	bx	lr
 8012414:	b510      	push	{r4, lr}
 8012416:	f811 4b01 	ldrb.w	r4, [r1], #1
 801241a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801241e:	4291      	cmp	r1, r2
 8012420:	d1f9      	bne.n	8012416 <memcpy+0xe>
 8012422:	bd10      	pop	{r4, pc}

08012424 <memset>:
 8012424:	4402      	add	r2, r0
 8012426:	4603      	mov	r3, r0
 8012428:	4293      	cmp	r3, r2
 801242a:	d100      	bne.n	801242e <memset+0xa>
 801242c:	4770      	bx	lr
 801242e:	f803 1b01 	strb.w	r1, [r3], #1
 8012432:	e7f9      	b.n	8012428 <memset+0x4>

08012434 <_free_r>:
 8012434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012436:	2900      	cmp	r1, #0
 8012438:	d044      	beq.n	80124c4 <_free_r+0x90>
 801243a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801243e:	9001      	str	r0, [sp, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	f1a1 0404 	sub.w	r4, r1, #4
 8012446:	bfb8      	it	lt
 8012448:	18e4      	addlt	r4, r4, r3
 801244a:	f003 f969 	bl	8015720 <__malloc_lock>
 801244e:	4a1e      	ldr	r2, [pc, #120]	; (80124c8 <_free_r+0x94>)
 8012450:	9801      	ldr	r0, [sp, #4]
 8012452:	6813      	ldr	r3, [r2, #0]
 8012454:	b933      	cbnz	r3, 8012464 <_free_r+0x30>
 8012456:	6063      	str	r3, [r4, #4]
 8012458:	6014      	str	r4, [r2, #0]
 801245a:	b003      	add	sp, #12
 801245c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012460:	f003 b964 	b.w	801572c <__malloc_unlock>
 8012464:	42a3      	cmp	r3, r4
 8012466:	d908      	bls.n	801247a <_free_r+0x46>
 8012468:	6825      	ldr	r5, [r4, #0]
 801246a:	1961      	adds	r1, r4, r5
 801246c:	428b      	cmp	r3, r1
 801246e:	bf01      	itttt	eq
 8012470:	6819      	ldreq	r1, [r3, #0]
 8012472:	685b      	ldreq	r3, [r3, #4]
 8012474:	1949      	addeq	r1, r1, r5
 8012476:	6021      	streq	r1, [r4, #0]
 8012478:	e7ed      	b.n	8012456 <_free_r+0x22>
 801247a:	461a      	mov	r2, r3
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	b10b      	cbz	r3, 8012484 <_free_r+0x50>
 8012480:	42a3      	cmp	r3, r4
 8012482:	d9fa      	bls.n	801247a <_free_r+0x46>
 8012484:	6811      	ldr	r1, [r2, #0]
 8012486:	1855      	adds	r5, r2, r1
 8012488:	42a5      	cmp	r5, r4
 801248a:	d10b      	bne.n	80124a4 <_free_r+0x70>
 801248c:	6824      	ldr	r4, [r4, #0]
 801248e:	4421      	add	r1, r4
 8012490:	1854      	adds	r4, r2, r1
 8012492:	42a3      	cmp	r3, r4
 8012494:	6011      	str	r1, [r2, #0]
 8012496:	d1e0      	bne.n	801245a <_free_r+0x26>
 8012498:	681c      	ldr	r4, [r3, #0]
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	6053      	str	r3, [r2, #4]
 801249e:	4421      	add	r1, r4
 80124a0:	6011      	str	r1, [r2, #0]
 80124a2:	e7da      	b.n	801245a <_free_r+0x26>
 80124a4:	d902      	bls.n	80124ac <_free_r+0x78>
 80124a6:	230c      	movs	r3, #12
 80124a8:	6003      	str	r3, [r0, #0]
 80124aa:	e7d6      	b.n	801245a <_free_r+0x26>
 80124ac:	6825      	ldr	r5, [r4, #0]
 80124ae:	1961      	adds	r1, r4, r5
 80124b0:	428b      	cmp	r3, r1
 80124b2:	bf04      	itt	eq
 80124b4:	6819      	ldreq	r1, [r3, #0]
 80124b6:	685b      	ldreq	r3, [r3, #4]
 80124b8:	6063      	str	r3, [r4, #4]
 80124ba:	bf04      	itt	eq
 80124bc:	1949      	addeq	r1, r1, r5
 80124be:	6021      	streq	r1, [r4, #0]
 80124c0:	6054      	str	r4, [r2, #4]
 80124c2:	e7ca      	b.n	801245a <_free_r+0x26>
 80124c4:	b003      	add	sp, #12
 80124c6:	bd30      	pop	{r4, r5, pc}
 80124c8:	20009aa4 	.word	0x20009aa4

080124cc <sbrk_aligned>:
 80124cc:	b570      	push	{r4, r5, r6, lr}
 80124ce:	4e0e      	ldr	r6, [pc, #56]	; (8012508 <sbrk_aligned+0x3c>)
 80124d0:	460c      	mov	r4, r1
 80124d2:	6831      	ldr	r1, [r6, #0]
 80124d4:	4605      	mov	r5, r0
 80124d6:	b911      	cbnz	r1, 80124de <sbrk_aligned+0x12>
 80124d8:	f000 ff06 	bl	80132e8 <_sbrk_r>
 80124dc:	6030      	str	r0, [r6, #0]
 80124de:	4621      	mov	r1, r4
 80124e0:	4628      	mov	r0, r5
 80124e2:	f000 ff01 	bl	80132e8 <_sbrk_r>
 80124e6:	1c43      	adds	r3, r0, #1
 80124e8:	d00a      	beq.n	8012500 <sbrk_aligned+0x34>
 80124ea:	1cc4      	adds	r4, r0, #3
 80124ec:	f024 0403 	bic.w	r4, r4, #3
 80124f0:	42a0      	cmp	r0, r4
 80124f2:	d007      	beq.n	8012504 <sbrk_aligned+0x38>
 80124f4:	1a21      	subs	r1, r4, r0
 80124f6:	4628      	mov	r0, r5
 80124f8:	f000 fef6 	bl	80132e8 <_sbrk_r>
 80124fc:	3001      	adds	r0, #1
 80124fe:	d101      	bne.n	8012504 <sbrk_aligned+0x38>
 8012500:	f04f 34ff 	mov.w	r4, #4294967295
 8012504:	4620      	mov	r0, r4
 8012506:	bd70      	pop	{r4, r5, r6, pc}
 8012508:	20009aa8 	.word	0x20009aa8

0801250c <_malloc_r>:
 801250c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012510:	1ccd      	adds	r5, r1, #3
 8012512:	f025 0503 	bic.w	r5, r5, #3
 8012516:	3508      	adds	r5, #8
 8012518:	2d0c      	cmp	r5, #12
 801251a:	bf38      	it	cc
 801251c:	250c      	movcc	r5, #12
 801251e:	2d00      	cmp	r5, #0
 8012520:	4607      	mov	r7, r0
 8012522:	db01      	blt.n	8012528 <_malloc_r+0x1c>
 8012524:	42a9      	cmp	r1, r5
 8012526:	d905      	bls.n	8012534 <_malloc_r+0x28>
 8012528:	230c      	movs	r3, #12
 801252a:	603b      	str	r3, [r7, #0]
 801252c:	2600      	movs	r6, #0
 801252e:	4630      	mov	r0, r6
 8012530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012534:	4e2e      	ldr	r6, [pc, #184]	; (80125f0 <_malloc_r+0xe4>)
 8012536:	f003 f8f3 	bl	8015720 <__malloc_lock>
 801253a:	6833      	ldr	r3, [r6, #0]
 801253c:	461c      	mov	r4, r3
 801253e:	bb34      	cbnz	r4, 801258e <_malloc_r+0x82>
 8012540:	4629      	mov	r1, r5
 8012542:	4638      	mov	r0, r7
 8012544:	f7ff ffc2 	bl	80124cc <sbrk_aligned>
 8012548:	1c43      	adds	r3, r0, #1
 801254a:	4604      	mov	r4, r0
 801254c:	d14d      	bne.n	80125ea <_malloc_r+0xde>
 801254e:	6834      	ldr	r4, [r6, #0]
 8012550:	4626      	mov	r6, r4
 8012552:	2e00      	cmp	r6, #0
 8012554:	d140      	bne.n	80125d8 <_malloc_r+0xcc>
 8012556:	6823      	ldr	r3, [r4, #0]
 8012558:	4631      	mov	r1, r6
 801255a:	4638      	mov	r0, r7
 801255c:	eb04 0803 	add.w	r8, r4, r3
 8012560:	f000 fec2 	bl	80132e8 <_sbrk_r>
 8012564:	4580      	cmp	r8, r0
 8012566:	d13a      	bne.n	80125de <_malloc_r+0xd2>
 8012568:	6821      	ldr	r1, [r4, #0]
 801256a:	3503      	adds	r5, #3
 801256c:	1a6d      	subs	r5, r5, r1
 801256e:	f025 0503 	bic.w	r5, r5, #3
 8012572:	3508      	adds	r5, #8
 8012574:	2d0c      	cmp	r5, #12
 8012576:	bf38      	it	cc
 8012578:	250c      	movcc	r5, #12
 801257a:	4629      	mov	r1, r5
 801257c:	4638      	mov	r0, r7
 801257e:	f7ff ffa5 	bl	80124cc <sbrk_aligned>
 8012582:	3001      	adds	r0, #1
 8012584:	d02b      	beq.n	80125de <_malloc_r+0xd2>
 8012586:	6823      	ldr	r3, [r4, #0]
 8012588:	442b      	add	r3, r5
 801258a:	6023      	str	r3, [r4, #0]
 801258c:	e00e      	b.n	80125ac <_malloc_r+0xa0>
 801258e:	6822      	ldr	r2, [r4, #0]
 8012590:	1b52      	subs	r2, r2, r5
 8012592:	d41e      	bmi.n	80125d2 <_malloc_r+0xc6>
 8012594:	2a0b      	cmp	r2, #11
 8012596:	d916      	bls.n	80125c6 <_malloc_r+0xba>
 8012598:	1961      	adds	r1, r4, r5
 801259a:	42a3      	cmp	r3, r4
 801259c:	6025      	str	r5, [r4, #0]
 801259e:	bf18      	it	ne
 80125a0:	6059      	strne	r1, [r3, #4]
 80125a2:	6863      	ldr	r3, [r4, #4]
 80125a4:	bf08      	it	eq
 80125a6:	6031      	streq	r1, [r6, #0]
 80125a8:	5162      	str	r2, [r4, r5]
 80125aa:	604b      	str	r3, [r1, #4]
 80125ac:	4638      	mov	r0, r7
 80125ae:	f104 060b 	add.w	r6, r4, #11
 80125b2:	f003 f8bb 	bl	801572c <__malloc_unlock>
 80125b6:	f026 0607 	bic.w	r6, r6, #7
 80125ba:	1d23      	adds	r3, r4, #4
 80125bc:	1af2      	subs	r2, r6, r3
 80125be:	d0b6      	beq.n	801252e <_malloc_r+0x22>
 80125c0:	1b9b      	subs	r3, r3, r6
 80125c2:	50a3      	str	r3, [r4, r2]
 80125c4:	e7b3      	b.n	801252e <_malloc_r+0x22>
 80125c6:	6862      	ldr	r2, [r4, #4]
 80125c8:	42a3      	cmp	r3, r4
 80125ca:	bf0c      	ite	eq
 80125cc:	6032      	streq	r2, [r6, #0]
 80125ce:	605a      	strne	r2, [r3, #4]
 80125d0:	e7ec      	b.n	80125ac <_malloc_r+0xa0>
 80125d2:	4623      	mov	r3, r4
 80125d4:	6864      	ldr	r4, [r4, #4]
 80125d6:	e7b2      	b.n	801253e <_malloc_r+0x32>
 80125d8:	4634      	mov	r4, r6
 80125da:	6876      	ldr	r6, [r6, #4]
 80125dc:	e7b9      	b.n	8012552 <_malloc_r+0x46>
 80125de:	230c      	movs	r3, #12
 80125e0:	603b      	str	r3, [r7, #0]
 80125e2:	4638      	mov	r0, r7
 80125e4:	f003 f8a2 	bl	801572c <__malloc_unlock>
 80125e8:	e7a1      	b.n	801252e <_malloc_r+0x22>
 80125ea:	6025      	str	r5, [r4, #0]
 80125ec:	e7de      	b.n	80125ac <_malloc_r+0xa0>
 80125ee:	bf00      	nop
 80125f0:	20009aa4 	.word	0x20009aa4

080125f4 <__cvt>:
 80125f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125f8:	ec55 4b10 	vmov	r4, r5, d0
 80125fc:	2d00      	cmp	r5, #0
 80125fe:	460e      	mov	r6, r1
 8012600:	4619      	mov	r1, r3
 8012602:	462b      	mov	r3, r5
 8012604:	bfbb      	ittet	lt
 8012606:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801260a:	461d      	movlt	r5, r3
 801260c:	2300      	movge	r3, #0
 801260e:	232d      	movlt	r3, #45	; 0x2d
 8012610:	700b      	strb	r3, [r1, #0]
 8012612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012614:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012618:	4691      	mov	r9, r2
 801261a:	f023 0820 	bic.w	r8, r3, #32
 801261e:	bfbc      	itt	lt
 8012620:	4622      	movlt	r2, r4
 8012622:	4614      	movlt	r4, r2
 8012624:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012628:	d005      	beq.n	8012636 <__cvt+0x42>
 801262a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801262e:	d100      	bne.n	8012632 <__cvt+0x3e>
 8012630:	3601      	adds	r6, #1
 8012632:	2102      	movs	r1, #2
 8012634:	e000      	b.n	8012638 <__cvt+0x44>
 8012636:	2103      	movs	r1, #3
 8012638:	ab03      	add	r3, sp, #12
 801263a:	9301      	str	r3, [sp, #4]
 801263c:	ab02      	add	r3, sp, #8
 801263e:	9300      	str	r3, [sp, #0]
 8012640:	ec45 4b10 	vmov	d0, r4, r5
 8012644:	4653      	mov	r3, sl
 8012646:	4632      	mov	r2, r6
 8012648:	f001 fed2 	bl	80143f0 <_dtoa_r>
 801264c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012650:	4607      	mov	r7, r0
 8012652:	d102      	bne.n	801265a <__cvt+0x66>
 8012654:	f019 0f01 	tst.w	r9, #1
 8012658:	d022      	beq.n	80126a0 <__cvt+0xac>
 801265a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801265e:	eb07 0906 	add.w	r9, r7, r6
 8012662:	d110      	bne.n	8012686 <__cvt+0x92>
 8012664:	783b      	ldrb	r3, [r7, #0]
 8012666:	2b30      	cmp	r3, #48	; 0x30
 8012668:	d10a      	bne.n	8012680 <__cvt+0x8c>
 801266a:	2200      	movs	r2, #0
 801266c:	2300      	movs	r3, #0
 801266e:	4620      	mov	r0, r4
 8012670:	4629      	mov	r1, r5
 8012672:	f7ee fa59 	bl	8000b28 <__aeabi_dcmpeq>
 8012676:	b918      	cbnz	r0, 8012680 <__cvt+0x8c>
 8012678:	f1c6 0601 	rsb	r6, r6, #1
 801267c:	f8ca 6000 	str.w	r6, [sl]
 8012680:	f8da 3000 	ldr.w	r3, [sl]
 8012684:	4499      	add	r9, r3
 8012686:	2200      	movs	r2, #0
 8012688:	2300      	movs	r3, #0
 801268a:	4620      	mov	r0, r4
 801268c:	4629      	mov	r1, r5
 801268e:	f7ee fa4b 	bl	8000b28 <__aeabi_dcmpeq>
 8012692:	b108      	cbz	r0, 8012698 <__cvt+0xa4>
 8012694:	f8cd 900c 	str.w	r9, [sp, #12]
 8012698:	2230      	movs	r2, #48	; 0x30
 801269a:	9b03      	ldr	r3, [sp, #12]
 801269c:	454b      	cmp	r3, r9
 801269e:	d307      	bcc.n	80126b0 <__cvt+0xbc>
 80126a0:	9b03      	ldr	r3, [sp, #12]
 80126a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80126a4:	1bdb      	subs	r3, r3, r7
 80126a6:	4638      	mov	r0, r7
 80126a8:	6013      	str	r3, [r2, #0]
 80126aa:	b004      	add	sp, #16
 80126ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b0:	1c59      	adds	r1, r3, #1
 80126b2:	9103      	str	r1, [sp, #12]
 80126b4:	701a      	strb	r2, [r3, #0]
 80126b6:	e7f0      	b.n	801269a <__cvt+0xa6>

080126b8 <__exponent>:
 80126b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126ba:	4603      	mov	r3, r0
 80126bc:	2900      	cmp	r1, #0
 80126be:	bfb8      	it	lt
 80126c0:	4249      	neglt	r1, r1
 80126c2:	f803 2b02 	strb.w	r2, [r3], #2
 80126c6:	bfb4      	ite	lt
 80126c8:	222d      	movlt	r2, #45	; 0x2d
 80126ca:	222b      	movge	r2, #43	; 0x2b
 80126cc:	2909      	cmp	r1, #9
 80126ce:	7042      	strb	r2, [r0, #1]
 80126d0:	dd2a      	ble.n	8012728 <__exponent+0x70>
 80126d2:	f10d 0407 	add.w	r4, sp, #7
 80126d6:	46a4      	mov	ip, r4
 80126d8:	270a      	movs	r7, #10
 80126da:	46a6      	mov	lr, r4
 80126dc:	460a      	mov	r2, r1
 80126de:	fb91 f6f7 	sdiv	r6, r1, r7
 80126e2:	fb07 1516 	mls	r5, r7, r6, r1
 80126e6:	3530      	adds	r5, #48	; 0x30
 80126e8:	2a63      	cmp	r2, #99	; 0x63
 80126ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80126ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80126f2:	4631      	mov	r1, r6
 80126f4:	dcf1      	bgt.n	80126da <__exponent+0x22>
 80126f6:	3130      	adds	r1, #48	; 0x30
 80126f8:	f1ae 0502 	sub.w	r5, lr, #2
 80126fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012700:	1c44      	adds	r4, r0, #1
 8012702:	4629      	mov	r1, r5
 8012704:	4561      	cmp	r1, ip
 8012706:	d30a      	bcc.n	801271e <__exponent+0x66>
 8012708:	f10d 0209 	add.w	r2, sp, #9
 801270c:	eba2 020e 	sub.w	r2, r2, lr
 8012710:	4565      	cmp	r5, ip
 8012712:	bf88      	it	hi
 8012714:	2200      	movhi	r2, #0
 8012716:	4413      	add	r3, r2
 8012718:	1a18      	subs	r0, r3, r0
 801271a:	b003      	add	sp, #12
 801271c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801271e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012722:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012726:	e7ed      	b.n	8012704 <__exponent+0x4c>
 8012728:	2330      	movs	r3, #48	; 0x30
 801272a:	3130      	adds	r1, #48	; 0x30
 801272c:	7083      	strb	r3, [r0, #2]
 801272e:	70c1      	strb	r1, [r0, #3]
 8012730:	1d03      	adds	r3, r0, #4
 8012732:	e7f1      	b.n	8012718 <__exponent+0x60>

08012734 <_printf_float>:
 8012734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012738:	ed2d 8b02 	vpush	{d8}
 801273c:	b08d      	sub	sp, #52	; 0x34
 801273e:	460c      	mov	r4, r1
 8012740:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012744:	4616      	mov	r6, r2
 8012746:	461f      	mov	r7, r3
 8012748:	4605      	mov	r5, r0
 801274a:	f002 ffc1 	bl	80156d0 <_localeconv_r>
 801274e:	f8d0 a000 	ldr.w	sl, [r0]
 8012752:	4650      	mov	r0, sl
 8012754:	f7ed fd66 	bl	8000224 <strlen>
 8012758:	2300      	movs	r3, #0
 801275a:	930a      	str	r3, [sp, #40]	; 0x28
 801275c:	6823      	ldr	r3, [r4, #0]
 801275e:	9305      	str	r3, [sp, #20]
 8012760:	f8d8 3000 	ldr.w	r3, [r8]
 8012764:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012768:	3307      	adds	r3, #7
 801276a:	f023 0307 	bic.w	r3, r3, #7
 801276e:	f103 0208 	add.w	r2, r3, #8
 8012772:	f8c8 2000 	str.w	r2, [r8]
 8012776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801277a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801277e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012782:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012786:	9307      	str	r3, [sp, #28]
 8012788:	f8cd 8018 	str.w	r8, [sp, #24]
 801278c:	ee08 0a10 	vmov	s16, r0
 8012790:	4b9f      	ldr	r3, [pc, #636]	; (8012a10 <_printf_float+0x2dc>)
 8012792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012796:	f04f 32ff 	mov.w	r2, #4294967295
 801279a:	f7ee f9f7 	bl	8000b8c <__aeabi_dcmpun>
 801279e:	bb88      	cbnz	r0, 8012804 <_printf_float+0xd0>
 80127a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127a4:	4b9a      	ldr	r3, [pc, #616]	; (8012a10 <_printf_float+0x2dc>)
 80127a6:	f04f 32ff 	mov.w	r2, #4294967295
 80127aa:	f7ee f9d1 	bl	8000b50 <__aeabi_dcmple>
 80127ae:	bb48      	cbnz	r0, 8012804 <_printf_float+0xd0>
 80127b0:	2200      	movs	r2, #0
 80127b2:	2300      	movs	r3, #0
 80127b4:	4640      	mov	r0, r8
 80127b6:	4649      	mov	r1, r9
 80127b8:	f7ee f9c0 	bl	8000b3c <__aeabi_dcmplt>
 80127bc:	b110      	cbz	r0, 80127c4 <_printf_float+0x90>
 80127be:	232d      	movs	r3, #45	; 0x2d
 80127c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127c4:	4b93      	ldr	r3, [pc, #588]	; (8012a14 <_printf_float+0x2e0>)
 80127c6:	4894      	ldr	r0, [pc, #592]	; (8012a18 <_printf_float+0x2e4>)
 80127c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80127cc:	bf94      	ite	ls
 80127ce:	4698      	movls	r8, r3
 80127d0:	4680      	movhi	r8, r0
 80127d2:	2303      	movs	r3, #3
 80127d4:	6123      	str	r3, [r4, #16]
 80127d6:	9b05      	ldr	r3, [sp, #20]
 80127d8:	f023 0204 	bic.w	r2, r3, #4
 80127dc:	6022      	str	r2, [r4, #0]
 80127de:	f04f 0900 	mov.w	r9, #0
 80127e2:	9700      	str	r7, [sp, #0]
 80127e4:	4633      	mov	r3, r6
 80127e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80127e8:	4621      	mov	r1, r4
 80127ea:	4628      	mov	r0, r5
 80127ec:	f000 f9d8 	bl	8012ba0 <_printf_common>
 80127f0:	3001      	adds	r0, #1
 80127f2:	f040 8090 	bne.w	8012916 <_printf_float+0x1e2>
 80127f6:	f04f 30ff 	mov.w	r0, #4294967295
 80127fa:	b00d      	add	sp, #52	; 0x34
 80127fc:	ecbd 8b02 	vpop	{d8}
 8012800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012804:	4642      	mov	r2, r8
 8012806:	464b      	mov	r3, r9
 8012808:	4640      	mov	r0, r8
 801280a:	4649      	mov	r1, r9
 801280c:	f7ee f9be 	bl	8000b8c <__aeabi_dcmpun>
 8012810:	b140      	cbz	r0, 8012824 <_printf_float+0xf0>
 8012812:	464b      	mov	r3, r9
 8012814:	2b00      	cmp	r3, #0
 8012816:	bfbc      	itt	lt
 8012818:	232d      	movlt	r3, #45	; 0x2d
 801281a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801281e:	487f      	ldr	r0, [pc, #508]	; (8012a1c <_printf_float+0x2e8>)
 8012820:	4b7f      	ldr	r3, [pc, #508]	; (8012a20 <_printf_float+0x2ec>)
 8012822:	e7d1      	b.n	80127c8 <_printf_float+0x94>
 8012824:	6863      	ldr	r3, [r4, #4]
 8012826:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801282a:	9206      	str	r2, [sp, #24]
 801282c:	1c5a      	adds	r2, r3, #1
 801282e:	d13f      	bne.n	80128b0 <_printf_float+0x17c>
 8012830:	2306      	movs	r3, #6
 8012832:	6063      	str	r3, [r4, #4]
 8012834:	9b05      	ldr	r3, [sp, #20]
 8012836:	6861      	ldr	r1, [r4, #4]
 8012838:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801283c:	2300      	movs	r3, #0
 801283e:	9303      	str	r3, [sp, #12]
 8012840:	ab0a      	add	r3, sp, #40	; 0x28
 8012842:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012846:	ab09      	add	r3, sp, #36	; 0x24
 8012848:	ec49 8b10 	vmov	d0, r8, r9
 801284c:	9300      	str	r3, [sp, #0]
 801284e:	6022      	str	r2, [r4, #0]
 8012850:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012854:	4628      	mov	r0, r5
 8012856:	f7ff fecd 	bl	80125f4 <__cvt>
 801285a:	9b06      	ldr	r3, [sp, #24]
 801285c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801285e:	2b47      	cmp	r3, #71	; 0x47
 8012860:	4680      	mov	r8, r0
 8012862:	d108      	bne.n	8012876 <_printf_float+0x142>
 8012864:	1cc8      	adds	r0, r1, #3
 8012866:	db02      	blt.n	801286e <_printf_float+0x13a>
 8012868:	6863      	ldr	r3, [r4, #4]
 801286a:	4299      	cmp	r1, r3
 801286c:	dd41      	ble.n	80128f2 <_printf_float+0x1be>
 801286e:	f1ab 0b02 	sub.w	fp, fp, #2
 8012872:	fa5f fb8b 	uxtb.w	fp, fp
 8012876:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801287a:	d820      	bhi.n	80128be <_printf_float+0x18a>
 801287c:	3901      	subs	r1, #1
 801287e:	465a      	mov	r2, fp
 8012880:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012884:	9109      	str	r1, [sp, #36]	; 0x24
 8012886:	f7ff ff17 	bl	80126b8 <__exponent>
 801288a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801288c:	1813      	adds	r3, r2, r0
 801288e:	2a01      	cmp	r2, #1
 8012890:	4681      	mov	r9, r0
 8012892:	6123      	str	r3, [r4, #16]
 8012894:	dc02      	bgt.n	801289c <_printf_float+0x168>
 8012896:	6822      	ldr	r2, [r4, #0]
 8012898:	07d2      	lsls	r2, r2, #31
 801289a:	d501      	bpl.n	80128a0 <_printf_float+0x16c>
 801289c:	3301      	adds	r3, #1
 801289e:	6123      	str	r3, [r4, #16]
 80128a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d09c      	beq.n	80127e2 <_printf_float+0xae>
 80128a8:	232d      	movs	r3, #45	; 0x2d
 80128aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128ae:	e798      	b.n	80127e2 <_printf_float+0xae>
 80128b0:	9a06      	ldr	r2, [sp, #24]
 80128b2:	2a47      	cmp	r2, #71	; 0x47
 80128b4:	d1be      	bne.n	8012834 <_printf_float+0x100>
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d1bc      	bne.n	8012834 <_printf_float+0x100>
 80128ba:	2301      	movs	r3, #1
 80128bc:	e7b9      	b.n	8012832 <_printf_float+0xfe>
 80128be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80128c2:	d118      	bne.n	80128f6 <_printf_float+0x1c2>
 80128c4:	2900      	cmp	r1, #0
 80128c6:	6863      	ldr	r3, [r4, #4]
 80128c8:	dd0b      	ble.n	80128e2 <_printf_float+0x1ae>
 80128ca:	6121      	str	r1, [r4, #16]
 80128cc:	b913      	cbnz	r3, 80128d4 <_printf_float+0x1a0>
 80128ce:	6822      	ldr	r2, [r4, #0]
 80128d0:	07d0      	lsls	r0, r2, #31
 80128d2:	d502      	bpl.n	80128da <_printf_float+0x1a6>
 80128d4:	3301      	adds	r3, #1
 80128d6:	440b      	add	r3, r1
 80128d8:	6123      	str	r3, [r4, #16]
 80128da:	65a1      	str	r1, [r4, #88]	; 0x58
 80128dc:	f04f 0900 	mov.w	r9, #0
 80128e0:	e7de      	b.n	80128a0 <_printf_float+0x16c>
 80128e2:	b913      	cbnz	r3, 80128ea <_printf_float+0x1b6>
 80128e4:	6822      	ldr	r2, [r4, #0]
 80128e6:	07d2      	lsls	r2, r2, #31
 80128e8:	d501      	bpl.n	80128ee <_printf_float+0x1ba>
 80128ea:	3302      	adds	r3, #2
 80128ec:	e7f4      	b.n	80128d8 <_printf_float+0x1a4>
 80128ee:	2301      	movs	r3, #1
 80128f0:	e7f2      	b.n	80128d8 <_printf_float+0x1a4>
 80128f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80128f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128f8:	4299      	cmp	r1, r3
 80128fa:	db05      	blt.n	8012908 <_printf_float+0x1d4>
 80128fc:	6823      	ldr	r3, [r4, #0]
 80128fe:	6121      	str	r1, [r4, #16]
 8012900:	07d8      	lsls	r0, r3, #31
 8012902:	d5ea      	bpl.n	80128da <_printf_float+0x1a6>
 8012904:	1c4b      	adds	r3, r1, #1
 8012906:	e7e7      	b.n	80128d8 <_printf_float+0x1a4>
 8012908:	2900      	cmp	r1, #0
 801290a:	bfd4      	ite	le
 801290c:	f1c1 0202 	rsble	r2, r1, #2
 8012910:	2201      	movgt	r2, #1
 8012912:	4413      	add	r3, r2
 8012914:	e7e0      	b.n	80128d8 <_printf_float+0x1a4>
 8012916:	6823      	ldr	r3, [r4, #0]
 8012918:	055a      	lsls	r2, r3, #21
 801291a:	d407      	bmi.n	801292c <_printf_float+0x1f8>
 801291c:	6923      	ldr	r3, [r4, #16]
 801291e:	4642      	mov	r2, r8
 8012920:	4631      	mov	r1, r6
 8012922:	4628      	mov	r0, r5
 8012924:	47b8      	blx	r7
 8012926:	3001      	adds	r0, #1
 8012928:	d12c      	bne.n	8012984 <_printf_float+0x250>
 801292a:	e764      	b.n	80127f6 <_printf_float+0xc2>
 801292c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012930:	f240 80e0 	bls.w	8012af4 <_printf_float+0x3c0>
 8012934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012938:	2200      	movs	r2, #0
 801293a:	2300      	movs	r3, #0
 801293c:	f7ee f8f4 	bl	8000b28 <__aeabi_dcmpeq>
 8012940:	2800      	cmp	r0, #0
 8012942:	d034      	beq.n	80129ae <_printf_float+0x27a>
 8012944:	4a37      	ldr	r2, [pc, #220]	; (8012a24 <_printf_float+0x2f0>)
 8012946:	2301      	movs	r3, #1
 8012948:	4631      	mov	r1, r6
 801294a:	4628      	mov	r0, r5
 801294c:	47b8      	blx	r7
 801294e:	3001      	adds	r0, #1
 8012950:	f43f af51 	beq.w	80127f6 <_printf_float+0xc2>
 8012954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012958:	429a      	cmp	r2, r3
 801295a:	db02      	blt.n	8012962 <_printf_float+0x22e>
 801295c:	6823      	ldr	r3, [r4, #0]
 801295e:	07d8      	lsls	r0, r3, #31
 8012960:	d510      	bpl.n	8012984 <_printf_float+0x250>
 8012962:	ee18 3a10 	vmov	r3, s16
 8012966:	4652      	mov	r2, sl
 8012968:	4631      	mov	r1, r6
 801296a:	4628      	mov	r0, r5
 801296c:	47b8      	blx	r7
 801296e:	3001      	adds	r0, #1
 8012970:	f43f af41 	beq.w	80127f6 <_printf_float+0xc2>
 8012974:	f04f 0800 	mov.w	r8, #0
 8012978:	f104 091a 	add.w	r9, r4, #26
 801297c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801297e:	3b01      	subs	r3, #1
 8012980:	4543      	cmp	r3, r8
 8012982:	dc09      	bgt.n	8012998 <_printf_float+0x264>
 8012984:	6823      	ldr	r3, [r4, #0]
 8012986:	079b      	lsls	r3, r3, #30
 8012988:	f100 8105 	bmi.w	8012b96 <_printf_float+0x462>
 801298c:	68e0      	ldr	r0, [r4, #12]
 801298e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012990:	4298      	cmp	r0, r3
 8012992:	bfb8      	it	lt
 8012994:	4618      	movlt	r0, r3
 8012996:	e730      	b.n	80127fa <_printf_float+0xc6>
 8012998:	2301      	movs	r3, #1
 801299a:	464a      	mov	r2, r9
 801299c:	4631      	mov	r1, r6
 801299e:	4628      	mov	r0, r5
 80129a0:	47b8      	blx	r7
 80129a2:	3001      	adds	r0, #1
 80129a4:	f43f af27 	beq.w	80127f6 <_printf_float+0xc2>
 80129a8:	f108 0801 	add.w	r8, r8, #1
 80129ac:	e7e6      	b.n	801297c <_printf_float+0x248>
 80129ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	dc39      	bgt.n	8012a28 <_printf_float+0x2f4>
 80129b4:	4a1b      	ldr	r2, [pc, #108]	; (8012a24 <_printf_float+0x2f0>)
 80129b6:	2301      	movs	r3, #1
 80129b8:	4631      	mov	r1, r6
 80129ba:	4628      	mov	r0, r5
 80129bc:	47b8      	blx	r7
 80129be:	3001      	adds	r0, #1
 80129c0:	f43f af19 	beq.w	80127f6 <_printf_float+0xc2>
 80129c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129c8:	4313      	orrs	r3, r2
 80129ca:	d102      	bne.n	80129d2 <_printf_float+0x29e>
 80129cc:	6823      	ldr	r3, [r4, #0]
 80129ce:	07d9      	lsls	r1, r3, #31
 80129d0:	d5d8      	bpl.n	8012984 <_printf_float+0x250>
 80129d2:	ee18 3a10 	vmov	r3, s16
 80129d6:	4652      	mov	r2, sl
 80129d8:	4631      	mov	r1, r6
 80129da:	4628      	mov	r0, r5
 80129dc:	47b8      	blx	r7
 80129de:	3001      	adds	r0, #1
 80129e0:	f43f af09 	beq.w	80127f6 <_printf_float+0xc2>
 80129e4:	f04f 0900 	mov.w	r9, #0
 80129e8:	f104 0a1a 	add.w	sl, r4, #26
 80129ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ee:	425b      	negs	r3, r3
 80129f0:	454b      	cmp	r3, r9
 80129f2:	dc01      	bgt.n	80129f8 <_printf_float+0x2c4>
 80129f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129f6:	e792      	b.n	801291e <_printf_float+0x1ea>
 80129f8:	2301      	movs	r3, #1
 80129fa:	4652      	mov	r2, sl
 80129fc:	4631      	mov	r1, r6
 80129fe:	4628      	mov	r0, r5
 8012a00:	47b8      	blx	r7
 8012a02:	3001      	adds	r0, #1
 8012a04:	f43f aef7 	beq.w	80127f6 <_printf_float+0xc2>
 8012a08:	f109 0901 	add.w	r9, r9, #1
 8012a0c:	e7ee      	b.n	80129ec <_printf_float+0x2b8>
 8012a0e:	bf00      	nop
 8012a10:	7fefffff 	.word	0x7fefffff
 8012a14:	080504f4 	.word	0x080504f4
 8012a18:	080504f8 	.word	0x080504f8
 8012a1c:	08050500 	.word	0x08050500
 8012a20:	080504fc 	.word	0x080504fc
 8012a24:	08050991 	.word	0x08050991
 8012a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	bfa8      	it	ge
 8012a30:	461a      	movge	r2, r3
 8012a32:	2a00      	cmp	r2, #0
 8012a34:	4691      	mov	r9, r2
 8012a36:	dc37      	bgt.n	8012aa8 <_printf_float+0x374>
 8012a38:	f04f 0b00 	mov.w	fp, #0
 8012a3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a40:	f104 021a 	add.w	r2, r4, #26
 8012a44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012a46:	9305      	str	r3, [sp, #20]
 8012a48:	eba3 0309 	sub.w	r3, r3, r9
 8012a4c:	455b      	cmp	r3, fp
 8012a4e:	dc33      	bgt.n	8012ab8 <_printf_float+0x384>
 8012a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a54:	429a      	cmp	r2, r3
 8012a56:	db3b      	blt.n	8012ad0 <_printf_float+0x39c>
 8012a58:	6823      	ldr	r3, [r4, #0]
 8012a5a:	07da      	lsls	r2, r3, #31
 8012a5c:	d438      	bmi.n	8012ad0 <_printf_float+0x39c>
 8012a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a60:	9a05      	ldr	r2, [sp, #20]
 8012a62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a64:	1a9a      	subs	r2, r3, r2
 8012a66:	eba3 0901 	sub.w	r9, r3, r1
 8012a6a:	4591      	cmp	r9, r2
 8012a6c:	bfa8      	it	ge
 8012a6e:	4691      	movge	r9, r2
 8012a70:	f1b9 0f00 	cmp.w	r9, #0
 8012a74:	dc35      	bgt.n	8012ae2 <_printf_float+0x3ae>
 8012a76:	f04f 0800 	mov.w	r8, #0
 8012a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a7e:	f104 0a1a 	add.w	sl, r4, #26
 8012a82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a86:	1a9b      	subs	r3, r3, r2
 8012a88:	eba3 0309 	sub.w	r3, r3, r9
 8012a8c:	4543      	cmp	r3, r8
 8012a8e:	f77f af79 	ble.w	8012984 <_printf_float+0x250>
 8012a92:	2301      	movs	r3, #1
 8012a94:	4652      	mov	r2, sl
 8012a96:	4631      	mov	r1, r6
 8012a98:	4628      	mov	r0, r5
 8012a9a:	47b8      	blx	r7
 8012a9c:	3001      	adds	r0, #1
 8012a9e:	f43f aeaa 	beq.w	80127f6 <_printf_float+0xc2>
 8012aa2:	f108 0801 	add.w	r8, r8, #1
 8012aa6:	e7ec      	b.n	8012a82 <_printf_float+0x34e>
 8012aa8:	4613      	mov	r3, r2
 8012aaa:	4631      	mov	r1, r6
 8012aac:	4642      	mov	r2, r8
 8012aae:	4628      	mov	r0, r5
 8012ab0:	47b8      	blx	r7
 8012ab2:	3001      	adds	r0, #1
 8012ab4:	d1c0      	bne.n	8012a38 <_printf_float+0x304>
 8012ab6:	e69e      	b.n	80127f6 <_printf_float+0xc2>
 8012ab8:	2301      	movs	r3, #1
 8012aba:	4631      	mov	r1, r6
 8012abc:	4628      	mov	r0, r5
 8012abe:	9205      	str	r2, [sp, #20]
 8012ac0:	47b8      	blx	r7
 8012ac2:	3001      	adds	r0, #1
 8012ac4:	f43f ae97 	beq.w	80127f6 <_printf_float+0xc2>
 8012ac8:	9a05      	ldr	r2, [sp, #20]
 8012aca:	f10b 0b01 	add.w	fp, fp, #1
 8012ace:	e7b9      	b.n	8012a44 <_printf_float+0x310>
 8012ad0:	ee18 3a10 	vmov	r3, s16
 8012ad4:	4652      	mov	r2, sl
 8012ad6:	4631      	mov	r1, r6
 8012ad8:	4628      	mov	r0, r5
 8012ada:	47b8      	blx	r7
 8012adc:	3001      	adds	r0, #1
 8012ade:	d1be      	bne.n	8012a5e <_printf_float+0x32a>
 8012ae0:	e689      	b.n	80127f6 <_printf_float+0xc2>
 8012ae2:	9a05      	ldr	r2, [sp, #20]
 8012ae4:	464b      	mov	r3, r9
 8012ae6:	4442      	add	r2, r8
 8012ae8:	4631      	mov	r1, r6
 8012aea:	4628      	mov	r0, r5
 8012aec:	47b8      	blx	r7
 8012aee:	3001      	adds	r0, #1
 8012af0:	d1c1      	bne.n	8012a76 <_printf_float+0x342>
 8012af2:	e680      	b.n	80127f6 <_printf_float+0xc2>
 8012af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012af6:	2a01      	cmp	r2, #1
 8012af8:	dc01      	bgt.n	8012afe <_printf_float+0x3ca>
 8012afa:	07db      	lsls	r3, r3, #31
 8012afc:	d538      	bpl.n	8012b70 <_printf_float+0x43c>
 8012afe:	2301      	movs	r3, #1
 8012b00:	4642      	mov	r2, r8
 8012b02:	4631      	mov	r1, r6
 8012b04:	4628      	mov	r0, r5
 8012b06:	47b8      	blx	r7
 8012b08:	3001      	adds	r0, #1
 8012b0a:	f43f ae74 	beq.w	80127f6 <_printf_float+0xc2>
 8012b0e:	ee18 3a10 	vmov	r3, s16
 8012b12:	4652      	mov	r2, sl
 8012b14:	4631      	mov	r1, r6
 8012b16:	4628      	mov	r0, r5
 8012b18:	47b8      	blx	r7
 8012b1a:	3001      	adds	r0, #1
 8012b1c:	f43f ae6b 	beq.w	80127f6 <_printf_float+0xc2>
 8012b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012b24:	2200      	movs	r2, #0
 8012b26:	2300      	movs	r3, #0
 8012b28:	f7ed fffe 	bl	8000b28 <__aeabi_dcmpeq>
 8012b2c:	b9d8      	cbnz	r0, 8012b66 <_printf_float+0x432>
 8012b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b30:	f108 0201 	add.w	r2, r8, #1
 8012b34:	3b01      	subs	r3, #1
 8012b36:	4631      	mov	r1, r6
 8012b38:	4628      	mov	r0, r5
 8012b3a:	47b8      	blx	r7
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	d10e      	bne.n	8012b5e <_printf_float+0x42a>
 8012b40:	e659      	b.n	80127f6 <_printf_float+0xc2>
 8012b42:	2301      	movs	r3, #1
 8012b44:	4652      	mov	r2, sl
 8012b46:	4631      	mov	r1, r6
 8012b48:	4628      	mov	r0, r5
 8012b4a:	47b8      	blx	r7
 8012b4c:	3001      	adds	r0, #1
 8012b4e:	f43f ae52 	beq.w	80127f6 <_printf_float+0xc2>
 8012b52:	f108 0801 	add.w	r8, r8, #1
 8012b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b58:	3b01      	subs	r3, #1
 8012b5a:	4543      	cmp	r3, r8
 8012b5c:	dcf1      	bgt.n	8012b42 <_printf_float+0x40e>
 8012b5e:	464b      	mov	r3, r9
 8012b60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012b64:	e6dc      	b.n	8012920 <_printf_float+0x1ec>
 8012b66:	f04f 0800 	mov.w	r8, #0
 8012b6a:	f104 0a1a 	add.w	sl, r4, #26
 8012b6e:	e7f2      	b.n	8012b56 <_printf_float+0x422>
 8012b70:	2301      	movs	r3, #1
 8012b72:	4642      	mov	r2, r8
 8012b74:	e7df      	b.n	8012b36 <_printf_float+0x402>
 8012b76:	2301      	movs	r3, #1
 8012b78:	464a      	mov	r2, r9
 8012b7a:	4631      	mov	r1, r6
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	47b8      	blx	r7
 8012b80:	3001      	adds	r0, #1
 8012b82:	f43f ae38 	beq.w	80127f6 <_printf_float+0xc2>
 8012b86:	f108 0801 	add.w	r8, r8, #1
 8012b8a:	68e3      	ldr	r3, [r4, #12]
 8012b8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b8e:	1a5b      	subs	r3, r3, r1
 8012b90:	4543      	cmp	r3, r8
 8012b92:	dcf0      	bgt.n	8012b76 <_printf_float+0x442>
 8012b94:	e6fa      	b.n	801298c <_printf_float+0x258>
 8012b96:	f04f 0800 	mov.w	r8, #0
 8012b9a:	f104 0919 	add.w	r9, r4, #25
 8012b9e:	e7f4      	b.n	8012b8a <_printf_float+0x456>

08012ba0 <_printf_common>:
 8012ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba4:	4616      	mov	r6, r2
 8012ba6:	4699      	mov	r9, r3
 8012ba8:	688a      	ldr	r2, [r1, #8]
 8012baa:	690b      	ldr	r3, [r1, #16]
 8012bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012bb0:	4293      	cmp	r3, r2
 8012bb2:	bfb8      	it	lt
 8012bb4:	4613      	movlt	r3, r2
 8012bb6:	6033      	str	r3, [r6, #0]
 8012bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012bbc:	4607      	mov	r7, r0
 8012bbe:	460c      	mov	r4, r1
 8012bc0:	b10a      	cbz	r2, 8012bc6 <_printf_common+0x26>
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	6033      	str	r3, [r6, #0]
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	0699      	lsls	r1, r3, #26
 8012bca:	bf42      	ittt	mi
 8012bcc:	6833      	ldrmi	r3, [r6, #0]
 8012bce:	3302      	addmi	r3, #2
 8012bd0:	6033      	strmi	r3, [r6, #0]
 8012bd2:	6825      	ldr	r5, [r4, #0]
 8012bd4:	f015 0506 	ands.w	r5, r5, #6
 8012bd8:	d106      	bne.n	8012be8 <_printf_common+0x48>
 8012bda:	f104 0a19 	add.w	sl, r4, #25
 8012bde:	68e3      	ldr	r3, [r4, #12]
 8012be0:	6832      	ldr	r2, [r6, #0]
 8012be2:	1a9b      	subs	r3, r3, r2
 8012be4:	42ab      	cmp	r3, r5
 8012be6:	dc26      	bgt.n	8012c36 <_printf_common+0x96>
 8012be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012bec:	1e13      	subs	r3, r2, #0
 8012bee:	6822      	ldr	r2, [r4, #0]
 8012bf0:	bf18      	it	ne
 8012bf2:	2301      	movne	r3, #1
 8012bf4:	0692      	lsls	r2, r2, #26
 8012bf6:	d42b      	bmi.n	8012c50 <_printf_common+0xb0>
 8012bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bfc:	4649      	mov	r1, r9
 8012bfe:	4638      	mov	r0, r7
 8012c00:	47c0      	blx	r8
 8012c02:	3001      	adds	r0, #1
 8012c04:	d01e      	beq.n	8012c44 <_printf_common+0xa4>
 8012c06:	6823      	ldr	r3, [r4, #0]
 8012c08:	68e5      	ldr	r5, [r4, #12]
 8012c0a:	6832      	ldr	r2, [r6, #0]
 8012c0c:	f003 0306 	and.w	r3, r3, #6
 8012c10:	2b04      	cmp	r3, #4
 8012c12:	bf08      	it	eq
 8012c14:	1aad      	subeq	r5, r5, r2
 8012c16:	68a3      	ldr	r3, [r4, #8]
 8012c18:	6922      	ldr	r2, [r4, #16]
 8012c1a:	bf0c      	ite	eq
 8012c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c20:	2500      	movne	r5, #0
 8012c22:	4293      	cmp	r3, r2
 8012c24:	bfc4      	itt	gt
 8012c26:	1a9b      	subgt	r3, r3, r2
 8012c28:	18ed      	addgt	r5, r5, r3
 8012c2a:	2600      	movs	r6, #0
 8012c2c:	341a      	adds	r4, #26
 8012c2e:	42b5      	cmp	r5, r6
 8012c30:	d11a      	bne.n	8012c68 <_printf_common+0xc8>
 8012c32:	2000      	movs	r0, #0
 8012c34:	e008      	b.n	8012c48 <_printf_common+0xa8>
 8012c36:	2301      	movs	r3, #1
 8012c38:	4652      	mov	r2, sl
 8012c3a:	4649      	mov	r1, r9
 8012c3c:	4638      	mov	r0, r7
 8012c3e:	47c0      	blx	r8
 8012c40:	3001      	adds	r0, #1
 8012c42:	d103      	bne.n	8012c4c <_printf_common+0xac>
 8012c44:	f04f 30ff 	mov.w	r0, #4294967295
 8012c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c4c:	3501      	adds	r5, #1
 8012c4e:	e7c6      	b.n	8012bde <_printf_common+0x3e>
 8012c50:	18e1      	adds	r1, r4, r3
 8012c52:	1c5a      	adds	r2, r3, #1
 8012c54:	2030      	movs	r0, #48	; 0x30
 8012c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c5a:	4422      	add	r2, r4
 8012c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c64:	3302      	adds	r3, #2
 8012c66:	e7c7      	b.n	8012bf8 <_printf_common+0x58>
 8012c68:	2301      	movs	r3, #1
 8012c6a:	4622      	mov	r2, r4
 8012c6c:	4649      	mov	r1, r9
 8012c6e:	4638      	mov	r0, r7
 8012c70:	47c0      	blx	r8
 8012c72:	3001      	adds	r0, #1
 8012c74:	d0e6      	beq.n	8012c44 <_printf_common+0xa4>
 8012c76:	3601      	adds	r6, #1
 8012c78:	e7d9      	b.n	8012c2e <_printf_common+0x8e>
	...

08012c7c <_printf_i>:
 8012c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c80:	7e0f      	ldrb	r7, [r1, #24]
 8012c82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c84:	2f78      	cmp	r7, #120	; 0x78
 8012c86:	4691      	mov	r9, r2
 8012c88:	4680      	mov	r8, r0
 8012c8a:	460c      	mov	r4, r1
 8012c8c:	469a      	mov	sl, r3
 8012c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012c92:	d807      	bhi.n	8012ca4 <_printf_i+0x28>
 8012c94:	2f62      	cmp	r7, #98	; 0x62
 8012c96:	d80a      	bhi.n	8012cae <_printf_i+0x32>
 8012c98:	2f00      	cmp	r7, #0
 8012c9a:	f000 80d8 	beq.w	8012e4e <_printf_i+0x1d2>
 8012c9e:	2f58      	cmp	r7, #88	; 0x58
 8012ca0:	f000 80a3 	beq.w	8012dea <_printf_i+0x16e>
 8012ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012cac:	e03a      	b.n	8012d24 <_printf_i+0xa8>
 8012cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012cb2:	2b15      	cmp	r3, #21
 8012cb4:	d8f6      	bhi.n	8012ca4 <_printf_i+0x28>
 8012cb6:	a101      	add	r1, pc, #4	; (adr r1, 8012cbc <_printf_i+0x40>)
 8012cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012cbc:	08012d15 	.word	0x08012d15
 8012cc0:	08012d29 	.word	0x08012d29
 8012cc4:	08012ca5 	.word	0x08012ca5
 8012cc8:	08012ca5 	.word	0x08012ca5
 8012ccc:	08012ca5 	.word	0x08012ca5
 8012cd0:	08012ca5 	.word	0x08012ca5
 8012cd4:	08012d29 	.word	0x08012d29
 8012cd8:	08012ca5 	.word	0x08012ca5
 8012cdc:	08012ca5 	.word	0x08012ca5
 8012ce0:	08012ca5 	.word	0x08012ca5
 8012ce4:	08012ca5 	.word	0x08012ca5
 8012ce8:	08012e35 	.word	0x08012e35
 8012cec:	08012d59 	.word	0x08012d59
 8012cf0:	08012e17 	.word	0x08012e17
 8012cf4:	08012ca5 	.word	0x08012ca5
 8012cf8:	08012ca5 	.word	0x08012ca5
 8012cfc:	08012e57 	.word	0x08012e57
 8012d00:	08012ca5 	.word	0x08012ca5
 8012d04:	08012d59 	.word	0x08012d59
 8012d08:	08012ca5 	.word	0x08012ca5
 8012d0c:	08012ca5 	.word	0x08012ca5
 8012d10:	08012e1f 	.word	0x08012e1f
 8012d14:	682b      	ldr	r3, [r5, #0]
 8012d16:	1d1a      	adds	r2, r3, #4
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	602a      	str	r2, [r5, #0]
 8012d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d24:	2301      	movs	r3, #1
 8012d26:	e0a3      	b.n	8012e70 <_printf_i+0x1f4>
 8012d28:	6820      	ldr	r0, [r4, #0]
 8012d2a:	6829      	ldr	r1, [r5, #0]
 8012d2c:	0606      	lsls	r6, r0, #24
 8012d2e:	f101 0304 	add.w	r3, r1, #4
 8012d32:	d50a      	bpl.n	8012d4a <_printf_i+0xce>
 8012d34:	680e      	ldr	r6, [r1, #0]
 8012d36:	602b      	str	r3, [r5, #0]
 8012d38:	2e00      	cmp	r6, #0
 8012d3a:	da03      	bge.n	8012d44 <_printf_i+0xc8>
 8012d3c:	232d      	movs	r3, #45	; 0x2d
 8012d3e:	4276      	negs	r6, r6
 8012d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d44:	485e      	ldr	r0, [pc, #376]	; (8012ec0 <_printf_i+0x244>)
 8012d46:	230a      	movs	r3, #10
 8012d48:	e019      	b.n	8012d7e <_printf_i+0x102>
 8012d4a:	680e      	ldr	r6, [r1, #0]
 8012d4c:	602b      	str	r3, [r5, #0]
 8012d4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012d52:	bf18      	it	ne
 8012d54:	b236      	sxthne	r6, r6
 8012d56:	e7ef      	b.n	8012d38 <_printf_i+0xbc>
 8012d58:	682b      	ldr	r3, [r5, #0]
 8012d5a:	6820      	ldr	r0, [r4, #0]
 8012d5c:	1d19      	adds	r1, r3, #4
 8012d5e:	6029      	str	r1, [r5, #0]
 8012d60:	0601      	lsls	r1, r0, #24
 8012d62:	d501      	bpl.n	8012d68 <_printf_i+0xec>
 8012d64:	681e      	ldr	r6, [r3, #0]
 8012d66:	e002      	b.n	8012d6e <_printf_i+0xf2>
 8012d68:	0646      	lsls	r6, r0, #25
 8012d6a:	d5fb      	bpl.n	8012d64 <_printf_i+0xe8>
 8012d6c:	881e      	ldrh	r6, [r3, #0]
 8012d6e:	4854      	ldr	r0, [pc, #336]	; (8012ec0 <_printf_i+0x244>)
 8012d70:	2f6f      	cmp	r7, #111	; 0x6f
 8012d72:	bf0c      	ite	eq
 8012d74:	2308      	moveq	r3, #8
 8012d76:	230a      	movne	r3, #10
 8012d78:	2100      	movs	r1, #0
 8012d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d7e:	6865      	ldr	r5, [r4, #4]
 8012d80:	60a5      	str	r5, [r4, #8]
 8012d82:	2d00      	cmp	r5, #0
 8012d84:	bfa2      	ittt	ge
 8012d86:	6821      	ldrge	r1, [r4, #0]
 8012d88:	f021 0104 	bicge.w	r1, r1, #4
 8012d8c:	6021      	strge	r1, [r4, #0]
 8012d8e:	b90e      	cbnz	r6, 8012d94 <_printf_i+0x118>
 8012d90:	2d00      	cmp	r5, #0
 8012d92:	d04d      	beq.n	8012e30 <_printf_i+0x1b4>
 8012d94:	4615      	mov	r5, r2
 8012d96:	fbb6 f1f3 	udiv	r1, r6, r3
 8012d9a:	fb03 6711 	mls	r7, r3, r1, r6
 8012d9e:	5dc7      	ldrb	r7, [r0, r7]
 8012da0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012da4:	4637      	mov	r7, r6
 8012da6:	42bb      	cmp	r3, r7
 8012da8:	460e      	mov	r6, r1
 8012daa:	d9f4      	bls.n	8012d96 <_printf_i+0x11a>
 8012dac:	2b08      	cmp	r3, #8
 8012dae:	d10b      	bne.n	8012dc8 <_printf_i+0x14c>
 8012db0:	6823      	ldr	r3, [r4, #0]
 8012db2:	07de      	lsls	r6, r3, #31
 8012db4:	d508      	bpl.n	8012dc8 <_printf_i+0x14c>
 8012db6:	6923      	ldr	r3, [r4, #16]
 8012db8:	6861      	ldr	r1, [r4, #4]
 8012dba:	4299      	cmp	r1, r3
 8012dbc:	bfde      	ittt	le
 8012dbe:	2330      	movle	r3, #48	; 0x30
 8012dc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012dc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012dc8:	1b52      	subs	r2, r2, r5
 8012dca:	6122      	str	r2, [r4, #16]
 8012dcc:	f8cd a000 	str.w	sl, [sp]
 8012dd0:	464b      	mov	r3, r9
 8012dd2:	aa03      	add	r2, sp, #12
 8012dd4:	4621      	mov	r1, r4
 8012dd6:	4640      	mov	r0, r8
 8012dd8:	f7ff fee2 	bl	8012ba0 <_printf_common>
 8012ddc:	3001      	adds	r0, #1
 8012dde:	d14c      	bne.n	8012e7a <_printf_i+0x1fe>
 8012de0:	f04f 30ff 	mov.w	r0, #4294967295
 8012de4:	b004      	add	sp, #16
 8012de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dea:	4835      	ldr	r0, [pc, #212]	; (8012ec0 <_printf_i+0x244>)
 8012dec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012df0:	6829      	ldr	r1, [r5, #0]
 8012df2:	6823      	ldr	r3, [r4, #0]
 8012df4:	f851 6b04 	ldr.w	r6, [r1], #4
 8012df8:	6029      	str	r1, [r5, #0]
 8012dfa:	061d      	lsls	r5, r3, #24
 8012dfc:	d514      	bpl.n	8012e28 <_printf_i+0x1ac>
 8012dfe:	07df      	lsls	r7, r3, #31
 8012e00:	bf44      	itt	mi
 8012e02:	f043 0320 	orrmi.w	r3, r3, #32
 8012e06:	6023      	strmi	r3, [r4, #0]
 8012e08:	b91e      	cbnz	r6, 8012e12 <_printf_i+0x196>
 8012e0a:	6823      	ldr	r3, [r4, #0]
 8012e0c:	f023 0320 	bic.w	r3, r3, #32
 8012e10:	6023      	str	r3, [r4, #0]
 8012e12:	2310      	movs	r3, #16
 8012e14:	e7b0      	b.n	8012d78 <_printf_i+0xfc>
 8012e16:	6823      	ldr	r3, [r4, #0]
 8012e18:	f043 0320 	orr.w	r3, r3, #32
 8012e1c:	6023      	str	r3, [r4, #0]
 8012e1e:	2378      	movs	r3, #120	; 0x78
 8012e20:	4828      	ldr	r0, [pc, #160]	; (8012ec4 <_printf_i+0x248>)
 8012e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012e26:	e7e3      	b.n	8012df0 <_printf_i+0x174>
 8012e28:	0659      	lsls	r1, r3, #25
 8012e2a:	bf48      	it	mi
 8012e2c:	b2b6      	uxthmi	r6, r6
 8012e2e:	e7e6      	b.n	8012dfe <_printf_i+0x182>
 8012e30:	4615      	mov	r5, r2
 8012e32:	e7bb      	b.n	8012dac <_printf_i+0x130>
 8012e34:	682b      	ldr	r3, [r5, #0]
 8012e36:	6826      	ldr	r6, [r4, #0]
 8012e38:	6961      	ldr	r1, [r4, #20]
 8012e3a:	1d18      	adds	r0, r3, #4
 8012e3c:	6028      	str	r0, [r5, #0]
 8012e3e:	0635      	lsls	r5, r6, #24
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	d501      	bpl.n	8012e48 <_printf_i+0x1cc>
 8012e44:	6019      	str	r1, [r3, #0]
 8012e46:	e002      	b.n	8012e4e <_printf_i+0x1d2>
 8012e48:	0670      	lsls	r0, r6, #25
 8012e4a:	d5fb      	bpl.n	8012e44 <_printf_i+0x1c8>
 8012e4c:	8019      	strh	r1, [r3, #0]
 8012e4e:	2300      	movs	r3, #0
 8012e50:	6123      	str	r3, [r4, #16]
 8012e52:	4615      	mov	r5, r2
 8012e54:	e7ba      	b.n	8012dcc <_printf_i+0x150>
 8012e56:	682b      	ldr	r3, [r5, #0]
 8012e58:	1d1a      	adds	r2, r3, #4
 8012e5a:	602a      	str	r2, [r5, #0]
 8012e5c:	681d      	ldr	r5, [r3, #0]
 8012e5e:	6862      	ldr	r2, [r4, #4]
 8012e60:	2100      	movs	r1, #0
 8012e62:	4628      	mov	r0, r5
 8012e64:	f7ed f9ec 	bl	8000240 <memchr>
 8012e68:	b108      	cbz	r0, 8012e6e <_printf_i+0x1f2>
 8012e6a:	1b40      	subs	r0, r0, r5
 8012e6c:	6060      	str	r0, [r4, #4]
 8012e6e:	6863      	ldr	r3, [r4, #4]
 8012e70:	6123      	str	r3, [r4, #16]
 8012e72:	2300      	movs	r3, #0
 8012e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e78:	e7a8      	b.n	8012dcc <_printf_i+0x150>
 8012e7a:	6923      	ldr	r3, [r4, #16]
 8012e7c:	462a      	mov	r2, r5
 8012e7e:	4649      	mov	r1, r9
 8012e80:	4640      	mov	r0, r8
 8012e82:	47d0      	blx	sl
 8012e84:	3001      	adds	r0, #1
 8012e86:	d0ab      	beq.n	8012de0 <_printf_i+0x164>
 8012e88:	6823      	ldr	r3, [r4, #0]
 8012e8a:	079b      	lsls	r3, r3, #30
 8012e8c:	d413      	bmi.n	8012eb6 <_printf_i+0x23a>
 8012e8e:	68e0      	ldr	r0, [r4, #12]
 8012e90:	9b03      	ldr	r3, [sp, #12]
 8012e92:	4298      	cmp	r0, r3
 8012e94:	bfb8      	it	lt
 8012e96:	4618      	movlt	r0, r3
 8012e98:	e7a4      	b.n	8012de4 <_printf_i+0x168>
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	4632      	mov	r2, r6
 8012e9e:	4649      	mov	r1, r9
 8012ea0:	4640      	mov	r0, r8
 8012ea2:	47d0      	blx	sl
 8012ea4:	3001      	adds	r0, #1
 8012ea6:	d09b      	beq.n	8012de0 <_printf_i+0x164>
 8012ea8:	3501      	adds	r5, #1
 8012eaa:	68e3      	ldr	r3, [r4, #12]
 8012eac:	9903      	ldr	r1, [sp, #12]
 8012eae:	1a5b      	subs	r3, r3, r1
 8012eb0:	42ab      	cmp	r3, r5
 8012eb2:	dcf2      	bgt.n	8012e9a <_printf_i+0x21e>
 8012eb4:	e7eb      	b.n	8012e8e <_printf_i+0x212>
 8012eb6:	2500      	movs	r5, #0
 8012eb8:	f104 0619 	add.w	r6, r4, #25
 8012ebc:	e7f5      	b.n	8012eaa <_printf_i+0x22e>
 8012ebe:	bf00      	nop
 8012ec0:	08050504 	.word	0x08050504
 8012ec4:	08050515 	.word	0x08050515

08012ec8 <_scanf_float>:
 8012ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ecc:	b087      	sub	sp, #28
 8012ece:	4617      	mov	r7, r2
 8012ed0:	9303      	str	r3, [sp, #12]
 8012ed2:	688b      	ldr	r3, [r1, #8]
 8012ed4:	1e5a      	subs	r2, r3, #1
 8012ed6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012eda:	bf83      	ittte	hi
 8012edc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012ee0:	195b      	addhi	r3, r3, r5
 8012ee2:	9302      	strhi	r3, [sp, #8]
 8012ee4:	2300      	movls	r3, #0
 8012ee6:	bf86      	itte	hi
 8012ee8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012eec:	608b      	strhi	r3, [r1, #8]
 8012eee:	9302      	strls	r3, [sp, #8]
 8012ef0:	680b      	ldr	r3, [r1, #0]
 8012ef2:	468b      	mov	fp, r1
 8012ef4:	2500      	movs	r5, #0
 8012ef6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012efa:	f84b 3b1c 	str.w	r3, [fp], #28
 8012efe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012f02:	4680      	mov	r8, r0
 8012f04:	460c      	mov	r4, r1
 8012f06:	465e      	mov	r6, fp
 8012f08:	46aa      	mov	sl, r5
 8012f0a:	46a9      	mov	r9, r5
 8012f0c:	9501      	str	r5, [sp, #4]
 8012f0e:	68a2      	ldr	r2, [r4, #8]
 8012f10:	b152      	cbz	r2, 8012f28 <_scanf_float+0x60>
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	2b4e      	cmp	r3, #78	; 0x4e
 8012f18:	d864      	bhi.n	8012fe4 <_scanf_float+0x11c>
 8012f1a:	2b40      	cmp	r3, #64	; 0x40
 8012f1c:	d83c      	bhi.n	8012f98 <_scanf_float+0xd0>
 8012f1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012f22:	b2c8      	uxtb	r0, r1
 8012f24:	280e      	cmp	r0, #14
 8012f26:	d93a      	bls.n	8012f9e <_scanf_float+0xd6>
 8012f28:	f1b9 0f00 	cmp.w	r9, #0
 8012f2c:	d003      	beq.n	8012f36 <_scanf_float+0x6e>
 8012f2e:	6823      	ldr	r3, [r4, #0]
 8012f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f34:	6023      	str	r3, [r4, #0]
 8012f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f3a:	f1ba 0f01 	cmp.w	sl, #1
 8012f3e:	f200 8113 	bhi.w	8013168 <_scanf_float+0x2a0>
 8012f42:	455e      	cmp	r6, fp
 8012f44:	f200 8105 	bhi.w	8013152 <_scanf_float+0x28a>
 8012f48:	2501      	movs	r5, #1
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	b007      	add	sp, #28
 8012f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012f56:	2a0d      	cmp	r2, #13
 8012f58:	d8e6      	bhi.n	8012f28 <_scanf_float+0x60>
 8012f5a:	a101      	add	r1, pc, #4	; (adr r1, 8012f60 <_scanf_float+0x98>)
 8012f5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012f60:	0801309f 	.word	0x0801309f
 8012f64:	08012f29 	.word	0x08012f29
 8012f68:	08012f29 	.word	0x08012f29
 8012f6c:	08012f29 	.word	0x08012f29
 8012f70:	080130ff 	.word	0x080130ff
 8012f74:	080130d7 	.word	0x080130d7
 8012f78:	08012f29 	.word	0x08012f29
 8012f7c:	08012f29 	.word	0x08012f29
 8012f80:	080130ad 	.word	0x080130ad
 8012f84:	08012f29 	.word	0x08012f29
 8012f88:	08012f29 	.word	0x08012f29
 8012f8c:	08012f29 	.word	0x08012f29
 8012f90:	08012f29 	.word	0x08012f29
 8012f94:	08013065 	.word	0x08013065
 8012f98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012f9c:	e7db      	b.n	8012f56 <_scanf_float+0x8e>
 8012f9e:	290e      	cmp	r1, #14
 8012fa0:	d8c2      	bhi.n	8012f28 <_scanf_float+0x60>
 8012fa2:	a001      	add	r0, pc, #4	; (adr r0, 8012fa8 <_scanf_float+0xe0>)
 8012fa4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012fa8:	08013057 	.word	0x08013057
 8012fac:	08012f29 	.word	0x08012f29
 8012fb0:	08013057 	.word	0x08013057
 8012fb4:	080130eb 	.word	0x080130eb
 8012fb8:	08012f29 	.word	0x08012f29
 8012fbc:	08013005 	.word	0x08013005
 8012fc0:	08013041 	.word	0x08013041
 8012fc4:	08013041 	.word	0x08013041
 8012fc8:	08013041 	.word	0x08013041
 8012fcc:	08013041 	.word	0x08013041
 8012fd0:	08013041 	.word	0x08013041
 8012fd4:	08013041 	.word	0x08013041
 8012fd8:	08013041 	.word	0x08013041
 8012fdc:	08013041 	.word	0x08013041
 8012fe0:	08013041 	.word	0x08013041
 8012fe4:	2b6e      	cmp	r3, #110	; 0x6e
 8012fe6:	d809      	bhi.n	8012ffc <_scanf_float+0x134>
 8012fe8:	2b60      	cmp	r3, #96	; 0x60
 8012fea:	d8b2      	bhi.n	8012f52 <_scanf_float+0x8a>
 8012fec:	2b54      	cmp	r3, #84	; 0x54
 8012fee:	d077      	beq.n	80130e0 <_scanf_float+0x218>
 8012ff0:	2b59      	cmp	r3, #89	; 0x59
 8012ff2:	d199      	bne.n	8012f28 <_scanf_float+0x60>
 8012ff4:	2d07      	cmp	r5, #7
 8012ff6:	d197      	bne.n	8012f28 <_scanf_float+0x60>
 8012ff8:	2508      	movs	r5, #8
 8012ffa:	e029      	b.n	8013050 <_scanf_float+0x188>
 8012ffc:	2b74      	cmp	r3, #116	; 0x74
 8012ffe:	d06f      	beq.n	80130e0 <_scanf_float+0x218>
 8013000:	2b79      	cmp	r3, #121	; 0x79
 8013002:	e7f6      	b.n	8012ff2 <_scanf_float+0x12a>
 8013004:	6821      	ldr	r1, [r4, #0]
 8013006:	05c8      	lsls	r0, r1, #23
 8013008:	d51a      	bpl.n	8013040 <_scanf_float+0x178>
 801300a:	9b02      	ldr	r3, [sp, #8]
 801300c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013010:	6021      	str	r1, [r4, #0]
 8013012:	f109 0901 	add.w	r9, r9, #1
 8013016:	b11b      	cbz	r3, 8013020 <_scanf_float+0x158>
 8013018:	3b01      	subs	r3, #1
 801301a:	3201      	adds	r2, #1
 801301c:	9302      	str	r3, [sp, #8]
 801301e:	60a2      	str	r2, [r4, #8]
 8013020:	68a3      	ldr	r3, [r4, #8]
 8013022:	3b01      	subs	r3, #1
 8013024:	60a3      	str	r3, [r4, #8]
 8013026:	6923      	ldr	r3, [r4, #16]
 8013028:	3301      	adds	r3, #1
 801302a:	6123      	str	r3, [r4, #16]
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	3b01      	subs	r3, #1
 8013030:	2b00      	cmp	r3, #0
 8013032:	607b      	str	r3, [r7, #4]
 8013034:	f340 8084 	ble.w	8013140 <_scanf_float+0x278>
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	3301      	adds	r3, #1
 801303c:	603b      	str	r3, [r7, #0]
 801303e:	e766      	b.n	8012f0e <_scanf_float+0x46>
 8013040:	eb1a 0f05 	cmn.w	sl, r5
 8013044:	f47f af70 	bne.w	8012f28 <_scanf_float+0x60>
 8013048:	6822      	ldr	r2, [r4, #0]
 801304a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801304e:	6022      	str	r2, [r4, #0]
 8013050:	f806 3b01 	strb.w	r3, [r6], #1
 8013054:	e7e4      	b.n	8013020 <_scanf_float+0x158>
 8013056:	6822      	ldr	r2, [r4, #0]
 8013058:	0610      	lsls	r0, r2, #24
 801305a:	f57f af65 	bpl.w	8012f28 <_scanf_float+0x60>
 801305e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013062:	e7f4      	b.n	801304e <_scanf_float+0x186>
 8013064:	f1ba 0f00 	cmp.w	sl, #0
 8013068:	d10e      	bne.n	8013088 <_scanf_float+0x1c0>
 801306a:	f1b9 0f00 	cmp.w	r9, #0
 801306e:	d10e      	bne.n	801308e <_scanf_float+0x1c6>
 8013070:	6822      	ldr	r2, [r4, #0]
 8013072:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013076:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801307a:	d108      	bne.n	801308e <_scanf_float+0x1c6>
 801307c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013080:	6022      	str	r2, [r4, #0]
 8013082:	f04f 0a01 	mov.w	sl, #1
 8013086:	e7e3      	b.n	8013050 <_scanf_float+0x188>
 8013088:	f1ba 0f02 	cmp.w	sl, #2
 801308c:	d055      	beq.n	801313a <_scanf_float+0x272>
 801308e:	2d01      	cmp	r5, #1
 8013090:	d002      	beq.n	8013098 <_scanf_float+0x1d0>
 8013092:	2d04      	cmp	r5, #4
 8013094:	f47f af48 	bne.w	8012f28 <_scanf_float+0x60>
 8013098:	3501      	adds	r5, #1
 801309a:	b2ed      	uxtb	r5, r5
 801309c:	e7d8      	b.n	8013050 <_scanf_float+0x188>
 801309e:	f1ba 0f01 	cmp.w	sl, #1
 80130a2:	f47f af41 	bne.w	8012f28 <_scanf_float+0x60>
 80130a6:	f04f 0a02 	mov.w	sl, #2
 80130aa:	e7d1      	b.n	8013050 <_scanf_float+0x188>
 80130ac:	b97d      	cbnz	r5, 80130ce <_scanf_float+0x206>
 80130ae:	f1b9 0f00 	cmp.w	r9, #0
 80130b2:	f47f af3c 	bne.w	8012f2e <_scanf_float+0x66>
 80130b6:	6822      	ldr	r2, [r4, #0]
 80130b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80130bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80130c0:	f47f af39 	bne.w	8012f36 <_scanf_float+0x6e>
 80130c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80130c8:	6022      	str	r2, [r4, #0]
 80130ca:	2501      	movs	r5, #1
 80130cc:	e7c0      	b.n	8013050 <_scanf_float+0x188>
 80130ce:	2d03      	cmp	r5, #3
 80130d0:	d0e2      	beq.n	8013098 <_scanf_float+0x1d0>
 80130d2:	2d05      	cmp	r5, #5
 80130d4:	e7de      	b.n	8013094 <_scanf_float+0x1cc>
 80130d6:	2d02      	cmp	r5, #2
 80130d8:	f47f af26 	bne.w	8012f28 <_scanf_float+0x60>
 80130dc:	2503      	movs	r5, #3
 80130de:	e7b7      	b.n	8013050 <_scanf_float+0x188>
 80130e0:	2d06      	cmp	r5, #6
 80130e2:	f47f af21 	bne.w	8012f28 <_scanf_float+0x60>
 80130e6:	2507      	movs	r5, #7
 80130e8:	e7b2      	b.n	8013050 <_scanf_float+0x188>
 80130ea:	6822      	ldr	r2, [r4, #0]
 80130ec:	0591      	lsls	r1, r2, #22
 80130ee:	f57f af1b 	bpl.w	8012f28 <_scanf_float+0x60>
 80130f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80130f6:	6022      	str	r2, [r4, #0]
 80130f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80130fc:	e7a8      	b.n	8013050 <_scanf_float+0x188>
 80130fe:	6822      	ldr	r2, [r4, #0]
 8013100:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013104:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013108:	d006      	beq.n	8013118 <_scanf_float+0x250>
 801310a:	0550      	lsls	r0, r2, #21
 801310c:	f57f af0c 	bpl.w	8012f28 <_scanf_float+0x60>
 8013110:	f1b9 0f00 	cmp.w	r9, #0
 8013114:	f43f af0f 	beq.w	8012f36 <_scanf_float+0x6e>
 8013118:	0591      	lsls	r1, r2, #22
 801311a:	bf58      	it	pl
 801311c:	9901      	ldrpl	r1, [sp, #4]
 801311e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013122:	bf58      	it	pl
 8013124:	eba9 0101 	subpl.w	r1, r9, r1
 8013128:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801312c:	bf58      	it	pl
 801312e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013132:	6022      	str	r2, [r4, #0]
 8013134:	f04f 0900 	mov.w	r9, #0
 8013138:	e78a      	b.n	8013050 <_scanf_float+0x188>
 801313a:	f04f 0a03 	mov.w	sl, #3
 801313e:	e787      	b.n	8013050 <_scanf_float+0x188>
 8013140:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013144:	4639      	mov	r1, r7
 8013146:	4640      	mov	r0, r8
 8013148:	4798      	blx	r3
 801314a:	2800      	cmp	r0, #0
 801314c:	f43f aedf 	beq.w	8012f0e <_scanf_float+0x46>
 8013150:	e6ea      	b.n	8012f28 <_scanf_float+0x60>
 8013152:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801315a:	463a      	mov	r2, r7
 801315c:	4640      	mov	r0, r8
 801315e:	4798      	blx	r3
 8013160:	6923      	ldr	r3, [r4, #16]
 8013162:	3b01      	subs	r3, #1
 8013164:	6123      	str	r3, [r4, #16]
 8013166:	e6ec      	b.n	8012f42 <_scanf_float+0x7a>
 8013168:	1e6b      	subs	r3, r5, #1
 801316a:	2b06      	cmp	r3, #6
 801316c:	d825      	bhi.n	80131ba <_scanf_float+0x2f2>
 801316e:	2d02      	cmp	r5, #2
 8013170:	d836      	bhi.n	80131e0 <_scanf_float+0x318>
 8013172:	455e      	cmp	r6, fp
 8013174:	f67f aee8 	bls.w	8012f48 <_scanf_float+0x80>
 8013178:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801317c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013180:	463a      	mov	r2, r7
 8013182:	4640      	mov	r0, r8
 8013184:	4798      	blx	r3
 8013186:	6923      	ldr	r3, [r4, #16]
 8013188:	3b01      	subs	r3, #1
 801318a:	6123      	str	r3, [r4, #16]
 801318c:	e7f1      	b.n	8013172 <_scanf_float+0x2aa>
 801318e:	9802      	ldr	r0, [sp, #8]
 8013190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013194:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013198:	9002      	str	r0, [sp, #8]
 801319a:	463a      	mov	r2, r7
 801319c:	4640      	mov	r0, r8
 801319e:	4798      	blx	r3
 80131a0:	6923      	ldr	r3, [r4, #16]
 80131a2:	3b01      	subs	r3, #1
 80131a4:	6123      	str	r3, [r4, #16]
 80131a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80131aa:	fa5f fa8a 	uxtb.w	sl, sl
 80131ae:	f1ba 0f02 	cmp.w	sl, #2
 80131b2:	d1ec      	bne.n	801318e <_scanf_float+0x2c6>
 80131b4:	3d03      	subs	r5, #3
 80131b6:	b2ed      	uxtb	r5, r5
 80131b8:	1b76      	subs	r6, r6, r5
 80131ba:	6823      	ldr	r3, [r4, #0]
 80131bc:	05da      	lsls	r2, r3, #23
 80131be:	d52f      	bpl.n	8013220 <_scanf_float+0x358>
 80131c0:	055b      	lsls	r3, r3, #21
 80131c2:	d510      	bpl.n	80131e6 <_scanf_float+0x31e>
 80131c4:	455e      	cmp	r6, fp
 80131c6:	f67f aebf 	bls.w	8012f48 <_scanf_float+0x80>
 80131ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80131ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80131d2:	463a      	mov	r2, r7
 80131d4:	4640      	mov	r0, r8
 80131d6:	4798      	blx	r3
 80131d8:	6923      	ldr	r3, [r4, #16]
 80131da:	3b01      	subs	r3, #1
 80131dc:	6123      	str	r3, [r4, #16]
 80131de:	e7f1      	b.n	80131c4 <_scanf_float+0x2fc>
 80131e0:	46aa      	mov	sl, r5
 80131e2:	9602      	str	r6, [sp, #8]
 80131e4:	e7df      	b.n	80131a6 <_scanf_float+0x2de>
 80131e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80131ea:	6923      	ldr	r3, [r4, #16]
 80131ec:	2965      	cmp	r1, #101	; 0x65
 80131ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80131f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80131f6:	6123      	str	r3, [r4, #16]
 80131f8:	d00c      	beq.n	8013214 <_scanf_float+0x34c>
 80131fa:	2945      	cmp	r1, #69	; 0x45
 80131fc:	d00a      	beq.n	8013214 <_scanf_float+0x34c>
 80131fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013202:	463a      	mov	r2, r7
 8013204:	4640      	mov	r0, r8
 8013206:	4798      	blx	r3
 8013208:	6923      	ldr	r3, [r4, #16]
 801320a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801320e:	3b01      	subs	r3, #1
 8013210:	1eb5      	subs	r5, r6, #2
 8013212:	6123      	str	r3, [r4, #16]
 8013214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013218:	463a      	mov	r2, r7
 801321a:	4640      	mov	r0, r8
 801321c:	4798      	blx	r3
 801321e:	462e      	mov	r6, r5
 8013220:	6825      	ldr	r5, [r4, #0]
 8013222:	f015 0510 	ands.w	r5, r5, #16
 8013226:	d159      	bne.n	80132dc <_scanf_float+0x414>
 8013228:	7035      	strb	r5, [r6, #0]
 801322a:	6823      	ldr	r3, [r4, #0]
 801322c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013234:	d11b      	bne.n	801326e <_scanf_float+0x3a6>
 8013236:	9b01      	ldr	r3, [sp, #4]
 8013238:	454b      	cmp	r3, r9
 801323a:	eba3 0209 	sub.w	r2, r3, r9
 801323e:	d123      	bne.n	8013288 <_scanf_float+0x3c0>
 8013240:	2200      	movs	r2, #0
 8013242:	4659      	mov	r1, fp
 8013244:	4640      	mov	r0, r8
 8013246:	f000 ff21 	bl	801408c <_strtod_r>
 801324a:	6822      	ldr	r2, [r4, #0]
 801324c:	9b03      	ldr	r3, [sp, #12]
 801324e:	f012 0f02 	tst.w	r2, #2
 8013252:	ec57 6b10 	vmov	r6, r7, d0
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	d021      	beq.n	801329e <_scanf_float+0x3d6>
 801325a:	9903      	ldr	r1, [sp, #12]
 801325c:	1d1a      	adds	r2, r3, #4
 801325e:	600a      	str	r2, [r1, #0]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	e9c3 6700 	strd	r6, r7, [r3]
 8013266:	68e3      	ldr	r3, [r4, #12]
 8013268:	3301      	adds	r3, #1
 801326a:	60e3      	str	r3, [r4, #12]
 801326c:	e66d      	b.n	8012f4a <_scanf_float+0x82>
 801326e:	9b04      	ldr	r3, [sp, #16]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d0e5      	beq.n	8013240 <_scanf_float+0x378>
 8013274:	9905      	ldr	r1, [sp, #20]
 8013276:	230a      	movs	r3, #10
 8013278:	462a      	mov	r2, r5
 801327a:	3101      	adds	r1, #1
 801327c:	4640      	mov	r0, r8
 801327e:	f000 ffe9 	bl	8014254 <_strtol_r>
 8013282:	9b04      	ldr	r3, [sp, #16]
 8013284:	9e05      	ldr	r6, [sp, #20]
 8013286:	1ac2      	subs	r2, r0, r3
 8013288:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801328c:	429e      	cmp	r6, r3
 801328e:	bf28      	it	cs
 8013290:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013294:	4912      	ldr	r1, [pc, #72]	; (80132e0 <_scanf_float+0x418>)
 8013296:	4630      	mov	r0, r6
 8013298:	f000 f83c 	bl	8013314 <siprintf>
 801329c:	e7d0      	b.n	8013240 <_scanf_float+0x378>
 801329e:	9903      	ldr	r1, [sp, #12]
 80132a0:	f012 0f04 	tst.w	r2, #4
 80132a4:	f103 0204 	add.w	r2, r3, #4
 80132a8:	600a      	str	r2, [r1, #0]
 80132aa:	d1d9      	bne.n	8013260 <_scanf_float+0x398>
 80132ac:	f8d3 8000 	ldr.w	r8, [r3]
 80132b0:	ee10 2a10 	vmov	r2, s0
 80132b4:	ee10 0a10 	vmov	r0, s0
 80132b8:	463b      	mov	r3, r7
 80132ba:	4639      	mov	r1, r7
 80132bc:	f7ed fc66 	bl	8000b8c <__aeabi_dcmpun>
 80132c0:	b128      	cbz	r0, 80132ce <_scanf_float+0x406>
 80132c2:	4808      	ldr	r0, [pc, #32]	; (80132e4 <_scanf_float+0x41c>)
 80132c4:	f000 f820 	bl	8013308 <nanf>
 80132c8:	ed88 0a00 	vstr	s0, [r8]
 80132cc:	e7cb      	b.n	8013266 <_scanf_float+0x39e>
 80132ce:	4630      	mov	r0, r6
 80132d0:	4639      	mov	r1, r7
 80132d2:	f7ed fcb9 	bl	8000c48 <__aeabi_d2f>
 80132d6:	f8c8 0000 	str.w	r0, [r8]
 80132da:	e7c4      	b.n	8013266 <_scanf_float+0x39e>
 80132dc:	2500      	movs	r5, #0
 80132de:	e634      	b.n	8012f4a <_scanf_float+0x82>
 80132e0:	08050526 	.word	0x08050526
 80132e4:	0805062f 	.word	0x0805062f

080132e8 <_sbrk_r>:
 80132e8:	b538      	push	{r3, r4, r5, lr}
 80132ea:	4d06      	ldr	r5, [pc, #24]	; (8013304 <_sbrk_r+0x1c>)
 80132ec:	2300      	movs	r3, #0
 80132ee:	4604      	mov	r4, r0
 80132f0:	4608      	mov	r0, r1
 80132f2:	602b      	str	r3, [r5, #0]
 80132f4:	f7f0 fe3a 	bl	8003f6c <_sbrk>
 80132f8:	1c43      	adds	r3, r0, #1
 80132fa:	d102      	bne.n	8013302 <_sbrk_r+0x1a>
 80132fc:	682b      	ldr	r3, [r5, #0]
 80132fe:	b103      	cbz	r3, 8013302 <_sbrk_r+0x1a>
 8013300:	6023      	str	r3, [r4, #0]
 8013302:	bd38      	pop	{r3, r4, r5, pc}
 8013304:	20009aac 	.word	0x20009aac

08013308 <nanf>:
 8013308:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013310 <nanf+0x8>
 801330c:	4770      	bx	lr
 801330e:	bf00      	nop
 8013310:	7fc00000 	.word	0x7fc00000

08013314 <siprintf>:
 8013314:	b40e      	push	{r1, r2, r3}
 8013316:	b500      	push	{lr}
 8013318:	b09c      	sub	sp, #112	; 0x70
 801331a:	ab1d      	add	r3, sp, #116	; 0x74
 801331c:	9002      	str	r0, [sp, #8]
 801331e:	9006      	str	r0, [sp, #24]
 8013320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013324:	4809      	ldr	r0, [pc, #36]	; (801334c <siprintf+0x38>)
 8013326:	9107      	str	r1, [sp, #28]
 8013328:	9104      	str	r1, [sp, #16]
 801332a:	4909      	ldr	r1, [pc, #36]	; (8013350 <siprintf+0x3c>)
 801332c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013330:	9105      	str	r1, [sp, #20]
 8013332:	6800      	ldr	r0, [r0, #0]
 8013334:	9301      	str	r3, [sp, #4]
 8013336:	a902      	add	r1, sp, #8
 8013338:	f002 ff60 	bl	80161fc <_svfiprintf_r>
 801333c:	9b02      	ldr	r3, [sp, #8]
 801333e:	2200      	movs	r2, #0
 8013340:	701a      	strb	r2, [r3, #0]
 8013342:	b01c      	add	sp, #112	; 0x70
 8013344:	f85d eb04 	ldr.w	lr, [sp], #4
 8013348:	b003      	add	sp, #12
 801334a:	4770      	bx	lr
 801334c:	200013a4 	.word	0x200013a4
 8013350:	ffff0208 	.word	0xffff0208

08013354 <siscanf>:
 8013354:	b40e      	push	{r1, r2, r3}
 8013356:	b510      	push	{r4, lr}
 8013358:	b09f      	sub	sp, #124	; 0x7c
 801335a:	ac21      	add	r4, sp, #132	; 0x84
 801335c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013360:	f854 2b04 	ldr.w	r2, [r4], #4
 8013364:	9201      	str	r2, [sp, #4]
 8013366:	f8ad 101c 	strh.w	r1, [sp, #28]
 801336a:	9004      	str	r0, [sp, #16]
 801336c:	9008      	str	r0, [sp, #32]
 801336e:	f7ec ff59 	bl	8000224 <strlen>
 8013372:	4b0c      	ldr	r3, [pc, #48]	; (80133a4 <siscanf+0x50>)
 8013374:	9005      	str	r0, [sp, #20]
 8013376:	9009      	str	r0, [sp, #36]	; 0x24
 8013378:	930d      	str	r3, [sp, #52]	; 0x34
 801337a:	480b      	ldr	r0, [pc, #44]	; (80133a8 <siscanf+0x54>)
 801337c:	9a01      	ldr	r2, [sp, #4]
 801337e:	6800      	ldr	r0, [r0, #0]
 8013380:	9403      	str	r4, [sp, #12]
 8013382:	2300      	movs	r3, #0
 8013384:	9311      	str	r3, [sp, #68]	; 0x44
 8013386:	9316      	str	r3, [sp, #88]	; 0x58
 8013388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801338c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013390:	a904      	add	r1, sp, #16
 8013392:	4623      	mov	r3, r4
 8013394:	f003 f88c 	bl	80164b0 <__ssvfiscanf_r>
 8013398:	b01f      	add	sp, #124	; 0x7c
 801339a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801339e:	b003      	add	sp, #12
 80133a0:	4770      	bx	lr
 80133a2:	bf00      	nop
 80133a4:	080133cf 	.word	0x080133cf
 80133a8:	200013a4 	.word	0x200013a4

080133ac <__sread>:
 80133ac:	b510      	push	{r4, lr}
 80133ae:	460c      	mov	r4, r1
 80133b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133b4:	f003 fca0 	bl	8016cf8 <_read_r>
 80133b8:	2800      	cmp	r0, #0
 80133ba:	bfab      	itete	ge
 80133bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80133be:	89a3      	ldrhlt	r3, [r4, #12]
 80133c0:	181b      	addge	r3, r3, r0
 80133c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133c6:	bfac      	ite	ge
 80133c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80133ca:	81a3      	strhlt	r3, [r4, #12]
 80133cc:	bd10      	pop	{r4, pc}

080133ce <__seofread>:
 80133ce:	2000      	movs	r0, #0
 80133d0:	4770      	bx	lr

080133d2 <__swrite>:
 80133d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133d6:	461f      	mov	r7, r3
 80133d8:	898b      	ldrh	r3, [r1, #12]
 80133da:	05db      	lsls	r3, r3, #23
 80133dc:	4605      	mov	r5, r0
 80133de:	460c      	mov	r4, r1
 80133e0:	4616      	mov	r6, r2
 80133e2:	d505      	bpl.n	80133f0 <__swrite+0x1e>
 80133e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133e8:	2302      	movs	r3, #2
 80133ea:	2200      	movs	r2, #0
 80133ec:	f002 f974 	bl	80156d8 <_lseek_r>
 80133f0:	89a3      	ldrh	r3, [r4, #12]
 80133f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80133fa:	81a3      	strh	r3, [r4, #12]
 80133fc:	4632      	mov	r2, r6
 80133fe:	463b      	mov	r3, r7
 8013400:	4628      	mov	r0, r5
 8013402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013406:	f000 bf27 	b.w	8014258 <_write_r>

0801340a <__sseek>:
 801340a:	b510      	push	{r4, lr}
 801340c:	460c      	mov	r4, r1
 801340e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013412:	f002 f961 	bl	80156d8 <_lseek_r>
 8013416:	1c43      	adds	r3, r0, #1
 8013418:	89a3      	ldrh	r3, [r4, #12]
 801341a:	bf15      	itete	ne
 801341c:	6560      	strne	r0, [r4, #84]	; 0x54
 801341e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013426:	81a3      	strheq	r3, [r4, #12]
 8013428:	bf18      	it	ne
 801342a:	81a3      	strhne	r3, [r4, #12]
 801342c:	bd10      	pop	{r4, pc}

0801342e <__sclose>:
 801342e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013432:	f000 bf41 	b.w	80142b8 <_close_r>

08013436 <strcpy>:
 8013436:	4603      	mov	r3, r0
 8013438:	f811 2b01 	ldrb.w	r2, [r1], #1
 801343c:	f803 2b01 	strb.w	r2, [r3], #1
 8013440:	2a00      	cmp	r2, #0
 8013442:	d1f9      	bne.n	8013438 <strcpy+0x2>
 8013444:	4770      	bx	lr

08013446 <sulp>:
 8013446:	b570      	push	{r4, r5, r6, lr}
 8013448:	4604      	mov	r4, r0
 801344a:	460d      	mov	r5, r1
 801344c:	ec45 4b10 	vmov	d0, r4, r5
 8013450:	4616      	mov	r6, r2
 8013452:	f002 fce3 	bl	8015e1c <__ulp>
 8013456:	ec51 0b10 	vmov	r0, r1, d0
 801345a:	b17e      	cbz	r6, 801347c <sulp+0x36>
 801345c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013460:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013464:	2b00      	cmp	r3, #0
 8013466:	dd09      	ble.n	801347c <sulp+0x36>
 8013468:	051b      	lsls	r3, r3, #20
 801346a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801346e:	2400      	movs	r4, #0
 8013470:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013474:	4622      	mov	r2, r4
 8013476:	462b      	mov	r3, r5
 8013478:	f7ed f8ee 	bl	8000658 <__aeabi_dmul>
 801347c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013480 <_strtod_l>:
 8013480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013484:	ed2d 8b02 	vpush	{d8}
 8013488:	b09d      	sub	sp, #116	; 0x74
 801348a:	461f      	mov	r7, r3
 801348c:	2300      	movs	r3, #0
 801348e:	9318      	str	r3, [sp, #96]	; 0x60
 8013490:	4ba2      	ldr	r3, [pc, #648]	; (801371c <_strtod_l+0x29c>)
 8013492:	9213      	str	r2, [sp, #76]	; 0x4c
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	9305      	str	r3, [sp, #20]
 8013498:	4604      	mov	r4, r0
 801349a:	4618      	mov	r0, r3
 801349c:	4688      	mov	r8, r1
 801349e:	f7ec fec1 	bl	8000224 <strlen>
 80134a2:	f04f 0a00 	mov.w	sl, #0
 80134a6:	4605      	mov	r5, r0
 80134a8:	f04f 0b00 	mov.w	fp, #0
 80134ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80134b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80134b2:	781a      	ldrb	r2, [r3, #0]
 80134b4:	2a2b      	cmp	r2, #43	; 0x2b
 80134b6:	d04e      	beq.n	8013556 <_strtod_l+0xd6>
 80134b8:	d83b      	bhi.n	8013532 <_strtod_l+0xb2>
 80134ba:	2a0d      	cmp	r2, #13
 80134bc:	d834      	bhi.n	8013528 <_strtod_l+0xa8>
 80134be:	2a08      	cmp	r2, #8
 80134c0:	d834      	bhi.n	801352c <_strtod_l+0xac>
 80134c2:	2a00      	cmp	r2, #0
 80134c4:	d03e      	beq.n	8013544 <_strtod_l+0xc4>
 80134c6:	2300      	movs	r3, #0
 80134c8:	930a      	str	r3, [sp, #40]	; 0x28
 80134ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80134cc:	7833      	ldrb	r3, [r6, #0]
 80134ce:	2b30      	cmp	r3, #48	; 0x30
 80134d0:	f040 80b0 	bne.w	8013634 <_strtod_l+0x1b4>
 80134d4:	7873      	ldrb	r3, [r6, #1]
 80134d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80134da:	2b58      	cmp	r3, #88	; 0x58
 80134dc:	d168      	bne.n	80135b0 <_strtod_l+0x130>
 80134de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134e0:	9301      	str	r3, [sp, #4]
 80134e2:	ab18      	add	r3, sp, #96	; 0x60
 80134e4:	9702      	str	r7, [sp, #8]
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	4a8d      	ldr	r2, [pc, #564]	; (8013720 <_strtod_l+0x2a0>)
 80134ea:	ab19      	add	r3, sp, #100	; 0x64
 80134ec:	a917      	add	r1, sp, #92	; 0x5c
 80134ee:	4620      	mov	r0, r4
 80134f0:	f001 fde6 	bl	80150c0 <__gethex>
 80134f4:	f010 0707 	ands.w	r7, r0, #7
 80134f8:	4605      	mov	r5, r0
 80134fa:	d005      	beq.n	8013508 <_strtod_l+0x88>
 80134fc:	2f06      	cmp	r7, #6
 80134fe:	d12c      	bne.n	801355a <_strtod_l+0xda>
 8013500:	3601      	adds	r6, #1
 8013502:	2300      	movs	r3, #0
 8013504:	9617      	str	r6, [sp, #92]	; 0x5c
 8013506:	930a      	str	r3, [sp, #40]	; 0x28
 8013508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801350a:	2b00      	cmp	r3, #0
 801350c:	f040 8590 	bne.w	8014030 <_strtod_l+0xbb0>
 8013510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013512:	b1eb      	cbz	r3, 8013550 <_strtod_l+0xd0>
 8013514:	4652      	mov	r2, sl
 8013516:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801351a:	ec43 2b10 	vmov	d0, r2, r3
 801351e:	b01d      	add	sp, #116	; 0x74
 8013520:	ecbd 8b02 	vpop	{d8}
 8013524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013528:	2a20      	cmp	r2, #32
 801352a:	d1cc      	bne.n	80134c6 <_strtod_l+0x46>
 801352c:	3301      	adds	r3, #1
 801352e:	9317      	str	r3, [sp, #92]	; 0x5c
 8013530:	e7be      	b.n	80134b0 <_strtod_l+0x30>
 8013532:	2a2d      	cmp	r2, #45	; 0x2d
 8013534:	d1c7      	bne.n	80134c6 <_strtod_l+0x46>
 8013536:	2201      	movs	r2, #1
 8013538:	920a      	str	r2, [sp, #40]	; 0x28
 801353a:	1c5a      	adds	r2, r3, #1
 801353c:	9217      	str	r2, [sp, #92]	; 0x5c
 801353e:	785b      	ldrb	r3, [r3, #1]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d1c2      	bne.n	80134ca <_strtod_l+0x4a>
 8013544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013546:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801354a:	2b00      	cmp	r3, #0
 801354c:	f040 856e 	bne.w	801402c <_strtod_l+0xbac>
 8013550:	4652      	mov	r2, sl
 8013552:	465b      	mov	r3, fp
 8013554:	e7e1      	b.n	801351a <_strtod_l+0x9a>
 8013556:	2200      	movs	r2, #0
 8013558:	e7ee      	b.n	8013538 <_strtod_l+0xb8>
 801355a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801355c:	b13a      	cbz	r2, 801356e <_strtod_l+0xee>
 801355e:	2135      	movs	r1, #53	; 0x35
 8013560:	a81a      	add	r0, sp, #104	; 0x68
 8013562:	f002 fd66 	bl	8016032 <__copybits>
 8013566:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013568:	4620      	mov	r0, r4
 801356a:	f002 f925 	bl	80157b8 <_Bfree>
 801356e:	3f01      	subs	r7, #1
 8013570:	2f04      	cmp	r7, #4
 8013572:	d806      	bhi.n	8013582 <_strtod_l+0x102>
 8013574:	e8df f007 	tbb	[pc, r7]
 8013578:	1714030a 	.word	0x1714030a
 801357c:	0a          	.byte	0x0a
 801357d:	00          	.byte	0x00
 801357e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8013582:	0728      	lsls	r0, r5, #28
 8013584:	d5c0      	bpl.n	8013508 <_strtod_l+0x88>
 8013586:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801358a:	e7bd      	b.n	8013508 <_strtod_l+0x88>
 801358c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013590:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013592:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013596:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801359a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801359e:	e7f0      	b.n	8013582 <_strtod_l+0x102>
 80135a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8013724 <_strtod_l+0x2a4>
 80135a4:	e7ed      	b.n	8013582 <_strtod_l+0x102>
 80135a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80135aa:	f04f 3aff 	mov.w	sl, #4294967295
 80135ae:	e7e8      	b.n	8013582 <_strtod_l+0x102>
 80135b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80135b2:	1c5a      	adds	r2, r3, #1
 80135b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80135b6:	785b      	ldrb	r3, [r3, #1]
 80135b8:	2b30      	cmp	r3, #48	; 0x30
 80135ba:	d0f9      	beq.n	80135b0 <_strtod_l+0x130>
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d0a3      	beq.n	8013508 <_strtod_l+0x88>
 80135c0:	2301      	movs	r3, #1
 80135c2:	f04f 0900 	mov.w	r9, #0
 80135c6:	9304      	str	r3, [sp, #16]
 80135c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80135ca:	9308      	str	r3, [sp, #32]
 80135cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80135d0:	464f      	mov	r7, r9
 80135d2:	220a      	movs	r2, #10
 80135d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80135d6:	7806      	ldrb	r6, [r0, #0]
 80135d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80135dc:	b2d9      	uxtb	r1, r3
 80135de:	2909      	cmp	r1, #9
 80135e0:	d92a      	bls.n	8013638 <_strtod_l+0x1b8>
 80135e2:	9905      	ldr	r1, [sp, #20]
 80135e4:	462a      	mov	r2, r5
 80135e6:	f003 fbdb 	bl	8016da0 <strncmp>
 80135ea:	b398      	cbz	r0, 8013654 <_strtod_l+0x1d4>
 80135ec:	2000      	movs	r0, #0
 80135ee:	4632      	mov	r2, r6
 80135f0:	463d      	mov	r5, r7
 80135f2:	9005      	str	r0, [sp, #20]
 80135f4:	4603      	mov	r3, r0
 80135f6:	2a65      	cmp	r2, #101	; 0x65
 80135f8:	d001      	beq.n	80135fe <_strtod_l+0x17e>
 80135fa:	2a45      	cmp	r2, #69	; 0x45
 80135fc:	d118      	bne.n	8013630 <_strtod_l+0x1b0>
 80135fe:	b91d      	cbnz	r5, 8013608 <_strtod_l+0x188>
 8013600:	9a04      	ldr	r2, [sp, #16]
 8013602:	4302      	orrs	r2, r0
 8013604:	d09e      	beq.n	8013544 <_strtod_l+0xc4>
 8013606:	2500      	movs	r5, #0
 8013608:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801360c:	f108 0201 	add.w	r2, r8, #1
 8013610:	9217      	str	r2, [sp, #92]	; 0x5c
 8013612:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013616:	2a2b      	cmp	r2, #43	; 0x2b
 8013618:	d075      	beq.n	8013706 <_strtod_l+0x286>
 801361a:	2a2d      	cmp	r2, #45	; 0x2d
 801361c:	d07b      	beq.n	8013716 <_strtod_l+0x296>
 801361e:	f04f 0c00 	mov.w	ip, #0
 8013622:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013626:	2909      	cmp	r1, #9
 8013628:	f240 8082 	bls.w	8013730 <_strtod_l+0x2b0>
 801362c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013630:	2600      	movs	r6, #0
 8013632:	e09d      	b.n	8013770 <_strtod_l+0x2f0>
 8013634:	2300      	movs	r3, #0
 8013636:	e7c4      	b.n	80135c2 <_strtod_l+0x142>
 8013638:	2f08      	cmp	r7, #8
 801363a:	bfd8      	it	le
 801363c:	9907      	ldrle	r1, [sp, #28]
 801363e:	f100 0001 	add.w	r0, r0, #1
 8013642:	bfda      	itte	le
 8013644:	fb02 3301 	mlale	r3, r2, r1, r3
 8013648:	9307      	strle	r3, [sp, #28]
 801364a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801364e:	3701      	adds	r7, #1
 8013650:	9017      	str	r0, [sp, #92]	; 0x5c
 8013652:	e7bf      	b.n	80135d4 <_strtod_l+0x154>
 8013654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013656:	195a      	adds	r2, r3, r5
 8013658:	9217      	str	r2, [sp, #92]	; 0x5c
 801365a:	5d5a      	ldrb	r2, [r3, r5]
 801365c:	2f00      	cmp	r7, #0
 801365e:	d037      	beq.n	80136d0 <_strtod_l+0x250>
 8013660:	9005      	str	r0, [sp, #20]
 8013662:	463d      	mov	r5, r7
 8013664:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013668:	2b09      	cmp	r3, #9
 801366a:	d912      	bls.n	8013692 <_strtod_l+0x212>
 801366c:	2301      	movs	r3, #1
 801366e:	e7c2      	b.n	80135f6 <_strtod_l+0x176>
 8013670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013672:	1c5a      	adds	r2, r3, #1
 8013674:	9217      	str	r2, [sp, #92]	; 0x5c
 8013676:	785a      	ldrb	r2, [r3, #1]
 8013678:	3001      	adds	r0, #1
 801367a:	2a30      	cmp	r2, #48	; 0x30
 801367c:	d0f8      	beq.n	8013670 <_strtod_l+0x1f0>
 801367e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013682:	2b08      	cmp	r3, #8
 8013684:	f200 84d9 	bhi.w	801403a <_strtod_l+0xbba>
 8013688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801368a:	9005      	str	r0, [sp, #20]
 801368c:	2000      	movs	r0, #0
 801368e:	9308      	str	r3, [sp, #32]
 8013690:	4605      	mov	r5, r0
 8013692:	3a30      	subs	r2, #48	; 0x30
 8013694:	f100 0301 	add.w	r3, r0, #1
 8013698:	d014      	beq.n	80136c4 <_strtod_l+0x244>
 801369a:	9905      	ldr	r1, [sp, #20]
 801369c:	4419      	add	r1, r3
 801369e:	9105      	str	r1, [sp, #20]
 80136a0:	462b      	mov	r3, r5
 80136a2:	eb00 0e05 	add.w	lr, r0, r5
 80136a6:	210a      	movs	r1, #10
 80136a8:	4573      	cmp	r3, lr
 80136aa:	d113      	bne.n	80136d4 <_strtod_l+0x254>
 80136ac:	182b      	adds	r3, r5, r0
 80136ae:	2b08      	cmp	r3, #8
 80136b0:	f105 0501 	add.w	r5, r5, #1
 80136b4:	4405      	add	r5, r0
 80136b6:	dc1c      	bgt.n	80136f2 <_strtod_l+0x272>
 80136b8:	9907      	ldr	r1, [sp, #28]
 80136ba:	230a      	movs	r3, #10
 80136bc:	fb03 2301 	mla	r3, r3, r1, r2
 80136c0:	9307      	str	r3, [sp, #28]
 80136c2:	2300      	movs	r3, #0
 80136c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80136c6:	1c51      	adds	r1, r2, #1
 80136c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80136ca:	7852      	ldrb	r2, [r2, #1]
 80136cc:	4618      	mov	r0, r3
 80136ce:	e7c9      	b.n	8013664 <_strtod_l+0x1e4>
 80136d0:	4638      	mov	r0, r7
 80136d2:	e7d2      	b.n	801367a <_strtod_l+0x1fa>
 80136d4:	2b08      	cmp	r3, #8
 80136d6:	dc04      	bgt.n	80136e2 <_strtod_l+0x262>
 80136d8:	9e07      	ldr	r6, [sp, #28]
 80136da:	434e      	muls	r6, r1
 80136dc:	9607      	str	r6, [sp, #28]
 80136de:	3301      	adds	r3, #1
 80136e0:	e7e2      	b.n	80136a8 <_strtod_l+0x228>
 80136e2:	f103 0c01 	add.w	ip, r3, #1
 80136e6:	f1bc 0f10 	cmp.w	ip, #16
 80136ea:	bfd8      	it	le
 80136ec:	fb01 f909 	mulle.w	r9, r1, r9
 80136f0:	e7f5      	b.n	80136de <_strtod_l+0x25e>
 80136f2:	2d10      	cmp	r5, #16
 80136f4:	bfdc      	itt	le
 80136f6:	230a      	movle	r3, #10
 80136f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80136fc:	e7e1      	b.n	80136c2 <_strtod_l+0x242>
 80136fe:	2300      	movs	r3, #0
 8013700:	9305      	str	r3, [sp, #20]
 8013702:	2301      	movs	r3, #1
 8013704:	e77c      	b.n	8013600 <_strtod_l+0x180>
 8013706:	f04f 0c00 	mov.w	ip, #0
 801370a:	f108 0202 	add.w	r2, r8, #2
 801370e:	9217      	str	r2, [sp, #92]	; 0x5c
 8013710:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013714:	e785      	b.n	8013622 <_strtod_l+0x1a2>
 8013716:	f04f 0c01 	mov.w	ip, #1
 801371a:	e7f6      	b.n	801370a <_strtod_l+0x28a>
 801371c:	08050810 	.word	0x08050810
 8013720:	0805052c 	.word	0x0805052c
 8013724:	7ff00000 	.word	0x7ff00000
 8013728:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801372a:	1c51      	adds	r1, r2, #1
 801372c:	9117      	str	r1, [sp, #92]	; 0x5c
 801372e:	7852      	ldrb	r2, [r2, #1]
 8013730:	2a30      	cmp	r2, #48	; 0x30
 8013732:	d0f9      	beq.n	8013728 <_strtod_l+0x2a8>
 8013734:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013738:	2908      	cmp	r1, #8
 801373a:	f63f af79 	bhi.w	8013630 <_strtod_l+0x1b0>
 801373e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013742:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013744:	9206      	str	r2, [sp, #24]
 8013746:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013748:	1c51      	adds	r1, r2, #1
 801374a:	9117      	str	r1, [sp, #92]	; 0x5c
 801374c:	7852      	ldrb	r2, [r2, #1]
 801374e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013752:	2e09      	cmp	r6, #9
 8013754:	d937      	bls.n	80137c6 <_strtod_l+0x346>
 8013756:	9e06      	ldr	r6, [sp, #24]
 8013758:	1b89      	subs	r1, r1, r6
 801375a:	2908      	cmp	r1, #8
 801375c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013760:	dc02      	bgt.n	8013768 <_strtod_l+0x2e8>
 8013762:	4576      	cmp	r6, lr
 8013764:	bfa8      	it	ge
 8013766:	4676      	movge	r6, lr
 8013768:	f1bc 0f00 	cmp.w	ip, #0
 801376c:	d000      	beq.n	8013770 <_strtod_l+0x2f0>
 801376e:	4276      	negs	r6, r6
 8013770:	2d00      	cmp	r5, #0
 8013772:	d14d      	bne.n	8013810 <_strtod_l+0x390>
 8013774:	9904      	ldr	r1, [sp, #16]
 8013776:	4301      	orrs	r1, r0
 8013778:	f47f aec6 	bne.w	8013508 <_strtod_l+0x88>
 801377c:	2b00      	cmp	r3, #0
 801377e:	f47f aee1 	bne.w	8013544 <_strtod_l+0xc4>
 8013782:	2a69      	cmp	r2, #105	; 0x69
 8013784:	d027      	beq.n	80137d6 <_strtod_l+0x356>
 8013786:	dc24      	bgt.n	80137d2 <_strtod_l+0x352>
 8013788:	2a49      	cmp	r2, #73	; 0x49
 801378a:	d024      	beq.n	80137d6 <_strtod_l+0x356>
 801378c:	2a4e      	cmp	r2, #78	; 0x4e
 801378e:	f47f aed9 	bne.w	8013544 <_strtod_l+0xc4>
 8013792:	499f      	ldr	r1, [pc, #636]	; (8013a10 <_strtod_l+0x590>)
 8013794:	a817      	add	r0, sp, #92	; 0x5c
 8013796:	f001 feeb 	bl	8015570 <__match>
 801379a:	2800      	cmp	r0, #0
 801379c:	f43f aed2 	beq.w	8013544 <_strtod_l+0xc4>
 80137a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137a2:	781b      	ldrb	r3, [r3, #0]
 80137a4:	2b28      	cmp	r3, #40	; 0x28
 80137a6:	d12d      	bne.n	8013804 <_strtod_l+0x384>
 80137a8:	499a      	ldr	r1, [pc, #616]	; (8013a14 <_strtod_l+0x594>)
 80137aa:	aa1a      	add	r2, sp, #104	; 0x68
 80137ac:	a817      	add	r0, sp, #92	; 0x5c
 80137ae:	f001 fef3 	bl	8015598 <__hexnan>
 80137b2:	2805      	cmp	r0, #5
 80137b4:	d126      	bne.n	8013804 <_strtod_l+0x384>
 80137b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80137b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80137bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80137c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80137c4:	e6a0      	b.n	8013508 <_strtod_l+0x88>
 80137c6:	210a      	movs	r1, #10
 80137c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80137cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80137d0:	e7b9      	b.n	8013746 <_strtod_l+0x2c6>
 80137d2:	2a6e      	cmp	r2, #110	; 0x6e
 80137d4:	e7db      	b.n	801378e <_strtod_l+0x30e>
 80137d6:	4990      	ldr	r1, [pc, #576]	; (8013a18 <_strtod_l+0x598>)
 80137d8:	a817      	add	r0, sp, #92	; 0x5c
 80137da:	f001 fec9 	bl	8015570 <__match>
 80137de:	2800      	cmp	r0, #0
 80137e0:	f43f aeb0 	beq.w	8013544 <_strtod_l+0xc4>
 80137e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137e6:	498d      	ldr	r1, [pc, #564]	; (8013a1c <_strtod_l+0x59c>)
 80137e8:	3b01      	subs	r3, #1
 80137ea:	a817      	add	r0, sp, #92	; 0x5c
 80137ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80137ee:	f001 febf 	bl	8015570 <__match>
 80137f2:	b910      	cbnz	r0, 80137fa <_strtod_l+0x37a>
 80137f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137f6:	3301      	adds	r3, #1
 80137f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80137fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8013a2c <_strtod_l+0x5ac>
 80137fe:	f04f 0a00 	mov.w	sl, #0
 8013802:	e681      	b.n	8013508 <_strtod_l+0x88>
 8013804:	4886      	ldr	r0, [pc, #536]	; (8013a20 <_strtod_l+0x5a0>)
 8013806:	f003 fa8b 	bl	8016d20 <nan>
 801380a:	ec5b ab10 	vmov	sl, fp, d0
 801380e:	e67b      	b.n	8013508 <_strtod_l+0x88>
 8013810:	9b05      	ldr	r3, [sp, #20]
 8013812:	9807      	ldr	r0, [sp, #28]
 8013814:	1af3      	subs	r3, r6, r3
 8013816:	2f00      	cmp	r7, #0
 8013818:	bf08      	it	eq
 801381a:	462f      	moveq	r7, r5
 801381c:	2d10      	cmp	r5, #16
 801381e:	9306      	str	r3, [sp, #24]
 8013820:	46a8      	mov	r8, r5
 8013822:	bfa8      	it	ge
 8013824:	f04f 0810 	movge.w	r8, #16
 8013828:	f7ec fe9c 	bl	8000564 <__aeabi_ui2d>
 801382c:	2d09      	cmp	r5, #9
 801382e:	4682      	mov	sl, r0
 8013830:	468b      	mov	fp, r1
 8013832:	dd13      	ble.n	801385c <_strtod_l+0x3dc>
 8013834:	4b7b      	ldr	r3, [pc, #492]	; (8013a24 <_strtod_l+0x5a4>)
 8013836:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801383a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801383e:	f7ec ff0b 	bl	8000658 <__aeabi_dmul>
 8013842:	4682      	mov	sl, r0
 8013844:	4648      	mov	r0, r9
 8013846:	468b      	mov	fp, r1
 8013848:	f7ec fe8c 	bl	8000564 <__aeabi_ui2d>
 801384c:	4602      	mov	r2, r0
 801384e:	460b      	mov	r3, r1
 8013850:	4650      	mov	r0, sl
 8013852:	4659      	mov	r1, fp
 8013854:	f7ec fd4a 	bl	80002ec <__adddf3>
 8013858:	4682      	mov	sl, r0
 801385a:	468b      	mov	fp, r1
 801385c:	2d0f      	cmp	r5, #15
 801385e:	dc38      	bgt.n	80138d2 <_strtod_l+0x452>
 8013860:	9b06      	ldr	r3, [sp, #24]
 8013862:	2b00      	cmp	r3, #0
 8013864:	f43f ae50 	beq.w	8013508 <_strtod_l+0x88>
 8013868:	dd24      	ble.n	80138b4 <_strtod_l+0x434>
 801386a:	2b16      	cmp	r3, #22
 801386c:	dc0b      	bgt.n	8013886 <_strtod_l+0x406>
 801386e:	496d      	ldr	r1, [pc, #436]	; (8013a24 <_strtod_l+0x5a4>)
 8013870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013878:	4652      	mov	r2, sl
 801387a:	465b      	mov	r3, fp
 801387c:	f7ec feec 	bl	8000658 <__aeabi_dmul>
 8013880:	4682      	mov	sl, r0
 8013882:	468b      	mov	fp, r1
 8013884:	e640      	b.n	8013508 <_strtod_l+0x88>
 8013886:	9a06      	ldr	r2, [sp, #24]
 8013888:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801388c:	4293      	cmp	r3, r2
 801388e:	db20      	blt.n	80138d2 <_strtod_l+0x452>
 8013890:	4c64      	ldr	r4, [pc, #400]	; (8013a24 <_strtod_l+0x5a4>)
 8013892:	f1c5 050f 	rsb	r5, r5, #15
 8013896:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801389a:	4652      	mov	r2, sl
 801389c:	465b      	mov	r3, fp
 801389e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138a2:	f7ec fed9 	bl	8000658 <__aeabi_dmul>
 80138a6:	9b06      	ldr	r3, [sp, #24]
 80138a8:	1b5d      	subs	r5, r3, r5
 80138aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80138ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80138b2:	e7e3      	b.n	801387c <_strtod_l+0x3fc>
 80138b4:	9b06      	ldr	r3, [sp, #24]
 80138b6:	3316      	adds	r3, #22
 80138b8:	db0b      	blt.n	80138d2 <_strtod_l+0x452>
 80138ba:	9b05      	ldr	r3, [sp, #20]
 80138bc:	1b9e      	subs	r6, r3, r6
 80138be:	4b59      	ldr	r3, [pc, #356]	; (8013a24 <_strtod_l+0x5a4>)
 80138c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80138c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80138c8:	4650      	mov	r0, sl
 80138ca:	4659      	mov	r1, fp
 80138cc:	f7ec ffee 	bl	80008ac <__aeabi_ddiv>
 80138d0:	e7d6      	b.n	8013880 <_strtod_l+0x400>
 80138d2:	9b06      	ldr	r3, [sp, #24]
 80138d4:	eba5 0808 	sub.w	r8, r5, r8
 80138d8:	4498      	add	r8, r3
 80138da:	f1b8 0f00 	cmp.w	r8, #0
 80138de:	dd74      	ble.n	80139ca <_strtod_l+0x54a>
 80138e0:	f018 030f 	ands.w	r3, r8, #15
 80138e4:	d00a      	beq.n	80138fc <_strtod_l+0x47c>
 80138e6:	494f      	ldr	r1, [pc, #316]	; (8013a24 <_strtod_l+0x5a4>)
 80138e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80138ec:	4652      	mov	r2, sl
 80138ee:	465b      	mov	r3, fp
 80138f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138f4:	f7ec feb0 	bl	8000658 <__aeabi_dmul>
 80138f8:	4682      	mov	sl, r0
 80138fa:	468b      	mov	fp, r1
 80138fc:	f038 080f 	bics.w	r8, r8, #15
 8013900:	d04f      	beq.n	80139a2 <_strtod_l+0x522>
 8013902:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013906:	dd22      	ble.n	801394e <_strtod_l+0x4ce>
 8013908:	2500      	movs	r5, #0
 801390a:	462e      	mov	r6, r5
 801390c:	9507      	str	r5, [sp, #28]
 801390e:	9505      	str	r5, [sp, #20]
 8013910:	2322      	movs	r3, #34	; 0x22
 8013912:	f8df b118 	ldr.w	fp, [pc, #280]	; 8013a2c <_strtod_l+0x5ac>
 8013916:	6023      	str	r3, [r4, #0]
 8013918:	f04f 0a00 	mov.w	sl, #0
 801391c:	9b07      	ldr	r3, [sp, #28]
 801391e:	2b00      	cmp	r3, #0
 8013920:	f43f adf2 	beq.w	8013508 <_strtod_l+0x88>
 8013924:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013926:	4620      	mov	r0, r4
 8013928:	f001 ff46 	bl	80157b8 <_Bfree>
 801392c:	9905      	ldr	r1, [sp, #20]
 801392e:	4620      	mov	r0, r4
 8013930:	f001 ff42 	bl	80157b8 <_Bfree>
 8013934:	4631      	mov	r1, r6
 8013936:	4620      	mov	r0, r4
 8013938:	f001 ff3e 	bl	80157b8 <_Bfree>
 801393c:	9907      	ldr	r1, [sp, #28]
 801393e:	4620      	mov	r0, r4
 8013940:	f001 ff3a 	bl	80157b8 <_Bfree>
 8013944:	4629      	mov	r1, r5
 8013946:	4620      	mov	r0, r4
 8013948:	f001 ff36 	bl	80157b8 <_Bfree>
 801394c:	e5dc      	b.n	8013508 <_strtod_l+0x88>
 801394e:	4b36      	ldr	r3, [pc, #216]	; (8013a28 <_strtod_l+0x5a8>)
 8013950:	9304      	str	r3, [sp, #16]
 8013952:	2300      	movs	r3, #0
 8013954:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013958:	4650      	mov	r0, sl
 801395a:	4659      	mov	r1, fp
 801395c:	4699      	mov	r9, r3
 801395e:	f1b8 0f01 	cmp.w	r8, #1
 8013962:	dc21      	bgt.n	80139a8 <_strtod_l+0x528>
 8013964:	b10b      	cbz	r3, 801396a <_strtod_l+0x4ea>
 8013966:	4682      	mov	sl, r0
 8013968:	468b      	mov	fp, r1
 801396a:	4b2f      	ldr	r3, [pc, #188]	; (8013a28 <_strtod_l+0x5a8>)
 801396c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013970:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013974:	4652      	mov	r2, sl
 8013976:	465b      	mov	r3, fp
 8013978:	e9d9 0100 	ldrd	r0, r1, [r9]
 801397c:	f7ec fe6c 	bl	8000658 <__aeabi_dmul>
 8013980:	4b2a      	ldr	r3, [pc, #168]	; (8013a2c <_strtod_l+0x5ac>)
 8013982:	460a      	mov	r2, r1
 8013984:	400b      	ands	r3, r1
 8013986:	492a      	ldr	r1, [pc, #168]	; (8013a30 <_strtod_l+0x5b0>)
 8013988:	428b      	cmp	r3, r1
 801398a:	4682      	mov	sl, r0
 801398c:	d8bc      	bhi.n	8013908 <_strtod_l+0x488>
 801398e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013992:	428b      	cmp	r3, r1
 8013994:	bf86      	itte	hi
 8013996:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013a34 <_strtod_l+0x5b4>
 801399a:	f04f 3aff 	movhi.w	sl, #4294967295
 801399e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80139a2:	2300      	movs	r3, #0
 80139a4:	9304      	str	r3, [sp, #16]
 80139a6:	e084      	b.n	8013ab2 <_strtod_l+0x632>
 80139a8:	f018 0f01 	tst.w	r8, #1
 80139ac:	d005      	beq.n	80139ba <_strtod_l+0x53a>
 80139ae:	9b04      	ldr	r3, [sp, #16]
 80139b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b4:	f7ec fe50 	bl	8000658 <__aeabi_dmul>
 80139b8:	2301      	movs	r3, #1
 80139ba:	9a04      	ldr	r2, [sp, #16]
 80139bc:	3208      	adds	r2, #8
 80139be:	f109 0901 	add.w	r9, r9, #1
 80139c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80139c6:	9204      	str	r2, [sp, #16]
 80139c8:	e7c9      	b.n	801395e <_strtod_l+0x4de>
 80139ca:	d0ea      	beq.n	80139a2 <_strtod_l+0x522>
 80139cc:	f1c8 0800 	rsb	r8, r8, #0
 80139d0:	f018 020f 	ands.w	r2, r8, #15
 80139d4:	d00a      	beq.n	80139ec <_strtod_l+0x56c>
 80139d6:	4b13      	ldr	r3, [pc, #76]	; (8013a24 <_strtod_l+0x5a4>)
 80139d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139dc:	4650      	mov	r0, sl
 80139de:	4659      	mov	r1, fp
 80139e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e4:	f7ec ff62 	bl	80008ac <__aeabi_ddiv>
 80139e8:	4682      	mov	sl, r0
 80139ea:	468b      	mov	fp, r1
 80139ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80139f0:	d0d7      	beq.n	80139a2 <_strtod_l+0x522>
 80139f2:	f1b8 0f1f 	cmp.w	r8, #31
 80139f6:	dd1f      	ble.n	8013a38 <_strtod_l+0x5b8>
 80139f8:	2500      	movs	r5, #0
 80139fa:	462e      	mov	r6, r5
 80139fc:	9507      	str	r5, [sp, #28]
 80139fe:	9505      	str	r5, [sp, #20]
 8013a00:	2322      	movs	r3, #34	; 0x22
 8013a02:	f04f 0a00 	mov.w	sl, #0
 8013a06:	f04f 0b00 	mov.w	fp, #0
 8013a0a:	6023      	str	r3, [r4, #0]
 8013a0c:	e786      	b.n	801391c <_strtod_l+0x49c>
 8013a0e:	bf00      	nop
 8013a10:	08050501 	.word	0x08050501
 8013a14:	08050540 	.word	0x08050540
 8013a18:	080504f9 	.word	0x080504f9
 8013a1c:	08050734 	.word	0x08050734
 8013a20:	0805062f 	.word	0x0805062f
 8013a24:	080508a8 	.word	0x080508a8
 8013a28:	08050880 	.word	0x08050880
 8013a2c:	7ff00000 	.word	0x7ff00000
 8013a30:	7ca00000 	.word	0x7ca00000
 8013a34:	7fefffff 	.word	0x7fefffff
 8013a38:	f018 0310 	ands.w	r3, r8, #16
 8013a3c:	bf18      	it	ne
 8013a3e:	236a      	movne	r3, #106	; 0x6a
 8013a40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8013df0 <_strtod_l+0x970>
 8013a44:	9304      	str	r3, [sp, #16]
 8013a46:	4650      	mov	r0, sl
 8013a48:	4659      	mov	r1, fp
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	f018 0f01 	tst.w	r8, #1
 8013a50:	d004      	beq.n	8013a5c <_strtod_l+0x5dc>
 8013a52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013a56:	f7ec fdff 	bl	8000658 <__aeabi_dmul>
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013a60:	f109 0908 	add.w	r9, r9, #8
 8013a64:	d1f2      	bne.n	8013a4c <_strtod_l+0x5cc>
 8013a66:	b10b      	cbz	r3, 8013a6c <_strtod_l+0x5ec>
 8013a68:	4682      	mov	sl, r0
 8013a6a:	468b      	mov	fp, r1
 8013a6c:	9b04      	ldr	r3, [sp, #16]
 8013a6e:	b1c3      	cbz	r3, 8013aa2 <_strtod_l+0x622>
 8013a70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013a74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	4659      	mov	r1, fp
 8013a7c:	dd11      	ble.n	8013aa2 <_strtod_l+0x622>
 8013a7e:	2b1f      	cmp	r3, #31
 8013a80:	f340 8124 	ble.w	8013ccc <_strtod_l+0x84c>
 8013a84:	2b34      	cmp	r3, #52	; 0x34
 8013a86:	bfde      	ittt	le
 8013a88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013a8c:	f04f 33ff 	movle.w	r3, #4294967295
 8013a90:	fa03 f202 	lslle.w	r2, r3, r2
 8013a94:	f04f 0a00 	mov.w	sl, #0
 8013a98:	bfcc      	ite	gt
 8013a9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013a9e:	ea02 0b01 	andle.w	fp, r2, r1
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	4650      	mov	r0, sl
 8013aa8:	4659      	mov	r1, fp
 8013aaa:	f7ed f83d 	bl	8000b28 <__aeabi_dcmpeq>
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d1a2      	bne.n	80139f8 <_strtod_l+0x578>
 8013ab2:	9b07      	ldr	r3, [sp, #28]
 8013ab4:	9300      	str	r3, [sp, #0]
 8013ab6:	9908      	ldr	r1, [sp, #32]
 8013ab8:	462b      	mov	r3, r5
 8013aba:	463a      	mov	r2, r7
 8013abc:	4620      	mov	r0, r4
 8013abe:	f001 fee3 	bl	8015888 <__s2b>
 8013ac2:	9007      	str	r0, [sp, #28]
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	f43f af1f 	beq.w	8013908 <_strtod_l+0x488>
 8013aca:	9b05      	ldr	r3, [sp, #20]
 8013acc:	1b9e      	subs	r6, r3, r6
 8013ace:	9b06      	ldr	r3, [sp, #24]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	bfb4      	ite	lt
 8013ad4:	4633      	movlt	r3, r6
 8013ad6:	2300      	movge	r3, #0
 8013ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8013ada:	9b06      	ldr	r3, [sp, #24]
 8013adc:	2500      	movs	r5, #0
 8013ade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ae2:	9312      	str	r3, [sp, #72]	; 0x48
 8013ae4:	462e      	mov	r6, r5
 8013ae6:	9b07      	ldr	r3, [sp, #28]
 8013ae8:	4620      	mov	r0, r4
 8013aea:	6859      	ldr	r1, [r3, #4]
 8013aec:	f001 fe24 	bl	8015738 <_Balloc>
 8013af0:	9005      	str	r0, [sp, #20]
 8013af2:	2800      	cmp	r0, #0
 8013af4:	f43f af0c 	beq.w	8013910 <_strtod_l+0x490>
 8013af8:	9b07      	ldr	r3, [sp, #28]
 8013afa:	691a      	ldr	r2, [r3, #16]
 8013afc:	3202      	adds	r2, #2
 8013afe:	f103 010c 	add.w	r1, r3, #12
 8013b02:	0092      	lsls	r2, r2, #2
 8013b04:	300c      	adds	r0, #12
 8013b06:	f7fe fc7f 	bl	8012408 <memcpy>
 8013b0a:	ec4b ab10 	vmov	d0, sl, fp
 8013b0e:	aa1a      	add	r2, sp, #104	; 0x68
 8013b10:	a919      	add	r1, sp, #100	; 0x64
 8013b12:	4620      	mov	r0, r4
 8013b14:	f002 f9fe 	bl	8015f14 <__d2b>
 8013b18:	ec4b ab18 	vmov	d8, sl, fp
 8013b1c:	9018      	str	r0, [sp, #96]	; 0x60
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	f43f aef6 	beq.w	8013910 <_strtod_l+0x490>
 8013b24:	2101      	movs	r1, #1
 8013b26:	4620      	mov	r0, r4
 8013b28:	f001 ff48 	bl	80159bc <__i2b>
 8013b2c:	4606      	mov	r6, r0
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	f43f aeee 	beq.w	8013910 <_strtod_l+0x490>
 8013b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013b36:	9904      	ldr	r1, [sp, #16]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	bfab      	itete	ge
 8013b3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8013b3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013b40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013b42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013b46:	bfac      	ite	ge
 8013b48:	eb03 0902 	addge.w	r9, r3, r2
 8013b4c:	1ad7      	sublt	r7, r2, r3
 8013b4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013b50:	eba3 0801 	sub.w	r8, r3, r1
 8013b54:	4490      	add	r8, r2
 8013b56:	4ba1      	ldr	r3, [pc, #644]	; (8013ddc <_strtod_l+0x95c>)
 8013b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8013b5c:	4598      	cmp	r8, r3
 8013b5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013b62:	f280 80c7 	bge.w	8013cf4 <_strtod_l+0x874>
 8013b66:	eba3 0308 	sub.w	r3, r3, r8
 8013b6a:	2b1f      	cmp	r3, #31
 8013b6c:	eba2 0203 	sub.w	r2, r2, r3
 8013b70:	f04f 0101 	mov.w	r1, #1
 8013b74:	f300 80b1 	bgt.w	8013cda <_strtod_l+0x85a>
 8013b78:	fa01 f303 	lsl.w	r3, r1, r3
 8013b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8013b7e:	2300      	movs	r3, #0
 8013b80:	9308      	str	r3, [sp, #32]
 8013b82:	eb09 0802 	add.w	r8, r9, r2
 8013b86:	9b04      	ldr	r3, [sp, #16]
 8013b88:	45c1      	cmp	r9, r8
 8013b8a:	4417      	add	r7, r2
 8013b8c:	441f      	add	r7, r3
 8013b8e:	464b      	mov	r3, r9
 8013b90:	bfa8      	it	ge
 8013b92:	4643      	movge	r3, r8
 8013b94:	42bb      	cmp	r3, r7
 8013b96:	bfa8      	it	ge
 8013b98:	463b      	movge	r3, r7
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	bfc2      	ittt	gt
 8013b9e:	eba8 0803 	subgt.w	r8, r8, r3
 8013ba2:	1aff      	subgt	r7, r7, r3
 8013ba4:	eba9 0903 	subgt.w	r9, r9, r3
 8013ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	dd17      	ble.n	8013bde <_strtod_l+0x75e>
 8013bae:	4631      	mov	r1, r6
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	f001 ffc2 	bl	8015b3c <__pow5mult>
 8013bb8:	4606      	mov	r6, r0
 8013bba:	2800      	cmp	r0, #0
 8013bbc:	f43f aea8 	beq.w	8013910 <_strtod_l+0x490>
 8013bc0:	4601      	mov	r1, r0
 8013bc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	f001 ff0f 	bl	80159e8 <__multiply>
 8013bca:	900b      	str	r0, [sp, #44]	; 0x2c
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	f43f ae9f 	beq.w	8013910 <_strtod_l+0x490>
 8013bd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	f001 fdef 	bl	80157b8 <_Bfree>
 8013bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bdc:	9318      	str	r3, [sp, #96]	; 0x60
 8013bde:	f1b8 0f00 	cmp.w	r8, #0
 8013be2:	f300 808c 	bgt.w	8013cfe <_strtod_l+0x87e>
 8013be6:	9b06      	ldr	r3, [sp, #24]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	dd08      	ble.n	8013bfe <_strtod_l+0x77e>
 8013bec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013bee:	9905      	ldr	r1, [sp, #20]
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f001 ffa3 	bl	8015b3c <__pow5mult>
 8013bf6:	9005      	str	r0, [sp, #20]
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	f43f ae89 	beq.w	8013910 <_strtod_l+0x490>
 8013bfe:	2f00      	cmp	r7, #0
 8013c00:	dd08      	ble.n	8013c14 <_strtod_l+0x794>
 8013c02:	9905      	ldr	r1, [sp, #20]
 8013c04:	463a      	mov	r2, r7
 8013c06:	4620      	mov	r0, r4
 8013c08:	f001 fff2 	bl	8015bf0 <__lshift>
 8013c0c:	9005      	str	r0, [sp, #20]
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	f43f ae7e 	beq.w	8013910 <_strtod_l+0x490>
 8013c14:	f1b9 0f00 	cmp.w	r9, #0
 8013c18:	dd08      	ble.n	8013c2c <_strtod_l+0x7ac>
 8013c1a:	4631      	mov	r1, r6
 8013c1c:	464a      	mov	r2, r9
 8013c1e:	4620      	mov	r0, r4
 8013c20:	f001 ffe6 	bl	8015bf0 <__lshift>
 8013c24:	4606      	mov	r6, r0
 8013c26:	2800      	cmp	r0, #0
 8013c28:	f43f ae72 	beq.w	8013910 <_strtod_l+0x490>
 8013c2c:	9a05      	ldr	r2, [sp, #20]
 8013c2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013c30:	4620      	mov	r0, r4
 8013c32:	f002 f869 	bl	8015d08 <__mdiff>
 8013c36:	4605      	mov	r5, r0
 8013c38:	2800      	cmp	r0, #0
 8013c3a:	f43f ae69 	beq.w	8013910 <_strtod_l+0x490>
 8013c3e:	68c3      	ldr	r3, [r0, #12]
 8013c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c42:	2300      	movs	r3, #0
 8013c44:	60c3      	str	r3, [r0, #12]
 8013c46:	4631      	mov	r1, r6
 8013c48:	f002 f842 	bl	8015cd0 <__mcmp>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	da60      	bge.n	8013d12 <_strtod_l+0x892>
 8013c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c52:	ea53 030a 	orrs.w	r3, r3, sl
 8013c56:	f040 8082 	bne.w	8013d5e <_strtod_l+0x8de>
 8013c5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d17d      	bne.n	8013d5e <_strtod_l+0x8de>
 8013c62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013c66:	0d1b      	lsrs	r3, r3, #20
 8013c68:	051b      	lsls	r3, r3, #20
 8013c6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013c6e:	d976      	bls.n	8013d5e <_strtod_l+0x8de>
 8013c70:	696b      	ldr	r3, [r5, #20]
 8013c72:	b913      	cbnz	r3, 8013c7a <_strtod_l+0x7fa>
 8013c74:	692b      	ldr	r3, [r5, #16]
 8013c76:	2b01      	cmp	r3, #1
 8013c78:	dd71      	ble.n	8013d5e <_strtod_l+0x8de>
 8013c7a:	4629      	mov	r1, r5
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	4620      	mov	r0, r4
 8013c80:	f001 ffb6 	bl	8015bf0 <__lshift>
 8013c84:	4631      	mov	r1, r6
 8013c86:	4605      	mov	r5, r0
 8013c88:	f002 f822 	bl	8015cd0 <__mcmp>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	dd66      	ble.n	8013d5e <_strtod_l+0x8de>
 8013c90:	9904      	ldr	r1, [sp, #16]
 8013c92:	4a53      	ldr	r2, [pc, #332]	; (8013de0 <_strtod_l+0x960>)
 8013c94:	465b      	mov	r3, fp
 8013c96:	2900      	cmp	r1, #0
 8013c98:	f000 8081 	beq.w	8013d9e <_strtod_l+0x91e>
 8013c9c:	ea02 010b 	and.w	r1, r2, fp
 8013ca0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013ca4:	dc7b      	bgt.n	8013d9e <_strtod_l+0x91e>
 8013ca6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013caa:	f77f aea9 	ble.w	8013a00 <_strtod_l+0x580>
 8013cae:	4b4d      	ldr	r3, [pc, #308]	; (8013de4 <_strtod_l+0x964>)
 8013cb0:	4650      	mov	r0, sl
 8013cb2:	4659      	mov	r1, fp
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	f7ec fccf 	bl	8000658 <__aeabi_dmul>
 8013cba:	460b      	mov	r3, r1
 8013cbc:	4303      	orrs	r3, r0
 8013cbe:	bf08      	it	eq
 8013cc0:	2322      	moveq	r3, #34	; 0x22
 8013cc2:	4682      	mov	sl, r0
 8013cc4:	468b      	mov	fp, r1
 8013cc6:	bf08      	it	eq
 8013cc8:	6023      	streq	r3, [r4, #0]
 8013cca:	e62b      	b.n	8013924 <_strtod_l+0x4a4>
 8013ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8013cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8013cd4:	ea03 0a0a 	and.w	sl, r3, sl
 8013cd8:	e6e3      	b.n	8013aa2 <_strtod_l+0x622>
 8013cda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013cde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013ce2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013ce6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013cea:	fa01 f308 	lsl.w	r3, r1, r8
 8013cee:	9308      	str	r3, [sp, #32]
 8013cf0:	910d      	str	r1, [sp, #52]	; 0x34
 8013cf2:	e746      	b.n	8013b82 <_strtod_l+0x702>
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	9308      	str	r3, [sp, #32]
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8013cfc:	e741      	b.n	8013b82 <_strtod_l+0x702>
 8013cfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013d00:	4642      	mov	r2, r8
 8013d02:	4620      	mov	r0, r4
 8013d04:	f001 ff74 	bl	8015bf0 <__lshift>
 8013d08:	9018      	str	r0, [sp, #96]	; 0x60
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	f47f af6b 	bne.w	8013be6 <_strtod_l+0x766>
 8013d10:	e5fe      	b.n	8013910 <_strtod_l+0x490>
 8013d12:	465f      	mov	r7, fp
 8013d14:	d16e      	bne.n	8013df4 <_strtod_l+0x974>
 8013d16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d1c:	b342      	cbz	r2, 8013d70 <_strtod_l+0x8f0>
 8013d1e:	4a32      	ldr	r2, [pc, #200]	; (8013de8 <_strtod_l+0x968>)
 8013d20:	4293      	cmp	r3, r2
 8013d22:	d128      	bne.n	8013d76 <_strtod_l+0x8f6>
 8013d24:	9b04      	ldr	r3, [sp, #16]
 8013d26:	4651      	mov	r1, sl
 8013d28:	b1eb      	cbz	r3, 8013d66 <_strtod_l+0x8e6>
 8013d2a:	4b2d      	ldr	r3, [pc, #180]	; (8013de0 <_strtod_l+0x960>)
 8013d2c:	403b      	ands	r3, r7
 8013d2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013d32:	f04f 32ff 	mov.w	r2, #4294967295
 8013d36:	d819      	bhi.n	8013d6c <_strtod_l+0x8ec>
 8013d38:	0d1b      	lsrs	r3, r3, #20
 8013d3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8013d42:	4299      	cmp	r1, r3
 8013d44:	d117      	bne.n	8013d76 <_strtod_l+0x8f6>
 8013d46:	4b29      	ldr	r3, [pc, #164]	; (8013dec <_strtod_l+0x96c>)
 8013d48:	429f      	cmp	r7, r3
 8013d4a:	d102      	bne.n	8013d52 <_strtod_l+0x8d2>
 8013d4c:	3101      	adds	r1, #1
 8013d4e:	f43f addf 	beq.w	8013910 <_strtod_l+0x490>
 8013d52:	4b23      	ldr	r3, [pc, #140]	; (8013de0 <_strtod_l+0x960>)
 8013d54:	403b      	ands	r3, r7
 8013d56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013d5a:	f04f 0a00 	mov.w	sl, #0
 8013d5e:	9b04      	ldr	r3, [sp, #16]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d1a4      	bne.n	8013cae <_strtod_l+0x82e>
 8013d64:	e5de      	b.n	8013924 <_strtod_l+0x4a4>
 8013d66:	f04f 33ff 	mov.w	r3, #4294967295
 8013d6a:	e7ea      	b.n	8013d42 <_strtod_l+0x8c2>
 8013d6c:	4613      	mov	r3, r2
 8013d6e:	e7e8      	b.n	8013d42 <_strtod_l+0x8c2>
 8013d70:	ea53 030a 	orrs.w	r3, r3, sl
 8013d74:	d08c      	beq.n	8013c90 <_strtod_l+0x810>
 8013d76:	9b08      	ldr	r3, [sp, #32]
 8013d78:	b1db      	cbz	r3, 8013db2 <_strtod_l+0x932>
 8013d7a:	423b      	tst	r3, r7
 8013d7c:	d0ef      	beq.n	8013d5e <_strtod_l+0x8de>
 8013d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d80:	9a04      	ldr	r2, [sp, #16]
 8013d82:	4650      	mov	r0, sl
 8013d84:	4659      	mov	r1, fp
 8013d86:	b1c3      	cbz	r3, 8013dba <_strtod_l+0x93a>
 8013d88:	f7ff fb5d 	bl	8013446 <sulp>
 8013d8c:	4602      	mov	r2, r0
 8013d8e:	460b      	mov	r3, r1
 8013d90:	ec51 0b18 	vmov	r0, r1, d8
 8013d94:	f7ec faaa 	bl	80002ec <__adddf3>
 8013d98:	4682      	mov	sl, r0
 8013d9a:	468b      	mov	fp, r1
 8013d9c:	e7df      	b.n	8013d5e <_strtod_l+0x8de>
 8013d9e:	4013      	ands	r3, r2
 8013da0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013da4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013da8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013dac:	f04f 3aff 	mov.w	sl, #4294967295
 8013db0:	e7d5      	b.n	8013d5e <_strtod_l+0x8de>
 8013db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013db4:	ea13 0f0a 	tst.w	r3, sl
 8013db8:	e7e0      	b.n	8013d7c <_strtod_l+0x8fc>
 8013dba:	f7ff fb44 	bl	8013446 <sulp>
 8013dbe:	4602      	mov	r2, r0
 8013dc0:	460b      	mov	r3, r1
 8013dc2:	ec51 0b18 	vmov	r0, r1, d8
 8013dc6:	f7ec fa8f 	bl	80002e8 <__aeabi_dsub>
 8013dca:	2200      	movs	r2, #0
 8013dcc:	2300      	movs	r3, #0
 8013dce:	4682      	mov	sl, r0
 8013dd0:	468b      	mov	fp, r1
 8013dd2:	f7ec fea9 	bl	8000b28 <__aeabi_dcmpeq>
 8013dd6:	2800      	cmp	r0, #0
 8013dd8:	d0c1      	beq.n	8013d5e <_strtod_l+0x8de>
 8013dda:	e611      	b.n	8013a00 <_strtod_l+0x580>
 8013ddc:	fffffc02 	.word	0xfffffc02
 8013de0:	7ff00000 	.word	0x7ff00000
 8013de4:	39500000 	.word	0x39500000
 8013de8:	000fffff 	.word	0x000fffff
 8013dec:	7fefffff 	.word	0x7fefffff
 8013df0:	08050558 	.word	0x08050558
 8013df4:	4631      	mov	r1, r6
 8013df6:	4628      	mov	r0, r5
 8013df8:	f002 f8e8 	bl	8015fcc <__ratio>
 8013dfc:	ec59 8b10 	vmov	r8, r9, d0
 8013e00:	ee10 0a10 	vmov	r0, s0
 8013e04:	2200      	movs	r2, #0
 8013e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e0a:	4649      	mov	r1, r9
 8013e0c:	f7ec fea0 	bl	8000b50 <__aeabi_dcmple>
 8013e10:	2800      	cmp	r0, #0
 8013e12:	d07a      	beq.n	8013f0a <_strtod_l+0xa8a>
 8013e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d04a      	beq.n	8013eb0 <_strtod_l+0xa30>
 8013e1a:	4b95      	ldr	r3, [pc, #596]	; (8014070 <_strtod_l+0xbf0>)
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013e22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014070 <_strtod_l+0xbf0>
 8013e26:	f04f 0800 	mov.w	r8, #0
 8013e2a:	4b92      	ldr	r3, [pc, #584]	; (8014074 <_strtod_l+0xbf4>)
 8013e2c:	403b      	ands	r3, r7
 8013e2e:	930d      	str	r3, [sp, #52]	; 0x34
 8013e30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e32:	4b91      	ldr	r3, [pc, #580]	; (8014078 <_strtod_l+0xbf8>)
 8013e34:	429a      	cmp	r2, r3
 8013e36:	f040 80b0 	bne.w	8013f9a <_strtod_l+0xb1a>
 8013e3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013e42:	ec4b ab10 	vmov	d0, sl, fp
 8013e46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e4a:	f001 ffe7 	bl	8015e1c <__ulp>
 8013e4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e52:	ec53 2b10 	vmov	r2, r3, d0
 8013e56:	f7ec fbff 	bl	8000658 <__aeabi_dmul>
 8013e5a:	4652      	mov	r2, sl
 8013e5c:	465b      	mov	r3, fp
 8013e5e:	f7ec fa45 	bl	80002ec <__adddf3>
 8013e62:	460b      	mov	r3, r1
 8013e64:	4983      	ldr	r1, [pc, #524]	; (8014074 <_strtod_l+0xbf4>)
 8013e66:	4a85      	ldr	r2, [pc, #532]	; (801407c <_strtod_l+0xbfc>)
 8013e68:	4019      	ands	r1, r3
 8013e6a:	4291      	cmp	r1, r2
 8013e6c:	4682      	mov	sl, r0
 8013e6e:	d960      	bls.n	8013f32 <_strtod_l+0xab2>
 8013e70:	ee18 3a90 	vmov	r3, s17
 8013e74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013e78:	4293      	cmp	r3, r2
 8013e7a:	d104      	bne.n	8013e86 <_strtod_l+0xa06>
 8013e7c:	ee18 3a10 	vmov	r3, s16
 8013e80:	3301      	adds	r3, #1
 8013e82:	f43f ad45 	beq.w	8013910 <_strtod_l+0x490>
 8013e86:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014088 <_strtod_l+0xc08>
 8013e8a:	f04f 3aff 	mov.w	sl, #4294967295
 8013e8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013e90:	4620      	mov	r0, r4
 8013e92:	f001 fc91 	bl	80157b8 <_Bfree>
 8013e96:	9905      	ldr	r1, [sp, #20]
 8013e98:	4620      	mov	r0, r4
 8013e9a:	f001 fc8d 	bl	80157b8 <_Bfree>
 8013e9e:	4631      	mov	r1, r6
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f001 fc89 	bl	80157b8 <_Bfree>
 8013ea6:	4629      	mov	r1, r5
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	f001 fc85 	bl	80157b8 <_Bfree>
 8013eae:	e61a      	b.n	8013ae6 <_strtod_l+0x666>
 8013eb0:	f1ba 0f00 	cmp.w	sl, #0
 8013eb4:	d11b      	bne.n	8013eee <_strtod_l+0xa6e>
 8013eb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013eba:	b9f3      	cbnz	r3, 8013efa <_strtod_l+0xa7a>
 8013ebc:	4b6c      	ldr	r3, [pc, #432]	; (8014070 <_strtod_l+0xbf0>)
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	4640      	mov	r0, r8
 8013ec2:	4649      	mov	r1, r9
 8013ec4:	f7ec fe3a 	bl	8000b3c <__aeabi_dcmplt>
 8013ec8:	b9d0      	cbnz	r0, 8013f00 <_strtod_l+0xa80>
 8013eca:	4640      	mov	r0, r8
 8013ecc:	4649      	mov	r1, r9
 8013ece:	4b6c      	ldr	r3, [pc, #432]	; (8014080 <_strtod_l+0xc00>)
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	f7ec fbc1 	bl	8000658 <__aeabi_dmul>
 8013ed6:	4680      	mov	r8, r0
 8013ed8:	4689      	mov	r9, r1
 8013eda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013ede:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8013ee2:	9315      	str	r3, [sp, #84]	; 0x54
 8013ee4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013eec:	e79d      	b.n	8013e2a <_strtod_l+0x9aa>
 8013eee:	f1ba 0f01 	cmp.w	sl, #1
 8013ef2:	d102      	bne.n	8013efa <_strtod_l+0xa7a>
 8013ef4:	2f00      	cmp	r7, #0
 8013ef6:	f43f ad83 	beq.w	8013a00 <_strtod_l+0x580>
 8013efa:	4b62      	ldr	r3, [pc, #392]	; (8014084 <_strtod_l+0xc04>)
 8013efc:	2200      	movs	r2, #0
 8013efe:	e78e      	b.n	8013e1e <_strtod_l+0x99e>
 8013f00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014080 <_strtod_l+0xc00>
 8013f04:	f04f 0800 	mov.w	r8, #0
 8013f08:	e7e7      	b.n	8013eda <_strtod_l+0xa5a>
 8013f0a:	4b5d      	ldr	r3, [pc, #372]	; (8014080 <_strtod_l+0xc00>)
 8013f0c:	4640      	mov	r0, r8
 8013f0e:	4649      	mov	r1, r9
 8013f10:	2200      	movs	r2, #0
 8013f12:	f7ec fba1 	bl	8000658 <__aeabi_dmul>
 8013f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f18:	4680      	mov	r8, r0
 8013f1a:	4689      	mov	r9, r1
 8013f1c:	b933      	cbnz	r3, 8013f2c <_strtod_l+0xaac>
 8013f1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f22:	900e      	str	r0, [sp, #56]	; 0x38
 8013f24:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013f2a:	e7dd      	b.n	8013ee8 <_strtod_l+0xa68>
 8013f2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8013f30:	e7f9      	b.n	8013f26 <_strtod_l+0xaa6>
 8013f32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013f36:	9b04      	ldr	r3, [sp, #16]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d1a8      	bne.n	8013e8e <_strtod_l+0xa0e>
 8013f3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f42:	0d1b      	lsrs	r3, r3, #20
 8013f44:	051b      	lsls	r3, r3, #20
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d1a1      	bne.n	8013e8e <_strtod_l+0xa0e>
 8013f4a:	4640      	mov	r0, r8
 8013f4c:	4649      	mov	r1, r9
 8013f4e:	f7ec fee3 	bl	8000d18 <__aeabi_d2lz>
 8013f52:	f7ec fb53 	bl	80005fc <__aeabi_l2d>
 8013f56:	4602      	mov	r2, r0
 8013f58:	460b      	mov	r3, r1
 8013f5a:	4640      	mov	r0, r8
 8013f5c:	4649      	mov	r1, r9
 8013f5e:	f7ec f9c3 	bl	80002e8 <__aeabi_dsub>
 8013f62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f68:	ea43 030a 	orr.w	r3, r3, sl
 8013f6c:	4313      	orrs	r3, r2
 8013f6e:	4680      	mov	r8, r0
 8013f70:	4689      	mov	r9, r1
 8013f72:	d055      	beq.n	8014020 <_strtod_l+0xba0>
 8013f74:	a336      	add	r3, pc, #216	; (adr r3, 8014050 <_strtod_l+0xbd0>)
 8013f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f7a:	f7ec fddf 	bl	8000b3c <__aeabi_dcmplt>
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	f47f acd0 	bne.w	8013924 <_strtod_l+0x4a4>
 8013f84:	a334      	add	r3, pc, #208	; (adr r3, 8014058 <_strtod_l+0xbd8>)
 8013f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f8a:	4640      	mov	r0, r8
 8013f8c:	4649      	mov	r1, r9
 8013f8e:	f7ec fdf3 	bl	8000b78 <__aeabi_dcmpgt>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	f43f af7b 	beq.w	8013e8e <_strtod_l+0xa0e>
 8013f98:	e4c4      	b.n	8013924 <_strtod_l+0x4a4>
 8013f9a:	9b04      	ldr	r3, [sp, #16]
 8013f9c:	b333      	cbz	r3, 8013fec <_strtod_l+0xb6c>
 8013f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013fa4:	d822      	bhi.n	8013fec <_strtod_l+0xb6c>
 8013fa6:	a32e      	add	r3, pc, #184	; (adr r3, 8014060 <_strtod_l+0xbe0>)
 8013fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fac:	4640      	mov	r0, r8
 8013fae:	4649      	mov	r1, r9
 8013fb0:	f7ec fdce 	bl	8000b50 <__aeabi_dcmple>
 8013fb4:	b1a0      	cbz	r0, 8013fe0 <_strtod_l+0xb60>
 8013fb6:	4649      	mov	r1, r9
 8013fb8:	4640      	mov	r0, r8
 8013fba:	f7ec fe25 	bl	8000c08 <__aeabi_d2uiz>
 8013fbe:	2801      	cmp	r0, #1
 8013fc0:	bf38      	it	cc
 8013fc2:	2001      	movcc	r0, #1
 8013fc4:	f7ec face 	bl	8000564 <__aeabi_ui2d>
 8013fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fca:	4680      	mov	r8, r0
 8013fcc:	4689      	mov	r9, r1
 8013fce:	bb23      	cbnz	r3, 801401a <_strtod_l+0xb9a>
 8013fd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013fd4:	9010      	str	r0, [sp, #64]	; 0x40
 8013fd6:	9311      	str	r3, [sp, #68]	; 0x44
 8013fd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013fdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013fe4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013fe8:	1a9b      	subs	r3, r3, r2
 8013fea:	9309      	str	r3, [sp, #36]	; 0x24
 8013fec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8013ff4:	eef0 0a68 	vmov.f32	s1, s17
 8013ff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013ffc:	f001 ff0e 	bl	8015e1c <__ulp>
 8014000:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014004:	ec53 2b10 	vmov	r2, r3, d0
 8014008:	f7ec fb26 	bl	8000658 <__aeabi_dmul>
 801400c:	ec53 2b18 	vmov	r2, r3, d8
 8014010:	f7ec f96c 	bl	80002ec <__adddf3>
 8014014:	4682      	mov	sl, r0
 8014016:	468b      	mov	fp, r1
 8014018:	e78d      	b.n	8013f36 <_strtod_l+0xab6>
 801401a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801401e:	e7db      	b.n	8013fd8 <_strtod_l+0xb58>
 8014020:	a311      	add	r3, pc, #68	; (adr r3, 8014068 <_strtod_l+0xbe8>)
 8014022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014026:	f7ec fd89 	bl	8000b3c <__aeabi_dcmplt>
 801402a:	e7b2      	b.n	8013f92 <_strtod_l+0xb12>
 801402c:	2300      	movs	r3, #0
 801402e:	930a      	str	r3, [sp, #40]	; 0x28
 8014030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014034:	6013      	str	r3, [r2, #0]
 8014036:	f7ff ba6b 	b.w	8013510 <_strtod_l+0x90>
 801403a:	2a65      	cmp	r2, #101	; 0x65
 801403c:	f43f ab5f 	beq.w	80136fe <_strtod_l+0x27e>
 8014040:	2a45      	cmp	r2, #69	; 0x45
 8014042:	f43f ab5c 	beq.w	80136fe <_strtod_l+0x27e>
 8014046:	2301      	movs	r3, #1
 8014048:	f7ff bb94 	b.w	8013774 <_strtod_l+0x2f4>
 801404c:	f3af 8000 	nop.w
 8014050:	94a03595 	.word	0x94a03595
 8014054:	3fdfffff 	.word	0x3fdfffff
 8014058:	35afe535 	.word	0x35afe535
 801405c:	3fe00000 	.word	0x3fe00000
 8014060:	ffc00000 	.word	0xffc00000
 8014064:	41dfffff 	.word	0x41dfffff
 8014068:	94a03595 	.word	0x94a03595
 801406c:	3fcfffff 	.word	0x3fcfffff
 8014070:	3ff00000 	.word	0x3ff00000
 8014074:	7ff00000 	.word	0x7ff00000
 8014078:	7fe00000 	.word	0x7fe00000
 801407c:	7c9fffff 	.word	0x7c9fffff
 8014080:	3fe00000 	.word	0x3fe00000
 8014084:	bff00000 	.word	0xbff00000
 8014088:	7fefffff 	.word	0x7fefffff

0801408c <_strtod_r>:
 801408c:	4b01      	ldr	r3, [pc, #4]	; (8014094 <_strtod_r+0x8>)
 801408e:	f7ff b9f7 	b.w	8013480 <_strtod_l>
 8014092:	bf00      	nop
 8014094:	2000140c 	.word	0x2000140c

08014098 <strtok>:
 8014098:	4b16      	ldr	r3, [pc, #88]	; (80140f4 <strtok+0x5c>)
 801409a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801409c:	681e      	ldr	r6, [r3, #0]
 801409e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80140a0:	4605      	mov	r5, r0
 80140a2:	b9fc      	cbnz	r4, 80140e4 <strtok+0x4c>
 80140a4:	2050      	movs	r0, #80	; 0x50
 80140a6:	9101      	str	r1, [sp, #4]
 80140a8:	f7fe f9a6 	bl	80123f8 <malloc>
 80140ac:	9901      	ldr	r1, [sp, #4]
 80140ae:	65b0      	str	r0, [r6, #88]	; 0x58
 80140b0:	4602      	mov	r2, r0
 80140b2:	b920      	cbnz	r0, 80140be <strtok+0x26>
 80140b4:	4b10      	ldr	r3, [pc, #64]	; (80140f8 <strtok+0x60>)
 80140b6:	4811      	ldr	r0, [pc, #68]	; (80140fc <strtok+0x64>)
 80140b8:	2157      	movs	r1, #87	; 0x57
 80140ba:	f000 f8df 	bl	801427c <__assert_func>
 80140be:	e9c0 4400 	strd	r4, r4, [r0]
 80140c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80140c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80140ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80140ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80140d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80140d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80140da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80140de:	6184      	str	r4, [r0, #24]
 80140e0:	7704      	strb	r4, [r0, #28]
 80140e2:	6244      	str	r4, [r0, #36]	; 0x24
 80140e4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80140e6:	2301      	movs	r3, #1
 80140e8:	4628      	mov	r0, r5
 80140ea:	b002      	add	sp, #8
 80140ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140f0:	f000 b806 	b.w	8014100 <__strtok_r>
 80140f4:	200013a4 	.word	0x200013a4
 80140f8:	08050580 	.word	0x08050580
 80140fc:	08050597 	.word	0x08050597

08014100 <__strtok_r>:
 8014100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014102:	b908      	cbnz	r0, 8014108 <__strtok_r+0x8>
 8014104:	6810      	ldr	r0, [r2, #0]
 8014106:	b188      	cbz	r0, 801412c <__strtok_r+0x2c>
 8014108:	4604      	mov	r4, r0
 801410a:	4620      	mov	r0, r4
 801410c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014110:	460f      	mov	r7, r1
 8014112:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014116:	b91e      	cbnz	r6, 8014120 <__strtok_r+0x20>
 8014118:	b965      	cbnz	r5, 8014134 <__strtok_r+0x34>
 801411a:	6015      	str	r5, [r2, #0]
 801411c:	4628      	mov	r0, r5
 801411e:	e005      	b.n	801412c <__strtok_r+0x2c>
 8014120:	42b5      	cmp	r5, r6
 8014122:	d1f6      	bne.n	8014112 <__strtok_r+0x12>
 8014124:	2b00      	cmp	r3, #0
 8014126:	d1f0      	bne.n	801410a <__strtok_r+0xa>
 8014128:	6014      	str	r4, [r2, #0]
 801412a:	7003      	strb	r3, [r0, #0]
 801412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801412e:	461c      	mov	r4, r3
 8014130:	e00c      	b.n	801414c <__strtok_r+0x4c>
 8014132:	b915      	cbnz	r5, 801413a <__strtok_r+0x3a>
 8014134:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014138:	460e      	mov	r6, r1
 801413a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801413e:	42ab      	cmp	r3, r5
 8014140:	d1f7      	bne.n	8014132 <__strtok_r+0x32>
 8014142:	2b00      	cmp	r3, #0
 8014144:	d0f3      	beq.n	801412e <__strtok_r+0x2e>
 8014146:	2300      	movs	r3, #0
 8014148:	f804 3c01 	strb.w	r3, [r4, #-1]
 801414c:	6014      	str	r4, [r2, #0]
 801414e:	e7ed      	b.n	801412c <__strtok_r+0x2c>

08014150 <_strtol_l.constprop.0>:
 8014150:	2b01      	cmp	r3, #1
 8014152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014156:	d001      	beq.n	801415c <_strtol_l.constprop.0+0xc>
 8014158:	2b24      	cmp	r3, #36	; 0x24
 801415a:	d906      	bls.n	801416a <_strtol_l.constprop.0+0x1a>
 801415c:	f7fe f922 	bl	80123a4 <__errno>
 8014160:	2316      	movs	r3, #22
 8014162:	6003      	str	r3, [r0, #0]
 8014164:	2000      	movs	r0, #0
 8014166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801416a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014250 <_strtol_l.constprop.0+0x100>
 801416e:	460d      	mov	r5, r1
 8014170:	462e      	mov	r6, r5
 8014172:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014176:	f814 700c 	ldrb.w	r7, [r4, ip]
 801417a:	f017 0708 	ands.w	r7, r7, #8
 801417e:	d1f7      	bne.n	8014170 <_strtol_l.constprop.0+0x20>
 8014180:	2c2d      	cmp	r4, #45	; 0x2d
 8014182:	d132      	bne.n	80141ea <_strtol_l.constprop.0+0x9a>
 8014184:	782c      	ldrb	r4, [r5, #0]
 8014186:	2701      	movs	r7, #1
 8014188:	1cb5      	adds	r5, r6, #2
 801418a:	2b00      	cmp	r3, #0
 801418c:	d05b      	beq.n	8014246 <_strtol_l.constprop.0+0xf6>
 801418e:	2b10      	cmp	r3, #16
 8014190:	d109      	bne.n	80141a6 <_strtol_l.constprop.0+0x56>
 8014192:	2c30      	cmp	r4, #48	; 0x30
 8014194:	d107      	bne.n	80141a6 <_strtol_l.constprop.0+0x56>
 8014196:	782c      	ldrb	r4, [r5, #0]
 8014198:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801419c:	2c58      	cmp	r4, #88	; 0x58
 801419e:	d14d      	bne.n	801423c <_strtol_l.constprop.0+0xec>
 80141a0:	786c      	ldrb	r4, [r5, #1]
 80141a2:	2310      	movs	r3, #16
 80141a4:	3502      	adds	r5, #2
 80141a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80141aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80141ae:	f04f 0c00 	mov.w	ip, #0
 80141b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80141b6:	4666      	mov	r6, ip
 80141b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80141bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80141c0:	f1be 0f09 	cmp.w	lr, #9
 80141c4:	d816      	bhi.n	80141f4 <_strtol_l.constprop.0+0xa4>
 80141c6:	4674      	mov	r4, lr
 80141c8:	42a3      	cmp	r3, r4
 80141ca:	dd24      	ble.n	8014216 <_strtol_l.constprop.0+0xc6>
 80141cc:	f1bc 0f00 	cmp.w	ip, #0
 80141d0:	db1e      	blt.n	8014210 <_strtol_l.constprop.0+0xc0>
 80141d2:	45b1      	cmp	r9, r6
 80141d4:	d31c      	bcc.n	8014210 <_strtol_l.constprop.0+0xc0>
 80141d6:	d101      	bne.n	80141dc <_strtol_l.constprop.0+0x8c>
 80141d8:	45a2      	cmp	sl, r4
 80141da:	db19      	blt.n	8014210 <_strtol_l.constprop.0+0xc0>
 80141dc:	fb06 4603 	mla	r6, r6, r3, r4
 80141e0:	f04f 0c01 	mov.w	ip, #1
 80141e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141e8:	e7e8      	b.n	80141bc <_strtol_l.constprop.0+0x6c>
 80141ea:	2c2b      	cmp	r4, #43	; 0x2b
 80141ec:	bf04      	itt	eq
 80141ee:	782c      	ldrbeq	r4, [r5, #0]
 80141f0:	1cb5      	addeq	r5, r6, #2
 80141f2:	e7ca      	b.n	801418a <_strtol_l.constprop.0+0x3a>
 80141f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80141f8:	f1be 0f19 	cmp.w	lr, #25
 80141fc:	d801      	bhi.n	8014202 <_strtol_l.constprop.0+0xb2>
 80141fe:	3c37      	subs	r4, #55	; 0x37
 8014200:	e7e2      	b.n	80141c8 <_strtol_l.constprop.0+0x78>
 8014202:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014206:	f1be 0f19 	cmp.w	lr, #25
 801420a:	d804      	bhi.n	8014216 <_strtol_l.constprop.0+0xc6>
 801420c:	3c57      	subs	r4, #87	; 0x57
 801420e:	e7db      	b.n	80141c8 <_strtol_l.constprop.0+0x78>
 8014210:	f04f 3cff 	mov.w	ip, #4294967295
 8014214:	e7e6      	b.n	80141e4 <_strtol_l.constprop.0+0x94>
 8014216:	f1bc 0f00 	cmp.w	ip, #0
 801421a:	da05      	bge.n	8014228 <_strtol_l.constprop.0+0xd8>
 801421c:	2322      	movs	r3, #34	; 0x22
 801421e:	6003      	str	r3, [r0, #0]
 8014220:	4646      	mov	r6, r8
 8014222:	b942      	cbnz	r2, 8014236 <_strtol_l.constprop.0+0xe6>
 8014224:	4630      	mov	r0, r6
 8014226:	e79e      	b.n	8014166 <_strtol_l.constprop.0+0x16>
 8014228:	b107      	cbz	r7, 801422c <_strtol_l.constprop.0+0xdc>
 801422a:	4276      	negs	r6, r6
 801422c:	2a00      	cmp	r2, #0
 801422e:	d0f9      	beq.n	8014224 <_strtol_l.constprop.0+0xd4>
 8014230:	f1bc 0f00 	cmp.w	ip, #0
 8014234:	d000      	beq.n	8014238 <_strtol_l.constprop.0+0xe8>
 8014236:	1e69      	subs	r1, r5, #1
 8014238:	6011      	str	r1, [r2, #0]
 801423a:	e7f3      	b.n	8014224 <_strtol_l.constprop.0+0xd4>
 801423c:	2430      	movs	r4, #48	; 0x30
 801423e:	2b00      	cmp	r3, #0
 8014240:	d1b1      	bne.n	80141a6 <_strtol_l.constprop.0+0x56>
 8014242:	2308      	movs	r3, #8
 8014244:	e7af      	b.n	80141a6 <_strtol_l.constprop.0+0x56>
 8014246:	2c30      	cmp	r4, #48	; 0x30
 8014248:	d0a5      	beq.n	8014196 <_strtol_l.constprop.0+0x46>
 801424a:	230a      	movs	r3, #10
 801424c:	e7ab      	b.n	80141a6 <_strtol_l.constprop.0+0x56>
 801424e:	bf00      	nop
 8014250:	08050631 	.word	0x08050631

08014254 <_strtol_r>:
 8014254:	f7ff bf7c 	b.w	8014150 <_strtol_l.constprop.0>

08014258 <_write_r>:
 8014258:	b538      	push	{r3, r4, r5, lr}
 801425a:	4d07      	ldr	r5, [pc, #28]	; (8014278 <_write_r+0x20>)
 801425c:	4604      	mov	r4, r0
 801425e:	4608      	mov	r0, r1
 8014260:	4611      	mov	r1, r2
 8014262:	2200      	movs	r2, #0
 8014264:	602a      	str	r2, [r5, #0]
 8014266:	461a      	mov	r2, r3
 8014268:	f004 f958 	bl	801851c <_write>
 801426c:	1c43      	adds	r3, r0, #1
 801426e:	d102      	bne.n	8014276 <_write_r+0x1e>
 8014270:	682b      	ldr	r3, [r5, #0]
 8014272:	b103      	cbz	r3, 8014276 <_write_r+0x1e>
 8014274:	6023      	str	r3, [r4, #0]
 8014276:	bd38      	pop	{r3, r4, r5, pc}
 8014278:	20009aac 	.word	0x20009aac

0801427c <__assert_func>:
 801427c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801427e:	4614      	mov	r4, r2
 8014280:	461a      	mov	r2, r3
 8014282:	4b09      	ldr	r3, [pc, #36]	; (80142a8 <__assert_func+0x2c>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	4605      	mov	r5, r0
 8014288:	68d8      	ldr	r0, [r3, #12]
 801428a:	b14c      	cbz	r4, 80142a0 <__assert_func+0x24>
 801428c:	4b07      	ldr	r3, [pc, #28]	; (80142ac <__assert_func+0x30>)
 801428e:	9100      	str	r1, [sp, #0]
 8014290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014294:	4906      	ldr	r1, [pc, #24]	; (80142b0 <__assert_func+0x34>)
 8014296:	462b      	mov	r3, r5
 8014298:	f000 fe98 	bl	8014fcc <fiprintf>
 801429c:	f002 ff10 	bl	80170c0 <abort>
 80142a0:	4b04      	ldr	r3, [pc, #16]	; (80142b4 <__assert_func+0x38>)
 80142a2:	461c      	mov	r4, r3
 80142a4:	e7f3      	b.n	801428e <__assert_func+0x12>
 80142a6:	bf00      	nop
 80142a8:	200013a4 	.word	0x200013a4
 80142ac:	080505f4 	.word	0x080505f4
 80142b0:	08050601 	.word	0x08050601
 80142b4:	0805062f 	.word	0x0805062f

080142b8 <_close_r>:
 80142b8:	b538      	push	{r3, r4, r5, lr}
 80142ba:	4d06      	ldr	r5, [pc, #24]	; (80142d4 <_close_r+0x1c>)
 80142bc:	2300      	movs	r3, #0
 80142be:	4604      	mov	r4, r0
 80142c0:	4608      	mov	r0, r1
 80142c2:	602b      	str	r3, [r5, #0]
 80142c4:	f004 f8f2 	bl	80184ac <_close>
 80142c8:	1c43      	adds	r3, r0, #1
 80142ca:	d102      	bne.n	80142d2 <_close_r+0x1a>
 80142cc:	682b      	ldr	r3, [r5, #0]
 80142ce:	b103      	cbz	r3, 80142d2 <_close_r+0x1a>
 80142d0:	6023      	str	r3, [r4, #0]
 80142d2:	bd38      	pop	{r3, r4, r5, pc}
 80142d4:	20009aac 	.word	0x20009aac

080142d8 <quorem>:
 80142d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142dc:	6903      	ldr	r3, [r0, #16]
 80142de:	690c      	ldr	r4, [r1, #16]
 80142e0:	42a3      	cmp	r3, r4
 80142e2:	4607      	mov	r7, r0
 80142e4:	f2c0 8081 	blt.w	80143ea <quorem+0x112>
 80142e8:	3c01      	subs	r4, #1
 80142ea:	f101 0814 	add.w	r8, r1, #20
 80142ee:	f100 0514 	add.w	r5, r0, #20
 80142f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80142f6:	9301      	str	r3, [sp, #4]
 80142f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80142fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014300:	3301      	adds	r3, #1
 8014302:	429a      	cmp	r2, r3
 8014304:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014308:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801430c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014310:	d331      	bcc.n	8014376 <quorem+0x9e>
 8014312:	f04f 0e00 	mov.w	lr, #0
 8014316:	4640      	mov	r0, r8
 8014318:	46ac      	mov	ip, r5
 801431a:	46f2      	mov	sl, lr
 801431c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014320:	b293      	uxth	r3, r2
 8014322:	fb06 e303 	mla	r3, r6, r3, lr
 8014326:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801432a:	b29b      	uxth	r3, r3
 801432c:	ebaa 0303 	sub.w	r3, sl, r3
 8014330:	f8dc a000 	ldr.w	sl, [ip]
 8014334:	0c12      	lsrs	r2, r2, #16
 8014336:	fa13 f38a 	uxtah	r3, r3, sl
 801433a:	fb06 e202 	mla	r2, r6, r2, lr
 801433e:	9300      	str	r3, [sp, #0]
 8014340:	9b00      	ldr	r3, [sp, #0]
 8014342:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014346:	b292      	uxth	r2, r2
 8014348:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801434c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014350:	f8bd 3000 	ldrh.w	r3, [sp]
 8014354:	4581      	cmp	r9, r0
 8014356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801435a:	f84c 3b04 	str.w	r3, [ip], #4
 801435e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014362:	d2db      	bcs.n	801431c <quorem+0x44>
 8014364:	f855 300b 	ldr.w	r3, [r5, fp]
 8014368:	b92b      	cbnz	r3, 8014376 <quorem+0x9e>
 801436a:	9b01      	ldr	r3, [sp, #4]
 801436c:	3b04      	subs	r3, #4
 801436e:	429d      	cmp	r5, r3
 8014370:	461a      	mov	r2, r3
 8014372:	d32e      	bcc.n	80143d2 <quorem+0xfa>
 8014374:	613c      	str	r4, [r7, #16]
 8014376:	4638      	mov	r0, r7
 8014378:	f001 fcaa 	bl	8015cd0 <__mcmp>
 801437c:	2800      	cmp	r0, #0
 801437e:	db24      	blt.n	80143ca <quorem+0xf2>
 8014380:	3601      	adds	r6, #1
 8014382:	4628      	mov	r0, r5
 8014384:	f04f 0c00 	mov.w	ip, #0
 8014388:	f858 2b04 	ldr.w	r2, [r8], #4
 801438c:	f8d0 e000 	ldr.w	lr, [r0]
 8014390:	b293      	uxth	r3, r2
 8014392:	ebac 0303 	sub.w	r3, ip, r3
 8014396:	0c12      	lsrs	r2, r2, #16
 8014398:	fa13 f38e 	uxtah	r3, r3, lr
 801439c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80143a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143aa:	45c1      	cmp	r9, r8
 80143ac:	f840 3b04 	str.w	r3, [r0], #4
 80143b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80143b4:	d2e8      	bcs.n	8014388 <quorem+0xb0>
 80143b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80143ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80143be:	b922      	cbnz	r2, 80143ca <quorem+0xf2>
 80143c0:	3b04      	subs	r3, #4
 80143c2:	429d      	cmp	r5, r3
 80143c4:	461a      	mov	r2, r3
 80143c6:	d30a      	bcc.n	80143de <quorem+0x106>
 80143c8:	613c      	str	r4, [r7, #16]
 80143ca:	4630      	mov	r0, r6
 80143cc:	b003      	add	sp, #12
 80143ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143d2:	6812      	ldr	r2, [r2, #0]
 80143d4:	3b04      	subs	r3, #4
 80143d6:	2a00      	cmp	r2, #0
 80143d8:	d1cc      	bne.n	8014374 <quorem+0x9c>
 80143da:	3c01      	subs	r4, #1
 80143dc:	e7c7      	b.n	801436e <quorem+0x96>
 80143de:	6812      	ldr	r2, [r2, #0]
 80143e0:	3b04      	subs	r3, #4
 80143e2:	2a00      	cmp	r2, #0
 80143e4:	d1f0      	bne.n	80143c8 <quorem+0xf0>
 80143e6:	3c01      	subs	r4, #1
 80143e8:	e7eb      	b.n	80143c2 <quorem+0xea>
 80143ea:	2000      	movs	r0, #0
 80143ec:	e7ee      	b.n	80143cc <quorem+0xf4>
	...

080143f0 <_dtoa_r>:
 80143f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f4:	ed2d 8b04 	vpush	{d8-d9}
 80143f8:	ec57 6b10 	vmov	r6, r7, d0
 80143fc:	b093      	sub	sp, #76	; 0x4c
 80143fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014400:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014404:	9106      	str	r1, [sp, #24]
 8014406:	ee10 aa10 	vmov	sl, s0
 801440a:	4604      	mov	r4, r0
 801440c:	9209      	str	r2, [sp, #36]	; 0x24
 801440e:	930c      	str	r3, [sp, #48]	; 0x30
 8014410:	46bb      	mov	fp, r7
 8014412:	b975      	cbnz	r5, 8014432 <_dtoa_r+0x42>
 8014414:	2010      	movs	r0, #16
 8014416:	f7fd ffef 	bl	80123f8 <malloc>
 801441a:	4602      	mov	r2, r0
 801441c:	6260      	str	r0, [r4, #36]	; 0x24
 801441e:	b920      	cbnz	r0, 801442a <_dtoa_r+0x3a>
 8014420:	4ba7      	ldr	r3, [pc, #668]	; (80146c0 <_dtoa_r+0x2d0>)
 8014422:	21ea      	movs	r1, #234	; 0xea
 8014424:	48a7      	ldr	r0, [pc, #668]	; (80146c4 <_dtoa_r+0x2d4>)
 8014426:	f7ff ff29 	bl	801427c <__assert_func>
 801442a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801442e:	6005      	str	r5, [r0, #0]
 8014430:	60c5      	str	r5, [r0, #12]
 8014432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014434:	6819      	ldr	r1, [r3, #0]
 8014436:	b151      	cbz	r1, 801444e <_dtoa_r+0x5e>
 8014438:	685a      	ldr	r2, [r3, #4]
 801443a:	604a      	str	r2, [r1, #4]
 801443c:	2301      	movs	r3, #1
 801443e:	4093      	lsls	r3, r2
 8014440:	608b      	str	r3, [r1, #8]
 8014442:	4620      	mov	r0, r4
 8014444:	f001 f9b8 	bl	80157b8 <_Bfree>
 8014448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801444a:	2200      	movs	r2, #0
 801444c:	601a      	str	r2, [r3, #0]
 801444e:	1e3b      	subs	r3, r7, #0
 8014450:	bfaa      	itet	ge
 8014452:	2300      	movge	r3, #0
 8014454:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014458:	f8c8 3000 	strge.w	r3, [r8]
 801445c:	4b9a      	ldr	r3, [pc, #616]	; (80146c8 <_dtoa_r+0x2d8>)
 801445e:	bfbc      	itt	lt
 8014460:	2201      	movlt	r2, #1
 8014462:	f8c8 2000 	strlt.w	r2, [r8]
 8014466:	ea33 030b 	bics.w	r3, r3, fp
 801446a:	d11b      	bne.n	80144a4 <_dtoa_r+0xb4>
 801446c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801446e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014472:	6013      	str	r3, [r2, #0]
 8014474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014478:	4333      	orrs	r3, r6
 801447a:	f000 8592 	beq.w	8014fa2 <_dtoa_r+0xbb2>
 801447e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014480:	b963      	cbnz	r3, 801449c <_dtoa_r+0xac>
 8014482:	4b92      	ldr	r3, [pc, #584]	; (80146cc <_dtoa_r+0x2dc>)
 8014484:	e022      	b.n	80144cc <_dtoa_r+0xdc>
 8014486:	4b92      	ldr	r3, [pc, #584]	; (80146d0 <_dtoa_r+0x2e0>)
 8014488:	9301      	str	r3, [sp, #4]
 801448a:	3308      	adds	r3, #8
 801448c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801448e:	6013      	str	r3, [r2, #0]
 8014490:	9801      	ldr	r0, [sp, #4]
 8014492:	b013      	add	sp, #76	; 0x4c
 8014494:	ecbd 8b04 	vpop	{d8-d9}
 8014498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801449c:	4b8b      	ldr	r3, [pc, #556]	; (80146cc <_dtoa_r+0x2dc>)
 801449e:	9301      	str	r3, [sp, #4]
 80144a0:	3303      	adds	r3, #3
 80144a2:	e7f3      	b.n	801448c <_dtoa_r+0x9c>
 80144a4:	2200      	movs	r2, #0
 80144a6:	2300      	movs	r3, #0
 80144a8:	4650      	mov	r0, sl
 80144aa:	4659      	mov	r1, fp
 80144ac:	f7ec fb3c 	bl	8000b28 <__aeabi_dcmpeq>
 80144b0:	ec4b ab19 	vmov	d9, sl, fp
 80144b4:	4680      	mov	r8, r0
 80144b6:	b158      	cbz	r0, 80144d0 <_dtoa_r+0xe0>
 80144b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144ba:	2301      	movs	r3, #1
 80144bc:	6013      	str	r3, [r2, #0]
 80144be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	f000 856b 	beq.w	8014f9c <_dtoa_r+0xbac>
 80144c6:	4883      	ldr	r0, [pc, #524]	; (80146d4 <_dtoa_r+0x2e4>)
 80144c8:	6018      	str	r0, [r3, #0]
 80144ca:	1e43      	subs	r3, r0, #1
 80144cc:	9301      	str	r3, [sp, #4]
 80144ce:	e7df      	b.n	8014490 <_dtoa_r+0xa0>
 80144d0:	ec4b ab10 	vmov	d0, sl, fp
 80144d4:	aa10      	add	r2, sp, #64	; 0x40
 80144d6:	a911      	add	r1, sp, #68	; 0x44
 80144d8:	4620      	mov	r0, r4
 80144da:	f001 fd1b 	bl	8015f14 <__d2b>
 80144de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80144e2:	ee08 0a10 	vmov	s16, r0
 80144e6:	2d00      	cmp	r5, #0
 80144e8:	f000 8084 	beq.w	80145f4 <_dtoa_r+0x204>
 80144ec:	ee19 3a90 	vmov	r3, s19
 80144f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80144f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80144f8:	4656      	mov	r6, sl
 80144fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80144fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014502:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014506:	4b74      	ldr	r3, [pc, #464]	; (80146d8 <_dtoa_r+0x2e8>)
 8014508:	2200      	movs	r2, #0
 801450a:	4630      	mov	r0, r6
 801450c:	4639      	mov	r1, r7
 801450e:	f7eb feeb 	bl	80002e8 <__aeabi_dsub>
 8014512:	a365      	add	r3, pc, #404	; (adr r3, 80146a8 <_dtoa_r+0x2b8>)
 8014514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014518:	f7ec f89e 	bl	8000658 <__aeabi_dmul>
 801451c:	a364      	add	r3, pc, #400	; (adr r3, 80146b0 <_dtoa_r+0x2c0>)
 801451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014522:	f7eb fee3 	bl	80002ec <__adddf3>
 8014526:	4606      	mov	r6, r0
 8014528:	4628      	mov	r0, r5
 801452a:	460f      	mov	r7, r1
 801452c:	f7ec f82a 	bl	8000584 <__aeabi_i2d>
 8014530:	a361      	add	r3, pc, #388	; (adr r3, 80146b8 <_dtoa_r+0x2c8>)
 8014532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014536:	f7ec f88f 	bl	8000658 <__aeabi_dmul>
 801453a:	4602      	mov	r2, r0
 801453c:	460b      	mov	r3, r1
 801453e:	4630      	mov	r0, r6
 8014540:	4639      	mov	r1, r7
 8014542:	f7eb fed3 	bl	80002ec <__adddf3>
 8014546:	4606      	mov	r6, r0
 8014548:	460f      	mov	r7, r1
 801454a:	f7ec fb35 	bl	8000bb8 <__aeabi_d2iz>
 801454e:	2200      	movs	r2, #0
 8014550:	9000      	str	r0, [sp, #0]
 8014552:	2300      	movs	r3, #0
 8014554:	4630      	mov	r0, r6
 8014556:	4639      	mov	r1, r7
 8014558:	f7ec faf0 	bl	8000b3c <__aeabi_dcmplt>
 801455c:	b150      	cbz	r0, 8014574 <_dtoa_r+0x184>
 801455e:	9800      	ldr	r0, [sp, #0]
 8014560:	f7ec f810 	bl	8000584 <__aeabi_i2d>
 8014564:	4632      	mov	r2, r6
 8014566:	463b      	mov	r3, r7
 8014568:	f7ec fade 	bl	8000b28 <__aeabi_dcmpeq>
 801456c:	b910      	cbnz	r0, 8014574 <_dtoa_r+0x184>
 801456e:	9b00      	ldr	r3, [sp, #0]
 8014570:	3b01      	subs	r3, #1
 8014572:	9300      	str	r3, [sp, #0]
 8014574:	9b00      	ldr	r3, [sp, #0]
 8014576:	2b16      	cmp	r3, #22
 8014578:	d85a      	bhi.n	8014630 <_dtoa_r+0x240>
 801457a:	9a00      	ldr	r2, [sp, #0]
 801457c:	4b57      	ldr	r3, [pc, #348]	; (80146dc <_dtoa_r+0x2ec>)
 801457e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014586:	ec51 0b19 	vmov	r0, r1, d9
 801458a:	f7ec fad7 	bl	8000b3c <__aeabi_dcmplt>
 801458e:	2800      	cmp	r0, #0
 8014590:	d050      	beq.n	8014634 <_dtoa_r+0x244>
 8014592:	9b00      	ldr	r3, [sp, #0]
 8014594:	3b01      	subs	r3, #1
 8014596:	9300      	str	r3, [sp, #0]
 8014598:	2300      	movs	r3, #0
 801459a:	930b      	str	r3, [sp, #44]	; 0x2c
 801459c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801459e:	1b5d      	subs	r5, r3, r5
 80145a0:	1e6b      	subs	r3, r5, #1
 80145a2:	9305      	str	r3, [sp, #20]
 80145a4:	bf45      	ittet	mi
 80145a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80145aa:	9304      	strmi	r3, [sp, #16]
 80145ac:	2300      	movpl	r3, #0
 80145ae:	2300      	movmi	r3, #0
 80145b0:	bf4c      	ite	mi
 80145b2:	9305      	strmi	r3, [sp, #20]
 80145b4:	9304      	strpl	r3, [sp, #16]
 80145b6:	9b00      	ldr	r3, [sp, #0]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	db3d      	blt.n	8014638 <_dtoa_r+0x248>
 80145bc:	9b05      	ldr	r3, [sp, #20]
 80145be:	9a00      	ldr	r2, [sp, #0]
 80145c0:	920a      	str	r2, [sp, #40]	; 0x28
 80145c2:	4413      	add	r3, r2
 80145c4:	9305      	str	r3, [sp, #20]
 80145c6:	2300      	movs	r3, #0
 80145c8:	9307      	str	r3, [sp, #28]
 80145ca:	9b06      	ldr	r3, [sp, #24]
 80145cc:	2b09      	cmp	r3, #9
 80145ce:	f200 8089 	bhi.w	80146e4 <_dtoa_r+0x2f4>
 80145d2:	2b05      	cmp	r3, #5
 80145d4:	bfc4      	itt	gt
 80145d6:	3b04      	subgt	r3, #4
 80145d8:	9306      	strgt	r3, [sp, #24]
 80145da:	9b06      	ldr	r3, [sp, #24]
 80145dc:	f1a3 0302 	sub.w	r3, r3, #2
 80145e0:	bfcc      	ite	gt
 80145e2:	2500      	movgt	r5, #0
 80145e4:	2501      	movle	r5, #1
 80145e6:	2b03      	cmp	r3, #3
 80145e8:	f200 8087 	bhi.w	80146fa <_dtoa_r+0x30a>
 80145ec:	e8df f003 	tbb	[pc, r3]
 80145f0:	59383a2d 	.word	0x59383a2d
 80145f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80145f8:	441d      	add	r5, r3
 80145fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80145fe:	2b20      	cmp	r3, #32
 8014600:	bfc1      	itttt	gt
 8014602:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014606:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801460a:	fa0b f303 	lslgt.w	r3, fp, r3
 801460e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014612:	bfda      	itte	le
 8014614:	f1c3 0320 	rsble	r3, r3, #32
 8014618:	fa06 f003 	lslle.w	r0, r6, r3
 801461c:	4318      	orrgt	r0, r3
 801461e:	f7eb ffa1 	bl	8000564 <__aeabi_ui2d>
 8014622:	2301      	movs	r3, #1
 8014624:	4606      	mov	r6, r0
 8014626:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801462a:	3d01      	subs	r5, #1
 801462c:	930e      	str	r3, [sp, #56]	; 0x38
 801462e:	e76a      	b.n	8014506 <_dtoa_r+0x116>
 8014630:	2301      	movs	r3, #1
 8014632:	e7b2      	b.n	801459a <_dtoa_r+0x1aa>
 8014634:	900b      	str	r0, [sp, #44]	; 0x2c
 8014636:	e7b1      	b.n	801459c <_dtoa_r+0x1ac>
 8014638:	9b04      	ldr	r3, [sp, #16]
 801463a:	9a00      	ldr	r2, [sp, #0]
 801463c:	1a9b      	subs	r3, r3, r2
 801463e:	9304      	str	r3, [sp, #16]
 8014640:	4253      	negs	r3, r2
 8014642:	9307      	str	r3, [sp, #28]
 8014644:	2300      	movs	r3, #0
 8014646:	930a      	str	r3, [sp, #40]	; 0x28
 8014648:	e7bf      	b.n	80145ca <_dtoa_r+0x1da>
 801464a:	2300      	movs	r3, #0
 801464c:	9308      	str	r3, [sp, #32]
 801464e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014650:	2b00      	cmp	r3, #0
 8014652:	dc55      	bgt.n	8014700 <_dtoa_r+0x310>
 8014654:	2301      	movs	r3, #1
 8014656:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801465a:	461a      	mov	r2, r3
 801465c:	9209      	str	r2, [sp, #36]	; 0x24
 801465e:	e00c      	b.n	801467a <_dtoa_r+0x28a>
 8014660:	2301      	movs	r3, #1
 8014662:	e7f3      	b.n	801464c <_dtoa_r+0x25c>
 8014664:	2300      	movs	r3, #0
 8014666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014668:	9308      	str	r3, [sp, #32]
 801466a:	9b00      	ldr	r3, [sp, #0]
 801466c:	4413      	add	r3, r2
 801466e:	9302      	str	r3, [sp, #8]
 8014670:	3301      	adds	r3, #1
 8014672:	2b01      	cmp	r3, #1
 8014674:	9303      	str	r3, [sp, #12]
 8014676:	bfb8      	it	lt
 8014678:	2301      	movlt	r3, #1
 801467a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801467c:	2200      	movs	r2, #0
 801467e:	6042      	str	r2, [r0, #4]
 8014680:	2204      	movs	r2, #4
 8014682:	f102 0614 	add.w	r6, r2, #20
 8014686:	429e      	cmp	r6, r3
 8014688:	6841      	ldr	r1, [r0, #4]
 801468a:	d93d      	bls.n	8014708 <_dtoa_r+0x318>
 801468c:	4620      	mov	r0, r4
 801468e:	f001 f853 	bl	8015738 <_Balloc>
 8014692:	9001      	str	r0, [sp, #4]
 8014694:	2800      	cmp	r0, #0
 8014696:	d13b      	bne.n	8014710 <_dtoa_r+0x320>
 8014698:	4b11      	ldr	r3, [pc, #68]	; (80146e0 <_dtoa_r+0x2f0>)
 801469a:	4602      	mov	r2, r0
 801469c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80146a0:	e6c0      	b.n	8014424 <_dtoa_r+0x34>
 80146a2:	2301      	movs	r3, #1
 80146a4:	e7df      	b.n	8014666 <_dtoa_r+0x276>
 80146a6:	bf00      	nop
 80146a8:	636f4361 	.word	0x636f4361
 80146ac:	3fd287a7 	.word	0x3fd287a7
 80146b0:	8b60c8b3 	.word	0x8b60c8b3
 80146b4:	3fc68a28 	.word	0x3fc68a28
 80146b8:	509f79fb 	.word	0x509f79fb
 80146bc:	3fd34413 	.word	0x3fd34413
 80146c0:	08050580 	.word	0x08050580
 80146c4:	0805073e 	.word	0x0805073e
 80146c8:	7ff00000 	.word	0x7ff00000
 80146cc:	0805073a 	.word	0x0805073a
 80146d0:	08050731 	.word	0x08050731
 80146d4:	08050992 	.word	0x08050992
 80146d8:	3ff80000 	.word	0x3ff80000
 80146dc:	080508a8 	.word	0x080508a8
 80146e0:	08050799 	.word	0x08050799
 80146e4:	2501      	movs	r5, #1
 80146e6:	2300      	movs	r3, #0
 80146e8:	9306      	str	r3, [sp, #24]
 80146ea:	9508      	str	r5, [sp, #32]
 80146ec:	f04f 33ff 	mov.w	r3, #4294967295
 80146f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80146f4:	2200      	movs	r2, #0
 80146f6:	2312      	movs	r3, #18
 80146f8:	e7b0      	b.n	801465c <_dtoa_r+0x26c>
 80146fa:	2301      	movs	r3, #1
 80146fc:	9308      	str	r3, [sp, #32]
 80146fe:	e7f5      	b.n	80146ec <_dtoa_r+0x2fc>
 8014700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014702:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014706:	e7b8      	b.n	801467a <_dtoa_r+0x28a>
 8014708:	3101      	adds	r1, #1
 801470a:	6041      	str	r1, [r0, #4]
 801470c:	0052      	lsls	r2, r2, #1
 801470e:	e7b8      	b.n	8014682 <_dtoa_r+0x292>
 8014710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014712:	9a01      	ldr	r2, [sp, #4]
 8014714:	601a      	str	r2, [r3, #0]
 8014716:	9b03      	ldr	r3, [sp, #12]
 8014718:	2b0e      	cmp	r3, #14
 801471a:	f200 809d 	bhi.w	8014858 <_dtoa_r+0x468>
 801471e:	2d00      	cmp	r5, #0
 8014720:	f000 809a 	beq.w	8014858 <_dtoa_r+0x468>
 8014724:	9b00      	ldr	r3, [sp, #0]
 8014726:	2b00      	cmp	r3, #0
 8014728:	dd32      	ble.n	8014790 <_dtoa_r+0x3a0>
 801472a:	4ab7      	ldr	r2, [pc, #732]	; (8014a08 <_dtoa_r+0x618>)
 801472c:	f003 030f 	and.w	r3, r3, #15
 8014730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014738:	9b00      	ldr	r3, [sp, #0]
 801473a:	05d8      	lsls	r0, r3, #23
 801473c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014740:	d516      	bpl.n	8014770 <_dtoa_r+0x380>
 8014742:	4bb2      	ldr	r3, [pc, #712]	; (8014a0c <_dtoa_r+0x61c>)
 8014744:	ec51 0b19 	vmov	r0, r1, d9
 8014748:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801474c:	f7ec f8ae 	bl	80008ac <__aeabi_ddiv>
 8014750:	f007 070f 	and.w	r7, r7, #15
 8014754:	4682      	mov	sl, r0
 8014756:	468b      	mov	fp, r1
 8014758:	2503      	movs	r5, #3
 801475a:	4eac      	ldr	r6, [pc, #688]	; (8014a0c <_dtoa_r+0x61c>)
 801475c:	b957      	cbnz	r7, 8014774 <_dtoa_r+0x384>
 801475e:	4642      	mov	r2, r8
 8014760:	464b      	mov	r3, r9
 8014762:	4650      	mov	r0, sl
 8014764:	4659      	mov	r1, fp
 8014766:	f7ec f8a1 	bl	80008ac <__aeabi_ddiv>
 801476a:	4682      	mov	sl, r0
 801476c:	468b      	mov	fp, r1
 801476e:	e028      	b.n	80147c2 <_dtoa_r+0x3d2>
 8014770:	2502      	movs	r5, #2
 8014772:	e7f2      	b.n	801475a <_dtoa_r+0x36a>
 8014774:	07f9      	lsls	r1, r7, #31
 8014776:	d508      	bpl.n	801478a <_dtoa_r+0x39a>
 8014778:	4640      	mov	r0, r8
 801477a:	4649      	mov	r1, r9
 801477c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014780:	f7eb ff6a 	bl	8000658 <__aeabi_dmul>
 8014784:	3501      	adds	r5, #1
 8014786:	4680      	mov	r8, r0
 8014788:	4689      	mov	r9, r1
 801478a:	107f      	asrs	r7, r7, #1
 801478c:	3608      	adds	r6, #8
 801478e:	e7e5      	b.n	801475c <_dtoa_r+0x36c>
 8014790:	f000 809b 	beq.w	80148ca <_dtoa_r+0x4da>
 8014794:	9b00      	ldr	r3, [sp, #0]
 8014796:	4f9d      	ldr	r7, [pc, #628]	; (8014a0c <_dtoa_r+0x61c>)
 8014798:	425e      	negs	r6, r3
 801479a:	4b9b      	ldr	r3, [pc, #620]	; (8014a08 <_dtoa_r+0x618>)
 801479c:	f006 020f 	and.w	r2, r6, #15
 80147a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a8:	ec51 0b19 	vmov	r0, r1, d9
 80147ac:	f7eb ff54 	bl	8000658 <__aeabi_dmul>
 80147b0:	1136      	asrs	r6, r6, #4
 80147b2:	4682      	mov	sl, r0
 80147b4:	468b      	mov	fp, r1
 80147b6:	2300      	movs	r3, #0
 80147b8:	2502      	movs	r5, #2
 80147ba:	2e00      	cmp	r6, #0
 80147bc:	d17a      	bne.n	80148b4 <_dtoa_r+0x4c4>
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d1d3      	bne.n	801476a <_dtoa_r+0x37a>
 80147c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	f000 8082 	beq.w	80148ce <_dtoa_r+0x4de>
 80147ca:	4b91      	ldr	r3, [pc, #580]	; (8014a10 <_dtoa_r+0x620>)
 80147cc:	2200      	movs	r2, #0
 80147ce:	4650      	mov	r0, sl
 80147d0:	4659      	mov	r1, fp
 80147d2:	f7ec f9b3 	bl	8000b3c <__aeabi_dcmplt>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d079      	beq.n	80148ce <_dtoa_r+0x4de>
 80147da:	9b03      	ldr	r3, [sp, #12]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d076      	beq.n	80148ce <_dtoa_r+0x4de>
 80147e0:	9b02      	ldr	r3, [sp, #8]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	dd36      	ble.n	8014854 <_dtoa_r+0x464>
 80147e6:	9b00      	ldr	r3, [sp, #0]
 80147e8:	4650      	mov	r0, sl
 80147ea:	4659      	mov	r1, fp
 80147ec:	1e5f      	subs	r7, r3, #1
 80147ee:	2200      	movs	r2, #0
 80147f0:	4b88      	ldr	r3, [pc, #544]	; (8014a14 <_dtoa_r+0x624>)
 80147f2:	f7eb ff31 	bl	8000658 <__aeabi_dmul>
 80147f6:	9e02      	ldr	r6, [sp, #8]
 80147f8:	4682      	mov	sl, r0
 80147fa:	468b      	mov	fp, r1
 80147fc:	3501      	adds	r5, #1
 80147fe:	4628      	mov	r0, r5
 8014800:	f7eb fec0 	bl	8000584 <__aeabi_i2d>
 8014804:	4652      	mov	r2, sl
 8014806:	465b      	mov	r3, fp
 8014808:	f7eb ff26 	bl	8000658 <__aeabi_dmul>
 801480c:	4b82      	ldr	r3, [pc, #520]	; (8014a18 <_dtoa_r+0x628>)
 801480e:	2200      	movs	r2, #0
 8014810:	f7eb fd6c 	bl	80002ec <__adddf3>
 8014814:	46d0      	mov	r8, sl
 8014816:	46d9      	mov	r9, fp
 8014818:	4682      	mov	sl, r0
 801481a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801481e:	2e00      	cmp	r6, #0
 8014820:	d158      	bne.n	80148d4 <_dtoa_r+0x4e4>
 8014822:	4b7e      	ldr	r3, [pc, #504]	; (8014a1c <_dtoa_r+0x62c>)
 8014824:	2200      	movs	r2, #0
 8014826:	4640      	mov	r0, r8
 8014828:	4649      	mov	r1, r9
 801482a:	f7eb fd5d 	bl	80002e8 <__aeabi_dsub>
 801482e:	4652      	mov	r2, sl
 8014830:	465b      	mov	r3, fp
 8014832:	4680      	mov	r8, r0
 8014834:	4689      	mov	r9, r1
 8014836:	f7ec f99f 	bl	8000b78 <__aeabi_dcmpgt>
 801483a:	2800      	cmp	r0, #0
 801483c:	f040 8295 	bne.w	8014d6a <_dtoa_r+0x97a>
 8014840:	4652      	mov	r2, sl
 8014842:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014846:	4640      	mov	r0, r8
 8014848:	4649      	mov	r1, r9
 801484a:	f7ec f977 	bl	8000b3c <__aeabi_dcmplt>
 801484e:	2800      	cmp	r0, #0
 8014850:	f040 8289 	bne.w	8014d66 <_dtoa_r+0x976>
 8014854:	ec5b ab19 	vmov	sl, fp, d9
 8014858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801485a:	2b00      	cmp	r3, #0
 801485c:	f2c0 8148 	blt.w	8014af0 <_dtoa_r+0x700>
 8014860:	9a00      	ldr	r2, [sp, #0]
 8014862:	2a0e      	cmp	r2, #14
 8014864:	f300 8144 	bgt.w	8014af0 <_dtoa_r+0x700>
 8014868:	4b67      	ldr	r3, [pc, #412]	; (8014a08 <_dtoa_r+0x618>)
 801486a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801486e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014874:	2b00      	cmp	r3, #0
 8014876:	f280 80d5 	bge.w	8014a24 <_dtoa_r+0x634>
 801487a:	9b03      	ldr	r3, [sp, #12]
 801487c:	2b00      	cmp	r3, #0
 801487e:	f300 80d1 	bgt.w	8014a24 <_dtoa_r+0x634>
 8014882:	f040 826f 	bne.w	8014d64 <_dtoa_r+0x974>
 8014886:	4b65      	ldr	r3, [pc, #404]	; (8014a1c <_dtoa_r+0x62c>)
 8014888:	2200      	movs	r2, #0
 801488a:	4640      	mov	r0, r8
 801488c:	4649      	mov	r1, r9
 801488e:	f7eb fee3 	bl	8000658 <__aeabi_dmul>
 8014892:	4652      	mov	r2, sl
 8014894:	465b      	mov	r3, fp
 8014896:	f7ec f965 	bl	8000b64 <__aeabi_dcmpge>
 801489a:	9e03      	ldr	r6, [sp, #12]
 801489c:	4637      	mov	r7, r6
 801489e:	2800      	cmp	r0, #0
 80148a0:	f040 8245 	bne.w	8014d2e <_dtoa_r+0x93e>
 80148a4:	9d01      	ldr	r5, [sp, #4]
 80148a6:	2331      	movs	r3, #49	; 0x31
 80148a8:	f805 3b01 	strb.w	r3, [r5], #1
 80148ac:	9b00      	ldr	r3, [sp, #0]
 80148ae:	3301      	adds	r3, #1
 80148b0:	9300      	str	r3, [sp, #0]
 80148b2:	e240      	b.n	8014d36 <_dtoa_r+0x946>
 80148b4:	07f2      	lsls	r2, r6, #31
 80148b6:	d505      	bpl.n	80148c4 <_dtoa_r+0x4d4>
 80148b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80148bc:	f7eb fecc 	bl	8000658 <__aeabi_dmul>
 80148c0:	3501      	adds	r5, #1
 80148c2:	2301      	movs	r3, #1
 80148c4:	1076      	asrs	r6, r6, #1
 80148c6:	3708      	adds	r7, #8
 80148c8:	e777      	b.n	80147ba <_dtoa_r+0x3ca>
 80148ca:	2502      	movs	r5, #2
 80148cc:	e779      	b.n	80147c2 <_dtoa_r+0x3d2>
 80148ce:	9f00      	ldr	r7, [sp, #0]
 80148d0:	9e03      	ldr	r6, [sp, #12]
 80148d2:	e794      	b.n	80147fe <_dtoa_r+0x40e>
 80148d4:	9901      	ldr	r1, [sp, #4]
 80148d6:	4b4c      	ldr	r3, [pc, #304]	; (8014a08 <_dtoa_r+0x618>)
 80148d8:	4431      	add	r1, r6
 80148da:	910d      	str	r1, [sp, #52]	; 0x34
 80148dc:	9908      	ldr	r1, [sp, #32]
 80148de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80148e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80148e6:	2900      	cmp	r1, #0
 80148e8:	d043      	beq.n	8014972 <_dtoa_r+0x582>
 80148ea:	494d      	ldr	r1, [pc, #308]	; (8014a20 <_dtoa_r+0x630>)
 80148ec:	2000      	movs	r0, #0
 80148ee:	f7eb ffdd 	bl	80008ac <__aeabi_ddiv>
 80148f2:	4652      	mov	r2, sl
 80148f4:	465b      	mov	r3, fp
 80148f6:	f7eb fcf7 	bl	80002e8 <__aeabi_dsub>
 80148fa:	9d01      	ldr	r5, [sp, #4]
 80148fc:	4682      	mov	sl, r0
 80148fe:	468b      	mov	fp, r1
 8014900:	4649      	mov	r1, r9
 8014902:	4640      	mov	r0, r8
 8014904:	f7ec f958 	bl	8000bb8 <__aeabi_d2iz>
 8014908:	4606      	mov	r6, r0
 801490a:	f7eb fe3b 	bl	8000584 <__aeabi_i2d>
 801490e:	4602      	mov	r2, r0
 8014910:	460b      	mov	r3, r1
 8014912:	4640      	mov	r0, r8
 8014914:	4649      	mov	r1, r9
 8014916:	f7eb fce7 	bl	80002e8 <__aeabi_dsub>
 801491a:	3630      	adds	r6, #48	; 0x30
 801491c:	f805 6b01 	strb.w	r6, [r5], #1
 8014920:	4652      	mov	r2, sl
 8014922:	465b      	mov	r3, fp
 8014924:	4680      	mov	r8, r0
 8014926:	4689      	mov	r9, r1
 8014928:	f7ec f908 	bl	8000b3c <__aeabi_dcmplt>
 801492c:	2800      	cmp	r0, #0
 801492e:	d163      	bne.n	80149f8 <_dtoa_r+0x608>
 8014930:	4642      	mov	r2, r8
 8014932:	464b      	mov	r3, r9
 8014934:	4936      	ldr	r1, [pc, #216]	; (8014a10 <_dtoa_r+0x620>)
 8014936:	2000      	movs	r0, #0
 8014938:	f7eb fcd6 	bl	80002e8 <__aeabi_dsub>
 801493c:	4652      	mov	r2, sl
 801493e:	465b      	mov	r3, fp
 8014940:	f7ec f8fc 	bl	8000b3c <__aeabi_dcmplt>
 8014944:	2800      	cmp	r0, #0
 8014946:	f040 80b5 	bne.w	8014ab4 <_dtoa_r+0x6c4>
 801494a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801494c:	429d      	cmp	r5, r3
 801494e:	d081      	beq.n	8014854 <_dtoa_r+0x464>
 8014950:	4b30      	ldr	r3, [pc, #192]	; (8014a14 <_dtoa_r+0x624>)
 8014952:	2200      	movs	r2, #0
 8014954:	4650      	mov	r0, sl
 8014956:	4659      	mov	r1, fp
 8014958:	f7eb fe7e 	bl	8000658 <__aeabi_dmul>
 801495c:	4b2d      	ldr	r3, [pc, #180]	; (8014a14 <_dtoa_r+0x624>)
 801495e:	4682      	mov	sl, r0
 8014960:	468b      	mov	fp, r1
 8014962:	4640      	mov	r0, r8
 8014964:	4649      	mov	r1, r9
 8014966:	2200      	movs	r2, #0
 8014968:	f7eb fe76 	bl	8000658 <__aeabi_dmul>
 801496c:	4680      	mov	r8, r0
 801496e:	4689      	mov	r9, r1
 8014970:	e7c6      	b.n	8014900 <_dtoa_r+0x510>
 8014972:	4650      	mov	r0, sl
 8014974:	4659      	mov	r1, fp
 8014976:	f7eb fe6f 	bl	8000658 <__aeabi_dmul>
 801497a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801497c:	9d01      	ldr	r5, [sp, #4]
 801497e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014980:	4682      	mov	sl, r0
 8014982:	468b      	mov	fp, r1
 8014984:	4649      	mov	r1, r9
 8014986:	4640      	mov	r0, r8
 8014988:	f7ec f916 	bl	8000bb8 <__aeabi_d2iz>
 801498c:	4606      	mov	r6, r0
 801498e:	f7eb fdf9 	bl	8000584 <__aeabi_i2d>
 8014992:	3630      	adds	r6, #48	; 0x30
 8014994:	4602      	mov	r2, r0
 8014996:	460b      	mov	r3, r1
 8014998:	4640      	mov	r0, r8
 801499a:	4649      	mov	r1, r9
 801499c:	f7eb fca4 	bl	80002e8 <__aeabi_dsub>
 80149a0:	f805 6b01 	strb.w	r6, [r5], #1
 80149a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149a6:	429d      	cmp	r5, r3
 80149a8:	4680      	mov	r8, r0
 80149aa:	4689      	mov	r9, r1
 80149ac:	f04f 0200 	mov.w	r2, #0
 80149b0:	d124      	bne.n	80149fc <_dtoa_r+0x60c>
 80149b2:	4b1b      	ldr	r3, [pc, #108]	; (8014a20 <_dtoa_r+0x630>)
 80149b4:	4650      	mov	r0, sl
 80149b6:	4659      	mov	r1, fp
 80149b8:	f7eb fc98 	bl	80002ec <__adddf3>
 80149bc:	4602      	mov	r2, r0
 80149be:	460b      	mov	r3, r1
 80149c0:	4640      	mov	r0, r8
 80149c2:	4649      	mov	r1, r9
 80149c4:	f7ec f8d8 	bl	8000b78 <__aeabi_dcmpgt>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	d173      	bne.n	8014ab4 <_dtoa_r+0x6c4>
 80149cc:	4652      	mov	r2, sl
 80149ce:	465b      	mov	r3, fp
 80149d0:	4913      	ldr	r1, [pc, #76]	; (8014a20 <_dtoa_r+0x630>)
 80149d2:	2000      	movs	r0, #0
 80149d4:	f7eb fc88 	bl	80002e8 <__aeabi_dsub>
 80149d8:	4602      	mov	r2, r0
 80149da:	460b      	mov	r3, r1
 80149dc:	4640      	mov	r0, r8
 80149de:	4649      	mov	r1, r9
 80149e0:	f7ec f8ac 	bl	8000b3c <__aeabi_dcmplt>
 80149e4:	2800      	cmp	r0, #0
 80149e6:	f43f af35 	beq.w	8014854 <_dtoa_r+0x464>
 80149ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80149ec:	1e6b      	subs	r3, r5, #1
 80149ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80149f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80149f4:	2b30      	cmp	r3, #48	; 0x30
 80149f6:	d0f8      	beq.n	80149ea <_dtoa_r+0x5fa>
 80149f8:	9700      	str	r7, [sp, #0]
 80149fa:	e049      	b.n	8014a90 <_dtoa_r+0x6a0>
 80149fc:	4b05      	ldr	r3, [pc, #20]	; (8014a14 <_dtoa_r+0x624>)
 80149fe:	f7eb fe2b 	bl	8000658 <__aeabi_dmul>
 8014a02:	4680      	mov	r8, r0
 8014a04:	4689      	mov	r9, r1
 8014a06:	e7bd      	b.n	8014984 <_dtoa_r+0x594>
 8014a08:	080508a8 	.word	0x080508a8
 8014a0c:	08050880 	.word	0x08050880
 8014a10:	3ff00000 	.word	0x3ff00000
 8014a14:	40240000 	.word	0x40240000
 8014a18:	401c0000 	.word	0x401c0000
 8014a1c:	40140000 	.word	0x40140000
 8014a20:	3fe00000 	.word	0x3fe00000
 8014a24:	9d01      	ldr	r5, [sp, #4]
 8014a26:	4656      	mov	r6, sl
 8014a28:	465f      	mov	r7, fp
 8014a2a:	4642      	mov	r2, r8
 8014a2c:	464b      	mov	r3, r9
 8014a2e:	4630      	mov	r0, r6
 8014a30:	4639      	mov	r1, r7
 8014a32:	f7eb ff3b 	bl	80008ac <__aeabi_ddiv>
 8014a36:	f7ec f8bf 	bl	8000bb8 <__aeabi_d2iz>
 8014a3a:	4682      	mov	sl, r0
 8014a3c:	f7eb fda2 	bl	8000584 <__aeabi_i2d>
 8014a40:	4642      	mov	r2, r8
 8014a42:	464b      	mov	r3, r9
 8014a44:	f7eb fe08 	bl	8000658 <__aeabi_dmul>
 8014a48:	4602      	mov	r2, r0
 8014a4a:	460b      	mov	r3, r1
 8014a4c:	4630      	mov	r0, r6
 8014a4e:	4639      	mov	r1, r7
 8014a50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014a54:	f7eb fc48 	bl	80002e8 <__aeabi_dsub>
 8014a58:	f805 6b01 	strb.w	r6, [r5], #1
 8014a5c:	9e01      	ldr	r6, [sp, #4]
 8014a5e:	9f03      	ldr	r7, [sp, #12]
 8014a60:	1bae      	subs	r6, r5, r6
 8014a62:	42b7      	cmp	r7, r6
 8014a64:	4602      	mov	r2, r0
 8014a66:	460b      	mov	r3, r1
 8014a68:	d135      	bne.n	8014ad6 <_dtoa_r+0x6e6>
 8014a6a:	f7eb fc3f 	bl	80002ec <__adddf3>
 8014a6e:	4642      	mov	r2, r8
 8014a70:	464b      	mov	r3, r9
 8014a72:	4606      	mov	r6, r0
 8014a74:	460f      	mov	r7, r1
 8014a76:	f7ec f87f 	bl	8000b78 <__aeabi_dcmpgt>
 8014a7a:	b9d0      	cbnz	r0, 8014ab2 <_dtoa_r+0x6c2>
 8014a7c:	4642      	mov	r2, r8
 8014a7e:	464b      	mov	r3, r9
 8014a80:	4630      	mov	r0, r6
 8014a82:	4639      	mov	r1, r7
 8014a84:	f7ec f850 	bl	8000b28 <__aeabi_dcmpeq>
 8014a88:	b110      	cbz	r0, 8014a90 <_dtoa_r+0x6a0>
 8014a8a:	f01a 0f01 	tst.w	sl, #1
 8014a8e:	d110      	bne.n	8014ab2 <_dtoa_r+0x6c2>
 8014a90:	4620      	mov	r0, r4
 8014a92:	ee18 1a10 	vmov	r1, s16
 8014a96:	f000 fe8f 	bl	80157b8 <_Bfree>
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	9800      	ldr	r0, [sp, #0]
 8014a9e:	702b      	strb	r3, [r5, #0]
 8014aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aa2:	3001      	adds	r0, #1
 8014aa4:	6018      	str	r0, [r3, #0]
 8014aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	f43f acf1 	beq.w	8014490 <_dtoa_r+0xa0>
 8014aae:	601d      	str	r5, [r3, #0]
 8014ab0:	e4ee      	b.n	8014490 <_dtoa_r+0xa0>
 8014ab2:	9f00      	ldr	r7, [sp, #0]
 8014ab4:	462b      	mov	r3, r5
 8014ab6:	461d      	mov	r5, r3
 8014ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014abc:	2a39      	cmp	r2, #57	; 0x39
 8014abe:	d106      	bne.n	8014ace <_dtoa_r+0x6de>
 8014ac0:	9a01      	ldr	r2, [sp, #4]
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d1f7      	bne.n	8014ab6 <_dtoa_r+0x6c6>
 8014ac6:	9901      	ldr	r1, [sp, #4]
 8014ac8:	2230      	movs	r2, #48	; 0x30
 8014aca:	3701      	adds	r7, #1
 8014acc:	700a      	strb	r2, [r1, #0]
 8014ace:	781a      	ldrb	r2, [r3, #0]
 8014ad0:	3201      	adds	r2, #1
 8014ad2:	701a      	strb	r2, [r3, #0]
 8014ad4:	e790      	b.n	80149f8 <_dtoa_r+0x608>
 8014ad6:	4ba6      	ldr	r3, [pc, #664]	; (8014d70 <_dtoa_r+0x980>)
 8014ad8:	2200      	movs	r2, #0
 8014ada:	f7eb fdbd 	bl	8000658 <__aeabi_dmul>
 8014ade:	2200      	movs	r2, #0
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	4606      	mov	r6, r0
 8014ae4:	460f      	mov	r7, r1
 8014ae6:	f7ec f81f 	bl	8000b28 <__aeabi_dcmpeq>
 8014aea:	2800      	cmp	r0, #0
 8014aec:	d09d      	beq.n	8014a2a <_dtoa_r+0x63a>
 8014aee:	e7cf      	b.n	8014a90 <_dtoa_r+0x6a0>
 8014af0:	9a08      	ldr	r2, [sp, #32]
 8014af2:	2a00      	cmp	r2, #0
 8014af4:	f000 80d7 	beq.w	8014ca6 <_dtoa_r+0x8b6>
 8014af8:	9a06      	ldr	r2, [sp, #24]
 8014afa:	2a01      	cmp	r2, #1
 8014afc:	f300 80ba 	bgt.w	8014c74 <_dtoa_r+0x884>
 8014b00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b02:	2a00      	cmp	r2, #0
 8014b04:	f000 80b2 	beq.w	8014c6c <_dtoa_r+0x87c>
 8014b08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014b0c:	9e07      	ldr	r6, [sp, #28]
 8014b0e:	9d04      	ldr	r5, [sp, #16]
 8014b10:	9a04      	ldr	r2, [sp, #16]
 8014b12:	441a      	add	r2, r3
 8014b14:	9204      	str	r2, [sp, #16]
 8014b16:	9a05      	ldr	r2, [sp, #20]
 8014b18:	2101      	movs	r1, #1
 8014b1a:	441a      	add	r2, r3
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	9205      	str	r2, [sp, #20]
 8014b20:	f000 ff4c 	bl	80159bc <__i2b>
 8014b24:	4607      	mov	r7, r0
 8014b26:	2d00      	cmp	r5, #0
 8014b28:	dd0c      	ble.n	8014b44 <_dtoa_r+0x754>
 8014b2a:	9b05      	ldr	r3, [sp, #20]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	dd09      	ble.n	8014b44 <_dtoa_r+0x754>
 8014b30:	42ab      	cmp	r3, r5
 8014b32:	9a04      	ldr	r2, [sp, #16]
 8014b34:	bfa8      	it	ge
 8014b36:	462b      	movge	r3, r5
 8014b38:	1ad2      	subs	r2, r2, r3
 8014b3a:	9204      	str	r2, [sp, #16]
 8014b3c:	9a05      	ldr	r2, [sp, #20]
 8014b3e:	1aed      	subs	r5, r5, r3
 8014b40:	1ad3      	subs	r3, r2, r3
 8014b42:	9305      	str	r3, [sp, #20]
 8014b44:	9b07      	ldr	r3, [sp, #28]
 8014b46:	b31b      	cbz	r3, 8014b90 <_dtoa_r+0x7a0>
 8014b48:	9b08      	ldr	r3, [sp, #32]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	f000 80af 	beq.w	8014cae <_dtoa_r+0x8be>
 8014b50:	2e00      	cmp	r6, #0
 8014b52:	dd13      	ble.n	8014b7c <_dtoa_r+0x78c>
 8014b54:	4639      	mov	r1, r7
 8014b56:	4632      	mov	r2, r6
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f000 ffef 	bl	8015b3c <__pow5mult>
 8014b5e:	ee18 2a10 	vmov	r2, s16
 8014b62:	4601      	mov	r1, r0
 8014b64:	4607      	mov	r7, r0
 8014b66:	4620      	mov	r0, r4
 8014b68:	f000 ff3e 	bl	80159e8 <__multiply>
 8014b6c:	ee18 1a10 	vmov	r1, s16
 8014b70:	4680      	mov	r8, r0
 8014b72:	4620      	mov	r0, r4
 8014b74:	f000 fe20 	bl	80157b8 <_Bfree>
 8014b78:	ee08 8a10 	vmov	s16, r8
 8014b7c:	9b07      	ldr	r3, [sp, #28]
 8014b7e:	1b9a      	subs	r2, r3, r6
 8014b80:	d006      	beq.n	8014b90 <_dtoa_r+0x7a0>
 8014b82:	ee18 1a10 	vmov	r1, s16
 8014b86:	4620      	mov	r0, r4
 8014b88:	f000 ffd8 	bl	8015b3c <__pow5mult>
 8014b8c:	ee08 0a10 	vmov	s16, r0
 8014b90:	2101      	movs	r1, #1
 8014b92:	4620      	mov	r0, r4
 8014b94:	f000 ff12 	bl	80159bc <__i2b>
 8014b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	4606      	mov	r6, r0
 8014b9e:	f340 8088 	ble.w	8014cb2 <_dtoa_r+0x8c2>
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	4601      	mov	r1, r0
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f000 ffc8 	bl	8015b3c <__pow5mult>
 8014bac:	9b06      	ldr	r3, [sp, #24]
 8014bae:	2b01      	cmp	r3, #1
 8014bb0:	4606      	mov	r6, r0
 8014bb2:	f340 8081 	ble.w	8014cb8 <_dtoa_r+0x8c8>
 8014bb6:	f04f 0800 	mov.w	r8, #0
 8014bba:	6933      	ldr	r3, [r6, #16]
 8014bbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014bc0:	6918      	ldr	r0, [r3, #16]
 8014bc2:	f000 feab 	bl	801591c <__hi0bits>
 8014bc6:	f1c0 0020 	rsb	r0, r0, #32
 8014bca:	9b05      	ldr	r3, [sp, #20]
 8014bcc:	4418      	add	r0, r3
 8014bce:	f010 001f 	ands.w	r0, r0, #31
 8014bd2:	f000 8092 	beq.w	8014cfa <_dtoa_r+0x90a>
 8014bd6:	f1c0 0320 	rsb	r3, r0, #32
 8014bda:	2b04      	cmp	r3, #4
 8014bdc:	f340 808a 	ble.w	8014cf4 <_dtoa_r+0x904>
 8014be0:	f1c0 001c 	rsb	r0, r0, #28
 8014be4:	9b04      	ldr	r3, [sp, #16]
 8014be6:	4403      	add	r3, r0
 8014be8:	9304      	str	r3, [sp, #16]
 8014bea:	9b05      	ldr	r3, [sp, #20]
 8014bec:	4403      	add	r3, r0
 8014bee:	4405      	add	r5, r0
 8014bf0:	9305      	str	r3, [sp, #20]
 8014bf2:	9b04      	ldr	r3, [sp, #16]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	dd07      	ble.n	8014c08 <_dtoa_r+0x818>
 8014bf8:	ee18 1a10 	vmov	r1, s16
 8014bfc:	461a      	mov	r2, r3
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f000 fff6 	bl	8015bf0 <__lshift>
 8014c04:	ee08 0a10 	vmov	s16, r0
 8014c08:	9b05      	ldr	r3, [sp, #20]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	dd05      	ble.n	8014c1a <_dtoa_r+0x82a>
 8014c0e:	4631      	mov	r1, r6
 8014c10:	461a      	mov	r2, r3
 8014c12:	4620      	mov	r0, r4
 8014c14:	f000 ffec 	bl	8015bf0 <__lshift>
 8014c18:	4606      	mov	r6, r0
 8014c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d06e      	beq.n	8014cfe <_dtoa_r+0x90e>
 8014c20:	ee18 0a10 	vmov	r0, s16
 8014c24:	4631      	mov	r1, r6
 8014c26:	f001 f853 	bl	8015cd0 <__mcmp>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	da67      	bge.n	8014cfe <_dtoa_r+0x90e>
 8014c2e:	9b00      	ldr	r3, [sp, #0]
 8014c30:	3b01      	subs	r3, #1
 8014c32:	ee18 1a10 	vmov	r1, s16
 8014c36:	9300      	str	r3, [sp, #0]
 8014c38:	220a      	movs	r2, #10
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	f000 fddd 	bl	80157fc <__multadd>
 8014c42:	9b08      	ldr	r3, [sp, #32]
 8014c44:	ee08 0a10 	vmov	s16, r0
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	f000 81b1 	beq.w	8014fb0 <_dtoa_r+0xbc0>
 8014c4e:	2300      	movs	r3, #0
 8014c50:	4639      	mov	r1, r7
 8014c52:	220a      	movs	r2, #10
 8014c54:	4620      	mov	r0, r4
 8014c56:	f000 fdd1 	bl	80157fc <__multadd>
 8014c5a:	9b02      	ldr	r3, [sp, #8]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	4607      	mov	r7, r0
 8014c60:	f300 808e 	bgt.w	8014d80 <_dtoa_r+0x990>
 8014c64:	9b06      	ldr	r3, [sp, #24]
 8014c66:	2b02      	cmp	r3, #2
 8014c68:	dc51      	bgt.n	8014d0e <_dtoa_r+0x91e>
 8014c6a:	e089      	b.n	8014d80 <_dtoa_r+0x990>
 8014c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014c72:	e74b      	b.n	8014b0c <_dtoa_r+0x71c>
 8014c74:	9b03      	ldr	r3, [sp, #12]
 8014c76:	1e5e      	subs	r6, r3, #1
 8014c78:	9b07      	ldr	r3, [sp, #28]
 8014c7a:	42b3      	cmp	r3, r6
 8014c7c:	bfbf      	itttt	lt
 8014c7e:	9b07      	ldrlt	r3, [sp, #28]
 8014c80:	9607      	strlt	r6, [sp, #28]
 8014c82:	1af2      	sublt	r2, r6, r3
 8014c84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014c86:	bfb6      	itet	lt
 8014c88:	189b      	addlt	r3, r3, r2
 8014c8a:	1b9e      	subge	r6, r3, r6
 8014c8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014c8e:	9b03      	ldr	r3, [sp, #12]
 8014c90:	bfb8      	it	lt
 8014c92:	2600      	movlt	r6, #0
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	bfb7      	itett	lt
 8014c98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014c9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014ca0:	1a9d      	sublt	r5, r3, r2
 8014ca2:	2300      	movlt	r3, #0
 8014ca4:	e734      	b.n	8014b10 <_dtoa_r+0x720>
 8014ca6:	9e07      	ldr	r6, [sp, #28]
 8014ca8:	9d04      	ldr	r5, [sp, #16]
 8014caa:	9f08      	ldr	r7, [sp, #32]
 8014cac:	e73b      	b.n	8014b26 <_dtoa_r+0x736>
 8014cae:	9a07      	ldr	r2, [sp, #28]
 8014cb0:	e767      	b.n	8014b82 <_dtoa_r+0x792>
 8014cb2:	9b06      	ldr	r3, [sp, #24]
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	dc18      	bgt.n	8014cea <_dtoa_r+0x8fa>
 8014cb8:	f1ba 0f00 	cmp.w	sl, #0
 8014cbc:	d115      	bne.n	8014cea <_dtoa_r+0x8fa>
 8014cbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014cc2:	b993      	cbnz	r3, 8014cea <_dtoa_r+0x8fa>
 8014cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014cc8:	0d1b      	lsrs	r3, r3, #20
 8014cca:	051b      	lsls	r3, r3, #20
 8014ccc:	b183      	cbz	r3, 8014cf0 <_dtoa_r+0x900>
 8014cce:	9b04      	ldr	r3, [sp, #16]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	9304      	str	r3, [sp, #16]
 8014cd4:	9b05      	ldr	r3, [sp, #20]
 8014cd6:	3301      	adds	r3, #1
 8014cd8:	9305      	str	r3, [sp, #20]
 8014cda:	f04f 0801 	mov.w	r8, #1
 8014cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	f47f af6a 	bne.w	8014bba <_dtoa_r+0x7ca>
 8014ce6:	2001      	movs	r0, #1
 8014ce8:	e76f      	b.n	8014bca <_dtoa_r+0x7da>
 8014cea:	f04f 0800 	mov.w	r8, #0
 8014cee:	e7f6      	b.n	8014cde <_dtoa_r+0x8ee>
 8014cf0:	4698      	mov	r8, r3
 8014cf2:	e7f4      	b.n	8014cde <_dtoa_r+0x8ee>
 8014cf4:	f43f af7d 	beq.w	8014bf2 <_dtoa_r+0x802>
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	301c      	adds	r0, #28
 8014cfc:	e772      	b.n	8014be4 <_dtoa_r+0x7f4>
 8014cfe:	9b03      	ldr	r3, [sp, #12]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	dc37      	bgt.n	8014d74 <_dtoa_r+0x984>
 8014d04:	9b06      	ldr	r3, [sp, #24]
 8014d06:	2b02      	cmp	r3, #2
 8014d08:	dd34      	ble.n	8014d74 <_dtoa_r+0x984>
 8014d0a:	9b03      	ldr	r3, [sp, #12]
 8014d0c:	9302      	str	r3, [sp, #8]
 8014d0e:	9b02      	ldr	r3, [sp, #8]
 8014d10:	b96b      	cbnz	r3, 8014d2e <_dtoa_r+0x93e>
 8014d12:	4631      	mov	r1, r6
 8014d14:	2205      	movs	r2, #5
 8014d16:	4620      	mov	r0, r4
 8014d18:	f000 fd70 	bl	80157fc <__multadd>
 8014d1c:	4601      	mov	r1, r0
 8014d1e:	4606      	mov	r6, r0
 8014d20:	ee18 0a10 	vmov	r0, s16
 8014d24:	f000 ffd4 	bl	8015cd0 <__mcmp>
 8014d28:	2800      	cmp	r0, #0
 8014d2a:	f73f adbb 	bgt.w	80148a4 <_dtoa_r+0x4b4>
 8014d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d30:	9d01      	ldr	r5, [sp, #4]
 8014d32:	43db      	mvns	r3, r3
 8014d34:	9300      	str	r3, [sp, #0]
 8014d36:	f04f 0800 	mov.w	r8, #0
 8014d3a:	4631      	mov	r1, r6
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	f000 fd3b 	bl	80157b8 <_Bfree>
 8014d42:	2f00      	cmp	r7, #0
 8014d44:	f43f aea4 	beq.w	8014a90 <_dtoa_r+0x6a0>
 8014d48:	f1b8 0f00 	cmp.w	r8, #0
 8014d4c:	d005      	beq.n	8014d5a <_dtoa_r+0x96a>
 8014d4e:	45b8      	cmp	r8, r7
 8014d50:	d003      	beq.n	8014d5a <_dtoa_r+0x96a>
 8014d52:	4641      	mov	r1, r8
 8014d54:	4620      	mov	r0, r4
 8014d56:	f000 fd2f 	bl	80157b8 <_Bfree>
 8014d5a:	4639      	mov	r1, r7
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f000 fd2b 	bl	80157b8 <_Bfree>
 8014d62:	e695      	b.n	8014a90 <_dtoa_r+0x6a0>
 8014d64:	2600      	movs	r6, #0
 8014d66:	4637      	mov	r7, r6
 8014d68:	e7e1      	b.n	8014d2e <_dtoa_r+0x93e>
 8014d6a:	9700      	str	r7, [sp, #0]
 8014d6c:	4637      	mov	r7, r6
 8014d6e:	e599      	b.n	80148a4 <_dtoa_r+0x4b4>
 8014d70:	40240000 	.word	0x40240000
 8014d74:	9b08      	ldr	r3, [sp, #32]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	f000 80ca 	beq.w	8014f10 <_dtoa_r+0xb20>
 8014d7c:	9b03      	ldr	r3, [sp, #12]
 8014d7e:	9302      	str	r3, [sp, #8]
 8014d80:	2d00      	cmp	r5, #0
 8014d82:	dd05      	ble.n	8014d90 <_dtoa_r+0x9a0>
 8014d84:	4639      	mov	r1, r7
 8014d86:	462a      	mov	r2, r5
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f000 ff31 	bl	8015bf0 <__lshift>
 8014d8e:	4607      	mov	r7, r0
 8014d90:	f1b8 0f00 	cmp.w	r8, #0
 8014d94:	d05b      	beq.n	8014e4e <_dtoa_r+0xa5e>
 8014d96:	6879      	ldr	r1, [r7, #4]
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f000 fccd 	bl	8015738 <_Balloc>
 8014d9e:	4605      	mov	r5, r0
 8014da0:	b928      	cbnz	r0, 8014dae <_dtoa_r+0x9be>
 8014da2:	4b87      	ldr	r3, [pc, #540]	; (8014fc0 <_dtoa_r+0xbd0>)
 8014da4:	4602      	mov	r2, r0
 8014da6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014daa:	f7ff bb3b 	b.w	8014424 <_dtoa_r+0x34>
 8014dae:	693a      	ldr	r2, [r7, #16]
 8014db0:	3202      	adds	r2, #2
 8014db2:	0092      	lsls	r2, r2, #2
 8014db4:	f107 010c 	add.w	r1, r7, #12
 8014db8:	300c      	adds	r0, #12
 8014dba:	f7fd fb25 	bl	8012408 <memcpy>
 8014dbe:	2201      	movs	r2, #1
 8014dc0:	4629      	mov	r1, r5
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f000 ff14 	bl	8015bf0 <__lshift>
 8014dc8:	9b01      	ldr	r3, [sp, #4]
 8014dca:	f103 0901 	add.w	r9, r3, #1
 8014dce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	9305      	str	r3, [sp, #20]
 8014dd6:	f00a 0301 	and.w	r3, sl, #1
 8014dda:	46b8      	mov	r8, r7
 8014ddc:	9304      	str	r3, [sp, #16]
 8014dde:	4607      	mov	r7, r0
 8014de0:	4631      	mov	r1, r6
 8014de2:	ee18 0a10 	vmov	r0, s16
 8014de6:	f7ff fa77 	bl	80142d8 <quorem>
 8014dea:	4641      	mov	r1, r8
 8014dec:	9002      	str	r0, [sp, #8]
 8014dee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014df2:	ee18 0a10 	vmov	r0, s16
 8014df6:	f000 ff6b 	bl	8015cd0 <__mcmp>
 8014dfa:	463a      	mov	r2, r7
 8014dfc:	9003      	str	r0, [sp, #12]
 8014dfe:	4631      	mov	r1, r6
 8014e00:	4620      	mov	r0, r4
 8014e02:	f000 ff81 	bl	8015d08 <__mdiff>
 8014e06:	68c2      	ldr	r2, [r0, #12]
 8014e08:	f109 3bff 	add.w	fp, r9, #4294967295
 8014e0c:	4605      	mov	r5, r0
 8014e0e:	bb02      	cbnz	r2, 8014e52 <_dtoa_r+0xa62>
 8014e10:	4601      	mov	r1, r0
 8014e12:	ee18 0a10 	vmov	r0, s16
 8014e16:	f000 ff5b 	bl	8015cd0 <__mcmp>
 8014e1a:	4602      	mov	r2, r0
 8014e1c:	4629      	mov	r1, r5
 8014e1e:	4620      	mov	r0, r4
 8014e20:	9207      	str	r2, [sp, #28]
 8014e22:	f000 fcc9 	bl	80157b8 <_Bfree>
 8014e26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014e2a:	ea43 0102 	orr.w	r1, r3, r2
 8014e2e:	9b04      	ldr	r3, [sp, #16]
 8014e30:	430b      	orrs	r3, r1
 8014e32:	464d      	mov	r5, r9
 8014e34:	d10f      	bne.n	8014e56 <_dtoa_r+0xa66>
 8014e36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014e3a:	d02a      	beq.n	8014e92 <_dtoa_r+0xaa2>
 8014e3c:	9b03      	ldr	r3, [sp, #12]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	dd02      	ble.n	8014e48 <_dtoa_r+0xa58>
 8014e42:	9b02      	ldr	r3, [sp, #8]
 8014e44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014e48:	f88b a000 	strb.w	sl, [fp]
 8014e4c:	e775      	b.n	8014d3a <_dtoa_r+0x94a>
 8014e4e:	4638      	mov	r0, r7
 8014e50:	e7ba      	b.n	8014dc8 <_dtoa_r+0x9d8>
 8014e52:	2201      	movs	r2, #1
 8014e54:	e7e2      	b.n	8014e1c <_dtoa_r+0xa2c>
 8014e56:	9b03      	ldr	r3, [sp, #12]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	db04      	blt.n	8014e66 <_dtoa_r+0xa76>
 8014e5c:	9906      	ldr	r1, [sp, #24]
 8014e5e:	430b      	orrs	r3, r1
 8014e60:	9904      	ldr	r1, [sp, #16]
 8014e62:	430b      	orrs	r3, r1
 8014e64:	d122      	bne.n	8014eac <_dtoa_r+0xabc>
 8014e66:	2a00      	cmp	r2, #0
 8014e68:	ddee      	ble.n	8014e48 <_dtoa_r+0xa58>
 8014e6a:	ee18 1a10 	vmov	r1, s16
 8014e6e:	2201      	movs	r2, #1
 8014e70:	4620      	mov	r0, r4
 8014e72:	f000 febd 	bl	8015bf0 <__lshift>
 8014e76:	4631      	mov	r1, r6
 8014e78:	ee08 0a10 	vmov	s16, r0
 8014e7c:	f000 ff28 	bl	8015cd0 <__mcmp>
 8014e80:	2800      	cmp	r0, #0
 8014e82:	dc03      	bgt.n	8014e8c <_dtoa_r+0xa9c>
 8014e84:	d1e0      	bne.n	8014e48 <_dtoa_r+0xa58>
 8014e86:	f01a 0f01 	tst.w	sl, #1
 8014e8a:	d0dd      	beq.n	8014e48 <_dtoa_r+0xa58>
 8014e8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014e90:	d1d7      	bne.n	8014e42 <_dtoa_r+0xa52>
 8014e92:	2339      	movs	r3, #57	; 0x39
 8014e94:	f88b 3000 	strb.w	r3, [fp]
 8014e98:	462b      	mov	r3, r5
 8014e9a:	461d      	mov	r5, r3
 8014e9c:	3b01      	subs	r3, #1
 8014e9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014ea2:	2a39      	cmp	r2, #57	; 0x39
 8014ea4:	d071      	beq.n	8014f8a <_dtoa_r+0xb9a>
 8014ea6:	3201      	adds	r2, #1
 8014ea8:	701a      	strb	r2, [r3, #0]
 8014eaa:	e746      	b.n	8014d3a <_dtoa_r+0x94a>
 8014eac:	2a00      	cmp	r2, #0
 8014eae:	dd07      	ble.n	8014ec0 <_dtoa_r+0xad0>
 8014eb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014eb4:	d0ed      	beq.n	8014e92 <_dtoa_r+0xaa2>
 8014eb6:	f10a 0301 	add.w	r3, sl, #1
 8014eba:	f88b 3000 	strb.w	r3, [fp]
 8014ebe:	e73c      	b.n	8014d3a <_dtoa_r+0x94a>
 8014ec0:	9b05      	ldr	r3, [sp, #20]
 8014ec2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014ec6:	4599      	cmp	r9, r3
 8014ec8:	d047      	beq.n	8014f5a <_dtoa_r+0xb6a>
 8014eca:	ee18 1a10 	vmov	r1, s16
 8014ece:	2300      	movs	r3, #0
 8014ed0:	220a      	movs	r2, #10
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f000 fc92 	bl	80157fc <__multadd>
 8014ed8:	45b8      	cmp	r8, r7
 8014eda:	ee08 0a10 	vmov	s16, r0
 8014ede:	f04f 0300 	mov.w	r3, #0
 8014ee2:	f04f 020a 	mov.w	r2, #10
 8014ee6:	4641      	mov	r1, r8
 8014ee8:	4620      	mov	r0, r4
 8014eea:	d106      	bne.n	8014efa <_dtoa_r+0xb0a>
 8014eec:	f000 fc86 	bl	80157fc <__multadd>
 8014ef0:	4680      	mov	r8, r0
 8014ef2:	4607      	mov	r7, r0
 8014ef4:	f109 0901 	add.w	r9, r9, #1
 8014ef8:	e772      	b.n	8014de0 <_dtoa_r+0x9f0>
 8014efa:	f000 fc7f 	bl	80157fc <__multadd>
 8014efe:	4639      	mov	r1, r7
 8014f00:	4680      	mov	r8, r0
 8014f02:	2300      	movs	r3, #0
 8014f04:	220a      	movs	r2, #10
 8014f06:	4620      	mov	r0, r4
 8014f08:	f000 fc78 	bl	80157fc <__multadd>
 8014f0c:	4607      	mov	r7, r0
 8014f0e:	e7f1      	b.n	8014ef4 <_dtoa_r+0xb04>
 8014f10:	9b03      	ldr	r3, [sp, #12]
 8014f12:	9302      	str	r3, [sp, #8]
 8014f14:	9d01      	ldr	r5, [sp, #4]
 8014f16:	ee18 0a10 	vmov	r0, s16
 8014f1a:	4631      	mov	r1, r6
 8014f1c:	f7ff f9dc 	bl	80142d8 <quorem>
 8014f20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014f24:	9b01      	ldr	r3, [sp, #4]
 8014f26:	f805 ab01 	strb.w	sl, [r5], #1
 8014f2a:	1aea      	subs	r2, r5, r3
 8014f2c:	9b02      	ldr	r3, [sp, #8]
 8014f2e:	4293      	cmp	r3, r2
 8014f30:	dd09      	ble.n	8014f46 <_dtoa_r+0xb56>
 8014f32:	ee18 1a10 	vmov	r1, s16
 8014f36:	2300      	movs	r3, #0
 8014f38:	220a      	movs	r2, #10
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	f000 fc5e 	bl	80157fc <__multadd>
 8014f40:	ee08 0a10 	vmov	s16, r0
 8014f44:	e7e7      	b.n	8014f16 <_dtoa_r+0xb26>
 8014f46:	9b02      	ldr	r3, [sp, #8]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	bfc8      	it	gt
 8014f4c:	461d      	movgt	r5, r3
 8014f4e:	9b01      	ldr	r3, [sp, #4]
 8014f50:	bfd8      	it	le
 8014f52:	2501      	movle	r5, #1
 8014f54:	441d      	add	r5, r3
 8014f56:	f04f 0800 	mov.w	r8, #0
 8014f5a:	ee18 1a10 	vmov	r1, s16
 8014f5e:	2201      	movs	r2, #1
 8014f60:	4620      	mov	r0, r4
 8014f62:	f000 fe45 	bl	8015bf0 <__lshift>
 8014f66:	4631      	mov	r1, r6
 8014f68:	ee08 0a10 	vmov	s16, r0
 8014f6c:	f000 feb0 	bl	8015cd0 <__mcmp>
 8014f70:	2800      	cmp	r0, #0
 8014f72:	dc91      	bgt.n	8014e98 <_dtoa_r+0xaa8>
 8014f74:	d102      	bne.n	8014f7c <_dtoa_r+0xb8c>
 8014f76:	f01a 0f01 	tst.w	sl, #1
 8014f7a:	d18d      	bne.n	8014e98 <_dtoa_r+0xaa8>
 8014f7c:	462b      	mov	r3, r5
 8014f7e:	461d      	mov	r5, r3
 8014f80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f84:	2a30      	cmp	r2, #48	; 0x30
 8014f86:	d0fa      	beq.n	8014f7e <_dtoa_r+0xb8e>
 8014f88:	e6d7      	b.n	8014d3a <_dtoa_r+0x94a>
 8014f8a:	9a01      	ldr	r2, [sp, #4]
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d184      	bne.n	8014e9a <_dtoa_r+0xaaa>
 8014f90:	9b00      	ldr	r3, [sp, #0]
 8014f92:	3301      	adds	r3, #1
 8014f94:	9300      	str	r3, [sp, #0]
 8014f96:	2331      	movs	r3, #49	; 0x31
 8014f98:	7013      	strb	r3, [r2, #0]
 8014f9a:	e6ce      	b.n	8014d3a <_dtoa_r+0x94a>
 8014f9c:	4b09      	ldr	r3, [pc, #36]	; (8014fc4 <_dtoa_r+0xbd4>)
 8014f9e:	f7ff ba95 	b.w	80144cc <_dtoa_r+0xdc>
 8014fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	f47f aa6e 	bne.w	8014486 <_dtoa_r+0x96>
 8014faa:	4b07      	ldr	r3, [pc, #28]	; (8014fc8 <_dtoa_r+0xbd8>)
 8014fac:	f7ff ba8e 	b.w	80144cc <_dtoa_r+0xdc>
 8014fb0:	9b02      	ldr	r3, [sp, #8]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	dcae      	bgt.n	8014f14 <_dtoa_r+0xb24>
 8014fb6:	9b06      	ldr	r3, [sp, #24]
 8014fb8:	2b02      	cmp	r3, #2
 8014fba:	f73f aea8 	bgt.w	8014d0e <_dtoa_r+0x91e>
 8014fbe:	e7a9      	b.n	8014f14 <_dtoa_r+0xb24>
 8014fc0:	08050799 	.word	0x08050799
 8014fc4:	08050991 	.word	0x08050991
 8014fc8:	08050731 	.word	0x08050731

08014fcc <fiprintf>:
 8014fcc:	b40e      	push	{r1, r2, r3}
 8014fce:	b503      	push	{r0, r1, lr}
 8014fd0:	4601      	mov	r1, r0
 8014fd2:	ab03      	add	r3, sp, #12
 8014fd4:	4805      	ldr	r0, [pc, #20]	; (8014fec <fiprintf+0x20>)
 8014fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fda:	6800      	ldr	r0, [r0, #0]
 8014fdc:	9301      	str	r3, [sp, #4]
 8014fde:	f001 fc09 	bl	80167f4 <_vfiprintf_r>
 8014fe2:	b002      	add	sp, #8
 8014fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fe8:	b003      	add	sp, #12
 8014fea:	4770      	bx	lr
 8014fec:	200013a4 	.word	0x200013a4

08014ff0 <rshift>:
 8014ff0:	6903      	ldr	r3, [r0, #16]
 8014ff2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014ff6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ffa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014ffe:	f100 0414 	add.w	r4, r0, #20
 8015002:	dd45      	ble.n	8015090 <rshift+0xa0>
 8015004:	f011 011f 	ands.w	r1, r1, #31
 8015008:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801500c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015010:	d10c      	bne.n	801502c <rshift+0x3c>
 8015012:	f100 0710 	add.w	r7, r0, #16
 8015016:	4629      	mov	r1, r5
 8015018:	42b1      	cmp	r1, r6
 801501a:	d334      	bcc.n	8015086 <rshift+0x96>
 801501c:	1a9b      	subs	r3, r3, r2
 801501e:	009b      	lsls	r3, r3, #2
 8015020:	1eea      	subs	r2, r5, #3
 8015022:	4296      	cmp	r6, r2
 8015024:	bf38      	it	cc
 8015026:	2300      	movcc	r3, #0
 8015028:	4423      	add	r3, r4
 801502a:	e015      	b.n	8015058 <rshift+0x68>
 801502c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015030:	f1c1 0820 	rsb	r8, r1, #32
 8015034:	40cf      	lsrs	r7, r1
 8015036:	f105 0e04 	add.w	lr, r5, #4
 801503a:	46a1      	mov	r9, r4
 801503c:	4576      	cmp	r6, lr
 801503e:	46f4      	mov	ip, lr
 8015040:	d815      	bhi.n	801506e <rshift+0x7e>
 8015042:	1a9a      	subs	r2, r3, r2
 8015044:	0092      	lsls	r2, r2, #2
 8015046:	3a04      	subs	r2, #4
 8015048:	3501      	adds	r5, #1
 801504a:	42ae      	cmp	r6, r5
 801504c:	bf38      	it	cc
 801504e:	2200      	movcc	r2, #0
 8015050:	18a3      	adds	r3, r4, r2
 8015052:	50a7      	str	r7, [r4, r2]
 8015054:	b107      	cbz	r7, 8015058 <rshift+0x68>
 8015056:	3304      	adds	r3, #4
 8015058:	1b1a      	subs	r2, r3, r4
 801505a:	42a3      	cmp	r3, r4
 801505c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015060:	bf08      	it	eq
 8015062:	2300      	moveq	r3, #0
 8015064:	6102      	str	r2, [r0, #16]
 8015066:	bf08      	it	eq
 8015068:	6143      	streq	r3, [r0, #20]
 801506a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801506e:	f8dc c000 	ldr.w	ip, [ip]
 8015072:	fa0c fc08 	lsl.w	ip, ip, r8
 8015076:	ea4c 0707 	orr.w	r7, ip, r7
 801507a:	f849 7b04 	str.w	r7, [r9], #4
 801507e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015082:	40cf      	lsrs	r7, r1
 8015084:	e7da      	b.n	801503c <rshift+0x4c>
 8015086:	f851 cb04 	ldr.w	ip, [r1], #4
 801508a:	f847 cf04 	str.w	ip, [r7, #4]!
 801508e:	e7c3      	b.n	8015018 <rshift+0x28>
 8015090:	4623      	mov	r3, r4
 8015092:	e7e1      	b.n	8015058 <rshift+0x68>

08015094 <__hexdig_fun>:
 8015094:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015098:	2b09      	cmp	r3, #9
 801509a:	d802      	bhi.n	80150a2 <__hexdig_fun+0xe>
 801509c:	3820      	subs	r0, #32
 801509e:	b2c0      	uxtb	r0, r0
 80150a0:	4770      	bx	lr
 80150a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80150a6:	2b05      	cmp	r3, #5
 80150a8:	d801      	bhi.n	80150ae <__hexdig_fun+0x1a>
 80150aa:	3847      	subs	r0, #71	; 0x47
 80150ac:	e7f7      	b.n	801509e <__hexdig_fun+0xa>
 80150ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80150b2:	2b05      	cmp	r3, #5
 80150b4:	d801      	bhi.n	80150ba <__hexdig_fun+0x26>
 80150b6:	3827      	subs	r0, #39	; 0x27
 80150b8:	e7f1      	b.n	801509e <__hexdig_fun+0xa>
 80150ba:	2000      	movs	r0, #0
 80150bc:	4770      	bx	lr
	...

080150c0 <__gethex>:
 80150c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c4:	ed2d 8b02 	vpush	{d8}
 80150c8:	b089      	sub	sp, #36	; 0x24
 80150ca:	ee08 0a10 	vmov	s16, r0
 80150ce:	9304      	str	r3, [sp, #16]
 80150d0:	4bb4      	ldr	r3, [pc, #720]	; (80153a4 <__gethex+0x2e4>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	9301      	str	r3, [sp, #4]
 80150d6:	4618      	mov	r0, r3
 80150d8:	468b      	mov	fp, r1
 80150da:	4690      	mov	r8, r2
 80150dc:	f7eb f8a2 	bl	8000224 <strlen>
 80150e0:	9b01      	ldr	r3, [sp, #4]
 80150e2:	f8db 2000 	ldr.w	r2, [fp]
 80150e6:	4403      	add	r3, r0
 80150e8:	4682      	mov	sl, r0
 80150ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80150ee:	9305      	str	r3, [sp, #20]
 80150f0:	1c93      	adds	r3, r2, #2
 80150f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80150f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80150fa:	32fe      	adds	r2, #254	; 0xfe
 80150fc:	18d1      	adds	r1, r2, r3
 80150fe:	461f      	mov	r7, r3
 8015100:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015104:	9100      	str	r1, [sp, #0]
 8015106:	2830      	cmp	r0, #48	; 0x30
 8015108:	d0f8      	beq.n	80150fc <__gethex+0x3c>
 801510a:	f7ff ffc3 	bl	8015094 <__hexdig_fun>
 801510e:	4604      	mov	r4, r0
 8015110:	2800      	cmp	r0, #0
 8015112:	d13a      	bne.n	801518a <__gethex+0xca>
 8015114:	9901      	ldr	r1, [sp, #4]
 8015116:	4652      	mov	r2, sl
 8015118:	4638      	mov	r0, r7
 801511a:	f001 fe41 	bl	8016da0 <strncmp>
 801511e:	4605      	mov	r5, r0
 8015120:	2800      	cmp	r0, #0
 8015122:	d168      	bne.n	80151f6 <__gethex+0x136>
 8015124:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015128:	eb07 060a 	add.w	r6, r7, sl
 801512c:	f7ff ffb2 	bl	8015094 <__hexdig_fun>
 8015130:	2800      	cmp	r0, #0
 8015132:	d062      	beq.n	80151fa <__gethex+0x13a>
 8015134:	4633      	mov	r3, r6
 8015136:	7818      	ldrb	r0, [r3, #0]
 8015138:	2830      	cmp	r0, #48	; 0x30
 801513a:	461f      	mov	r7, r3
 801513c:	f103 0301 	add.w	r3, r3, #1
 8015140:	d0f9      	beq.n	8015136 <__gethex+0x76>
 8015142:	f7ff ffa7 	bl	8015094 <__hexdig_fun>
 8015146:	2301      	movs	r3, #1
 8015148:	fab0 f480 	clz	r4, r0
 801514c:	0964      	lsrs	r4, r4, #5
 801514e:	4635      	mov	r5, r6
 8015150:	9300      	str	r3, [sp, #0]
 8015152:	463a      	mov	r2, r7
 8015154:	4616      	mov	r6, r2
 8015156:	3201      	adds	r2, #1
 8015158:	7830      	ldrb	r0, [r6, #0]
 801515a:	f7ff ff9b 	bl	8015094 <__hexdig_fun>
 801515e:	2800      	cmp	r0, #0
 8015160:	d1f8      	bne.n	8015154 <__gethex+0x94>
 8015162:	9901      	ldr	r1, [sp, #4]
 8015164:	4652      	mov	r2, sl
 8015166:	4630      	mov	r0, r6
 8015168:	f001 fe1a 	bl	8016da0 <strncmp>
 801516c:	b980      	cbnz	r0, 8015190 <__gethex+0xd0>
 801516e:	b94d      	cbnz	r5, 8015184 <__gethex+0xc4>
 8015170:	eb06 050a 	add.w	r5, r6, sl
 8015174:	462a      	mov	r2, r5
 8015176:	4616      	mov	r6, r2
 8015178:	3201      	adds	r2, #1
 801517a:	7830      	ldrb	r0, [r6, #0]
 801517c:	f7ff ff8a 	bl	8015094 <__hexdig_fun>
 8015180:	2800      	cmp	r0, #0
 8015182:	d1f8      	bne.n	8015176 <__gethex+0xb6>
 8015184:	1bad      	subs	r5, r5, r6
 8015186:	00ad      	lsls	r5, r5, #2
 8015188:	e004      	b.n	8015194 <__gethex+0xd4>
 801518a:	2400      	movs	r4, #0
 801518c:	4625      	mov	r5, r4
 801518e:	e7e0      	b.n	8015152 <__gethex+0x92>
 8015190:	2d00      	cmp	r5, #0
 8015192:	d1f7      	bne.n	8015184 <__gethex+0xc4>
 8015194:	7833      	ldrb	r3, [r6, #0]
 8015196:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801519a:	2b50      	cmp	r3, #80	; 0x50
 801519c:	d13b      	bne.n	8015216 <__gethex+0x156>
 801519e:	7873      	ldrb	r3, [r6, #1]
 80151a0:	2b2b      	cmp	r3, #43	; 0x2b
 80151a2:	d02c      	beq.n	80151fe <__gethex+0x13e>
 80151a4:	2b2d      	cmp	r3, #45	; 0x2d
 80151a6:	d02e      	beq.n	8015206 <__gethex+0x146>
 80151a8:	1c71      	adds	r1, r6, #1
 80151aa:	f04f 0900 	mov.w	r9, #0
 80151ae:	7808      	ldrb	r0, [r1, #0]
 80151b0:	f7ff ff70 	bl	8015094 <__hexdig_fun>
 80151b4:	1e43      	subs	r3, r0, #1
 80151b6:	b2db      	uxtb	r3, r3
 80151b8:	2b18      	cmp	r3, #24
 80151ba:	d82c      	bhi.n	8015216 <__gethex+0x156>
 80151bc:	f1a0 0210 	sub.w	r2, r0, #16
 80151c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80151c4:	f7ff ff66 	bl	8015094 <__hexdig_fun>
 80151c8:	1e43      	subs	r3, r0, #1
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	2b18      	cmp	r3, #24
 80151ce:	d91d      	bls.n	801520c <__gethex+0x14c>
 80151d0:	f1b9 0f00 	cmp.w	r9, #0
 80151d4:	d000      	beq.n	80151d8 <__gethex+0x118>
 80151d6:	4252      	negs	r2, r2
 80151d8:	4415      	add	r5, r2
 80151da:	f8cb 1000 	str.w	r1, [fp]
 80151de:	b1e4      	cbz	r4, 801521a <__gethex+0x15a>
 80151e0:	9b00      	ldr	r3, [sp, #0]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	bf14      	ite	ne
 80151e6:	2700      	movne	r7, #0
 80151e8:	2706      	moveq	r7, #6
 80151ea:	4638      	mov	r0, r7
 80151ec:	b009      	add	sp, #36	; 0x24
 80151ee:	ecbd 8b02 	vpop	{d8}
 80151f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151f6:	463e      	mov	r6, r7
 80151f8:	4625      	mov	r5, r4
 80151fa:	2401      	movs	r4, #1
 80151fc:	e7ca      	b.n	8015194 <__gethex+0xd4>
 80151fe:	f04f 0900 	mov.w	r9, #0
 8015202:	1cb1      	adds	r1, r6, #2
 8015204:	e7d3      	b.n	80151ae <__gethex+0xee>
 8015206:	f04f 0901 	mov.w	r9, #1
 801520a:	e7fa      	b.n	8015202 <__gethex+0x142>
 801520c:	230a      	movs	r3, #10
 801520e:	fb03 0202 	mla	r2, r3, r2, r0
 8015212:	3a10      	subs	r2, #16
 8015214:	e7d4      	b.n	80151c0 <__gethex+0x100>
 8015216:	4631      	mov	r1, r6
 8015218:	e7df      	b.n	80151da <__gethex+0x11a>
 801521a:	1bf3      	subs	r3, r6, r7
 801521c:	3b01      	subs	r3, #1
 801521e:	4621      	mov	r1, r4
 8015220:	2b07      	cmp	r3, #7
 8015222:	dc0b      	bgt.n	801523c <__gethex+0x17c>
 8015224:	ee18 0a10 	vmov	r0, s16
 8015228:	f000 fa86 	bl	8015738 <_Balloc>
 801522c:	4604      	mov	r4, r0
 801522e:	b940      	cbnz	r0, 8015242 <__gethex+0x182>
 8015230:	4b5d      	ldr	r3, [pc, #372]	; (80153a8 <__gethex+0x2e8>)
 8015232:	4602      	mov	r2, r0
 8015234:	21de      	movs	r1, #222	; 0xde
 8015236:	485d      	ldr	r0, [pc, #372]	; (80153ac <__gethex+0x2ec>)
 8015238:	f7ff f820 	bl	801427c <__assert_func>
 801523c:	3101      	adds	r1, #1
 801523e:	105b      	asrs	r3, r3, #1
 8015240:	e7ee      	b.n	8015220 <__gethex+0x160>
 8015242:	f100 0914 	add.w	r9, r0, #20
 8015246:	f04f 0b00 	mov.w	fp, #0
 801524a:	f1ca 0301 	rsb	r3, sl, #1
 801524e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015252:	f8cd b000 	str.w	fp, [sp]
 8015256:	9306      	str	r3, [sp, #24]
 8015258:	42b7      	cmp	r7, r6
 801525a:	d340      	bcc.n	80152de <__gethex+0x21e>
 801525c:	9802      	ldr	r0, [sp, #8]
 801525e:	9b00      	ldr	r3, [sp, #0]
 8015260:	f840 3b04 	str.w	r3, [r0], #4
 8015264:	eba0 0009 	sub.w	r0, r0, r9
 8015268:	1080      	asrs	r0, r0, #2
 801526a:	0146      	lsls	r6, r0, #5
 801526c:	6120      	str	r0, [r4, #16]
 801526e:	4618      	mov	r0, r3
 8015270:	f000 fb54 	bl	801591c <__hi0bits>
 8015274:	1a30      	subs	r0, r6, r0
 8015276:	f8d8 6000 	ldr.w	r6, [r8]
 801527a:	42b0      	cmp	r0, r6
 801527c:	dd63      	ble.n	8015346 <__gethex+0x286>
 801527e:	1b87      	subs	r7, r0, r6
 8015280:	4639      	mov	r1, r7
 8015282:	4620      	mov	r0, r4
 8015284:	f000 fef8 	bl	8016078 <__any_on>
 8015288:	4682      	mov	sl, r0
 801528a:	b1a8      	cbz	r0, 80152b8 <__gethex+0x1f8>
 801528c:	1e7b      	subs	r3, r7, #1
 801528e:	1159      	asrs	r1, r3, #5
 8015290:	f003 021f 	and.w	r2, r3, #31
 8015294:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015298:	f04f 0a01 	mov.w	sl, #1
 801529c:	fa0a f202 	lsl.w	r2, sl, r2
 80152a0:	420a      	tst	r2, r1
 80152a2:	d009      	beq.n	80152b8 <__gethex+0x1f8>
 80152a4:	4553      	cmp	r3, sl
 80152a6:	dd05      	ble.n	80152b4 <__gethex+0x1f4>
 80152a8:	1eb9      	subs	r1, r7, #2
 80152aa:	4620      	mov	r0, r4
 80152ac:	f000 fee4 	bl	8016078 <__any_on>
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d145      	bne.n	8015340 <__gethex+0x280>
 80152b4:	f04f 0a02 	mov.w	sl, #2
 80152b8:	4639      	mov	r1, r7
 80152ba:	4620      	mov	r0, r4
 80152bc:	f7ff fe98 	bl	8014ff0 <rshift>
 80152c0:	443d      	add	r5, r7
 80152c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80152c6:	42ab      	cmp	r3, r5
 80152c8:	da4c      	bge.n	8015364 <__gethex+0x2a4>
 80152ca:	ee18 0a10 	vmov	r0, s16
 80152ce:	4621      	mov	r1, r4
 80152d0:	f000 fa72 	bl	80157b8 <_Bfree>
 80152d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152d6:	2300      	movs	r3, #0
 80152d8:	6013      	str	r3, [r2, #0]
 80152da:	27a3      	movs	r7, #163	; 0xa3
 80152dc:	e785      	b.n	80151ea <__gethex+0x12a>
 80152de:	1e73      	subs	r3, r6, #1
 80152e0:	9a05      	ldr	r2, [sp, #20]
 80152e2:	9303      	str	r3, [sp, #12]
 80152e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80152e8:	4293      	cmp	r3, r2
 80152ea:	d019      	beq.n	8015320 <__gethex+0x260>
 80152ec:	f1bb 0f20 	cmp.w	fp, #32
 80152f0:	d107      	bne.n	8015302 <__gethex+0x242>
 80152f2:	9b02      	ldr	r3, [sp, #8]
 80152f4:	9a00      	ldr	r2, [sp, #0]
 80152f6:	f843 2b04 	str.w	r2, [r3], #4
 80152fa:	9302      	str	r3, [sp, #8]
 80152fc:	2300      	movs	r3, #0
 80152fe:	9300      	str	r3, [sp, #0]
 8015300:	469b      	mov	fp, r3
 8015302:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015306:	f7ff fec5 	bl	8015094 <__hexdig_fun>
 801530a:	9b00      	ldr	r3, [sp, #0]
 801530c:	f000 000f 	and.w	r0, r0, #15
 8015310:	fa00 f00b 	lsl.w	r0, r0, fp
 8015314:	4303      	orrs	r3, r0
 8015316:	9300      	str	r3, [sp, #0]
 8015318:	f10b 0b04 	add.w	fp, fp, #4
 801531c:	9b03      	ldr	r3, [sp, #12]
 801531e:	e00d      	b.n	801533c <__gethex+0x27c>
 8015320:	9b03      	ldr	r3, [sp, #12]
 8015322:	9a06      	ldr	r2, [sp, #24]
 8015324:	4413      	add	r3, r2
 8015326:	42bb      	cmp	r3, r7
 8015328:	d3e0      	bcc.n	80152ec <__gethex+0x22c>
 801532a:	4618      	mov	r0, r3
 801532c:	9901      	ldr	r1, [sp, #4]
 801532e:	9307      	str	r3, [sp, #28]
 8015330:	4652      	mov	r2, sl
 8015332:	f001 fd35 	bl	8016da0 <strncmp>
 8015336:	9b07      	ldr	r3, [sp, #28]
 8015338:	2800      	cmp	r0, #0
 801533a:	d1d7      	bne.n	80152ec <__gethex+0x22c>
 801533c:	461e      	mov	r6, r3
 801533e:	e78b      	b.n	8015258 <__gethex+0x198>
 8015340:	f04f 0a03 	mov.w	sl, #3
 8015344:	e7b8      	b.n	80152b8 <__gethex+0x1f8>
 8015346:	da0a      	bge.n	801535e <__gethex+0x29e>
 8015348:	1a37      	subs	r7, r6, r0
 801534a:	4621      	mov	r1, r4
 801534c:	ee18 0a10 	vmov	r0, s16
 8015350:	463a      	mov	r2, r7
 8015352:	f000 fc4d 	bl	8015bf0 <__lshift>
 8015356:	1bed      	subs	r5, r5, r7
 8015358:	4604      	mov	r4, r0
 801535a:	f100 0914 	add.w	r9, r0, #20
 801535e:	f04f 0a00 	mov.w	sl, #0
 8015362:	e7ae      	b.n	80152c2 <__gethex+0x202>
 8015364:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015368:	42a8      	cmp	r0, r5
 801536a:	dd72      	ble.n	8015452 <__gethex+0x392>
 801536c:	1b45      	subs	r5, r0, r5
 801536e:	42ae      	cmp	r6, r5
 8015370:	dc36      	bgt.n	80153e0 <__gethex+0x320>
 8015372:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015376:	2b02      	cmp	r3, #2
 8015378:	d02a      	beq.n	80153d0 <__gethex+0x310>
 801537a:	2b03      	cmp	r3, #3
 801537c:	d02c      	beq.n	80153d8 <__gethex+0x318>
 801537e:	2b01      	cmp	r3, #1
 8015380:	d11c      	bne.n	80153bc <__gethex+0x2fc>
 8015382:	42ae      	cmp	r6, r5
 8015384:	d11a      	bne.n	80153bc <__gethex+0x2fc>
 8015386:	2e01      	cmp	r6, #1
 8015388:	d112      	bne.n	80153b0 <__gethex+0x2f0>
 801538a:	9a04      	ldr	r2, [sp, #16]
 801538c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015390:	6013      	str	r3, [r2, #0]
 8015392:	2301      	movs	r3, #1
 8015394:	6123      	str	r3, [r4, #16]
 8015396:	f8c9 3000 	str.w	r3, [r9]
 801539a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801539c:	2762      	movs	r7, #98	; 0x62
 801539e:	601c      	str	r4, [r3, #0]
 80153a0:	e723      	b.n	80151ea <__gethex+0x12a>
 80153a2:	bf00      	nop
 80153a4:	08050810 	.word	0x08050810
 80153a8:	08050799 	.word	0x08050799
 80153ac:	080507aa 	.word	0x080507aa
 80153b0:	1e71      	subs	r1, r6, #1
 80153b2:	4620      	mov	r0, r4
 80153b4:	f000 fe60 	bl	8016078 <__any_on>
 80153b8:	2800      	cmp	r0, #0
 80153ba:	d1e6      	bne.n	801538a <__gethex+0x2ca>
 80153bc:	ee18 0a10 	vmov	r0, s16
 80153c0:	4621      	mov	r1, r4
 80153c2:	f000 f9f9 	bl	80157b8 <_Bfree>
 80153c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153c8:	2300      	movs	r3, #0
 80153ca:	6013      	str	r3, [r2, #0]
 80153cc:	2750      	movs	r7, #80	; 0x50
 80153ce:	e70c      	b.n	80151ea <__gethex+0x12a>
 80153d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d1f2      	bne.n	80153bc <__gethex+0x2fc>
 80153d6:	e7d8      	b.n	801538a <__gethex+0x2ca>
 80153d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d1d5      	bne.n	801538a <__gethex+0x2ca>
 80153de:	e7ed      	b.n	80153bc <__gethex+0x2fc>
 80153e0:	1e6f      	subs	r7, r5, #1
 80153e2:	f1ba 0f00 	cmp.w	sl, #0
 80153e6:	d131      	bne.n	801544c <__gethex+0x38c>
 80153e8:	b127      	cbz	r7, 80153f4 <__gethex+0x334>
 80153ea:	4639      	mov	r1, r7
 80153ec:	4620      	mov	r0, r4
 80153ee:	f000 fe43 	bl	8016078 <__any_on>
 80153f2:	4682      	mov	sl, r0
 80153f4:	117b      	asrs	r3, r7, #5
 80153f6:	2101      	movs	r1, #1
 80153f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80153fc:	f007 071f 	and.w	r7, r7, #31
 8015400:	fa01 f707 	lsl.w	r7, r1, r7
 8015404:	421f      	tst	r7, r3
 8015406:	4629      	mov	r1, r5
 8015408:	4620      	mov	r0, r4
 801540a:	bf18      	it	ne
 801540c:	f04a 0a02 	orrne.w	sl, sl, #2
 8015410:	1b76      	subs	r6, r6, r5
 8015412:	f7ff fded 	bl	8014ff0 <rshift>
 8015416:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801541a:	2702      	movs	r7, #2
 801541c:	f1ba 0f00 	cmp.w	sl, #0
 8015420:	d048      	beq.n	80154b4 <__gethex+0x3f4>
 8015422:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015426:	2b02      	cmp	r3, #2
 8015428:	d015      	beq.n	8015456 <__gethex+0x396>
 801542a:	2b03      	cmp	r3, #3
 801542c:	d017      	beq.n	801545e <__gethex+0x39e>
 801542e:	2b01      	cmp	r3, #1
 8015430:	d109      	bne.n	8015446 <__gethex+0x386>
 8015432:	f01a 0f02 	tst.w	sl, #2
 8015436:	d006      	beq.n	8015446 <__gethex+0x386>
 8015438:	f8d9 0000 	ldr.w	r0, [r9]
 801543c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015440:	f01a 0f01 	tst.w	sl, #1
 8015444:	d10e      	bne.n	8015464 <__gethex+0x3a4>
 8015446:	f047 0710 	orr.w	r7, r7, #16
 801544a:	e033      	b.n	80154b4 <__gethex+0x3f4>
 801544c:	f04f 0a01 	mov.w	sl, #1
 8015450:	e7d0      	b.n	80153f4 <__gethex+0x334>
 8015452:	2701      	movs	r7, #1
 8015454:	e7e2      	b.n	801541c <__gethex+0x35c>
 8015456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015458:	f1c3 0301 	rsb	r3, r3, #1
 801545c:	9315      	str	r3, [sp, #84]	; 0x54
 801545e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015460:	2b00      	cmp	r3, #0
 8015462:	d0f0      	beq.n	8015446 <__gethex+0x386>
 8015464:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015468:	f104 0314 	add.w	r3, r4, #20
 801546c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015470:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015474:	f04f 0c00 	mov.w	ip, #0
 8015478:	4618      	mov	r0, r3
 801547a:	f853 2b04 	ldr.w	r2, [r3], #4
 801547e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015482:	d01c      	beq.n	80154be <__gethex+0x3fe>
 8015484:	3201      	adds	r2, #1
 8015486:	6002      	str	r2, [r0, #0]
 8015488:	2f02      	cmp	r7, #2
 801548a:	f104 0314 	add.w	r3, r4, #20
 801548e:	d13f      	bne.n	8015510 <__gethex+0x450>
 8015490:	f8d8 2000 	ldr.w	r2, [r8]
 8015494:	3a01      	subs	r2, #1
 8015496:	42b2      	cmp	r2, r6
 8015498:	d10a      	bne.n	80154b0 <__gethex+0x3f0>
 801549a:	1171      	asrs	r1, r6, #5
 801549c:	2201      	movs	r2, #1
 801549e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80154a2:	f006 061f 	and.w	r6, r6, #31
 80154a6:	fa02 f606 	lsl.w	r6, r2, r6
 80154aa:	421e      	tst	r6, r3
 80154ac:	bf18      	it	ne
 80154ae:	4617      	movne	r7, r2
 80154b0:	f047 0720 	orr.w	r7, r7, #32
 80154b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80154b6:	601c      	str	r4, [r3, #0]
 80154b8:	9b04      	ldr	r3, [sp, #16]
 80154ba:	601d      	str	r5, [r3, #0]
 80154bc:	e695      	b.n	80151ea <__gethex+0x12a>
 80154be:	4299      	cmp	r1, r3
 80154c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80154c4:	d8d8      	bhi.n	8015478 <__gethex+0x3b8>
 80154c6:	68a3      	ldr	r3, [r4, #8]
 80154c8:	459b      	cmp	fp, r3
 80154ca:	db19      	blt.n	8015500 <__gethex+0x440>
 80154cc:	6861      	ldr	r1, [r4, #4]
 80154ce:	ee18 0a10 	vmov	r0, s16
 80154d2:	3101      	adds	r1, #1
 80154d4:	f000 f930 	bl	8015738 <_Balloc>
 80154d8:	4681      	mov	r9, r0
 80154da:	b918      	cbnz	r0, 80154e4 <__gethex+0x424>
 80154dc:	4b1a      	ldr	r3, [pc, #104]	; (8015548 <__gethex+0x488>)
 80154de:	4602      	mov	r2, r0
 80154e0:	2184      	movs	r1, #132	; 0x84
 80154e2:	e6a8      	b.n	8015236 <__gethex+0x176>
 80154e4:	6922      	ldr	r2, [r4, #16]
 80154e6:	3202      	adds	r2, #2
 80154e8:	f104 010c 	add.w	r1, r4, #12
 80154ec:	0092      	lsls	r2, r2, #2
 80154ee:	300c      	adds	r0, #12
 80154f0:	f7fc ff8a 	bl	8012408 <memcpy>
 80154f4:	4621      	mov	r1, r4
 80154f6:	ee18 0a10 	vmov	r0, s16
 80154fa:	f000 f95d 	bl	80157b8 <_Bfree>
 80154fe:	464c      	mov	r4, r9
 8015500:	6923      	ldr	r3, [r4, #16]
 8015502:	1c5a      	adds	r2, r3, #1
 8015504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015508:	6122      	str	r2, [r4, #16]
 801550a:	2201      	movs	r2, #1
 801550c:	615a      	str	r2, [r3, #20]
 801550e:	e7bb      	b.n	8015488 <__gethex+0x3c8>
 8015510:	6922      	ldr	r2, [r4, #16]
 8015512:	455a      	cmp	r2, fp
 8015514:	dd0b      	ble.n	801552e <__gethex+0x46e>
 8015516:	2101      	movs	r1, #1
 8015518:	4620      	mov	r0, r4
 801551a:	f7ff fd69 	bl	8014ff0 <rshift>
 801551e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015522:	3501      	adds	r5, #1
 8015524:	42ab      	cmp	r3, r5
 8015526:	f6ff aed0 	blt.w	80152ca <__gethex+0x20a>
 801552a:	2701      	movs	r7, #1
 801552c:	e7c0      	b.n	80154b0 <__gethex+0x3f0>
 801552e:	f016 061f 	ands.w	r6, r6, #31
 8015532:	d0fa      	beq.n	801552a <__gethex+0x46a>
 8015534:	4453      	add	r3, sl
 8015536:	f1c6 0620 	rsb	r6, r6, #32
 801553a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801553e:	f000 f9ed 	bl	801591c <__hi0bits>
 8015542:	42b0      	cmp	r0, r6
 8015544:	dbe7      	blt.n	8015516 <__gethex+0x456>
 8015546:	e7f0      	b.n	801552a <__gethex+0x46a>
 8015548:	08050799 	.word	0x08050799

0801554c <L_shift>:
 801554c:	f1c2 0208 	rsb	r2, r2, #8
 8015550:	0092      	lsls	r2, r2, #2
 8015552:	b570      	push	{r4, r5, r6, lr}
 8015554:	f1c2 0620 	rsb	r6, r2, #32
 8015558:	6843      	ldr	r3, [r0, #4]
 801555a:	6804      	ldr	r4, [r0, #0]
 801555c:	fa03 f506 	lsl.w	r5, r3, r6
 8015560:	432c      	orrs	r4, r5
 8015562:	40d3      	lsrs	r3, r2
 8015564:	6004      	str	r4, [r0, #0]
 8015566:	f840 3f04 	str.w	r3, [r0, #4]!
 801556a:	4288      	cmp	r0, r1
 801556c:	d3f4      	bcc.n	8015558 <L_shift+0xc>
 801556e:	bd70      	pop	{r4, r5, r6, pc}

08015570 <__match>:
 8015570:	b530      	push	{r4, r5, lr}
 8015572:	6803      	ldr	r3, [r0, #0]
 8015574:	3301      	adds	r3, #1
 8015576:	f811 4b01 	ldrb.w	r4, [r1], #1
 801557a:	b914      	cbnz	r4, 8015582 <__match+0x12>
 801557c:	6003      	str	r3, [r0, #0]
 801557e:	2001      	movs	r0, #1
 8015580:	bd30      	pop	{r4, r5, pc}
 8015582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015586:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801558a:	2d19      	cmp	r5, #25
 801558c:	bf98      	it	ls
 801558e:	3220      	addls	r2, #32
 8015590:	42a2      	cmp	r2, r4
 8015592:	d0f0      	beq.n	8015576 <__match+0x6>
 8015594:	2000      	movs	r0, #0
 8015596:	e7f3      	b.n	8015580 <__match+0x10>

08015598 <__hexnan>:
 8015598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801559c:	680b      	ldr	r3, [r1, #0]
 801559e:	115e      	asrs	r6, r3, #5
 80155a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80155a4:	f013 031f 	ands.w	r3, r3, #31
 80155a8:	b087      	sub	sp, #28
 80155aa:	bf18      	it	ne
 80155ac:	3604      	addne	r6, #4
 80155ae:	2500      	movs	r5, #0
 80155b0:	1f37      	subs	r7, r6, #4
 80155b2:	4690      	mov	r8, r2
 80155b4:	6802      	ldr	r2, [r0, #0]
 80155b6:	9301      	str	r3, [sp, #4]
 80155b8:	4682      	mov	sl, r0
 80155ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80155be:	46b9      	mov	r9, r7
 80155c0:	463c      	mov	r4, r7
 80155c2:	9502      	str	r5, [sp, #8]
 80155c4:	46ab      	mov	fp, r5
 80155c6:	7851      	ldrb	r1, [r2, #1]
 80155c8:	1c53      	adds	r3, r2, #1
 80155ca:	9303      	str	r3, [sp, #12]
 80155cc:	b341      	cbz	r1, 8015620 <__hexnan+0x88>
 80155ce:	4608      	mov	r0, r1
 80155d0:	9205      	str	r2, [sp, #20]
 80155d2:	9104      	str	r1, [sp, #16]
 80155d4:	f7ff fd5e 	bl	8015094 <__hexdig_fun>
 80155d8:	2800      	cmp	r0, #0
 80155da:	d14f      	bne.n	801567c <__hexnan+0xe4>
 80155dc:	9904      	ldr	r1, [sp, #16]
 80155de:	9a05      	ldr	r2, [sp, #20]
 80155e0:	2920      	cmp	r1, #32
 80155e2:	d818      	bhi.n	8015616 <__hexnan+0x7e>
 80155e4:	9b02      	ldr	r3, [sp, #8]
 80155e6:	459b      	cmp	fp, r3
 80155e8:	dd13      	ble.n	8015612 <__hexnan+0x7a>
 80155ea:	454c      	cmp	r4, r9
 80155ec:	d206      	bcs.n	80155fc <__hexnan+0x64>
 80155ee:	2d07      	cmp	r5, #7
 80155f0:	dc04      	bgt.n	80155fc <__hexnan+0x64>
 80155f2:	462a      	mov	r2, r5
 80155f4:	4649      	mov	r1, r9
 80155f6:	4620      	mov	r0, r4
 80155f8:	f7ff ffa8 	bl	801554c <L_shift>
 80155fc:	4544      	cmp	r4, r8
 80155fe:	d950      	bls.n	80156a2 <__hexnan+0x10a>
 8015600:	2300      	movs	r3, #0
 8015602:	f1a4 0904 	sub.w	r9, r4, #4
 8015606:	f844 3c04 	str.w	r3, [r4, #-4]
 801560a:	f8cd b008 	str.w	fp, [sp, #8]
 801560e:	464c      	mov	r4, r9
 8015610:	461d      	mov	r5, r3
 8015612:	9a03      	ldr	r2, [sp, #12]
 8015614:	e7d7      	b.n	80155c6 <__hexnan+0x2e>
 8015616:	2929      	cmp	r1, #41	; 0x29
 8015618:	d156      	bne.n	80156c8 <__hexnan+0x130>
 801561a:	3202      	adds	r2, #2
 801561c:	f8ca 2000 	str.w	r2, [sl]
 8015620:	f1bb 0f00 	cmp.w	fp, #0
 8015624:	d050      	beq.n	80156c8 <__hexnan+0x130>
 8015626:	454c      	cmp	r4, r9
 8015628:	d206      	bcs.n	8015638 <__hexnan+0xa0>
 801562a:	2d07      	cmp	r5, #7
 801562c:	dc04      	bgt.n	8015638 <__hexnan+0xa0>
 801562e:	462a      	mov	r2, r5
 8015630:	4649      	mov	r1, r9
 8015632:	4620      	mov	r0, r4
 8015634:	f7ff ff8a 	bl	801554c <L_shift>
 8015638:	4544      	cmp	r4, r8
 801563a:	d934      	bls.n	80156a6 <__hexnan+0x10e>
 801563c:	f1a8 0204 	sub.w	r2, r8, #4
 8015640:	4623      	mov	r3, r4
 8015642:	f853 1b04 	ldr.w	r1, [r3], #4
 8015646:	f842 1f04 	str.w	r1, [r2, #4]!
 801564a:	429f      	cmp	r7, r3
 801564c:	d2f9      	bcs.n	8015642 <__hexnan+0xaa>
 801564e:	1b3b      	subs	r3, r7, r4
 8015650:	f023 0303 	bic.w	r3, r3, #3
 8015654:	3304      	adds	r3, #4
 8015656:	3401      	adds	r4, #1
 8015658:	3e03      	subs	r6, #3
 801565a:	42b4      	cmp	r4, r6
 801565c:	bf88      	it	hi
 801565e:	2304      	movhi	r3, #4
 8015660:	4443      	add	r3, r8
 8015662:	2200      	movs	r2, #0
 8015664:	f843 2b04 	str.w	r2, [r3], #4
 8015668:	429f      	cmp	r7, r3
 801566a:	d2fb      	bcs.n	8015664 <__hexnan+0xcc>
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	b91b      	cbnz	r3, 8015678 <__hexnan+0xe0>
 8015670:	4547      	cmp	r7, r8
 8015672:	d127      	bne.n	80156c4 <__hexnan+0x12c>
 8015674:	2301      	movs	r3, #1
 8015676:	603b      	str	r3, [r7, #0]
 8015678:	2005      	movs	r0, #5
 801567a:	e026      	b.n	80156ca <__hexnan+0x132>
 801567c:	3501      	adds	r5, #1
 801567e:	2d08      	cmp	r5, #8
 8015680:	f10b 0b01 	add.w	fp, fp, #1
 8015684:	dd06      	ble.n	8015694 <__hexnan+0xfc>
 8015686:	4544      	cmp	r4, r8
 8015688:	d9c3      	bls.n	8015612 <__hexnan+0x7a>
 801568a:	2300      	movs	r3, #0
 801568c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015690:	2501      	movs	r5, #1
 8015692:	3c04      	subs	r4, #4
 8015694:	6822      	ldr	r2, [r4, #0]
 8015696:	f000 000f 	and.w	r0, r0, #15
 801569a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801569e:	6022      	str	r2, [r4, #0]
 80156a0:	e7b7      	b.n	8015612 <__hexnan+0x7a>
 80156a2:	2508      	movs	r5, #8
 80156a4:	e7b5      	b.n	8015612 <__hexnan+0x7a>
 80156a6:	9b01      	ldr	r3, [sp, #4]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d0df      	beq.n	801566c <__hexnan+0xd4>
 80156ac:	f04f 32ff 	mov.w	r2, #4294967295
 80156b0:	f1c3 0320 	rsb	r3, r3, #32
 80156b4:	fa22 f303 	lsr.w	r3, r2, r3
 80156b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80156bc:	401a      	ands	r2, r3
 80156be:	f846 2c04 	str.w	r2, [r6, #-4]
 80156c2:	e7d3      	b.n	801566c <__hexnan+0xd4>
 80156c4:	3f04      	subs	r7, #4
 80156c6:	e7d1      	b.n	801566c <__hexnan+0xd4>
 80156c8:	2004      	movs	r0, #4
 80156ca:	b007      	add	sp, #28
 80156cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080156d0 <_localeconv_r>:
 80156d0:	4800      	ldr	r0, [pc, #0]	; (80156d4 <_localeconv_r+0x4>)
 80156d2:	4770      	bx	lr
 80156d4:	200014fc 	.word	0x200014fc

080156d8 <_lseek_r>:
 80156d8:	b538      	push	{r3, r4, r5, lr}
 80156da:	4d07      	ldr	r5, [pc, #28]	; (80156f8 <_lseek_r+0x20>)
 80156dc:	4604      	mov	r4, r0
 80156de:	4608      	mov	r0, r1
 80156e0:	4611      	mov	r1, r2
 80156e2:	2200      	movs	r2, #0
 80156e4:	602a      	str	r2, [r5, #0]
 80156e6:	461a      	mov	r2, r3
 80156e8:	f002 ff08 	bl	80184fc <_lseek>
 80156ec:	1c43      	adds	r3, r0, #1
 80156ee:	d102      	bne.n	80156f6 <_lseek_r+0x1e>
 80156f0:	682b      	ldr	r3, [r5, #0]
 80156f2:	b103      	cbz	r3, 80156f6 <_lseek_r+0x1e>
 80156f4:	6023      	str	r3, [r4, #0]
 80156f6:	bd38      	pop	{r3, r4, r5, pc}
 80156f8:	20009aac 	.word	0x20009aac

080156fc <__ascii_mbtowc>:
 80156fc:	b082      	sub	sp, #8
 80156fe:	b901      	cbnz	r1, 8015702 <__ascii_mbtowc+0x6>
 8015700:	a901      	add	r1, sp, #4
 8015702:	b142      	cbz	r2, 8015716 <__ascii_mbtowc+0x1a>
 8015704:	b14b      	cbz	r3, 801571a <__ascii_mbtowc+0x1e>
 8015706:	7813      	ldrb	r3, [r2, #0]
 8015708:	600b      	str	r3, [r1, #0]
 801570a:	7812      	ldrb	r2, [r2, #0]
 801570c:	1e10      	subs	r0, r2, #0
 801570e:	bf18      	it	ne
 8015710:	2001      	movne	r0, #1
 8015712:	b002      	add	sp, #8
 8015714:	4770      	bx	lr
 8015716:	4610      	mov	r0, r2
 8015718:	e7fb      	b.n	8015712 <__ascii_mbtowc+0x16>
 801571a:	f06f 0001 	mvn.w	r0, #1
 801571e:	e7f8      	b.n	8015712 <__ascii_mbtowc+0x16>

08015720 <__malloc_lock>:
 8015720:	4801      	ldr	r0, [pc, #4]	; (8015728 <__malloc_lock+0x8>)
 8015722:	f001 be8d 	b.w	8017440 <__retarget_lock_acquire_recursive>
 8015726:	bf00      	nop
 8015728:	20009ab0 	.word	0x20009ab0

0801572c <__malloc_unlock>:
 801572c:	4801      	ldr	r0, [pc, #4]	; (8015734 <__malloc_unlock+0x8>)
 801572e:	f001 be88 	b.w	8017442 <__retarget_lock_release_recursive>
 8015732:	bf00      	nop
 8015734:	20009ab0 	.word	0x20009ab0

08015738 <_Balloc>:
 8015738:	b570      	push	{r4, r5, r6, lr}
 801573a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801573c:	4604      	mov	r4, r0
 801573e:	460d      	mov	r5, r1
 8015740:	b976      	cbnz	r6, 8015760 <_Balloc+0x28>
 8015742:	2010      	movs	r0, #16
 8015744:	f7fc fe58 	bl	80123f8 <malloc>
 8015748:	4602      	mov	r2, r0
 801574a:	6260      	str	r0, [r4, #36]	; 0x24
 801574c:	b920      	cbnz	r0, 8015758 <_Balloc+0x20>
 801574e:	4b18      	ldr	r3, [pc, #96]	; (80157b0 <_Balloc+0x78>)
 8015750:	4818      	ldr	r0, [pc, #96]	; (80157b4 <_Balloc+0x7c>)
 8015752:	2166      	movs	r1, #102	; 0x66
 8015754:	f7fe fd92 	bl	801427c <__assert_func>
 8015758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801575c:	6006      	str	r6, [r0, #0]
 801575e:	60c6      	str	r6, [r0, #12]
 8015760:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015762:	68f3      	ldr	r3, [r6, #12]
 8015764:	b183      	cbz	r3, 8015788 <_Balloc+0x50>
 8015766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801576e:	b9b8      	cbnz	r0, 80157a0 <_Balloc+0x68>
 8015770:	2101      	movs	r1, #1
 8015772:	fa01 f605 	lsl.w	r6, r1, r5
 8015776:	1d72      	adds	r2, r6, #5
 8015778:	0092      	lsls	r2, r2, #2
 801577a:	4620      	mov	r0, r4
 801577c:	f000 fc9d 	bl	80160ba <_calloc_r>
 8015780:	b160      	cbz	r0, 801579c <_Balloc+0x64>
 8015782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015786:	e00e      	b.n	80157a6 <_Balloc+0x6e>
 8015788:	2221      	movs	r2, #33	; 0x21
 801578a:	2104      	movs	r1, #4
 801578c:	4620      	mov	r0, r4
 801578e:	f000 fc94 	bl	80160ba <_calloc_r>
 8015792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015794:	60f0      	str	r0, [r6, #12]
 8015796:	68db      	ldr	r3, [r3, #12]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d1e4      	bne.n	8015766 <_Balloc+0x2e>
 801579c:	2000      	movs	r0, #0
 801579e:	bd70      	pop	{r4, r5, r6, pc}
 80157a0:	6802      	ldr	r2, [r0, #0]
 80157a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80157a6:	2300      	movs	r3, #0
 80157a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80157ac:	e7f7      	b.n	801579e <_Balloc+0x66>
 80157ae:	bf00      	nop
 80157b0:	08050580 	.word	0x08050580
 80157b4:	08050824 	.word	0x08050824

080157b8 <_Bfree>:
 80157b8:	b570      	push	{r4, r5, r6, lr}
 80157ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80157bc:	4605      	mov	r5, r0
 80157be:	460c      	mov	r4, r1
 80157c0:	b976      	cbnz	r6, 80157e0 <_Bfree+0x28>
 80157c2:	2010      	movs	r0, #16
 80157c4:	f7fc fe18 	bl	80123f8 <malloc>
 80157c8:	4602      	mov	r2, r0
 80157ca:	6268      	str	r0, [r5, #36]	; 0x24
 80157cc:	b920      	cbnz	r0, 80157d8 <_Bfree+0x20>
 80157ce:	4b09      	ldr	r3, [pc, #36]	; (80157f4 <_Bfree+0x3c>)
 80157d0:	4809      	ldr	r0, [pc, #36]	; (80157f8 <_Bfree+0x40>)
 80157d2:	218a      	movs	r1, #138	; 0x8a
 80157d4:	f7fe fd52 	bl	801427c <__assert_func>
 80157d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80157dc:	6006      	str	r6, [r0, #0]
 80157de:	60c6      	str	r6, [r0, #12]
 80157e0:	b13c      	cbz	r4, 80157f2 <_Bfree+0x3a>
 80157e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80157e4:	6862      	ldr	r2, [r4, #4]
 80157e6:	68db      	ldr	r3, [r3, #12]
 80157e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80157ec:	6021      	str	r1, [r4, #0]
 80157ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80157f2:	bd70      	pop	{r4, r5, r6, pc}
 80157f4:	08050580 	.word	0x08050580
 80157f8:	08050824 	.word	0x08050824

080157fc <__multadd>:
 80157fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015800:	690d      	ldr	r5, [r1, #16]
 8015802:	4607      	mov	r7, r0
 8015804:	460c      	mov	r4, r1
 8015806:	461e      	mov	r6, r3
 8015808:	f101 0c14 	add.w	ip, r1, #20
 801580c:	2000      	movs	r0, #0
 801580e:	f8dc 3000 	ldr.w	r3, [ip]
 8015812:	b299      	uxth	r1, r3
 8015814:	fb02 6101 	mla	r1, r2, r1, r6
 8015818:	0c1e      	lsrs	r6, r3, #16
 801581a:	0c0b      	lsrs	r3, r1, #16
 801581c:	fb02 3306 	mla	r3, r2, r6, r3
 8015820:	b289      	uxth	r1, r1
 8015822:	3001      	adds	r0, #1
 8015824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015828:	4285      	cmp	r5, r0
 801582a:	f84c 1b04 	str.w	r1, [ip], #4
 801582e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015832:	dcec      	bgt.n	801580e <__multadd+0x12>
 8015834:	b30e      	cbz	r6, 801587a <__multadd+0x7e>
 8015836:	68a3      	ldr	r3, [r4, #8]
 8015838:	42ab      	cmp	r3, r5
 801583a:	dc19      	bgt.n	8015870 <__multadd+0x74>
 801583c:	6861      	ldr	r1, [r4, #4]
 801583e:	4638      	mov	r0, r7
 8015840:	3101      	adds	r1, #1
 8015842:	f7ff ff79 	bl	8015738 <_Balloc>
 8015846:	4680      	mov	r8, r0
 8015848:	b928      	cbnz	r0, 8015856 <__multadd+0x5a>
 801584a:	4602      	mov	r2, r0
 801584c:	4b0c      	ldr	r3, [pc, #48]	; (8015880 <__multadd+0x84>)
 801584e:	480d      	ldr	r0, [pc, #52]	; (8015884 <__multadd+0x88>)
 8015850:	21b5      	movs	r1, #181	; 0xb5
 8015852:	f7fe fd13 	bl	801427c <__assert_func>
 8015856:	6922      	ldr	r2, [r4, #16]
 8015858:	3202      	adds	r2, #2
 801585a:	f104 010c 	add.w	r1, r4, #12
 801585e:	0092      	lsls	r2, r2, #2
 8015860:	300c      	adds	r0, #12
 8015862:	f7fc fdd1 	bl	8012408 <memcpy>
 8015866:	4621      	mov	r1, r4
 8015868:	4638      	mov	r0, r7
 801586a:	f7ff ffa5 	bl	80157b8 <_Bfree>
 801586e:	4644      	mov	r4, r8
 8015870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015874:	3501      	adds	r5, #1
 8015876:	615e      	str	r6, [r3, #20]
 8015878:	6125      	str	r5, [r4, #16]
 801587a:	4620      	mov	r0, r4
 801587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015880:	08050799 	.word	0x08050799
 8015884:	08050824 	.word	0x08050824

08015888 <__s2b>:
 8015888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801588c:	460c      	mov	r4, r1
 801588e:	4615      	mov	r5, r2
 8015890:	461f      	mov	r7, r3
 8015892:	2209      	movs	r2, #9
 8015894:	3308      	adds	r3, #8
 8015896:	4606      	mov	r6, r0
 8015898:	fb93 f3f2 	sdiv	r3, r3, r2
 801589c:	2100      	movs	r1, #0
 801589e:	2201      	movs	r2, #1
 80158a0:	429a      	cmp	r2, r3
 80158a2:	db09      	blt.n	80158b8 <__s2b+0x30>
 80158a4:	4630      	mov	r0, r6
 80158a6:	f7ff ff47 	bl	8015738 <_Balloc>
 80158aa:	b940      	cbnz	r0, 80158be <__s2b+0x36>
 80158ac:	4602      	mov	r2, r0
 80158ae:	4b19      	ldr	r3, [pc, #100]	; (8015914 <__s2b+0x8c>)
 80158b0:	4819      	ldr	r0, [pc, #100]	; (8015918 <__s2b+0x90>)
 80158b2:	21ce      	movs	r1, #206	; 0xce
 80158b4:	f7fe fce2 	bl	801427c <__assert_func>
 80158b8:	0052      	lsls	r2, r2, #1
 80158ba:	3101      	adds	r1, #1
 80158bc:	e7f0      	b.n	80158a0 <__s2b+0x18>
 80158be:	9b08      	ldr	r3, [sp, #32]
 80158c0:	6143      	str	r3, [r0, #20]
 80158c2:	2d09      	cmp	r5, #9
 80158c4:	f04f 0301 	mov.w	r3, #1
 80158c8:	6103      	str	r3, [r0, #16]
 80158ca:	dd16      	ble.n	80158fa <__s2b+0x72>
 80158cc:	f104 0909 	add.w	r9, r4, #9
 80158d0:	46c8      	mov	r8, r9
 80158d2:	442c      	add	r4, r5
 80158d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80158d8:	4601      	mov	r1, r0
 80158da:	3b30      	subs	r3, #48	; 0x30
 80158dc:	220a      	movs	r2, #10
 80158de:	4630      	mov	r0, r6
 80158e0:	f7ff ff8c 	bl	80157fc <__multadd>
 80158e4:	45a0      	cmp	r8, r4
 80158e6:	d1f5      	bne.n	80158d4 <__s2b+0x4c>
 80158e8:	f1a5 0408 	sub.w	r4, r5, #8
 80158ec:	444c      	add	r4, r9
 80158ee:	1b2d      	subs	r5, r5, r4
 80158f0:	1963      	adds	r3, r4, r5
 80158f2:	42bb      	cmp	r3, r7
 80158f4:	db04      	blt.n	8015900 <__s2b+0x78>
 80158f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158fa:	340a      	adds	r4, #10
 80158fc:	2509      	movs	r5, #9
 80158fe:	e7f6      	b.n	80158ee <__s2b+0x66>
 8015900:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015904:	4601      	mov	r1, r0
 8015906:	3b30      	subs	r3, #48	; 0x30
 8015908:	220a      	movs	r2, #10
 801590a:	4630      	mov	r0, r6
 801590c:	f7ff ff76 	bl	80157fc <__multadd>
 8015910:	e7ee      	b.n	80158f0 <__s2b+0x68>
 8015912:	bf00      	nop
 8015914:	08050799 	.word	0x08050799
 8015918:	08050824 	.word	0x08050824

0801591c <__hi0bits>:
 801591c:	0c03      	lsrs	r3, r0, #16
 801591e:	041b      	lsls	r3, r3, #16
 8015920:	b9d3      	cbnz	r3, 8015958 <__hi0bits+0x3c>
 8015922:	0400      	lsls	r0, r0, #16
 8015924:	2310      	movs	r3, #16
 8015926:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801592a:	bf04      	itt	eq
 801592c:	0200      	lsleq	r0, r0, #8
 801592e:	3308      	addeq	r3, #8
 8015930:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015934:	bf04      	itt	eq
 8015936:	0100      	lsleq	r0, r0, #4
 8015938:	3304      	addeq	r3, #4
 801593a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801593e:	bf04      	itt	eq
 8015940:	0080      	lsleq	r0, r0, #2
 8015942:	3302      	addeq	r3, #2
 8015944:	2800      	cmp	r0, #0
 8015946:	db05      	blt.n	8015954 <__hi0bits+0x38>
 8015948:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801594c:	f103 0301 	add.w	r3, r3, #1
 8015950:	bf08      	it	eq
 8015952:	2320      	moveq	r3, #32
 8015954:	4618      	mov	r0, r3
 8015956:	4770      	bx	lr
 8015958:	2300      	movs	r3, #0
 801595a:	e7e4      	b.n	8015926 <__hi0bits+0xa>

0801595c <__lo0bits>:
 801595c:	6803      	ldr	r3, [r0, #0]
 801595e:	f013 0207 	ands.w	r2, r3, #7
 8015962:	4601      	mov	r1, r0
 8015964:	d00b      	beq.n	801597e <__lo0bits+0x22>
 8015966:	07da      	lsls	r2, r3, #31
 8015968:	d423      	bmi.n	80159b2 <__lo0bits+0x56>
 801596a:	0798      	lsls	r0, r3, #30
 801596c:	bf49      	itett	mi
 801596e:	085b      	lsrmi	r3, r3, #1
 8015970:	089b      	lsrpl	r3, r3, #2
 8015972:	2001      	movmi	r0, #1
 8015974:	600b      	strmi	r3, [r1, #0]
 8015976:	bf5c      	itt	pl
 8015978:	600b      	strpl	r3, [r1, #0]
 801597a:	2002      	movpl	r0, #2
 801597c:	4770      	bx	lr
 801597e:	b298      	uxth	r0, r3
 8015980:	b9a8      	cbnz	r0, 80159ae <__lo0bits+0x52>
 8015982:	0c1b      	lsrs	r3, r3, #16
 8015984:	2010      	movs	r0, #16
 8015986:	b2da      	uxtb	r2, r3
 8015988:	b90a      	cbnz	r2, 801598e <__lo0bits+0x32>
 801598a:	3008      	adds	r0, #8
 801598c:	0a1b      	lsrs	r3, r3, #8
 801598e:	071a      	lsls	r2, r3, #28
 8015990:	bf04      	itt	eq
 8015992:	091b      	lsreq	r3, r3, #4
 8015994:	3004      	addeq	r0, #4
 8015996:	079a      	lsls	r2, r3, #30
 8015998:	bf04      	itt	eq
 801599a:	089b      	lsreq	r3, r3, #2
 801599c:	3002      	addeq	r0, #2
 801599e:	07da      	lsls	r2, r3, #31
 80159a0:	d403      	bmi.n	80159aa <__lo0bits+0x4e>
 80159a2:	085b      	lsrs	r3, r3, #1
 80159a4:	f100 0001 	add.w	r0, r0, #1
 80159a8:	d005      	beq.n	80159b6 <__lo0bits+0x5a>
 80159aa:	600b      	str	r3, [r1, #0]
 80159ac:	4770      	bx	lr
 80159ae:	4610      	mov	r0, r2
 80159b0:	e7e9      	b.n	8015986 <__lo0bits+0x2a>
 80159b2:	2000      	movs	r0, #0
 80159b4:	4770      	bx	lr
 80159b6:	2020      	movs	r0, #32
 80159b8:	4770      	bx	lr
	...

080159bc <__i2b>:
 80159bc:	b510      	push	{r4, lr}
 80159be:	460c      	mov	r4, r1
 80159c0:	2101      	movs	r1, #1
 80159c2:	f7ff feb9 	bl	8015738 <_Balloc>
 80159c6:	4602      	mov	r2, r0
 80159c8:	b928      	cbnz	r0, 80159d6 <__i2b+0x1a>
 80159ca:	4b05      	ldr	r3, [pc, #20]	; (80159e0 <__i2b+0x24>)
 80159cc:	4805      	ldr	r0, [pc, #20]	; (80159e4 <__i2b+0x28>)
 80159ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80159d2:	f7fe fc53 	bl	801427c <__assert_func>
 80159d6:	2301      	movs	r3, #1
 80159d8:	6144      	str	r4, [r0, #20]
 80159da:	6103      	str	r3, [r0, #16]
 80159dc:	bd10      	pop	{r4, pc}
 80159de:	bf00      	nop
 80159e0:	08050799 	.word	0x08050799
 80159e4:	08050824 	.word	0x08050824

080159e8 <__multiply>:
 80159e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ec:	4691      	mov	r9, r2
 80159ee:	690a      	ldr	r2, [r1, #16]
 80159f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	bfb8      	it	lt
 80159f8:	460b      	movlt	r3, r1
 80159fa:	460c      	mov	r4, r1
 80159fc:	bfbc      	itt	lt
 80159fe:	464c      	movlt	r4, r9
 8015a00:	4699      	movlt	r9, r3
 8015a02:	6927      	ldr	r7, [r4, #16]
 8015a04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015a08:	68a3      	ldr	r3, [r4, #8]
 8015a0a:	6861      	ldr	r1, [r4, #4]
 8015a0c:	eb07 060a 	add.w	r6, r7, sl
 8015a10:	42b3      	cmp	r3, r6
 8015a12:	b085      	sub	sp, #20
 8015a14:	bfb8      	it	lt
 8015a16:	3101      	addlt	r1, #1
 8015a18:	f7ff fe8e 	bl	8015738 <_Balloc>
 8015a1c:	b930      	cbnz	r0, 8015a2c <__multiply+0x44>
 8015a1e:	4602      	mov	r2, r0
 8015a20:	4b44      	ldr	r3, [pc, #272]	; (8015b34 <__multiply+0x14c>)
 8015a22:	4845      	ldr	r0, [pc, #276]	; (8015b38 <__multiply+0x150>)
 8015a24:	f240 115d 	movw	r1, #349	; 0x15d
 8015a28:	f7fe fc28 	bl	801427c <__assert_func>
 8015a2c:	f100 0514 	add.w	r5, r0, #20
 8015a30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015a34:	462b      	mov	r3, r5
 8015a36:	2200      	movs	r2, #0
 8015a38:	4543      	cmp	r3, r8
 8015a3a:	d321      	bcc.n	8015a80 <__multiply+0x98>
 8015a3c:	f104 0314 	add.w	r3, r4, #20
 8015a40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015a44:	f109 0314 	add.w	r3, r9, #20
 8015a48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015a4c:	9202      	str	r2, [sp, #8]
 8015a4e:	1b3a      	subs	r2, r7, r4
 8015a50:	3a15      	subs	r2, #21
 8015a52:	f022 0203 	bic.w	r2, r2, #3
 8015a56:	3204      	adds	r2, #4
 8015a58:	f104 0115 	add.w	r1, r4, #21
 8015a5c:	428f      	cmp	r7, r1
 8015a5e:	bf38      	it	cc
 8015a60:	2204      	movcc	r2, #4
 8015a62:	9201      	str	r2, [sp, #4]
 8015a64:	9a02      	ldr	r2, [sp, #8]
 8015a66:	9303      	str	r3, [sp, #12]
 8015a68:	429a      	cmp	r2, r3
 8015a6a:	d80c      	bhi.n	8015a86 <__multiply+0x9e>
 8015a6c:	2e00      	cmp	r6, #0
 8015a6e:	dd03      	ble.n	8015a78 <__multiply+0x90>
 8015a70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d05a      	beq.n	8015b2e <__multiply+0x146>
 8015a78:	6106      	str	r6, [r0, #16]
 8015a7a:	b005      	add	sp, #20
 8015a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a80:	f843 2b04 	str.w	r2, [r3], #4
 8015a84:	e7d8      	b.n	8015a38 <__multiply+0x50>
 8015a86:	f8b3 a000 	ldrh.w	sl, [r3]
 8015a8a:	f1ba 0f00 	cmp.w	sl, #0
 8015a8e:	d024      	beq.n	8015ada <__multiply+0xf2>
 8015a90:	f104 0e14 	add.w	lr, r4, #20
 8015a94:	46a9      	mov	r9, r5
 8015a96:	f04f 0c00 	mov.w	ip, #0
 8015a9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015a9e:	f8d9 1000 	ldr.w	r1, [r9]
 8015aa2:	fa1f fb82 	uxth.w	fp, r2
 8015aa6:	b289      	uxth	r1, r1
 8015aa8:	fb0a 110b 	mla	r1, sl, fp, r1
 8015aac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8015ab4:	4461      	add	r1, ip
 8015ab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015aba:	fb0a c20b 	mla	r2, sl, fp, ip
 8015abe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015ac2:	b289      	uxth	r1, r1
 8015ac4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015ac8:	4577      	cmp	r7, lr
 8015aca:	f849 1b04 	str.w	r1, [r9], #4
 8015ace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015ad2:	d8e2      	bhi.n	8015a9a <__multiply+0xb2>
 8015ad4:	9a01      	ldr	r2, [sp, #4]
 8015ad6:	f845 c002 	str.w	ip, [r5, r2]
 8015ada:	9a03      	ldr	r2, [sp, #12]
 8015adc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015ae0:	3304      	adds	r3, #4
 8015ae2:	f1b9 0f00 	cmp.w	r9, #0
 8015ae6:	d020      	beq.n	8015b2a <__multiply+0x142>
 8015ae8:	6829      	ldr	r1, [r5, #0]
 8015aea:	f104 0c14 	add.w	ip, r4, #20
 8015aee:	46ae      	mov	lr, r5
 8015af0:	f04f 0a00 	mov.w	sl, #0
 8015af4:	f8bc b000 	ldrh.w	fp, [ip]
 8015af8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015afc:	fb09 220b 	mla	r2, r9, fp, r2
 8015b00:	4492      	add	sl, r2
 8015b02:	b289      	uxth	r1, r1
 8015b04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015b08:	f84e 1b04 	str.w	r1, [lr], #4
 8015b0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015b10:	f8be 1000 	ldrh.w	r1, [lr]
 8015b14:	0c12      	lsrs	r2, r2, #16
 8015b16:	fb09 1102 	mla	r1, r9, r2, r1
 8015b1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015b1e:	4567      	cmp	r7, ip
 8015b20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015b24:	d8e6      	bhi.n	8015af4 <__multiply+0x10c>
 8015b26:	9a01      	ldr	r2, [sp, #4]
 8015b28:	50a9      	str	r1, [r5, r2]
 8015b2a:	3504      	adds	r5, #4
 8015b2c:	e79a      	b.n	8015a64 <__multiply+0x7c>
 8015b2e:	3e01      	subs	r6, #1
 8015b30:	e79c      	b.n	8015a6c <__multiply+0x84>
 8015b32:	bf00      	nop
 8015b34:	08050799 	.word	0x08050799
 8015b38:	08050824 	.word	0x08050824

08015b3c <__pow5mult>:
 8015b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b40:	4615      	mov	r5, r2
 8015b42:	f012 0203 	ands.w	r2, r2, #3
 8015b46:	4606      	mov	r6, r0
 8015b48:	460f      	mov	r7, r1
 8015b4a:	d007      	beq.n	8015b5c <__pow5mult+0x20>
 8015b4c:	4c25      	ldr	r4, [pc, #148]	; (8015be4 <__pow5mult+0xa8>)
 8015b4e:	3a01      	subs	r2, #1
 8015b50:	2300      	movs	r3, #0
 8015b52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015b56:	f7ff fe51 	bl	80157fc <__multadd>
 8015b5a:	4607      	mov	r7, r0
 8015b5c:	10ad      	asrs	r5, r5, #2
 8015b5e:	d03d      	beq.n	8015bdc <__pow5mult+0xa0>
 8015b60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015b62:	b97c      	cbnz	r4, 8015b84 <__pow5mult+0x48>
 8015b64:	2010      	movs	r0, #16
 8015b66:	f7fc fc47 	bl	80123f8 <malloc>
 8015b6a:	4602      	mov	r2, r0
 8015b6c:	6270      	str	r0, [r6, #36]	; 0x24
 8015b6e:	b928      	cbnz	r0, 8015b7c <__pow5mult+0x40>
 8015b70:	4b1d      	ldr	r3, [pc, #116]	; (8015be8 <__pow5mult+0xac>)
 8015b72:	481e      	ldr	r0, [pc, #120]	; (8015bec <__pow5mult+0xb0>)
 8015b74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015b78:	f7fe fb80 	bl	801427c <__assert_func>
 8015b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015b80:	6004      	str	r4, [r0, #0]
 8015b82:	60c4      	str	r4, [r0, #12]
 8015b84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015b88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015b8c:	b94c      	cbnz	r4, 8015ba2 <__pow5mult+0x66>
 8015b8e:	f240 2171 	movw	r1, #625	; 0x271
 8015b92:	4630      	mov	r0, r6
 8015b94:	f7ff ff12 	bl	80159bc <__i2b>
 8015b98:	2300      	movs	r3, #0
 8015b9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8015b9e:	4604      	mov	r4, r0
 8015ba0:	6003      	str	r3, [r0, #0]
 8015ba2:	f04f 0900 	mov.w	r9, #0
 8015ba6:	07eb      	lsls	r3, r5, #31
 8015ba8:	d50a      	bpl.n	8015bc0 <__pow5mult+0x84>
 8015baa:	4639      	mov	r1, r7
 8015bac:	4622      	mov	r2, r4
 8015bae:	4630      	mov	r0, r6
 8015bb0:	f7ff ff1a 	bl	80159e8 <__multiply>
 8015bb4:	4639      	mov	r1, r7
 8015bb6:	4680      	mov	r8, r0
 8015bb8:	4630      	mov	r0, r6
 8015bba:	f7ff fdfd 	bl	80157b8 <_Bfree>
 8015bbe:	4647      	mov	r7, r8
 8015bc0:	106d      	asrs	r5, r5, #1
 8015bc2:	d00b      	beq.n	8015bdc <__pow5mult+0xa0>
 8015bc4:	6820      	ldr	r0, [r4, #0]
 8015bc6:	b938      	cbnz	r0, 8015bd8 <__pow5mult+0x9c>
 8015bc8:	4622      	mov	r2, r4
 8015bca:	4621      	mov	r1, r4
 8015bcc:	4630      	mov	r0, r6
 8015bce:	f7ff ff0b 	bl	80159e8 <__multiply>
 8015bd2:	6020      	str	r0, [r4, #0]
 8015bd4:	f8c0 9000 	str.w	r9, [r0]
 8015bd8:	4604      	mov	r4, r0
 8015bda:	e7e4      	b.n	8015ba6 <__pow5mult+0x6a>
 8015bdc:	4638      	mov	r0, r7
 8015bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015be2:	bf00      	nop
 8015be4:	08050970 	.word	0x08050970
 8015be8:	08050580 	.word	0x08050580
 8015bec:	08050824 	.word	0x08050824

08015bf0 <__lshift>:
 8015bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bf4:	460c      	mov	r4, r1
 8015bf6:	6849      	ldr	r1, [r1, #4]
 8015bf8:	6923      	ldr	r3, [r4, #16]
 8015bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015bfe:	68a3      	ldr	r3, [r4, #8]
 8015c00:	4607      	mov	r7, r0
 8015c02:	4691      	mov	r9, r2
 8015c04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015c08:	f108 0601 	add.w	r6, r8, #1
 8015c0c:	42b3      	cmp	r3, r6
 8015c0e:	db0b      	blt.n	8015c28 <__lshift+0x38>
 8015c10:	4638      	mov	r0, r7
 8015c12:	f7ff fd91 	bl	8015738 <_Balloc>
 8015c16:	4605      	mov	r5, r0
 8015c18:	b948      	cbnz	r0, 8015c2e <__lshift+0x3e>
 8015c1a:	4602      	mov	r2, r0
 8015c1c:	4b2a      	ldr	r3, [pc, #168]	; (8015cc8 <__lshift+0xd8>)
 8015c1e:	482b      	ldr	r0, [pc, #172]	; (8015ccc <__lshift+0xdc>)
 8015c20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015c24:	f7fe fb2a 	bl	801427c <__assert_func>
 8015c28:	3101      	adds	r1, #1
 8015c2a:	005b      	lsls	r3, r3, #1
 8015c2c:	e7ee      	b.n	8015c0c <__lshift+0x1c>
 8015c2e:	2300      	movs	r3, #0
 8015c30:	f100 0114 	add.w	r1, r0, #20
 8015c34:	f100 0210 	add.w	r2, r0, #16
 8015c38:	4618      	mov	r0, r3
 8015c3a:	4553      	cmp	r3, sl
 8015c3c:	db37      	blt.n	8015cae <__lshift+0xbe>
 8015c3e:	6920      	ldr	r0, [r4, #16]
 8015c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c44:	f104 0314 	add.w	r3, r4, #20
 8015c48:	f019 091f 	ands.w	r9, r9, #31
 8015c4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015c50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015c54:	d02f      	beq.n	8015cb6 <__lshift+0xc6>
 8015c56:	f1c9 0e20 	rsb	lr, r9, #32
 8015c5a:	468a      	mov	sl, r1
 8015c5c:	f04f 0c00 	mov.w	ip, #0
 8015c60:	681a      	ldr	r2, [r3, #0]
 8015c62:	fa02 f209 	lsl.w	r2, r2, r9
 8015c66:	ea42 020c 	orr.w	r2, r2, ip
 8015c6a:	f84a 2b04 	str.w	r2, [sl], #4
 8015c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c72:	4298      	cmp	r0, r3
 8015c74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015c78:	d8f2      	bhi.n	8015c60 <__lshift+0x70>
 8015c7a:	1b03      	subs	r3, r0, r4
 8015c7c:	3b15      	subs	r3, #21
 8015c7e:	f023 0303 	bic.w	r3, r3, #3
 8015c82:	3304      	adds	r3, #4
 8015c84:	f104 0215 	add.w	r2, r4, #21
 8015c88:	4290      	cmp	r0, r2
 8015c8a:	bf38      	it	cc
 8015c8c:	2304      	movcc	r3, #4
 8015c8e:	f841 c003 	str.w	ip, [r1, r3]
 8015c92:	f1bc 0f00 	cmp.w	ip, #0
 8015c96:	d001      	beq.n	8015c9c <__lshift+0xac>
 8015c98:	f108 0602 	add.w	r6, r8, #2
 8015c9c:	3e01      	subs	r6, #1
 8015c9e:	4638      	mov	r0, r7
 8015ca0:	612e      	str	r6, [r5, #16]
 8015ca2:	4621      	mov	r1, r4
 8015ca4:	f7ff fd88 	bl	80157b8 <_Bfree>
 8015ca8:	4628      	mov	r0, r5
 8015caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cae:	f842 0f04 	str.w	r0, [r2, #4]!
 8015cb2:	3301      	adds	r3, #1
 8015cb4:	e7c1      	b.n	8015c3a <__lshift+0x4a>
 8015cb6:	3904      	subs	r1, #4
 8015cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8015cc0:	4298      	cmp	r0, r3
 8015cc2:	d8f9      	bhi.n	8015cb8 <__lshift+0xc8>
 8015cc4:	e7ea      	b.n	8015c9c <__lshift+0xac>
 8015cc6:	bf00      	nop
 8015cc8:	08050799 	.word	0x08050799
 8015ccc:	08050824 	.word	0x08050824

08015cd0 <__mcmp>:
 8015cd0:	b530      	push	{r4, r5, lr}
 8015cd2:	6902      	ldr	r2, [r0, #16]
 8015cd4:	690c      	ldr	r4, [r1, #16]
 8015cd6:	1b12      	subs	r2, r2, r4
 8015cd8:	d10e      	bne.n	8015cf8 <__mcmp+0x28>
 8015cda:	f100 0314 	add.w	r3, r0, #20
 8015cde:	3114      	adds	r1, #20
 8015ce0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015ce4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015ce8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015cec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015cf0:	42a5      	cmp	r5, r4
 8015cf2:	d003      	beq.n	8015cfc <__mcmp+0x2c>
 8015cf4:	d305      	bcc.n	8015d02 <__mcmp+0x32>
 8015cf6:	2201      	movs	r2, #1
 8015cf8:	4610      	mov	r0, r2
 8015cfa:	bd30      	pop	{r4, r5, pc}
 8015cfc:	4283      	cmp	r3, r0
 8015cfe:	d3f3      	bcc.n	8015ce8 <__mcmp+0x18>
 8015d00:	e7fa      	b.n	8015cf8 <__mcmp+0x28>
 8015d02:	f04f 32ff 	mov.w	r2, #4294967295
 8015d06:	e7f7      	b.n	8015cf8 <__mcmp+0x28>

08015d08 <__mdiff>:
 8015d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d0c:	460c      	mov	r4, r1
 8015d0e:	4606      	mov	r6, r0
 8015d10:	4611      	mov	r1, r2
 8015d12:	4620      	mov	r0, r4
 8015d14:	4690      	mov	r8, r2
 8015d16:	f7ff ffdb 	bl	8015cd0 <__mcmp>
 8015d1a:	1e05      	subs	r5, r0, #0
 8015d1c:	d110      	bne.n	8015d40 <__mdiff+0x38>
 8015d1e:	4629      	mov	r1, r5
 8015d20:	4630      	mov	r0, r6
 8015d22:	f7ff fd09 	bl	8015738 <_Balloc>
 8015d26:	b930      	cbnz	r0, 8015d36 <__mdiff+0x2e>
 8015d28:	4b3a      	ldr	r3, [pc, #232]	; (8015e14 <__mdiff+0x10c>)
 8015d2a:	4602      	mov	r2, r0
 8015d2c:	f240 2132 	movw	r1, #562	; 0x232
 8015d30:	4839      	ldr	r0, [pc, #228]	; (8015e18 <__mdiff+0x110>)
 8015d32:	f7fe faa3 	bl	801427c <__assert_func>
 8015d36:	2301      	movs	r3, #1
 8015d38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d40:	bfa4      	itt	ge
 8015d42:	4643      	movge	r3, r8
 8015d44:	46a0      	movge	r8, r4
 8015d46:	4630      	mov	r0, r6
 8015d48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015d4c:	bfa6      	itte	ge
 8015d4e:	461c      	movge	r4, r3
 8015d50:	2500      	movge	r5, #0
 8015d52:	2501      	movlt	r5, #1
 8015d54:	f7ff fcf0 	bl	8015738 <_Balloc>
 8015d58:	b920      	cbnz	r0, 8015d64 <__mdiff+0x5c>
 8015d5a:	4b2e      	ldr	r3, [pc, #184]	; (8015e14 <__mdiff+0x10c>)
 8015d5c:	4602      	mov	r2, r0
 8015d5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015d62:	e7e5      	b.n	8015d30 <__mdiff+0x28>
 8015d64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015d68:	6926      	ldr	r6, [r4, #16]
 8015d6a:	60c5      	str	r5, [r0, #12]
 8015d6c:	f104 0914 	add.w	r9, r4, #20
 8015d70:	f108 0514 	add.w	r5, r8, #20
 8015d74:	f100 0e14 	add.w	lr, r0, #20
 8015d78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015d7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015d80:	f108 0210 	add.w	r2, r8, #16
 8015d84:	46f2      	mov	sl, lr
 8015d86:	2100      	movs	r1, #0
 8015d88:	f859 3b04 	ldr.w	r3, [r9], #4
 8015d8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015d90:	fa1f f883 	uxth.w	r8, r3
 8015d94:	fa11 f18b 	uxtah	r1, r1, fp
 8015d98:	0c1b      	lsrs	r3, r3, #16
 8015d9a:	eba1 0808 	sub.w	r8, r1, r8
 8015d9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015da2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015da6:	fa1f f888 	uxth.w	r8, r8
 8015daa:	1419      	asrs	r1, r3, #16
 8015dac:	454e      	cmp	r6, r9
 8015dae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015db2:	f84a 3b04 	str.w	r3, [sl], #4
 8015db6:	d8e7      	bhi.n	8015d88 <__mdiff+0x80>
 8015db8:	1b33      	subs	r3, r6, r4
 8015dba:	3b15      	subs	r3, #21
 8015dbc:	f023 0303 	bic.w	r3, r3, #3
 8015dc0:	3304      	adds	r3, #4
 8015dc2:	3415      	adds	r4, #21
 8015dc4:	42a6      	cmp	r6, r4
 8015dc6:	bf38      	it	cc
 8015dc8:	2304      	movcc	r3, #4
 8015dca:	441d      	add	r5, r3
 8015dcc:	4473      	add	r3, lr
 8015dce:	469e      	mov	lr, r3
 8015dd0:	462e      	mov	r6, r5
 8015dd2:	4566      	cmp	r6, ip
 8015dd4:	d30e      	bcc.n	8015df4 <__mdiff+0xec>
 8015dd6:	f10c 0203 	add.w	r2, ip, #3
 8015dda:	1b52      	subs	r2, r2, r5
 8015ddc:	f022 0203 	bic.w	r2, r2, #3
 8015de0:	3d03      	subs	r5, #3
 8015de2:	45ac      	cmp	ip, r5
 8015de4:	bf38      	it	cc
 8015de6:	2200      	movcc	r2, #0
 8015de8:	441a      	add	r2, r3
 8015dea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015dee:	b17b      	cbz	r3, 8015e10 <__mdiff+0x108>
 8015df0:	6107      	str	r7, [r0, #16]
 8015df2:	e7a3      	b.n	8015d3c <__mdiff+0x34>
 8015df4:	f856 8b04 	ldr.w	r8, [r6], #4
 8015df8:	fa11 f288 	uxtah	r2, r1, r8
 8015dfc:	1414      	asrs	r4, r2, #16
 8015dfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015e02:	b292      	uxth	r2, r2
 8015e04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015e08:	f84e 2b04 	str.w	r2, [lr], #4
 8015e0c:	1421      	asrs	r1, r4, #16
 8015e0e:	e7e0      	b.n	8015dd2 <__mdiff+0xca>
 8015e10:	3f01      	subs	r7, #1
 8015e12:	e7ea      	b.n	8015dea <__mdiff+0xe2>
 8015e14:	08050799 	.word	0x08050799
 8015e18:	08050824 	.word	0x08050824

08015e1c <__ulp>:
 8015e1c:	b082      	sub	sp, #8
 8015e1e:	ed8d 0b00 	vstr	d0, [sp]
 8015e22:	9b01      	ldr	r3, [sp, #4]
 8015e24:	4912      	ldr	r1, [pc, #72]	; (8015e70 <__ulp+0x54>)
 8015e26:	4019      	ands	r1, r3
 8015e28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015e2c:	2900      	cmp	r1, #0
 8015e2e:	dd05      	ble.n	8015e3c <__ulp+0x20>
 8015e30:	2200      	movs	r2, #0
 8015e32:	460b      	mov	r3, r1
 8015e34:	ec43 2b10 	vmov	d0, r2, r3
 8015e38:	b002      	add	sp, #8
 8015e3a:	4770      	bx	lr
 8015e3c:	4249      	negs	r1, r1
 8015e3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015e42:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015e46:	f04f 0200 	mov.w	r2, #0
 8015e4a:	f04f 0300 	mov.w	r3, #0
 8015e4e:	da04      	bge.n	8015e5a <__ulp+0x3e>
 8015e50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015e54:	fa41 f300 	asr.w	r3, r1, r0
 8015e58:	e7ec      	b.n	8015e34 <__ulp+0x18>
 8015e5a:	f1a0 0114 	sub.w	r1, r0, #20
 8015e5e:	291e      	cmp	r1, #30
 8015e60:	bfda      	itte	le
 8015e62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015e66:	fa20 f101 	lsrle.w	r1, r0, r1
 8015e6a:	2101      	movgt	r1, #1
 8015e6c:	460a      	mov	r2, r1
 8015e6e:	e7e1      	b.n	8015e34 <__ulp+0x18>
 8015e70:	7ff00000 	.word	0x7ff00000

08015e74 <__b2d>:
 8015e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e76:	6905      	ldr	r5, [r0, #16]
 8015e78:	f100 0714 	add.w	r7, r0, #20
 8015e7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015e80:	1f2e      	subs	r6, r5, #4
 8015e82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015e86:	4620      	mov	r0, r4
 8015e88:	f7ff fd48 	bl	801591c <__hi0bits>
 8015e8c:	f1c0 0320 	rsb	r3, r0, #32
 8015e90:	280a      	cmp	r0, #10
 8015e92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015f10 <__b2d+0x9c>
 8015e96:	600b      	str	r3, [r1, #0]
 8015e98:	dc14      	bgt.n	8015ec4 <__b2d+0x50>
 8015e9a:	f1c0 0e0b 	rsb	lr, r0, #11
 8015e9e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015ea2:	42b7      	cmp	r7, r6
 8015ea4:	ea41 030c 	orr.w	r3, r1, ip
 8015ea8:	bf34      	ite	cc
 8015eaa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015eae:	2100      	movcs	r1, #0
 8015eb0:	3015      	adds	r0, #21
 8015eb2:	fa04 f000 	lsl.w	r0, r4, r0
 8015eb6:	fa21 f10e 	lsr.w	r1, r1, lr
 8015eba:	ea40 0201 	orr.w	r2, r0, r1
 8015ebe:	ec43 2b10 	vmov	d0, r2, r3
 8015ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ec4:	42b7      	cmp	r7, r6
 8015ec6:	bf3a      	itte	cc
 8015ec8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015ecc:	f1a5 0608 	subcc.w	r6, r5, #8
 8015ed0:	2100      	movcs	r1, #0
 8015ed2:	380b      	subs	r0, #11
 8015ed4:	d017      	beq.n	8015f06 <__b2d+0x92>
 8015ed6:	f1c0 0c20 	rsb	ip, r0, #32
 8015eda:	fa04 f500 	lsl.w	r5, r4, r0
 8015ede:	42be      	cmp	r6, r7
 8015ee0:	fa21 f40c 	lsr.w	r4, r1, ip
 8015ee4:	ea45 0504 	orr.w	r5, r5, r4
 8015ee8:	bf8c      	ite	hi
 8015eea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015eee:	2400      	movls	r4, #0
 8015ef0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015ef4:	fa01 f000 	lsl.w	r0, r1, r0
 8015ef8:	fa24 f40c 	lsr.w	r4, r4, ip
 8015efc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015f00:	ea40 0204 	orr.w	r2, r0, r4
 8015f04:	e7db      	b.n	8015ebe <__b2d+0x4a>
 8015f06:	ea44 030c 	orr.w	r3, r4, ip
 8015f0a:	460a      	mov	r2, r1
 8015f0c:	e7d7      	b.n	8015ebe <__b2d+0x4a>
 8015f0e:	bf00      	nop
 8015f10:	3ff00000 	.word	0x3ff00000

08015f14 <__d2b>:
 8015f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f18:	4689      	mov	r9, r1
 8015f1a:	2101      	movs	r1, #1
 8015f1c:	ec57 6b10 	vmov	r6, r7, d0
 8015f20:	4690      	mov	r8, r2
 8015f22:	f7ff fc09 	bl	8015738 <_Balloc>
 8015f26:	4604      	mov	r4, r0
 8015f28:	b930      	cbnz	r0, 8015f38 <__d2b+0x24>
 8015f2a:	4602      	mov	r2, r0
 8015f2c:	4b25      	ldr	r3, [pc, #148]	; (8015fc4 <__d2b+0xb0>)
 8015f2e:	4826      	ldr	r0, [pc, #152]	; (8015fc8 <__d2b+0xb4>)
 8015f30:	f240 310a 	movw	r1, #778	; 0x30a
 8015f34:	f7fe f9a2 	bl	801427c <__assert_func>
 8015f38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015f3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015f40:	bb35      	cbnz	r5, 8015f90 <__d2b+0x7c>
 8015f42:	2e00      	cmp	r6, #0
 8015f44:	9301      	str	r3, [sp, #4]
 8015f46:	d028      	beq.n	8015f9a <__d2b+0x86>
 8015f48:	4668      	mov	r0, sp
 8015f4a:	9600      	str	r6, [sp, #0]
 8015f4c:	f7ff fd06 	bl	801595c <__lo0bits>
 8015f50:	9900      	ldr	r1, [sp, #0]
 8015f52:	b300      	cbz	r0, 8015f96 <__d2b+0x82>
 8015f54:	9a01      	ldr	r2, [sp, #4]
 8015f56:	f1c0 0320 	rsb	r3, r0, #32
 8015f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8015f5e:	430b      	orrs	r3, r1
 8015f60:	40c2      	lsrs	r2, r0
 8015f62:	6163      	str	r3, [r4, #20]
 8015f64:	9201      	str	r2, [sp, #4]
 8015f66:	9b01      	ldr	r3, [sp, #4]
 8015f68:	61a3      	str	r3, [r4, #24]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	bf14      	ite	ne
 8015f6e:	2202      	movne	r2, #2
 8015f70:	2201      	moveq	r2, #1
 8015f72:	6122      	str	r2, [r4, #16]
 8015f74:	b1d5      	cbz	r5, 8015fac <__d2b+0x98>
 8015f76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015f7a:	4405      	add	r5, r0
 8015f7c:	f8c9 5000 	str.w	r5, [r9]
 8015f80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015f84:	f8c8 0000 	str.w	r0, [r8]
 8015f88:	4620      	mov	r0, r4
 8015f8a:	b003      	add	sp, #12
 8015f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015f94:	e7d5      	b.n	8015f42 <__d2b+0x2e>
 8015f96:	6161      	str	r1, [r4, #20]
 8015f98:	e7e5      	b.n	8015f66 <__d2b+0x52>
 8015f9a:	a801      	add	r0, sp, #4
 8015f9c:	f7ff fcde 	bl	801595c <__lo0bits>
 8015fa0:	9b01      	ldr	r3, [sp, #4]
 8015fa2:	6163      	str	r3, [r4, #20]
 8015fa4:	2201      	movs	r2, #1
 8015fa6:	6122      	str	r2, [r4, #16]
 8015fa8:	3020      	adds	r0, #32
 8015faa:	e7e3      	b.n	8015f74 <__d2b+0x60>
 8015fac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015fb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015fb4:	f8c9 0000 	str.w	r0, [r9]
 8015fb8:	6918      	ldr	r0, [r3, #16]
 8015fba:	f7ff fcaf 	bl	801591c <__hi0bits>
 8015fbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015fc2:	e7df      	b.n	8015f84 <__d2b+0x70>
 8015fc4:	08050799 	.word	0x08050799
 8015fc8:	08050824 	.word	0x08050824

08015fcc <__ratio>:
 8015fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd0:	4688      	mov	r8, r1
 8015fd2:	4669      	mov	r1, sp
 8015fd4:	4681      	mov	r9, r0
 8015fd6:	f7ff ff4d 	bl	8015e74 <__b2d>
 8015fda:	a901      	add	r1, sp, #4
 8015fdc:	4640      	mov	r0, r8
 8015fde:	ec55 4b10 	vmov	r4, r5, d0
 8015fe2:	f7ff ff47 	bl	8015e74 <__b2d>
 8015fe6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015fea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015fee:	eba3 0c02 	sub.w	ip, r3, r2
 8015ff2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015ff6:	1a9b      	subs	r3, r3, r2
 8015ff8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015ffc:	ec51 0b10 	vmov	r0, r1, d0
 8016000:	2b00      	cmp	r3, #0
 8016002:	bfd6      	itet	le
 8016004:	460a      	movle	r2, r1
 8016006:	462a      	movgt	r2, r5
 8016008:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801600c:	468b      	mov	fp, r1
 801600e:	462f      	mov	r7, r5
 8016010:	bfd4      	ite	le
 8016012:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016016:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801601a:	4620      	mov	r0, r4
 801601c:	ee10 2a10 	vmov	r2, s0
 8016020:	465b      	mov	r3, fp
 8016022:	4639      	mov	r1, r7
 8016024:	f7ea fc42 	bl	80008ac <__aeabi_ddiv>
 8016028:	ec41 0b10 	vmov	d0, r0, r1
 801602c:	b003      	add	sp, #12
 801602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016032 <__copybits>:
 8016032:	3901      	subs	r1, #1
 8016034:	b570      	push	{r4, r5, r6, lr}
 8016036:	1149      	asrs	r1, r1, #5
 8016038:	6914      	ldr	r4, [r2, #16]
 801603a:	3101      	adds	r1, #1
 801603c:	f102 0314 	add.w	r3, r2, #20
 8016040:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016044:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016048:	1f05      	subs	r5, r0, #4
 801604a:	42a3      	cmp	r3, r4
 801604c:	d30c      	bcc.n	8016068 <__copybits+0x36>
 801604e:	1aa3      	subs	r3, r4, r2
 8016050:	3b11      	subs	r3, #17
 8016052:	f023 0303 	bic.w	r3, r3, #3
 8016056:	3211      	adds	r2, #17
 8016058:	42a2      	cmp	r2, r4
 801605a:	bf88      	it	hi
 801605c:	2300      	movhi	r3, #0
 801605e:	4418      	add	r0, r3
 8016060:	2300      	movs	r3, #0
 8016062:	4288      	cmp	r0, r1
 8016064:	d305      	bcc.n	8016072 <__copybits+0x40>
 8016066:	bd70      	pop	{r4, r5, r6, pc}
 8016068:	f853 6b04 	ldr.w	r6, [r3], #4
 801606c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016070:	e7eb      	b.n	801604a <__copybits+0x18>
 8016072:	f840 3b04 	str.w	r3, [r0], #4
 8016076:	e7f4      	b.n	8016062 <__copybits+0x30>

08016078 <__any_on>:
 8016078:	f100 0214 	add.w	r2, r0, #20
 801607c:	6900      	ldr	r0, [r0, #16]
 801607e:	114b      	asrs	r3, r1, #5
 8016080:	4298      	cmp	r0, r3
 8016082:	b510      	push	{r4, lr}
 8016084:	db11      	blt.n	80160aa <__any_on+0x32>
 8016086:	dd0a      	ble.n	801609e <__any_on+0x26>
 8016088:	f011 011f 	ands.w	r1, r1, #31
 801608c:	d007      	beq.n	801609e <__any_on+0x26>
 801608e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016092:	fa24 f001 	lsr.w	r0, r4, r1
 8016096:	fa00 f101 	lsl.w	r1, r0, r1
 801609a:	428c      	cmp	r4, r1
 801609c:	d10b      	bne.n	80160b6 <__any_on+0x3e>
 801609e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80160a2:	4293      	cmp	r3, r2
 80160a4:	d803      	bhi.n	80160ae <__any_on+0x36>
 80160a6:	2000      	movs	r0, #0
 80160a8:	bd10      	pop	{r4, pc}
 80160aa:	4603      	mov	r3, r0
 80160ac:	e7f7      	b.n	801609e <__any_on+0x26>
 80160ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80160b2:	2900      	cmp	r1, #0
 80160b4:	d0f5      	beq.n	80160a2 <__any_on+0x2a>
 80160b6:	2001      	movs	r0, #1
 80160b8:	e7f6      	b.n	80160a8 <__any_on+0x30>

080160ba <_calloc_r>:
 80160ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160bc:	fba1 2402 	umull	r2, r4, r1, r2
 80160c0:	b94c      	cbnz	r4, 80160d6 <_calloc_r+0x1c>
 80160c2:	4611      	mov	r1, r2
 80160c4:	9201      	str	r2, [sp, #4]
 80160c6:	f7fc fa21 	bl	801250c <_malloc_r>
 80160ca:	9a01      	ldr	r2, [sp, #4]
 80160cc:	4605      	mov	r5, r0
 80160ce:	b930      	cbnz	r0, 80160de <_calloc_r+0x24>
 80160d0:	4628      	mov	r0, r5
 80160d2:	b003      	add	sp, #12
 80160d4:	bd30      	pop	{r4, r5, pc}
 80160d6:	220c      	movs	r2, #12
 80160d8:	6002      	str	r2, [r0, #0]
 80160da:	2500      	movs	r5, #0
 80160dc:	e7f8      	b.n	80160d0 <_calloc_r+0x16>
 80160de:	4621      	mov	r1, r4
 80160e0:	f7fc f9a0 	bl	8012424 <memset>
 80160e4:	e7f4      	b.n	80160d0 <_calloc_r+0x16>

080160e6 <_realloc_r>:
 80160e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160ea:	4680      	mov	r8, r0
 80160ec:	4614      	mov	r4, r2
 80160ee:	460e      	mov	r6, r1
 80160f0:	b921      	cbnz	r1, 80160fc <_realloc_r+0x16>
 80160f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160f6:	4611      	mov	r1, r2
 80160f8:	f7fc ba08 	b.w	801250c <_malloc_r>
 80160fc:	b92a      	cbnz	r2, 801610a <_realloc_r+0x24>
 80160fe:	f7fc f999 	bl	8012434 <_free_r>
 8016102:	4625      	mov	r5, r4
 8016104:	4628      	mov	r0, r5
 8016106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801610a:	f001 fa1b 	bl	8017544 <_malloc_usable_size_r>
 801610e:	4284      	cmp	r4, r0
 8016110:	4607      	mov	r7, r0
 8016112:	d802      	bhi.n	801611a <_realloc_r+0x34>
 8016114:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016118:	d812      	bhi.n	8016140 <_realloc_r+0x5a>
 801611a:	4621      	mov	r1, r4
 801611c:	4640      	mov	r0, r8
 801611e:	f7fc f9f5 	bl	801250c <_malloc_r>
 8016122:	4605      	mov	r5, r0
 8016124:	2800      	cmp	r0, #0
 8016126:	d0ed      	beq.n	8016104 <_realloc_r+0x1e>
 8016128:	42bc      	cmp	r4, r7
 801612a:	4622      	mov	r2, r4
 801612c:	4631      	mov	r1, r6
 801612e:	bf28      	it	cs
 8016130:	463a      	movcs	r2, r7
 8016132:	f7fc f969 	bl	8012408 <memcpy>
 8016136:	4631      	mov	r1, r6
 8016138:	4640      	mov	r0, r8
 801613a:	f7fc f97b 	bl	8012434 <_free_r>
 801613e:	e7e1      	b.n	8016104 <_realloc_r+0x1e>
 8016140:	4635      	mov	r5, r6
 8016142:	e7df      	b.n	8016104 <_realloc_r+0x1e>

08016144 <__ssputs_r>:
 8016144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016148:	688e      	ldr	r6, [r1, #8]
 801614a:	429e      	cmp	r6, r3
 801614c:	4682      	mov	sl, r0
 801614e:	460c      	mov	r4, r1
 8016150:	4690      	mov	r8, r2
 8016152:	461f      	mov	r7, r3
 8016154:	d838      	bhi.n	80161c8 <__ssputs_r+0x84>
 8016156:	898a      	ldrh	r2, [r1, #12]
 8016158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801615c:	d032      	beq.n	80161c4 <__ssputs_r+0x80>
 801615e:	6825      	ldr	r5, [r4, #0]
 8016160:	6909      	ldr	r1, [r1, #16]
 8016162:	eba5 0901 	sub.w	r9, r5, r1
 8016166:	6965      	ldr	r5, [r4, #20]
 8016168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801616c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016170:	3301      	adds	r3, #1
 8016172:	444b      	add	r3, r9
 8016174:	106d      	asrs	r5, r5, #1
 8016176:	429d      	cmp	r5, r3
 8016178:	bf38      	it	cc
 801617a:	461d      	movcc	r5, r3
 801617c:	0553      	lsls	r3, r2, #21
 801617e:	d531      	bpl.n	80161e4 <__ssputs_r+0xa0>
 8016180:	4629      	mov	r1, r5
 8016182:	f7fc f9c3 	bl	801250c <_malloc_r>
 8016186:	4606      	mov	r6, r0
 8016188:	b950      	cbnz	r0, 80161a0 <__ssputs_r+0x5c>
 801618a:	230c      	movs	r3, #12
 801618c:	f8ca 3000 	str.w	r3, [sl]
 8016190:	89a3      	ldrh	r3, [r4, #12]
 8016192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016196:	81a3      	strh	r3, [r4, #12]
 8016198:	f04f 30ff 	mov.w	r0, #4294967295
 801619c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161a0:	6921      	ldr	r1, [r4, #16]
 80161a2:	464a      	mov	r2, r9
 80161a4:	f7fc f930 	bl	8012408 <memcpy>
 80161a8:	89a3      	ldrh	r3, [r4, #12]
 80161aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80161ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161b2:	81a3      	strh	r3, [r4, #12]
 80161b4:	6126      	str	r6, [r4, #16]
 80161b6:	6165      	str	r5, [r4, #20]
 80161b8:	444e      	add	r6, r9
 80161ba:	eba5 0509 	sub.w	r5, r5, r9
 80161be:	6026      	str	r6, [r4, #0]
 80161c0:	60a5      	str	r5, [r4, #8]
 80161c2:	463e      	mov	r6, r7
 80161c4:	42be      	cmp	r6, r7
 80161c6:	d900      	bls.n	80161ca <__ssputs_r+0x86>
 80161c8:	463e      	mov	r6, r7
 80161ca:	6820      	ldr	r0, [r4, #0]
 80161cc:	4632      	mov	r2, r6
 80161ce:	4641      	mov	r1, r8
 80161d0:	f001 f99e 	bl	8017510 <memmove>
 80161d4:	68a3      	ldr	r3, [r4, #8]
 80161d6:	1b9b      	subs	r3, r3, r6
 80161d8:	60a3      	str	r3, [r4, #8]
 80161da:	6823      	ldr	r3, [r4, #0]
 80161dc:	4433      	add	r3, r6
 80161de:	6023      	str	r3, [r4, #0]
 80161e0:	2000      	movs	r0, #0
 80161e2:	e7db      	b.n	801619c <__ssputs_r+0x58>
 80161e4:	462a      	mov	r2, r5
 80161e6:	f7ff ff7e 	bl	80160e6 <_realloc_r>
 80161ea:	4606      	mov	r6, r0
 80161ec:	2800      	cmp	r0, #0
 80161ee:	d1e1      	bne.n	80161b4 <__ssputs_r+0x70>
 80161f0:	6921      	ldr	r1, [r4, #16]
 80161f2:	4650      	mov	r0, sl
 80161f4:	f7fc f91e 	bl	8012434 <_free_r>
 80161f8:	e7c7      	b.n	801618a <__ssputs_r+0x46>
	...

080161fc <_svfiprintf_r>:
 80161fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016200:	4698      	mov	r8, r3
 8016202:	898b      	ldrh	r3, [r1, #12]
 8016204:	061b      	lsls	r3, r3, #24
 8016206:	b09d      	sub	sp, #116	; 0x74
 8016208:	4607      	mov	r7, r0
 801620a:	460d      	mov	r5, r1
 801620c:	4614      	mov	r4, r2
 801620e:	d50e      	bpl.n	801622e <_svfiprintf_r+0x32>
 8016210:	690b      	ldr	r3, [r1, #16]
 8016212:	b963      	cbnz	r3, 801622e <_svfiprintf_r+0x32>
 8016214:	2140      	movs	r1, #64	; 0x40
 8016216:	f7fc f979 	bl	801250c <_malloc_r>
 801621a:	6028      	str	r0, [r5, #0]
 801621c:	6128      	str	r0, [r5, #16]
 801621e:	b920      	cbnz	r0, 801622a <_svfiprintf_r+0x2e>
 8016220:	230c      	movs	r3, #12
 8016222:	603b      	str	r3, [r7, #0]
 8016224:	f04f 30ff 	mov.w	r0, #4294967295
 8016228:	e0d1      	b.n	80163ce <_svfiprintf_r+0x1d2>
 801622a:	2340      	movs	r3, #64	; 0x40
 801622c:	616b      	str	r3, [r5, #20]
 801622e:	2300      	movs	r3, #0
 8016230:	9309      	str	r3, [sp, #36]	; 0x24
 8016232:	2320      	movs	r3, #32
 8016234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016238:	f8cd 800c 	str.w	r8, [sp, #12]
 801623c:	2330      	movs	r3, #48	; 0x30
 801623e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80163e8 <_svfiprintf_r+0x1ec>
 8016242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016246:	f04f 0901 	mov.w	r9, #1
 801624a:	4623      	mov	r3, r4
 801624c:	469a      	mov	sl, r3
 801624e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016252:	b10a      	cbz	r2, 8016258 <_svfiprintf_r+0x5c>
 8016254:	2a25      	cmp	r2, #37	; 0x25
 8016256:	d1f9      	bne.n	801624c <_svfiprintf_r+0x50>
 8016258:	ebba 0b04 	subs.w	fp, sl, r4
 801625c:	d00b      	beq.n	8016276 <_svfiprintf_r+0x7a>
 801625e:	465b      	mov	r3, fp
 8016260:	4622      	mov	r2, r4
 8016262:	4629      	mov	r1, r5
 8016264:	4638      	mov	r0, r7
 8016266:	f7ff ff6d 	bl	8016144 <__ssputs_r>
 801626a:	3001      	adds	r0, #1
 801626c:	f000 80aa 	beq.w	80163c4 <_svfiprintf_r+0x1c8>
 8016270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016272:	445a      	add	r2, fp
 8016274:	9209      	str	r2, [sp, #36]	; 0x24
 8016276:	f89a 3000 	ldrb.w	r3, [sl]
 801627a:	2b00      	cmp	r3, #0
 801627c:	f000 80a2 	beq.w	80163c4 <_svfiprintf_r+0x1c8>
 8016280:	2300      	movs	r3, #0
 8016282:	f04f 32ff 	mov.w	r2, #4294967295
 8016286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801628a:	f10a 0a01 	add.w	sl, sl, #1
 801628e:	9304      	str	r3, [sp, #16]
 8016290:	9307      	str	r3, [sp, #28]
 8016292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016296:	931a      	str	r3, [sp, #104]	; 0x68
 8016298:	4654      	mov	r4, sl
 801629a:	2205      	movs	r2, #5
 801629c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162a0:	4851      	ldr	r0, [pc, #324]	; (80163e8 <_svfiprintf_r+0x1ec>)
 80162a2:	f7e9 ffcd 	bl	8000240 <memchr>
 80162a6:	9a04      	ldr	r2, [sp, #16]
 80162a8:	b9d8      	cbnz	r0, 80162e2 <_svfiprintf_r+0xe6>
 80162aa:	06d0      	lsls	r0, r2, #27
 80162ac:	bf44      	itt	mi
 80162ae:	2320      	movmi	r3, #32
 80162b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162b4:	0711      	lsls	r1, r2, #28
 80162b6:	bf44      	itt	mi
 80162b8:	232b      	movmi	r3, #43	; 0x2b
 80162ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162be:	f89a 3000 	ldrb.w	r3, [sl]
 80162c2:	2b2a      	cmp	r3, #42	; 0x2a
 80162c4:	d015      	beq.n	80162f2 <_svfiprintf_r+0xf6>
 80162c6:	9a07      	ldr	r2, [sp, #28]
 80162c8:	4654      	mov	r4, sl
 80162ca:	2000      	movs	r0, #0
 80162cc:	f04f 0c0a 	mov.w	ip, #10
 80162d0:	4621      	mov	r1, r4
 80162d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162d6:	3b30      	subs	r3, #48	; 0x30
 80162d8:	2b09      	cmp	r3, #9
 80162da:	d94e      	bls.n	801637a <_svfiprintf_r+0x17e>
 80162dc:	b1b0      	cbz	r0, 801630c <_svfiprintf_r+0x110>
 80162de:	9207      	str	r2, [sp, #28]
 80162e0:	e014      	b.n	801630c <_svfiprintf_r+0x110>
 80162e2:	eba0 0308 	sub.w	r3, r0, r8
 80162e6:	fa09 f303 	lsl.w	r3, r9, r3
 80162ea:	4313      	orrs	r3, r2
 80162ec:	9304      	str	r3, [sp, #16]
 80162ee:	46a2      	mov	sl, r4
 80162f0:	e7d2      	b.n	8016298 <_svfiprintf_r+0x9c>
 80162f2:	9b03      	ldr	r3, [sp, #12]
 80162f4:	1d19      	adds	r1, r3, #4
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	9103      	str	r1, [sp, #12]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	bfbb      	ittet	lt
 80162fe:	425b      	neglt	r3, r3
 8016300:	f042 0202 	orrlt.w	r2, r2, #2
 8016304:	9307      	strge	r3, [sp, #28]
 8016306:	9307      	strlt	r3, [sp, #28]
 8016308:	bfb8      	it	lt
 801630a:	9204      	strlt	r2, [sp, #16]
 801630c:	7823      	ldrb	r3, [r4, #0]
 801630e:	2b2e      	cmp	r3, #46	; 0x2e
 8016310:	d10c      	bne.n	801632c <_svfiprintf_r+0x130>
 8016312:	7863      	ldrb	r3, [r4, #1]
 8016314:	2b2a      	cmp	r3, #42	; 0x2a
 8016316:	d135      	bne.n	8016384 <_svfiprintf_r+0x188>
 8016318:	9b03      	ldr	r3, [sp, #12]
 801631a:	1d1a      	adds	r2, r3, #4
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	9203      	str	r2, [sp, #12]
 8016320:	2b00      	cmp	r3, #0
 8016322:	bfb8      	it	lt
 8016324:	f04f 33ff 	movlt.w	r3, #4294967295
 8016328:	3402      	adds	r4, #2
 801632a:	9305      	str	r3, [sp, #20]
 801632c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80163f8 <_svfiprintf_r+0x1fc>
 8016330:	7821      	ldrb	r1, [r4, #0]
 8016332:	2203      	movs	r2, #3
 8016334:	4650      	mov	r0, sl
 8016336:	f7e9 ff83 	bl	8000240 <memchr>
 801633a:	b140      	cbz	r0, 801634e <_svfiprintf_r+0x152>
 801633c:	2340      	movs	r3, #64	; 0x40
 801633e:	eba0 000a 	sub.w	r0, r0, sl
 8016342:	fa03 f000 	lsl.w	r0, r3, r0
 8016346:	9b04      	ldr	r3, [sp, #16]
 8016348:	4303      	orrs	r3, r0
 801634a:	3401      	adds	r4, #1
 801634c:	9304      	str	r3, [sp, #16]
 801634e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016352:	4826      	ldr	r0, [pc, #152]	; (80163ec <_svfiprintf_r+0x1f0>)
 8016354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016358:	2206      	movs	r2, #6
 801635a:	f7e9 ff71 	bl	8000240 <memchr>
 801635e:	2800      	cmp	r0, #0
 8016360:	d038      	beq.n	80163d4 <_svfiprintf_r+0x1d8>
 8016362:	4b23      	ldr	r3, [pc, #140]	; (80163f0 <_svfiprintf_r+0x1f4>)
 8016364:	bb1b      	cbnz	r3, 80163ae <_svfiprintf_r+0x1b2>
 8016366:	9b03      	ldr	r3, [sp, #12]
 8016368:	3307      	adds	r3, #7
 801636a:	f023 0307 	bic.w	r3, r3, #7
 801636e:	3308      	adds	r3, #8
 8016370:	9303      	str	r3, [sp, #12]
 8016372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016374:	4433      	add	r3, r6
 8016376:	9309      	str	r3, [sp, #36]	; 0x24
 8016378:	e767      	b.n	801624a <_svfiprintf_r+0x4e>
 801637a:	fb0c 3202 	mla	r2, ip, r2, r3
 801637e:	460c      	mov	r4, r1
 8016380:	2001      	movs	r0, #1
 8016382:	e7a5      	b.n	80162d0 <_svfiprintf_r+0xd4>
 8016384:	2300      	movs	r3, #0
 8016386:	3401      	adds	r4, #1
 8016388:	9305      	str	r3, [sp, #20]
 801638a:	4619      	mov	r1, r3
 801638c:	f04f 0c0a 	mov.w	ip, #10
 8016390:	4620      	mov	r0, r4
 8016392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016396:	3a30      	subs	r2, #48	; 0x30
 8016398:	2a09      	cmp	r2, #9
 801639a:	d903      	bls.n	80163a4 <_svfiprintf_r+0x1a8>
 801639c:	2b00      	cmp	r3, #0
 801639e:	d0c5      	beq.n	801632c <_svfiprintf_r+0x130>
 80163a0:	9105      	str	r1, [sp, #20]
 80163a2:	e7c3      	b.n	801632c <_svfiprintf_r+0x130>
 80163a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80163a8:	4604      	mov	r4, r0
 80163aa:	2301      	movs	r3, #1
 80163ac:	e7f0      	b.n	8016390 <_svfiprintf_r+0x194>
 80163ae:	ab03      	add	r3, sp, #12
 80163b0:	9300      	str	r3, [sp, #0]
 80163b2:	462a      	mov	r2, r5
 80163b4:	4b0f      	ldr	r3, [pc, #60]	; (80163f4 <_svfiprintf_r+0x1f8>)
 80163b6:	a904      	add	r1, sp, #16
 80163b8:	4638      	mov	r0, r7
 80163ba:	f7fc f9bb 	bl	8012734 <_printf_float>
 80163be:	1c42      	adds	r2, r0, #1
 80163c0:	4606      	mov	r6, r0
 80163c2:	d1d6      	bne.n	8016372 <_svfiprintf_r+0x176>
 80163c4:	89ab      	ldrh	r3, [r5, #12]
 80163c6:	065b      	lsls	r3, r3, #25
 80163c8:	f53f af2c 	bmi.w	8016224 <_svfiprintf_r+0x28>
 80163cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80163ce:	b01d      	add	sp, #116	; 0x74
 80163d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163d4:	ab03      	add	r3, sp, #12
 80163d6:	9300      	str	r3, [sp, #0]
 80163d8:	462a      	mov	r2, r5
 80163da:	4b06      	ldr	r3, [pc, #24]	; (80163f4 <_svfiprintf_r+0x1f8>)
 80163dc:	a904      	add	r1, sp, #16
 80163de:	4638      	mov	r0, r7
 80163e0:	f7fc fc4c 	bl	8012c7c <_printf_i>
 80163e4:	e7eb      	b.n	80163be <_svfiprintf_r+0x1c2>
 80163e6:	bf00      	nop
 80163e8:	0805097c 	.word	0x0805097c
 80163ec:	08050986 	.word	0x08050986
 80163f0:	08012735 	.word	0x08012735
 80163f4:	08016145 	.word	0x08016145
 80163f8:	08050982 	.word	0x08050982

080163fc <_sungetc_r>:
 80163fc:	b538      	push	{r3, r4, r5, lr}
 80163fe:	1c4b      	adds	r3, r1, #1
 8016400:	4614      	mov	r4, r2
 8016402:	d103      	bne.n	801640c <_sungetc_r+0x10>
 8016404:	f04f 35ff 	mov.w	r5, #4294967295
 8016408:	4628      	mov	r0, r5
 801640a:	bd38      	pop	{r3, r4, r5, pc}
 801640c:	8993      	ldrh	r3, [r2, #12]
 801640e:	f023 0320 	bic.w	r3, r3, #32
 8016412:	8193      	strh	r3, [r2, #12]
 8016414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016416:	6852      	ldr	r2, [r2, #4]
 8016418:	b2cd      	uxtb	r5, r1
 801641a:	b18b      	cbz	r3, 8016440 <_sungetc_r+0x44>
 801641c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801641e:	4293      	cmp	r3, r2
 8016420:	dd08      	ble.n	8016434 <_sungetc_r+0x38>
 8016422:	6823      	ldr	r3, [r4, #0]
 8016424:	1e5a      	subs	r2, r3, #1
 8016426:	6022      	str	r2, [r4, #0]
 8016428:	f803 5c01 	strb.w	r5, [r3, #-1]
 801642c:	6863      	ldr	r3, [r4, #4]
 801642e:	3301      	adds	r3, #1
 8016430:	6063      	str	r3, [r4, #4]
 8016432:	e7e9      	b.n	8016408 <_sungetc_r+0xc>
 8016434:	4621      	mov	r1, r4
 8016436:	f000 fd3b 	bl	8016eb0 <__submore>
 801643a:	2800      	cmp	r0, #0
 801643c:	d0f1      	beq.n	8016422 <_sungetc_r+0x26>
 801643e:	e7e1      	b.n	8016404 <_sungetc_r+0x8>
 8016440:	6921      	ldr	r1, [r4, #16]
 8016442:	6823      	ldr	r3, [r4, #0]
 8016444:	b151      	cbz	r1, 801645c <_sungetc_r+0x60>
 8016446:	4299      	cmp	r1, r3
 8016448:	d208      	bcs.n	801645c <_sungetc_r+0x60>
 801644a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801644e:	42a9      	cmp	r1, r5
 8016450:	d104      	bne.n	801645c <_sungetc_r+0x60>
 8016452:	3b01      	subs	r3, #1
 8016454:	3201      	adds	r2, #1
 8016456:	6023      	str	r3, [r4, #0]
 8016458:	6062      	str	r2, [r4, #4]
 801645a:	e7d5      	b.n	8016408 <_sungetc_r+0xc>
 801645c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016464:	6363      	str	r3, [r4, #52]	; 0x34
 8016466:	2303      	movs	r3, #3
 8016468:	63a3      	str	r3, [r4, #56]	; 0x38
 801646a:	4623      	mov	r3, r4
 801646c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016470:	6023      	str	r3, [r4, #0]
 8016472:	2301      	movs	r3, #1
 8016474:	e7dc      	b.n	8016430 <_sungetc_r+0x34>

08016476 <__ssrefill_r>:
 8016476:	b510      	push	{r4, lr}
 8016478:	460c      	mov	r4, r1
 801647a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801647c:	b169      	cbz	r1, 801649a <__ssrefill_r+0x24>
 801647e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016482:	4299      	cmp	r1, r3
 8016484:	d001      	beq.n	801648a <__ssrefill_r+0x14>
 8016486:	f7fb ffd5 	bl	8012434 <_free_r>
 801648a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801648c:	6063      	str	r3, [r4, #4]
 801648e:	2000      	movs	r0, #0
 8016490:	6360      	str	r0, [r4, #52]	; 0x34
 8016492:	b113      	cbz	r3, 801649a <__ssrefill_r+0x24>
 8016494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016496:	6023      	str	r3, [r4, #0]
 8016498:	bd10      	pop	{r4, pc}
 801649a:	6923      	ldr	r3, [r4, #16]
 801649c:	6023      	str	r3, [r4, #0]
 801649e:	2300      	movs	r3, #0
 80164a0:	6063      	str	r3, [r4, #4]
 80164a2:	89a3      	ldrh	r3, [r4, #12]
 80164a4:	f043 0320 	orr.w	r3, r3, #32
 80164a8:	81a3      	strh	r3, [r4, #12]
 80164aa:	f04f 30ff 	mov.w	r0, #4294967295
 80164ae:	e7f3      	b.n	8016498 <__ssrefill_r+0x22>

080164b0 <__ssvfiscanf_r>:
 80164b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b4:	460c      	mov	r4, r1
 80164b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80164ba:	2100      	movs	r1, #0
 80164bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80164c0:	49a6      	ldr	r1, [pc, #664]	; (801675c <__ssvfiscanf_r+0x2ac>)
 80164c2:	91a0      	str	r1, [sp, #640]	; 0x280
 80164c4:	f10d 0804 	add.w	r8, sp, #4
 80164c8:	49a5      	ldr	r1, [pc, #660]	; (8016760 <__ssvfiscanf_r+0x2b0>)
 80164ca:	4fa6      	ldr	r7, [pc, #664]	; (8016764 <__ssvfiscanf_r+0x2b4>)
 80164cc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016768 <__ssvfiscanf_r+0x2b8>
 80164d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80164d4:	4606      	mov	r6, r0
 80164d6:	91a1      	str	r1, [sp, #644]	; 0x284
 80164d8:	9300      	str	r3, [sp, #0]
 80164da:	7813      	ldrb	r3, [r2, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	f000 815a 	beq.w	8016796 <__ssvfiscanf_r+0x2e6>
 80164e2:	5dd9      	ldrb	r1, [r3, r7]
 80164e4:	f011 0108 	ands.w	r1, r1, #8
 80164e8:	f102 0501 	add.w	r5, r2, #1
 80164ec:	d019      	beq.n	8016522 <__ssvfiscanf_r+0x72>
 80164ee:	6863      	ldr	r3, [r4, #4]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	dd0f      	ble.n	8016514 <__ssvfiscanf_r+0x64>
 80164f4:	6823      	ldr	r3, [r4, #0]
 80164f6:	781a      	ldrb	r2, [r3, #0]
 80164f8:	5cba      	ldrb	r2, [r7, r2]
 80164fa:	0712      	lsls	r2, r2, #28
 80164fc:	d401      	bmi.n	8016502 <__ssvfiscanf_r+0x52>
 80164fe:	462a      	mov	r2, r5
 8016500:	e7eb      	b.n	80164da <__ssvfiscanf_r+0x2a>
 8016502:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016504:	3201      	adds	r2, #1
 8016506:	9245      	str	r2, [sp, #276]	; 0x114
 8016508:	6862      	ldr	r2, [r4, #4]
 801650a:	3301      	adds	r3, #1
 801650c:	3a01      	subs	r2, #1
 801650e:	6062      	str	r2, [r4, #4]
 8016510:	6023      	str	r3, [r4, #0]
 8016512:	e7ec      	b.n	80164ee <__ssvfiscanf_r+0x3e>
 8016514:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016516:	4621      	mov	r1, r4
 8016518:	4630      	mov	r0, r6
 801651a:	4798      	blx	r3
 801651c:	2800      	cmp	r0, #0
 801651e:	d0e9      	beq.n	80164f4 <__ssvfiscanf_r+0x44>
 8016520:	e7ed      	b.n	80164fe <__ssvfiscanf_r+0x4e>
 8016522:	2b25      	cmp	r3, #37	; 0x25
 8016524:	d012      	beq.n	801654c <__ssvfiscanf_r+0x9c>
 8016526:	469a      	mov	sl, r3
 8016528:	6863      	ldr	r3, [r4, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	f340 8091 	ble.w	8016652 <__ssvfiscanf_r+0x1a2>
 8016530:	6822      	ldr	r2, [r4, #0]
 8016532:	7813      	ldrb	r3, [r2, #0]
 8016534:	4553      	cmp	r3, sl
 8016536:	f040 812e 	bne.w	8016796 <__ssvfiscanf_r+0x2e6>
 801653a:	6863      	ldr	r3, [r4, #4]
 801653c:	3b01      	subs	r3, #1
 801653e:	6063      	str	r3, [r4, #4]
 8016540:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016542:	3201      	adds	r2, #1
 8016544:	3301      	adds	r3, #1
 8016546:	6022      	str	r2, [r4, #0]
 8016548:	9345      	str	r3, [sp, #276]	; 0x114
 801654a:	e7d8      	b.n	80164fe <__ssvfiscanf_r+0x4e>
 801654c:	9141      	str	r1, [sp, #260]	; 0x104
 801654e:	9143      	str	r1, [sp, #268]	; 0x10c
 8016550:	7853      	ldrb	r3, [r2, #1]
 8016552:	2b2a      	cmp	r3, #42	; 0x2a
 8016554:	bf02      	ittt	eq
 8016556:	2310      	moveq	r3, #16
 8016558:	1c95      	addeq	r5, r2, #2
 801655a:	9341      	streq	r3, [sp, #260]	; 0x104
 801655c:	220a      	movs	r2, #10
 801655e:	46aa      	mov	sl, r5
 8016560:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016564:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016568:	2b09      	cmp	r3, #9
 801656a:	d91d      	bls.n	80165a8 <__ssvfiscanf_r+0xf8>
 801656c:	487e      	ldr	r0, [pc, #504]	; (8016768 <__ssvfiscanf_r+0x2b8>)
 801656e:	2203      	movs	r2, #3
 8016570:	f7e9 fe66 	bl	8000240 <memchr>
 8016574:	b140      	cbz	r0, 8016588 <__ssvfiscanf_r+0xd8>
 8016576:	2301      	movs	r3, #1
 8016578:	eba0 0009 	sub.w	r0, r0, r9
 801657c:	fa03 f000 	lsl.w	r0, r3, r0
 8016580:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016582:	4318      	orrs	r0, r3
 8016584:	9041      	str	r0, [sp, #260]	; 0x104
 8016586:	4655      	mov	r5, sl
 8016588:	f815 3b01 	ldrb.w	r3, [r5], #1
 801658c:	2b78      	cmp	r3, #120	; 0x78
 801658e:	d806      	bhi.n	801659e <__ssvfiscanf_r+0xee>
 8016590:	2b57      	cmp	r3, #87	; 0x57
 8016592:	d810      	bhi.n	80165b6 <__ssvfiscanf_r+0x106>
 8016594:	2b25      	cmp	r3, #37	; 0x25
 8016596:	d0c6      	beq.n	8016526 <__ssvfiscanf_r+0x76>
 8016598:	d856      	bhi.n	8016648 <__ssvfiscanf_r+0x198>
 801659a:	2b00      	cmp	r3, #0
 801659c:	d064      	beq.n	8016668 <__ssvfiscanf_r+0x1b8>
 801659e:	2303      	movs	r3, #3
 80165a0:	9347      	str	r3, [sp, #284]	; 0x11c
 80165a2:	230a      	movs	r3, #10
 80165a4:	9342      	str	r3, [sp, #264]	; 0x108
 80165a6:	e071      	b.n	801668c <__ssvfiscanf_r+0x1dc>
 80165a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80165aa:	fb02 1103 	mla	r1, r2, r3, r1
 80165ae:	3930      	subs	r1, #48	; 0x30
 80165b0:	9143      	str	r1, [sp, #268]	; 0x10c
 80165b2:	4655      	mov	r5, sl
 80165b4:	e7d3      	b.n	801655e <__ssvfiscanf_r+0xae>
 80165b6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80165ba:	2a20      	cmp	r2, #32
 80165bc:	d8ef      	bhi.n	801659e <__ssvfiscanf_r+0xee>
 80165be:	a101      	add	r1, pc, #4	; (adr r1, 80165c4 <__ssvfiscanf_r+0x114>)
 80165c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80165c4:	08016677 	.word	0x08016677
 80165c8:	0801659f 	.word	0x0801659f
 80165cc:	0801659f 	.word	0x0801659f
 80165d0:	080166d5 	.word	0x080166d5
 80165d4:	0801659f 	.word	0x0801659f
 80165d8:	0801659f 	.word	0x0801659f
 80165dc:	0801659f 	.word	0x0801659f
 80165e0:	0801659f 	.word	0x0801659f
 80165e4:	0801659f 	.word	0x0801659f
 80165e8:	0801659f 	.word	0x0801659f
 80165ec:	0801659f 	.word	0x0801659f
 80165f0:	080166eb 	.word	0x080166eb
 80165f4:	080166c1 	.word	0x080166c1
 80165f8:	0801664f 	.word	0x0801664f
 80165fc:	0801664f 	.word	0x0801664f
 8016600:	0801664f 	.word	0x0801664f
 8016604:	0801659f 	.word	0x0801659f
 8016608:	080166c5 	.word	0x080166c5
 801660c:	0801659f 	.word	0x0801659f
 8016610:	0801659f 	.word	0x0801659f
 8016614:	0801659f 	.word	0x0801659f
 8016618:	0801659f 	.word	0x0801659f
 801661c:	080166fb 	.word	0x080166fb
 8016620:	080166cd 	.word	0x080166cd
 8016624:	0801666f 	.word	0x0801666f
 8016628:	0801659f 	.word	0x0801659f
 801662c:	0801659f 	.word	0x0801659f
 8016630:	080166f7 	.word	0x080166f7
 8016634:	0801659f 	.word	0x0801659f
 8016638:	080166c1 	.word	0x080166c1
 801663c:	0801659f 	.word	0x0801659f
 8016640:	0801659f 	.word	0x0801659f
 8016644:	08016677 	.word	0x08016677
 8016648:	3b45      	subs	r3, #69	; 0x45
 801664a:	2b02      	cmp	r3, #2
 801664c:	d8a7      	bhi.n	801659e <__ssvfiscanf_r+0xee>
 801664e:	2305      	movs	r3, #5
 8016650:	e01b      	b.n	801668a <__ssvfiscanf_r+0x1da>
 8016652:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016654:	4621      	mov	r1, r4
 8016656:	4630      	mov	r0, r6
 8016658:	4798      	blx	r3
 801665a:	2800      	cmp	r0, #0
 801665c:	f43f af68 	beq.w	8016530 <__ssvfiscanf_r+0x80>
 8016660:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016662:	2800      	cmp	r0, #0
 8016664:	f040 808d 	bne.w	8016782 <__ssvfiscanf_r+0x2d2>
 8016668:	f04f 30ff 	mov.w	r0, #4294967295
 801666c:	e08f      	b.n	801678e <__ssvfiscanf_r+0x2de>
 801666e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016670:	f042 0220 	orr.w	r2, r2, #32
 8016674:	9241      	str	r2, [sp, #260]	; 0x104
 8016676:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801667c:	9241      	str	r2, [sp, #260]	; 0x104
 801667e:	2210      	movs	r2, #16
 8016680:	2b6f      	cmp	r3, #111	; 0x6f
 8016682:	9242      	str	r2, [sp, #264]	; 0x108
 8016684:	bf34      	ite	cc
 8016686:	2303      	movcc	r3, #3
 8016688:	2304      	movcs	r3, #4
 801668a:	9347      	str	r3, [sp, #284]	; 0x11c
 801668c:	6863      	ldr	r3, [r4, #4]
 801668e:	2b00      	cmp	r3, #0
 8016690:	dd42      	ble.n	8016718 <__ssvfiscanf_r+0x268>
 8016692:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016694:	0659      	lsls	r1, r3, #25
 8016696:	d404      	bmi.n	80166a2 <__ssvfiscanf_r+0x1f2>
 8016698:	6823      	ldr	r3, [r4, #0]
 801669a:	781a      	ldrb	r2, [r3, #0]
 801669c:	5cba      	ldrb	r2, [r7, r2]
 801669e:	0712      	lsls	r2, r2, #28
 80166a0:	d441      	bmi.n	8016726 <__ssvfiscanf_r+0x276>
 80166a2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80166a4:	2b02      	cmp	r3, #2
 80166a6:	dc50      	bgt.n	801674a <__ssvfiscanf_r+0x29a>
 80166a8:	466b      	mov	r3, sp
 80166aa:	4622      	mov	r2, r4
 80166ac:	a941      	add	r1, sp, #260	; 0x104
 80166ae:	4630      	mov	r0, r6
 80166b0:	f000 f9d0 	bl	8016a54 <_scanf_chars>
 80166b4:	2801      	cmp	r0, #1
 80166b6:	d06e      	beq.n	8016796 <__ssvfiscanf_r+0x2e6>
 80166b8:	2802      	cmp	r0, #2
 80166ba:	f47f af20 	bne.w	80164fe <__ssvfiscanf_r+0x4e>
 80166be:	e7cf      	b.n	8016660 <__ssvfiscanf_r+0x1b0>
 80166c0:	220a      	movs	r2, #10
 80166c2:	e7dd      	b.n	8016680 <__ssvfiscanf_r+0x1d0>
 80166c4:	2300      	movs	r3, #0
 80166c6:	9342      	str	r3, [sp, #264]	; 0x108
 80166c8:	2303      	movs	r3, #3
 80166ca:	e7de      	b.n	801668a <__ssvfiscanf_r+0x1da>
 80166cc:	2308      	movs	r3, #8
 80166ce:	9342      	str	r3, [sp, #264]	; 0x108
 80166d0:	2304      	movs	r3, #4
 80166d2:	e7da      	b.n	801668a <__ssvfiscanf_r+0x1da>
 80166d4:	4629      	mov	r1, r5
 80166d6:	4640      	mov	r0, r8
 80166d8:	f000 fb2a 	bl	8016d30 <__sccl>
 80166dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166e2:	9341      	str	r3, [sp, #260]	; 0x104
 80166e4:	4605      	mov	r5, r0
 80166e6:	2301      	movs	r3, #1
 80166e8:	e7cf      	b.n	801668a <__ssvfiscanf_r+0x1da>
 80166ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166f0:	9341      	str	r3, [sp, #260]	; 0x104
 80166f2:	2300      	movs	r3, #0
 80166f4:	e7c9      	b.n	801668a <__ssvfiscanf_r+0x1da>
 80166f6:	2302      	movs	r3, #2
 80166f8:	e7c7      	b.n	801668a <__ssvfiscanf_r+0x1da>
 80166fa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80166fc:	06c3      	lsls	r3, r0, #27
 80166fe:	f53f aefe 	bmi.w	80164fe <__ssvfiscanf_r+0x4e>
 8016702:	9b00      	ldr	r3, [sp, #0]
 8016704:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016706:	1d19      	adds	r1, r3, #4
 8016708:	9100      	str	r1, [sp, #0]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	f010 0f01 	tst.w	r0, #1
 8016710:	bf14      	ite	ne
 8016712:	801a      	strhne	r2, [r3, #0]
 8016714:	601a      	streq	r2, [r3, #0]
 8016716:	e6f2      	b.n	80164fe <__ssvfiscanf_r+0x4e>
 8016718:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801671a:	4621      	mov	r1, r4
 801671c:	4630      	mov	r0, r6
 801671e:	4798      	blx	r3
 8016720:	2800      	cmp	r0, #0
 8016722:	d0b6      	beq.n	8016692 <__ssvfiscanf_r+0x1e2>
 8016724:	e79c      	b.n	8016660 <__ssvfiscanf_r+0x1b0>
 8016726:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016728:	3201      	adds	r2, #1
 801672a:	9245      	str	r2, [sp, #276]	; 0x114
 801672c:	6862      	ldr	r2, [r4, #4]
 801672e:	3a01      	subs	r2, #1
 8016730:	2a00      	cmp	r2, #0
 8016732:	6062      	str	r2, [r4, #4]
 8016734:	dd02      	ble.n	801673c <__ssvfiscanf_r+0x28c>
 8016736:	3301      	adds	r3, #1
 8016738:	6023      	str	r3, [r4, #0]
 801673a:	e7ad      	b.n	8016698 <__ssvfiscanf_r+0x1e8>
 801673c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801673e:	4621      	mov	r1, r4
 8016740:	4630      	mov	r0, r6
 8016742:	4798      	blx	r3
 8016744:	2800      	cmp	r0, #0
 8016746:	d0a7      	beq.n	8016698 <__ssvfiscanf_r+0x1e8>
 8016748:	e78a      	b.n	8016660 <__ssvfiscanf_r+0x1b0>
 801674a:	2b04      	cmp	r3, #4
 801674c:	dc0e      	bgt.n	801676c <__ssvfiscanf_r+0x2bc>
 801674e:	466b      	mov	r3, sp
 8016750:	4622      	mov	r2, r4
 8016752:	a941      	add	r1, sp, #260	; 0x104
 8016754:	4630      	mov	r0, r6
 8016756:	f000 f9d7 	bl	8016b08 <_scanf_i>
 801675a:	e7ab      	b.n	80166b4 <__ssvfiscanf_r+0x204>
 801675c:	080163fd 	.word	0x080163fd
 8016760:	08016477 	.word	0x08016477
 8016764:	08050631 	.word	0x08050631
 8016768:	08050982 	.word	0x08050982
 801676c:	4b0b      	ldr	r3, [pc, #44]	; (801679c <__ssvfiscanf_r+0x2ec>)
 801676e:	2b00      	cmp	r3, #0
 8016770:	f43f aec5 	beq.w	80164fe <__ssvfiscanf_r+0x4e>
 8016774:	466b      	mov	r3, sp
 8016776:	4622      	mov	r2, r4
 8016778:	a941      	add	r1, sp, #260	; 0x104
 801677a:	4630      	mov	r0, r6
 801677c:	f7fc fba4 	bl	8012ec8 <_scanf_float>
 8016780:	e798      	b.n	80166b4 <__ssvfiscanf_r+0x204>
 8016782:	89a3      	ldrh	r3, [r4, #12]
 8016784:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016788:	bf18      	it	ne
 801678a:	f04f 30ff 	movne.w	r0, #4294967295
 801678e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016796:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016798:	e7f9      	b.n	801678e <__ssvfiscanf_r+0x2de>
 801679a:	bf00      	nop
 801679c:	08012ec9 	.word	0x08012ec9

080167a0 <__sfputc_r>:
 80167a0:	6893      	ldr	r3, [r2, #8]
 80167a2:	3b01      	subs	r3, #1
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	b410      	push	{r4}
 80167a8:	6093      	str	r3, [r2, #8]
 80167aa:	da08      	bge.n	80167be <__sfputc_r+0x1e>
 80167ac:	6994      	ldr	r4, [r2, #24]
 80167ae:	42a3      	cmp	r3, r4
 80167b0:	db01      	blt.n	80167b6 <__sfputc_r+0x16>
 80167b2:	290a      	cmp	r1, #10
 80167b4:	d103      	bne.n	80167be <__sfputc_r+0x1e>
 80167b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167ba:	f000 bbb3 	b.w	8016f24 <__swbuf_r>
 80167be:	6813      	ldr	r3, [r2, #0]
 80167c0:	1c58      	adds	r0, r3, #1
 80167c2:	6010      	str	r0, [r2, #0]
 80167c4:	7019      	strb	r1, [r3, #0]
 80167c6:	4608      	mov	r0, r1
 80167c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167cc:	4770      	bx	lr

080167ce <__sfputs_r>:
 80167ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167d0:	4606      	mov	r6, r0
 80167d2:	460f      	mov	r7, r1
 80167d4:	4614      	mov	r4, r2
 80167d6:	18d5      	adds	r5, r2, r3
 80167d8:	42ac      	cmp	r4, r5
 80167da:	d101      	bne.n	80167e0 <__sfputs_r+0x12>
 80167dc:	2000      	movs	r0, #0
 80167de:	e007      	b.n	80167f0 <__sfputs_r+0x22>
 80167e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167e4:	463a      	mov	r2, r7
 80167e6:	4630      	mov	r0, r6
 80167e8:	f7ff ffda 	bl	80167a0 <__sfputc_r>
 80167ec:	1c43      	adds	r3, r0, #1
 80167ee:	d1f3      	bne.n	80167d8 <__sfputs_r+0xa>
 80167f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167f4 <_vfiprintf_r>:
 80167f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167f8:	460d      	mov	r5, r1
 80167fa:	b09d      	sub	sp, #116	; 0x74
 80167fc:	4614      	mov	r4, r2
 80167fe:	4698      	mov	r8, r3
 8016800:	4606      	mov	r6, r0
 8016802:	b118      	cbz	r0, 801680c <_vfiprintf_r+0x18>
 8016804:	6983      	ldr	r3, [r0, #24]
 8016806:	b90b      	cbnz	r3, 801680c <_vfiprintf_r+0x18>
 8016808:	f000 fd7c 	bl	8017304 <__sinit>
 801680c:	4b89      	ldr	r3, [pc, #548]	; (8016a34 <_vfiprintf_r+0x240>)
 801680e:	429d      	cmp	r5, r3
 8016810:	d11b      	bne.n	801684a <_vfiprintf_r+0x56>
 8016812:	6875      	ldr	r5, [r6, #4]
 8016814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016816:	07d9      	lsls	r1, r3, #31
 8016818:	d405      	bmi.n	8016826 <_vfiprintf_r+0x32>
 801681a:	89ab      	ldrh	r3, [r5, #12]
 801681c:	059a      	lsls	r2, r3, #22
 801681e:	d402      	bmi.n	8016826 <_vfiprintf_r+0x32>
 8016820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016822:	f000 fe0d 	bl	8017440 <__retarget_lock_acquire_recursive>
 8016826:	89ab      	ldrh	r3, [r5, #12]
 8016828:	071b      	lsls	r3, r3, #28
 801682a:	d501      	bpl.n	8016830 <_vfiprintf_r+0x3c>
 801682c:	692b      	ldr	r3, [r5, #16]
 801682e:	b9eb      	cbnz	r3, 801686c <_vfiprintf_r+0x78>
 8016830:	4629      	mov	r1, r5
 8016832:	4630      	mov	r0, r6
 8016834:	f000 fbd6 	bl	8016fe4 <__swsetup_r>
 8016838:	b1c0      	cbz	r0, 801686c <_vfiprintf_r+0x78>
 801683a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801683c:	07dc      	lsls	r4, r3, #31
 801683e:	d50e      	bpl.n	801685e <_vfiprintf_r+0x6a>
 8016840:	f04f 30ff 	mov.w	r0, #4294967295
 8016844:	b01d      	add	sp, #116	; 0x74
 8016846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801684a:	4b7b      	ldr	r3, [pc, #492]	; (8016a38 <_vfiprintf_r+0x244>)
 801684c:	429d      	cmp	r5, r3
 801684e:	d101      	bne.n	8016854 <_vfiprintf_r+0x60>
 8016850:	68b5      	ldr	r5, [r6, #8]
 8016852:	e7df      	b.n	8016814 <_vfiprintf_r+0x20>
 8016854:	4b79      	ldr	r3, [pc, #484]	; (8016a3c <_vfiprintf_r+0x248>)
 8016856:	429d      	cmp	r5, r3
 8016858:	bf08      	it	eq
 801685a:	68f5      	ldreq	r5, [r6, #12]
 801685c:	e7da      	b.n	8016814 <_vfiprintf_r+0x20>
 801685e:	89ab      	ldrh	r3, [r5, #12]
 8016860:	0598      	lsls	r0, r3, #22
 8016862:	d4ed      	bmi.n	8016840 <_vfiprintf_r+0x4c>
 8016864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016866:	f000 fdec 	bl	8017442 <__retarget_lock_release_recursive>
 801686a:	e7e9      	b.n	8016840 <_vfiprintf_r+0x4c>
 801686c:	2300      	movs	r3, #0
 801686e:	9309      	str	r3, [sp, #36]	; 0x24
 8016870:	2320      	movs	r3, #32
 8016872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016876:	f8cd 800c 	str.w	r8, [sp, #12]
 801687a:	2330      	movs	r3, #48	; 0x30
 801687c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016a40 <_vfiprintf_r+0x24c>
 8016880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016884:	f04f 0901 	mov.w	r9, #1
 8016888:	4623      	mov	r3, r4
 801688a:	469a      	mov	sl, r3
 801688c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016890:	b10a      	cbz	r2, 8016896 <_vfiprintf_r+0xa2>
 8016892:	2a25      	cmp	r2, #37	; 0x25
 8016894:	d1f9      	bne.n	801688a <_vfiprintf_r+0x96>
 8016896:	ebba 0b04 	subs.w	fp, sl, r4
 801689a:	d00b      	beq.n	80168b4 <_vfiprintf_r+0xc0>
 801689c:	465b      	mov	r3, fp
 801689e:	4622      	mov	r2, r4
 80168a0:	4629      	mov	r1, r5
 80168a2:	4630      	mov	r0, r6
 80168a4:	f7ff ff93 	bl	80167ce <__sfputs_r>
 80168a8:	3001      	adds	r0, #1
 80168aa:	f000 80aa 	beq.w	8016a02 <_vfiprintf_r+0x20e>
 80168ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80168b0:	445a      	add	r2, fp
 80168b2:	9209      	str	r2, [sp, #36]	; 0x24
 80168b4:	f89a 3000 	ldrb.w	r3, [sl]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	f000 80a2 	beq.w	8016a02 <_vfiprintf_r+0x20e>
 80168be:	2300      	movs	r3, #0
 80168c0:	f04f 32ff 	mov.w	r2, #4294967295
 80168c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168c8:	f10a 0a01 	add.w	sl, sl, #1
 80168cc:	9304      	str	r3, [sp, #16]
 80168ce:	9307      	str	r3, [sp, #28]
 80168d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168d4:	931a      	str	r3, [sp, #104]	; 0x68
 80168d6:	4654      	mov	r4, sl
 80168d8:	2205      	movs	r2, #5
 80168da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168de:	4858      	ldr	r0, [pc, #352]	; (8016a40 <_vfiprintf_r+0x24c>)
 80168e0:	f7e9 fcae 	bl	8000240 <memchr>
 80168e4:	9a04      	ldr	r2, [sp, #16]
 80168e6:	b9d8      	cbnz	r0, 8016920 <_vfiprintf_r+0x12c>
 80168e8:	06d1      	lsls	r1, r2, #27
 80168ea:	bf44      	itt	mi
 80168ec:	2320      	movmi	r3, #32
 80168ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168f2:	0713      	lsls	r3, r2, #28
 80168f4:	bf44      	itt	mi
 80168f6:	232b      	movmi	r3, #43	; 0x2b
 80168f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168fc:	f89a 3000 	ldrb.w	r3, [sl]
 8016900:	2b2a      	cmp	r3, #42	; 0x2a
 8016902:	d015      	beq.n	8016930 <_vfiprintf_r+0x13c>
 8016904:	9a07      	ldr	r2, [sp, #28]
 8016906:	4654      	mov	r4, sl
 8016908:	2000      	movs	r0, #0
 801690a:	f04f 0c0a 	mov.w	ip, #10
 801690e:	4621      	mov	r1, r4
 8016910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016914:	3b30      	subs	r3, #48	; 0x30
 8016916:	2b09      	cmp	r3, #9
 8016918:	d94e      	bls.n	80169b8 <_vfiprintf_r+0x1c4>
 801691a:	b1b0      	cbz	r0, 801694a <_vfiprintf_r+0x156>
 801691c:	9207      	str	r2, [sp, #28]
 801691e:	e014      	b.n	801694a <_vfiprintf_r+0x156>
 8016920:	eba0 0308 	sub.w	r3, r0, r8
 8016924:	fa09 f303 	lsl.w	r3, r9, r3
 8016928:	4313      	orrs	r3, r2
 801692a:	9304      	str	r3, [sp, #16]
 801692c:	46a2      	mov	sl, r4
 801692e:	e7d2      	b.n	80168d6 <_vfiprintf_r+0xe2>
 8016930:	9b03      	ldr	r3, [sp, #12]
 8016932:	1d19      	adds	r1, r3, #4
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	9103      	str	r1, [sp, #12]
 8016938:	2b00      	cmp	r3, #0
 801693a:	bfbb      	ittet	lt
 801693c:	425b      	neglt	r3, r3
 801693e:	f042 0202 	orrlt.w	r2, r2, #2
 8016942:	9307      	strge	r3, [sp, #28]
 8016944:	9307      	strlt	r3, [sp, #28]
 8016946:	bfb8      	it	lt
 8016948:	9204      	strlt	r2, [sp, #16]
 801694a:	7823      	ldrb	r3, [r4, #0]
 801694c:	2b2e      	cmp	r3, #46	; 0x2e
 801694e:	d10c      	bne.n	801696a <_vfiprintf_r+0x176>
 8016950:	7863      	ldrb	r3, [r4, #1]
 8016952:	2b2a      	cmp	r3, #42	; 0x2a
 8016954:	d135      	bne.n	80169c2 <_vfiprintf_r+0x1ce>
 8016956:	9b03      	ldr	r3, [sp, #12]
 8016958:	1d1a      	adds	r2, r3, #4
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	9203      	str	r2, [sp, #12]
 801695e:	2b00      	cmp	r3, #0
 8016960:	bfb8      	it	lt
 8016962:	f04f 33ff 	movlt.w	r3, #4294967295
 8016966:	3402      	adds	r4, #2
 8016968:	9305      	str	r3, [sp, #20]
 801696a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016a50 <_vfiprintf_r+0x25c>
 801696e:	7821      	ldrb	r1, [r4, #0]
 8016970:	2203      	movs	r2, #3
 8016972:	4650      	mov	r0, sl
 8016974:	f7e9 fc64 	bl	8000240 <memchr>
 8016978:	b140      	cbz	r0, 801698c <_vfiprintf_r+0x198>
 801697a:	2340      	movs	r3, #64	; 0x40
 801697c:	eba0 000a 	sub.w	r0, r0, sl
 8016980:	fa03 f000 	lsl.w	r0, r3, r0
 8016984:	9b04      	ldr	r3, [sp, #16]
 8016986:	4303      	orrs	r3, r0
 8016988:	3401      	adds	r4, #1
 801698a:	9304      	str	r3, [sp, #16]
 801698c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016990:	482c      	ldr	r0, [pc, #176]	; (8016a44 <_vfiprintf_r+0x250>)
 8016992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016996:	2206      	movs	r2, #6
 8016998:	f7e9 fc52 	bl	8000240 <memchr>
 801699c:	2800      	cmp	r0, #0
 801699e:	d03f      	beq.n	8016a20 <_vfiprintf_r+0x22c>
 80169a0:	4b29      	ldr	r3, [pc, #164]	; (8016a48 <_vfiprintf_r+0x254>)
 80169a2:	bb1b      	cbnz	r3, 80169ec <_vfiprintf_r+0x1f8>
 80169a4:	9b03      	ldr	r3, [sp, #12]
 80169a6:	3307      	adds	r3, #7
 80169a8:	f023 0307 	bic.w	r3, r3, #7
 80169ac:	3308      	adds	r3, #8
 80169ae:	9303      	str	r3, [sp, #12]
 80169b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169b2:	443b      	add	r3, r7
 80169b4:	9309      	str	r3, [sp, #36]	; 0x24
 80169b6:	e767      	b.n	8016888 <_vfiprintf_r+0x94>
 80169b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80169bc:	460c      	mov	r4, r1
 80169be:	2001      	movs	r0, #1
 80169c0:	e7a5      	b.n	801690e <_vfiprintf_r+0x11a>
 80169c2:	2300      	movs	r3, #0
 80169c4:	3401      	adds	r4, #1
 80169c6:	9305      	str	r3, [sp, #20]
 80169c8:	4619      	mov	r1, r3
 80169ca:	f04f 0c0a 	mov.w	ip, #10
 80169ce:	4620      	mov	r0, r4
 80169d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169d4:	3a30      	subs	r2, #48	; 0x30
 80169d6:	2a09      	cmp	r2, #9
 80169d8:	d903      	bls.n	80169e2 <_vfiprintf_r+0x1ee>
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d0c5      	beq.n	801696a <_vfiprintf_r+0x176>
 80169de:	9105      	str	r1, [sp, #20]
 80169e0:	e7c3      	b.n	801696a <_vfiprintf_r+0x176>
 80169e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80169e6:	4604      	mov	r4, r0
 80169e8:	2301      	movs	r3, #1
 80169ea:	e7f0      	b.n	80169ce <_vfiprintf_r+0x1da>
 80169ec:	ab03      	add	r3, sp, #12
 80169ee:	9300      	str	r3, [sp, #0]
 80169f0:	462a      	mov	r2, r5
 80169f2:	4b16      	ldr	r3, [pc, #88]	; (8016a4c <_vfiprintf_r+0x258>)
 80169f4:	a904      	add	r1, sp, #16
 80169f6:	4630      	mov	r0, r6
 80169f8:	f7fb fe9c 	bl	8012734 <_printf_float>
 80169fc:	4607      	mov	r7, r0
 80169fe:	1c78      	adds	r0, r7, #1
 8016a00:	d1d6      	bne.n	80169b0 <_vfiprintf_r+0x1bc>
 8016a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a04:	07d9      	lsls	r1, r3, #31
 8016a06:	d405      	bmi.n	8016a14 <_vfiprintf_r+0x220>
 8016a08:	89ab      	ldrh	r3, [r5, #12]
 8016a0a:	059a      	lsls	r2, r3, #22
 8016a0c:	d402      	bmi.n	8016a14 <_vfiprintf_r+0x220>
 8016a0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a10:	f000 fd17 	bl	8017442 <__retarget_lock_release_recursive>
 8016a14:	89ab      	ldrh	r3, [r5, #12]
 8016a16:	065b      	lsls	r3, r3, #25
 8016a18:	f53f af12 	bmi.w	8016840 <_vfiprintf_r+0x4c>
 8016a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a1e:	e711      	b.n	8016844 <_vfiprintf_r+0x50>
 8016a20:	ab03      	add	r3, sp, #12
 8016a22:	9300      	str	r3, [sp, #0]
 8016a24:	462a      	mov	r2, r5
 8016a26:	4b09      	ldr	r3, [pc, #36]	; (8016a4c <_vfiprintf_r+0x258>)
 8016a28:	a904      	add	r1, sp, #16
 8016a2a:	4630      	mov	r0, r6
 8016a2c:	f7fc f926 	bl	8012c7c <_printf_i>
 8016a30:	e7e4      	b.n	80169fc <_vfiprintf_r+0x208>
 8016a32:	bf00      	nop
 8016a34:	080509c8 	.word	0x080509c8
 8016a38:	080509e8 	.word	0x080509e8
 8016a3c:	080509a8 	.word	0x080509a8
 8016a40:	0805097c 	.word	0x0805097c
 8016a44:	08050986 	.word	0x08050986
 8016a48:	08012735 	.word	0x08012735
 8016a4c:	080167cf 	.word	0x080167cf
 8016a50:	08050982 	.word	0x08050982

08016a54 <_scanf_chars>:
 8016a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a58:	4615      	mov	r5, r2
 8016a5a:	688a      	ldr	r2, [r1, #8]
 8016a5c:	4680      	mov	r8, r0
 8016a5e:	460c      	mov	r4, r1
 8016a60:	b932      	cbnz	r2, 8016a70 <_scanf_chars+0x1c>
 8016a62:	698a      	ldr	r2, [r1, #24]
 8016a64:	2a00      	cmp	r2, #0
 8016a66:	bf0c      	ite	eq
 8016a68:	2201      	moveq	r2, #1
 8016a6a:	f04f 32ff 	movne.w	r2, #4294967295
 8016a6e:	608a      	str	r2, [r1, #8]
 8016a70:	6822      	ldr	r2, [r4, #0]
 8016a72:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016b04 <_scanf_chars+0xb0>
 8016a76:	06d1      	lsls	r1, r2, #27
 8016a78:	bf5f      	itttt	pl
 8016a7a:	681a      	ldrpl	r2, [r3, #0]
 8016a7c:	1d11      	addpl	r1, r2, #4
 8016a7e:	6019      	strpl	r1, [r3, #0]
 8016a80:	6816      	ldrpl	r6, [r2, #0]
 8016a82:	2700      	movs	r7, #0
 8016a84:	69a0      	ldr	r0, [r4, #24]
 8016a86:	b188      	cbz	r0, 8016aac <_scanf_chars+0x58>
 8016a88:	2801      	cmp	r0, #1
 8016a8a:	d107      	bne.n	8016a9c <_scanf_chars+0x48>
 8016a8c:	682a      	ldr	r2, [r5, #0]
 8016a8e:	7811      	ldrb	r1, [r2, #0]
 8016a90:	6962      	ldr	r2, [r4, #20]
 8016a92:	5c52      	ldrb	r2, [r2, r1]
 8016a94:	b952      	cbnz	r2, 8016aac <_scanf_chars+0x58>
 8016a96:	2f00      	cmp	r7, #0
 8016a98:	d031      	beq.n	8016afe <_scanf_chars+0xaa>
 8016a9a:	e022      	b.n	8016ae2 <_scanf_chars+0x8e>
 8016a9c:	2802      	cmp	r0, #2
 8016a9e:	d120      	bne.n	8016ae2 <_scanf_chars+0x8e>
 8016aa0:	682b      	ldr	r3, [r5, #0]
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016aa8:	071b      	lsls	r3, r3, #28
 8016aaa:	d41a      	bmi.n	8016ae2 <_scanf_chars+0x8e>
 8016aac:	6823      	ldr	r3, [r4, #0]
 8016aae:	06da      	lsls	r2, r3, #27
 8016ab0:	bf5e      	ittt	pl
 8016ab2:	682b      	ldrpl	r3, [r5, #0]
 8016ab4:	781b      	ldrbpl	r3, [r3, #0]
 8016ab6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016aba:	682a      	ldr	r2, [r5, #0]
 8016abc:	686b      	ldr	r3, [r5, #4]
 8016abe:	3201      	adds	r2, #1
 8016ac0:	602a      	str	r2, [r5, #0]
 8016ac2:	68a2      	ldr	r2, [r4, #8]
 8016ac4:	3b01      	subs	r3, #1
 8016ac6:	3a01      	subs	r2, #1
 8016ac8:	606b      	str	r3, [r5, #4]
 8016aca:	3701      	adds	r7, #1
 8016acc:	60a2      	str	r2, [r4, #8]
 8016ace:	b142      	cbz	r2, 8016ae2 <_scanf_chars+0x8e>
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	dcd7      	bgt.n	8016a84 <_scanf_chars+0x30>
 8016ad4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016ad8:	4629      	mov	r1, r5
 8016ada:	4640      	mov	r0, r8
 8016adc:	4798      	blx	r3
 8016ade:	2800      	cmp	r0, #0
 8016ae0:	d0d0      	beq.n	8016a84 <_scanf_chars+0x30>
 8016ae2:	6823      	ldr	r3, [r4, #0]
 8016ae4:	f013 0310 	ands.w	r3, r3, #16
 8016ae8:	d105      	bne.n	8016af6 <_scanf_chars+0xa2>
 8016aea:	68e2      	ldr	r2, [r4, #12]
 8016aec:	3201      	adds	r2, #1
 8016aee:	60e2      	str	r2, [r4, #12]
 8016af0:	69a2      	ldr	r2, [r4, #24]
 8016af2:	b102      	cbz	r2, 8016af6 <_scanf_chars+0xa2>
 8016af4:	7033      	strb	r3, [r6, #0]
 8016af6:	6923      	ldr	r3, [r4, #16]
 8016af8:	443b      	add	r3, r7
 8016afa:	6123      	str	r3, [r4, #16]
 8016afc:	2000      	movs	r0, #0
 8016afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b02:	bf00      	nop
 8016b04:	08050631 	.word	0x08050631

08016b08 <_scanf_i>:
 8016b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b0c:	4698      	mov	r8, r3
 8016b0e:	4b76      	ldr	r3, [pc, #472]	; (8016ce8 <_scanf_i+0x1e0>)
 8016b10:	460c      	mov	r4, r1
 8016b12:	4682      	mov	sl, r0
 8016b14:	4616      	mov	r6, r2
 8016b16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016b1a:	b087      	sub	sp, #28
 8016b1c:	ab03      	add	r3, sp, #12
 8016b1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016b22:	4b72      	ldr	r3, [pc, #456]	; (8016cec <_scanf_i+0x1e4>)
 8016b24:	69a1      	ldr	r1, [r4, #24]
 8016b26:	4a72      	ldr	r2, [pc, #456]	; (8016cf0 <_scanf_i+0x1e8>)
 8016b28:	2903      	cmp	r1, #3
 8016b2a:	bf18      	it	ne
 8016b2c:	461a      	movne	r2, r3
 8016b2e:	68a3      	ldr	r3, [r4, #8]
 8016b30:	9201      	str	r2, [sp, #4]
 8016b32:	1e5a      	subs	r2, r3, #1
 8016b34:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016b38:	bf88      	it	hi
 8016b3a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016b3e:	4627      	mov	r7, r4
 8016b40:	bf82      	ittt	hi
 8016b42:	eb03 0905 	addhi.w	r9, r3, r5
 8016b46:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016b4a:	60a3      	strhi	r3, [r4, #8]
 8016b4c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016b50:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016b54:	bf98      	it	ls
 8016b56:	f04f 0900 	movls.w	r9, #0
 8016b5a:	6023      	str	r3, [r4, #0]
 8016b5c:	463d      	mov	r5, r7
 8016b5e:	f04f 0b00 	mov.w	fp, #0
 8016b62:	6831      	ldr	r1, [r6, #0]
 8016b64:	ab03      	add	r3, sp, #12
 8016b66:	7809      	ldrb	r1, [r1, #0]
 8016b68:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016b6c:	2202      	movs	r2, #2
 8016b6e:	f7e9 fb67 	bl	8000240 <memchr>
 8016b72:	b328      	cbz	r0, 8016bc0 <_scanf_i+0xb8>
 8016b74:	f1bb 0f01 	cmp.w	fp, #1
 8016b78:	d159      	bne.n	8016c2e <_scanf_i+0x126>
 8016b7a:	6862      	ldr	r2, [r4, #4]
 8016b7c:	b92a      	cbnz	r2, 8016b8a <_scanf_i+0x82>
 8016b7e:	6822      	ldr	r2, [r4, #0]
 8016b80:	2308      	movs	r3, #8
 8016b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016b86:	6063      	str	r3, [r4, #4]
 8016b88:	6022      	str	r2, [r4, #0]
 8016b8a:	6822      	ldr	r2, [r4, #0]
 8016b8c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016b90:	6022      	str	r2, [r4, #0]
 8016b92:	68a2      	ldr	r2, [r4, #8]
 8016b94:	1e51      	subs	r1, r2, #1
 8016b96:	60a1      	str	r1, [r4, #8]
 8016b98:	b192      	cbz	r2, 8016bc0 <_scanf_i+0xb8>
 8016b9a:	6832      	ldr	r2, [r6, #0]
 8016b9c:	1c51      	adds	r1, r2, #1
 8016b9e:	6031      	str	r1, [r6, #0]
 8016ba0:	7812      	ldrb	r2, [r2, #0]
 8016ba2:	f805 2b01 	strb.w	r2, [r5], #1
 8016ba6:	6872      	ldr	r2, [r6, #4]
 8016ba8:	3a01      	subs	r2, #1
 8016baa:	2a00      	cmp	r2, #0
 8016bac:	6072      	str	r2, [r6, #4]
 8016bae:	dc07      	bgt.n	8016bc0 <_scanf_i+0xb8>
 8016bb0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016bb4:	4631      	mov	r1, r6
 8016bb6:	4650      	mov	r0, sl
 8016bb8:	4790      	blx	r2
 8016bba:	2800      	cmp	r0, #0
 8016bbc:	f040 8085 	bne.w	8016cca <_scanf_i+0x1c2>
 8016bc0:	f10b 0b01 	add.w	fp, fp, #1
 8016bc4:	f1bb 0f03 	cmp.w	fp, #3
 8016bc8:	d1cb      	bne.n	8016b62 <_scanf_i+0x5a>
 8016bca:	6863      	ldr	r3, [r4, #4]
 8016bcc:	b90b      	cbnz	r3, 8016bd2 <_scanf_i+0xca>
 8016bce:	230a      	movs	r3, #10
 8016bd0:	6063      	str	r3, [r4, #4]
 8016bd2:	6863      	ldr	r3, [r4, #4]
 8016bd4:	4947      	ldr	r1, [pc, #284]	; (8016cf4 <_scanf_i+0x1ec>)
 8016bd6:	6960      	ldr	r0, [r4, #20]
 8016bd8:	1ac9      	subs	r1, r1, r3
 8016bda:	f000 f8a9 	bl	8016d30 <__sccl>
 8016bde:	f04f 0b00 	mov.w	fp, #0
 8016be2:	68a3      	ldr	r3, [r4, #8]
 8016be4:	6822      	ldr	r2, [r4, #0]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d03d      	beq.n	8016c66 <_scanf_i+0x15e>
 8016bea:	6831      	ldr	r1, [r6, #0]
 8016bec:	6960      	ldr	r0, [r4, #20]
 8016bee:	f891 c000 	ldrb.w	ip, [r1]
 8016bf2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016bf6:	2800      	cmp	r0, #0
 8016bf8:	d035      	beq.n	8016c66 <_scanf_i+0x15e>
 8016bfa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016bfe:	d124      	bne.n	8016c4a <_scanf_i+0x142>
 8016c00:	0510      	lsls	r0, r2, #20
 8016c02:	d522      	bpl.n	8016c4a <_scanf_i+0x142>
 8016c04:	f10b 0b01 	add.w	fp, fp, #1
 8016c08:	f1b9 0f00 	cmp.w	r9, #0
 8016c0c:	d003      	beq.n	8016c16 <_scanf_i+0x10e>
 8016c0e:	3301      	adds	r3, #1
 8016c10:	f109 39ff 	add.w	r9, r9, #4294967295
 8016c14:	60a3      	str	r3, [r4, #8]
 8016c16:	6873      	ldr	r3, [r6, #4]
 8016c18:	3b01      	subs	r3, #1
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	6073      	str	r3, [r6, #4]
 8016c1e:	dd1b      	ble.n	8016c58 <_scanf_i+0x150>
 8016c20:	6833      	ldr	r3, [r6, #0]
 8016c22:	3301      	adds	r3, #1
 8016c24:	6033      	str	r3, [r6, #0]
 8016c26:	68a3      	ldr	r3, [r4, #8]
 8016c28:	3b01      	subs	r3, #1
 8016c2a:	60a3      	str	r3, [r4, #8]
 8016c2c:	e7d9      	b.n	8016be2 <_scanf_i+0xda>
 8016c2e:	f1bb 0f02 	cmp.w	fp, #2
 8016c32:	d1ae      	bne.n	8016b92 <_scanf_i+0x8a>
 8016c34:	6822      	ldr	r2, [r4, #0]
 8016c36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016c3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016c3e:	d1bf      	bne.n	8016bc0 <_scanf_i+0xb8>
 8016c40:	2310      	movs	r3, #16
 8016c42:	6063      	str	r3, [r4, #4]
 8016c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016c48:	e7a2      	b.n	8016b90 <_scanf_i+0x88>
 8016c4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016c4e:	6022      	str	r2, [r4, #0]
 8016c50:	780b      	ldrb	r3, [r1, #0]
 8016c52:	f805 3b01 	strb.w	r3, [r5], #1
 8016c56:	e7de      	b.n	8016c16 <_scanf_i+0x10e>
 8016c58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c5c:	4631      	mov	r1, r6
 8016c5e:	4650      	mov	r0, sl
 8016c60:	4798      	blx	r3
 8016c62:	2800      	cmp	r0, #0
 8016c64:	d0df      	beq.n	8016c26 <_scanf_i+0x11e>
 8016c66:	6823      	ldr	r3, [r4, #0]
 8016c68:	05db      	lsls	r3, r3, #23
 8016c6a:	d50d      	bpl.n	8016c88 <_scanf_i+0x180>
 8016c6c:	42bd      	cmp	r5, r7
 8016c6e:	d909      	bls.n	8016c84 <_scanf_i+0x17c>
 8016c70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c78:	4632      	mov	r2, r6
 8016c7a:	4650      	mov	r0, sl
 8016c7c:	4798      	blx	r3
 8016c7e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016c82:	464d      	mov	r5, r9
 8016c84:	42bd      	cmp	r5, r7
 8016c86:	d02d      	beq.n	8016ce4 <_scanf_i+0x1dc>
 8016c88:	6822      	ldr	r2, [r4, #0]
 8016c8a:	f012 0210 	ands.w	r2, r2, #16
 8016c8e:	d113      	bne.n	8016cb8 <_scanf_i+0x1b0>
 8016c90:	702a      	strb	r2, [r5, #0]
 8016c92:	6863      	ldr	r3, [r4, #4]
 8016c94:	9e01      	ldr	r6, [sp, #4]
 8016c96:	4639      	mov	r1, r7
 8016c98:	4650      	mov	r0, sl
 8016c9a:	47b0      	blx	r6
 8016c9c:	6821      	ldr	r1, [r4, #0]
 8016c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8016ca2:	f011 0f20 	tst.w	r1, #32
 8016ca6:	d013      	beq.n	8016cd0 <_scanf_i+0x1c8>
 8016ca8:	1d1a      	adds	r2, r3, #4
 8016caa:	f8c8 2000 	str.w	r2, [r8]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	6018      	str	r0, [r3, #0]
 8016cb2:	68e3      	ldr	r3, [r4, #12]
 8016cb4:	3301      	adds	r3, #1
 8016cb6:	60e3      	str	r3, [r4, #12]
 8016cb8:	1bed      	subs	r5, r5, r7
 8016cba:	44ab      	add	fp, r5
 8016cbc:	6925      	ldr	r5, [r4, #16]
 8016cbe:	445d      	add	r5, fp
 8016cc0:	6125      	str	r5, [r4, #16]
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	b007      	add	sp, #28
 8016cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cca:	f04f 0b00 	mov.w	fp, #0
 8016cce:	e7ca      	b.n	8016c66 <_scanf_i+0x15e>
 8016cd0:	1d1a      	adds	r2, r3, #4
 8016cd2:	f8c8 2000 	str.w	r2, [r8]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	f011 0f01 	tst.w	r1, #1
 8016cdc:	bf14      	ite	ne
 8016cde:	8018      	strhne	r0, [r3, #0]
 8016ce0:	6018      	streq	r0, [r3, #0]
 8016ce2:	e7e6      	b.n	8016cb2 <_scanf_i+0x1aa>
 8016ce4:	2001      	movs	r0, #1
 8016ce6:	e7ed      	b.n	8016cc4 <_scanf_i+0x1bc>
 8016ce8:	08018a00 	.word	0x08018a00
 8016cec:	08016ead 	.word	0x08016ead
 8016cf0:	08014255 	.word	0x08014255
 8016cf4:	080509a6 	.word	0x080509a6

08016cf8 <_read_r>:
 8016cf8:	b538      	push	{r3, r4, r5, lr}
 8016cfa:	4d07      	ldr	r5, [pc, #28]	; (8016d18 <_read_r+0x20>)
 8016cfc:	4604      	mov	r4, r0
 8016cfe:	4608      	mov	r0, r1
 8016d00:	4611      	mov	r1, r2
 8016d02:	2200      	movs	r2, #0
 8016d04:	602a      	str	r2, [r5, #0]
 8016d06:	461a      	mov	r2, r3
 8016d08:	f001 fc00 	bl	801850c <_read>
 8016d0c:	1c43      	adds	r3, r0, #1
 8016d0e:	d102      	bne.n	8016d16 <_read_r+0x1e>
 8016d10:	682b      	ldr	r3, [r5, #0]
 8016d12:	b103      	cbz	r3, 8016d16 <_read_r+0x1e>
 8016d14:	6023      	str	r3, [r4, #0]
 8016d16:	bd38      	pop	{r3, r4, r5, pc}
 8016d18:	20009aac 	.word	0x20009aac
 8016d1c:	00000000 	.word	0x00000000

08016d20 <nan>:
 8016d20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016d28 <nan+0x8>
 8016d24:	4770      	bx	lr
 8016d26:	bf00      	nop
 8016d28:	00000000 	.word	0x00000000
 8016d2c:	7ff80000 	.word	0x7ff80000

08016d30 <__sccl>:
 8016d30:	b570      	push	{r4, r5, r6, lr}
 8016d32:	780b      	ldrb	r3, [r1, #0]
 8016d34:	4604      	mov	r4, r0
 8016d36:	2b5e      	cmp	r3, #94	; 0x5e
 8016d38:	bf0b      	itete	eq
 8016d3a:	784b      	ldrbeq	r3, [r1, #1]
 8016d3c:	1c48      	addne	r0, r1, #1
 8016d3e:	1c88      	addeq	r0, r1, #2
 8016d40:	2200      	movne	r2, #0
 8016d42:	bf08      	it	eq
 8016d44:	2201      	moveq	r2, #1
 8016d46:	1e61      	subs	r1, r4, #1
 8016d48:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016d4c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016d50:	42a9      	cmp	r1, r5
 8016d52:	d1fb      	bne.n	8016d4c <__sccl+0x1c>
 8016d54:	b90b      	cbnz	r3, 8016d5a <__sccl+0x2a>
 8016d56:	3801      	subs	r0, #1
 8016d58:	bd70      	pop	{r4, r5, r6, pc}
 8016d5a:	f082 0201 	eor.w	r2, r2, #1
 8016d5e:	54e2      	strb	r2, [r4, r3]
 8016d60:	4605      	mov	r5, r0
 8016d62:	4628      	mov	r0, r5
 8016d64:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016d68:	292d      	cmp	r1, #45	; 0x2d
 8016d6a:	d006      	beq.n	8016d7a <__sccl+0x4a>
 8016d6c:	295d      	cmp	r1, #93	; 0x5d
 8016d6e:	d0f3      	beq.n	8016d58 <__sccl+0x28>
 8016d70:	b909      	cbnz	r1, 8016d76 <__sccl+0x46>
 8016d72:	4628      	mov	r0, r5
 8016d74:	e7f0      	b.n	8016d58 <__sccl+0x28>
 8016d76:	460b      	mov	r3, r1
 8016d78:	e7f1      	b.n	8016d5e <__sccl+0x2e>
 8016d7a:	786e      	ldrb	r6, [r5, #1]
 8016d7c:	2e5d      	cmp	r6, #93	; 0x5d
 8016d7e:	d0fa      	beq.n	8016d76 <__sccl+0x46>
 8016d80:	42b3      	cmp	r3, r6
 8016d82:	dcf8      	bgt.n	8016d76 <__sccl+0x46>
 8016d84:	3502      	adds	r5, #2
 8016d86:	4619      	mov	r1, r3
 8016d88:	3101      	adds	r1, #1
 8016d8a:	428e      	cmp	r6, r1
 8016d8c:	5462      	strb	r2, [r4, r1]
 8016d8e:	dcfb      	bgt.n	8016d88 <__sccl+0x58>
 8016d90:	1af1      	subs	r1, r6, r3
 8016d92:	3901      	subs	r1, #1
 8016d94:	1c58      	adds	r0, r3, #1
 8016d96:	42b3      	cmp	r3, r6
 8016d98:	bfa8      	it	ge
 8016d9a:	2100      	movge	r1, #0
 8016d9c:	1843      	adds	r3, r0, r1
 8016d9e:	e7e0      	b.n	8016d62 <__sccl+0x32>

08016da0 <strncmp>:
 8016da0:	b510      	push	{r4, lr}
 8016da2:	b17a      	cbz	r2, 8016dc4 <strncmp+0x24>
 8016da4:	4603      	mov	r3, r0
 8016da6:	3901      	subs	r1, #1
 8016da8:	1884      	adds	r4, r0, r2
 8016daa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016dae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016db2:	4290      	cmp	r0, r2
 8016db4:	d101      	bne.n	8016dba <strncmp+0x1a>
 8016db6:	42a3      	cmp	r3, r4
 8016db8:	d101      	bne.n	8016dbe <strncmp+0x1e>
 8016dba:	1a80      	subs	r0, r0, r2
 8016dbc:	bd10      	pop	{r4, pc}
 8016dbe:	2800      	cmp	r0, #0
 8016dc0:	d1f3      	bne.n	8016daa <strncmp+0xa>
 8016dc2:	e7fa      	b.n	8016dba <strncmp+0x1a>
 8016dc4:	4610      	mov	r0, r2
 8016dc6:	e7f9      	b.n	8016dbc <strncmp+0x1c>

08016dc8 <_strtoul_l.constprop.0>:
 8016dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016dcc:	4f36      	ldr	r7, [pc, #216]	; (8016ea8 <_strtoul_l.constprop.0+0xe0>)
 8016dce:	4686      	mov	lr, r0
 8016dd0:	460d      	mov	r5, r1
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016dd8:	5de6      	ldrb	r6, [r4, r7]
 8016dda:	f016 0608 	ands.w	r6, r6, #8
 8016dde:	d1f8      	bne.n	8016dd2 <_strtoul_l.constprop.0+0xa>
 8016de0:	2c2d      	cmp	r4, #45	; 0x2d
 8016de2:	d12f      	bne.n	8016e44 <_strtoul_l.constprop.0+0x7c>
 8016de4:	782c      	ldrb	r4, [r5, #0]
 8016de6:	2601      	movs	r6, #1
 8016de8:	1c85      	adds	r5, r0, #2
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d057      	beq.n	8016e9e <_strtoul_l.constprop.0+0xd6>
 8016dee:	2b10      	cmp	r3, #16
 8016df0:	d109      	bne.n	8016e06 <_strtoul_l.constprop.0+0x3e>
 8016df2:	2c30      	cmp	r4, #48	; 0x30
 8016df4:	d107      	bne.n	8016e06 <_strtoul_l.constprop.0+0x3e>
 8016df6:	7828      	ldrb	r0, [r5, #0]
 8016df8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016dfc:	2858      	cmp	r0, #88	; 0x58
 8016dfe:	d149      	bne.n	8016e94 <_strtoul_l.constprop.0+0xcc>
 8016e00:	786c      	ldrb	r4, [r5, #1]
 8016e02:	2310      	movs	r3, #16
 8016e04:	3502      	adds	r5, #2
 8016e06:	f04f 38ff 	mov.w	r8, #4294967295
 8016e0a:	2700      	movs	r7, #0
 8016e0c:	fbb8 f8f3 	udiv	r8, r8, r3
 8016e10:	fb03 f908 	mul.w	r9, r3, r8
 8016e14:	ea6f 0909 	mvn.w	r9, r9
 8016e18:	4638      	mov	r0, r7
 8016e1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016e1e:	f1bc 0f09 	cmp.w	ip, #9
 8016e22:	d814      	bhi.n	8016e4e <_strtoul_l.constprop.0+0x86>
 8016e24:	4664      	mov	r4, ip
 8016e26:	42a3      	cmp	r3, r4
 8016e28:	dd22      	ble.n	8016e70 <_strtoul_l.constprop.0+0xa8>
 8016e2a:	2f00      	cmp	r7, #0
 8016e2c:	db1d      	blt.n	8016e6a <_strtoul_l.constprop.0+0xa2>
 8016e2e:	4580      	cmp	r8, r0
 8016e30:	d31b      	bcc.n	8016e6a <_strtoul_l.constprop.0+0xa2>
 8016e32:	d101      	bne.n	8016e38 <_strtoul_l.constprop.0+0x70>
 8016e34:	45a1      	cmp	r9, r4
 8016e36:	db18      	blt.n	8016e6a <_strtoul_l.constprop.0+0xa2>
 8016e38:	fb00 4003 	mla	r0, r0, r3, r4
 8016e3c:	2701      	movs	r7, #1
 8016e3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e42:	e7ea      	b.n	8016e1a <_strtoul_l.constprop.0+0x52>
 8016e44:	2c2b      	cmp	r4, #43	; 0x2b
 8016e46:	bf04      	itt	eq
 8016e48:	782c      	ldrbeq	r4, [r5, #0]
 8016e4a:	1c85      	addeq	r5, r0, #2
 8016e4c:	e7cd      	b.n	8016dea <_strtoul_l.constprop.0+0x22>
 8016e4e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016e52:	f1bc 0f19 	cmp.w	ip, #25
 8016e56:	d801      	bhi.n	8016e5c <_strtoul_l.constprop.0+0x94>
 8016e58:	3c37      	subs	r4, #55	; 0x37
 8016e5a:	e7e4      	b.n	8016e26 <_strtoul_l.constprop.0+0x5e>
 8016e5c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016e60:	f1bc 0f19 	cmp.w	ip, #25
 8016e64:	d804      	bhi.n	8016e70 <_strtoul_l.constprop.0+0xa8>
 8016e66:	3c57      	subs	r4, #87	; 0x57
 8016e68:	e7dd      	b.n	8016e26 <_strtoul_l.constprop.0+0x5e>
 8016e6a:	f04f 37ff 	mov.w	r7, #4294967295
 8016e6e:	e7e6      	b.n	8016e3e <_strtoul_l.constprop.0+0x76>
 8016e70:	2f00      	cmp	r7, #0
 8016e72:	da07      	bge.n	8016e84 <_strtoul_l.constprop.0+0xbc>
 8016e74:	2322      	movs	r3, #34	; 0x22
 8016e76:	f8ce 3000 	str.w	r3, [lr]
 8016e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e7e:	b932      	cbnz	r2, 8016e8e <_strtoul_l.constprop.0+0xc6>
 8016e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e84:	b106      	cbz	r6, 8016e88 <_strtoul_l.constprop.0+0xc0>
 8016e86:	4240      	negs	r0, r0
 8016e88:	2a00      	cmp	r2, #0
 8016e8a:	d0f9      	beq.n	8016e80 <_strtoul_l.constprop.0+0xb8>
 8016e8c:	b107      	cbz	r7, 8016e90 <_strtoul_l.constprop.0+0xc8>
 8016e8e:	1e69      	subs	r1, r5, #1
 8016e90:	6011      	str	r1, [r2, #0]
 8016e92:	e7f5      	b.n	8016e80 <_strtoul_l.constprop.0+0xb8>
 8016e94:	2430      	movs	r4, #48	; 0x30
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d1b5      	bne.n	8016e06 <_strtoul_l.constprop.0+0x3e>
 8016e9a:	2308      	movs	r3, #8
 8016e9c:	e7b3      	b.n	8016e06 <_strtoul_l.constprop.0+0x3e>
 8016e9e:	2c30      	cmp	r4, #48	; 0x30
 8016ea0:	d0a9      	beq.n	8016df6 <_strtoul_l.constprop.0+0x2e>
 8016ea2:	230a      	movs	r3, #10
 8016ea4:	e7af      	b.n	8016e06 <_strtoul_l.constprop.0+0x3e>
 8016ea6:	bf00      	nop
 8016ea8:	08050631 	.word	0x08050631

08016eac <_strtoul_r>:
 8016eac:	f7ff bf8c 	b.w	8016dc8 <_strtoul_l.constprop.0>

08016eb0 <__submore>:
 8016eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb4:	460c      	mov	r4, r1
 8016eb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ebc:	4299      	cmp	r1, r3
 8016ebe:	d11d      	bne.n	8016efc <__submore+0x4c>
 8016ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016ec4:	f7fb fb22 	bl	801250c <_malloc_r>
 8016ec8:	b918      	cbnz	r0, 8016ed2 <__submore+0x22>
 8016eca:	f04f 30ff 	mov.w	r0, #4294967295
 8016ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ed6:	63a3      	str	r3, [r4, #56]	; 0x38
 8016ed8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016edc:	6360      	str	r0, [r4, #52]	; 0x34
 8016ede:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016ee2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016ee6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016eea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016eee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016ef2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016ef6:	6020      	str	r0, [r4, #0]
 8016ef8:	2000      	movs	r0, #0
 8016efa:	e7e8      	b.n	8016ece <__submore+0x1e>
 8016efc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016efe:	0077      	lsls	r7, r6, #1
 8016f00:	463a      	mov	r2, r7
 8016f02:	f7ff f8f0 	bl	80160e6 <_realloc_r>
 8016f06:	4605      	mov	r5, r0
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	d0de      	beq.n	8016eca <__submore+0x1a>
 8016f0c:	eb00 0806 	add.w	r8, r0, r6
 8016f10:	4601      	mov	r1, r0
 8016f12:	4632      	mov	r2, r6
 8016f14:	4640      	mov	r0, r8
 8016f16:	f7fb fa77 	bl	8012408 <memcpy>
 8016f1a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016f1e:	f8c4 8000 	str.w	r8, [r4]
 8016f22:	e7e9      	b.n	8016ef8 <__submore+0x48>

08016f24 <__swbuf_r>:
 8016f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f26:	460e      	mov	r6, r1
 8016f28:	4614      	mov	r4, r2
 8016f2a:	4605      	mov	r5, r0
 8016f2c:	b118      	cbz	r0, 8016f36 <__swbuf_r+0x12>
 8016f2e:	6983      	ldr	r3, [r0, #24]
 8016f30:	b90b      	cbnz	r3, 8016f36 <__swbuf_r+0x12>
 8016f32:	f000 f9e7 	bl	8017304 <__sinit>
 8016f36:	4b21      	ldr	r3, [pc, #132]	; (8016fbc <__swbuf_r+0x98>)
 8016f38:	429c      	cmp	r4, r3
 8016f3a:	d12b      	bne.n	8016f94 <__swbuf_r+0x70>
 8016f3c:	686c      	ldr	r4, [r5, #4]
 8016f3e:	69a3      	ldr	r3, [r4, #24]
 8016f40:	60a3      	str	r3, [r4, #8]
 8016f42:	89a3      	ldrh	r3, [r4, #12]
 8016f44:	071a      	lsls	r2, r3, #28
 8016f46:	d52f      	bpl.n	8016fa8 <__swbuf_r+0x84>
 8016f48:	6923      	ldr	r3, [r4, #16]
 8016f4a:	b36b      	cbz	r3, 8016fa8 <__swbuf_r+0x84>
 8016f4c:	6923      	ldr	r3, [r4, #16]
 8016f4e:	6820      	ldr	r0, [r4, #0]
 8016f50:	1ac0      	subs	r0, r0, r3
 8016f52:	6963      	ldr	r3, [r4, #20]
 8016f54:	b2f6      	uxtb	r6, r6
 8016f56:	4283      	cmp	r3, r0
 8016f58:	4637      	mov	r7, r6
 8016f5a:	dc04      	bgt.n	8016f66 <__swbuf_r+0x42>
 8016f5c:	4621      	mov	r1, r4
 8016f5e:	4628      	mov	r0, r5
 8016f60:	f000 f93c 	bl	80171dc <_fflush_r>
 8016f64:	bb30      	cbnz	r0, 8016fb4 <__swbuf_r+0x90>
 8016f66:	68a3      	ldr	r3, [r4, #8]
 8016f68:	3b01      	subs	r3, #1
 8016f6a:	60a3      	str	r3, [r4, #8]
 8016f6c:	6823      	ldr	r3, [r4, #0]
 8016f6e:	1c5a      	adds	r2, r3, #1
 8016f70:	6022      	str	r2, [r4, #0]
 8016f72:	701e      	strb	r6, [r3, #0]
 8016f74:	6963      	ldr	r3, [r4, #20]
 8016f76:	3001      	adds	r0, #1
 8016f78:	4283      	cmp	r3, r0
 8016f7a:	d004      	beq.n	8016f86 <__swbuf_r+0x62>
 8016f7c:	89a3      	ldrh	r3, [r4, #12]
 8016f7e:	07db      	lsls	r3, r3, #31
 8016f80:	d506      	bpl.n	8016f90 <__swbuf_r+0x6c>
 8016f82:	2e0a      	cmp	r6, #10
 8016f84:	d104      	bne.n	8016f90 <__swbuf_r+0x6c>
 8016f86:	4621      	mov	r1, r4
 8016f88:	4628      	mov	r0, r5
 8016f8a:	f000 f927 	bl	80171dc <_fflush_r>
 8016f8e:	b988      	cbnz	r0, 8016fb4 <__swbuf_r+0x90>
 8016f90:	4638      	mov	r0, r7
 8016f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f94:	4b0a      	ldr	r3, [pc, #40]	; (8016fc0 <__swbuf_r+0x9c>)
 8016f96:	429c      	cmp	r4, r3
 8016f98:	d101      	bne.n	8016f9e <__swbuf_r+0x7a>
 8016f9a:	68ac      	ldr	r4, [r5, #8]
 8016f9c:	e7cf      	b.n	8016f3e <__swbuf_r+0x1a>
 8016f9e:	4b09      	ldr	r3, [pc, #36]	; (8016fc4 <__swbuf_r+0xa0>)
 8016fa0:	429c      	cmp	r4, r3
 8016fa2:	bf08      	it	eq
 8016fa4:	68ec      	ldreq	r4, [r5, #12]
 8016fa6:	e7ca      	b.n	8016f3e <__swbuf_r+0x1a>
 8016fa8:	4621      	mov	r1, r4
 8016faa:	4628      	mov	r0, r5
 8016fac:	f000 f81a 	bl	8016fe4 <__swsetup_r>
 8016fb0:	2800      	cmp	r0, #0
 8016fb2:	d0cb      	beq.n	8016f4c <__swbuf_r+0x28>
 8016fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8016fb8:	e7ea      	b.n	8016f90 <__swbuf_r+0x6c>
 8016fba:	bf00      	nop
 8016fbc:	080509c8 	.word	0x080509c8
 8016fc0:	080509e8 	.word	0x080509e8
 8016fc4:	080509a8 	.word	0x080509a8

08016fc8 <__ascii_wctomb>:
 8016fc8:	b149      	cbz	r1, 8016fde <__ascii_wctomb+0x16>
 8016fca:	2aff      	cmp	r2, #255	; 0xff
 8016fcc:	bf85      	ittet	hi
 8016fce:	238a      	movhi	r3, #138	; 0x8a
 8016fd0:	6003      	strhi	r3, [r0, #0]
 8016fd2:	700a      	strbls	r2, [r1, #0]
 8016fd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8016fd8:	bf98      	it	ls
 8016fda:	2001      	movls	r0, #1
 8016fdc:	4770      	bx	lr
 8016fde:	4608      	mov	r0, r1
 8016fe0:	4770      	bx	lr
	...

08016fe4 <__swsetup_r>:
 8016fe4:	4b32      	ldr	r3, [pc, #200]	; (80170b0 <__swsetup_r+0xcc>)
 8016fe6:	b570      	push	{r4, r5, r6, lr}
 8016fe8:	681d      	ldr	r5, [r3, #0]
 8016fea:	4606      	mov	r6, r0
 8016fec:	460c      	mov	r4, r1
 8016fee:	b125      	cbz	r5, 8016ffa <__swsetup_r+0x16>
 8016ff0:	69ab      	ldr	r3, [r5, #24]
 8016ff2:	b913      	cbnz	r3, 8016ffa <__swsetup_r+0x16>
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f000 f985 	bl	8017304 <__sinit>
 8016ffa:	4b2e      	ldr	r3, [pc, #184]	; (80170b4 <__swsetup_r+0xd0>)
 8016ffc:	429c      	cmp	r4, r3
 8016ffe:	d10f      	bne.n	8017020 <__swsetup_r+0x3c>
 8017000:	686c      	ldr	r4, [r5, #4]
 8017002:	89a3      	ldrh	r3, [r4, #12]
 8017004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017008:	0719      	lsls	r1, r3, #28
 801700a:	d42c      	bmi.n	8017066 <__swsetup_r+0x82>
 801700c:	06dd      	lsls	r5, r3, #27
 801700e:	d411      	bmi.n	8017034 <__swsetup_r+0x50>
 8017010:	2309      	movs	r3, #9
 8017012:	6033      	str	r3, [r6, #0]
 8017014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017018:	81a3      	strh	r3, [r4, #12]
 801701a:	f04f 30ff 	mov.w	r0, #4294967295
 801701e:	e03e      	b.n	801709e <__swsetup_r+0xba>
 8017020:	4b25      	ldr	r3, [pc, #148]	; (80170b8 <__swsetup_r+0xd4>)
 8017022:	429c      	cmp	r4, r3
 8017024:	d101      	bne.n	801702a <__swsetup_r+0x46>
 8017026:	68ac      	ldr	r4, [r5, #8]
 8017028:	e7eb      	b.n	8017002 <__swsetup_r+0x1e>
 801702a:	4b24      	ldr	r3, [pc, #144]	; (80170bc <__swsetup_r+0xd8>)
 801702c:	429c      	cmp	r4, r3
 801702e:	bf08      	it	eq
 8017030:	68ec      	ldreq	r4, [r5, #12]
 8017032:	e7e6      	b.n	8017002 <__swsetup_r+0x1e>
 8017034:	0758      	lsls	r0, r3, #29
 8017036:	d512      	bpl.n	801705e <__swsetup_r+0x7a>
 8017038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801703a:	b141      	cbz	r1, 801704e <__swsetup_r+0x6a>
 801703c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017040:	4299      	cmp	r1, r3
 8017042:	d002      	beq.n	801704a <__swsetup_r+0x66>
 8017044:	4630      	mov	r0, r6
 8017046:	f7fb f9f5 	bl	8012434 <_free_r>
 801704a:	2300      	movs	r3, #0
 801704c:	6363      	str	r3, [r4, #52]	; 0x34
 801704e:	89a3      	ldrh	r3, [r4, #12]
 8017050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017054:	81a3      	strh	r3, [r4, #12]
 8017056:	2300      	movs	r3, #0
 8017058:	6063      	str	r3, [r4, #4]
 801705a:	6923      	ldr	r3, [r4, #16]
 801705c:	6023      	str	r3, [r4, #0]
 801705e:	89a3      	ldrh	r3, [r4, #12]
 8017060:	f043 0308 	orr.w	r3, r3, #8
 8017064:	81a3      	strh	r3, [r4, #12]
 8017066:	6923      	ldr	r3, [r4, #16]
 8017068:	b94b      	cbnz	r3, 801707e <__swsetup_r+0x9a>
 801706a:	89a3      	ldrh	r3, [r4, #12]
 801706c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017074:	d003      	beq.n	801707e <__swsetup_r+0x9a>
 8017076:	4621      	mov	r1, r4
 8017078:	4630      	mov	r0, r6
 801707a:	f000 fa09 	bl	8017490 <__smakebuf_r>
 801707e:	89a0      	ldrh	r0, [r4, #12]
 8017080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017084:	f010 0301 	ands.w	r3, r0, #1
 8017088:	d00a      	beq.n	80170a0 <__swsetup_r+0xbc>
 801708a:	2300      	movs	r3, #0
 801708c:	60a3      	str	r3, [r4, #8]
 801708e:	6963      	ldr	r3, [r4, #20]
 8017090:	425b      	negs	r3, r3
 8017092:	61a3      	str	r3, [r4, #24]
 8017094:	6923      	ldr	r3, [r4, #16]
 8017096:	b943      	cbnz	r3, 80170aa <__swsetup_r+0xc6>
 8017098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801709c:	d1ba      	bne.n	8017014 <__swsetup_r+0x30>
 801709e:	bd70      	pop	{r4, r5, r6, pc}
 80170a0:	0781      	lsls	r1, r0, #30
 80170a2:	bf58      	it	pl
 80170a4:	6963      	ldrpl	r3, [r4, #20]
 80170a6:	60a3      	str	r3, [r4, #8]
 80170a8:	e7f4      	b.n	8017094 <__swsetup_r+0xb0>
 80170aa:	2000      	movs	r0, #0
 80170ac:	e7f7      	b.n	801709e <__swsetup_r+0xba>
 80170ae:	bf00      	nop
 80170b0:	200013a4 	.word	0x200013a4
 80170b4:	080509c8 	.word	0x080509c8
 80170b8:	080509e8 	.word	0x080509e8
 80170bc:	080509a8 	.word	0x080509a8

080170c0 <abort>:
 80170c0:	b508      	push	{r3, lr}
 80170c2:	2006      	movs	r0, #6
 80170c4:	f000 fa6e 	bl	80175a4 <raise>
 80170c8:	2001      	movs	r0, #1
 80170ca:	f001 fa2f 	bl	801852c <_exit>
	...

080170d0 <__sflush_r>:
 80170d0:	898a      	ldrh	r2, [r1, #12]
 80170d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170d6:	4605      	mov	r5, r0
 80170d8:	0710      	lsls	r0, r2, #28
 80170da:	460c      	mov	r4, r1
 80170dc:	d458      	bmi.n	8017190 <__sflush_r+0xc0>
 80170de:	684b      	ldr	r3, [r1, #4]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	dc05      	bgt.n	80170f0 <__sflush_r+0x20>
 80170e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	dc02      	bgt.n	80170f0 <__sflush_r+0x20>
 80170ea:	2000      	movs	r0, #0
 80170ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80170f2:	2e00      	cmp	r6, #0
 80170f4:	d0f9      	beq.n	80170ea <__sflush_r+0x1a>
 80170f6:	2300      	movs	r3, #0
 80170f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80170fc:	682f      	ldr	r7, [r5, #0]
 80170fe:	602b      	str	r3, [r5, #0]
 8017100:	d032      	beq.n	8017168 <__sflush_r+0x98>
 8017102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017104:	89a3      	ldrh	r3, [r4, #12]
 8017106:	075a      	lsls	r2, r3, #29
 8017108:	d505      	bpl.n	8017116 <__sflush_r+0x46>
 801710a:	6863      	ldr	r3, [r4, #4]
 801710c:	1ac0      	subs	r0, r0, r3
 801710e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017110:	b10b      	cbz	r3, 8017116 <__sflush_r+0x46>
 8017112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017114:	1ac0      	subs	r0, r0, r3
 8017116:	2300      	movs	r3, #0
 8017118:	4602      	mov	r2, r0
 801711a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801711c:	6a21      	ldr	r1, [r4, #32]
 801711e:	4628      	mov	r0, r5
 8017120:	47b0      	blx	r6
 8017122:	1c43      	adds	r3, r0, #1
 8017124:	89a3      	ldrh	r3, [r4, #12]
 8017126:	d106      	bne.n	8017136 <__sflush_r+0x66>
 8017128:	6829      	ldr	r1, [r5, #0]
 801712a:	291d      	cmp	r1, #29
 801712c:	d82c      	bhi.n	8017188 <__sflush_r+0xb8>
 801712e:	4a2a      	ldr	r2, [pc, #168]	; (80171d8 <__sflush_r+0x108>)
 8017130:	40ca      	lsrs	r2, r1
 8017132:	07d6      	lsls	r6, r2, #31
 8017134:	d528      	bpl.n	8017188 <__sflush_r+0xb8>
 8017136:	2200      	movs	r2, #0
 8017138:	6062      	str	r2, [r4, #4]
 801713a:	04d9      	lsls	r1, r3, #19
 801713c:	6922      	ldr	r2, [r4, #16]
 801713e:	6022      	str	r2, [r4, #0]
 8017140:	d504      	bpl.n	801714c <__sflush_r+0x7c>
 8017142:	1c42      	adds	r2, r0, #1
 8017144:	d101      	bne.n	801714a <__sflush_r+0x7a>
 8017146:	682b      	ldr	r3, [r5, #0]
 8017148:	b903      	cbnz	r3, 801714c <__sflush_r+0x7c>
 801714a:	6560      	str	r0, [r4, #84]	; 0x54
 801714c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801714e:	602f      	str	r7, [r5, #0]
 8017150:	2900      	cmp	r1, #0
 8017152:	d0ca      	beq.n	80170ea <__sflush_r+0x1a>
 8017154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017158:	4299      	cmp	r1, r3
 801715a:	d002      	beq.n	8017162 <__sflush_r+0x92>
 801715c:	4628      	mov	r0, r5
 801715e:	f7fb f969 	bl	8012434 <_free_r>
 8017162:	2000      	movs	r0, #0
 8017164:	6360      	str	r0, [r4, #52]	; 0x34
 8017166:	e7c1      	b.n	80170ec <__sflush_r+0x1c>
 8017168:	6a21      	ldr	r1, [r4, #32]
 801716a:	2301      	movs	r3, #1
 801716c:	4628      	mov	r0, r5
 801716e:	47b0      	blx	r6
 8017170:	1c41      	adds	r1, r0, #1
 8017172:	d1c7      	bne.n	8017104 <__sflush_r+0x34>
 8017174:	682b      	ldr	r3, [r5, #0]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d0c4      	beq.n	8017104 <__sflush_r+0x34>
 801717a:	2b1d      	cmp	r3, #29
 801717c:	d001      	beq.n	8017182 <__sflush_r+0xb2>
 801717e:	2b16      	cmp	r3, #22
 8017180:	d101      	bne.n	8017186 <__sflush_r+0xb6>
 8017182:	602f      	str	r7, [r5, #0]
 8017184:	e7b1      	b.n	80170ea <__sflush_r+0x1a>
 8017186:	89a3      	ldrh	r3, [r4, #12]
 8017188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801718c:	81a3      	strh	r3, [r4, #12]
 801718e:	e7ad      	b.n	80170ec <__sflush_r+0x1c>
 8017190:	690f      	ldr	r7, [r1, #16]
 8017192:	2f00      	cmp	r7, #0
 8017194:	d0a9      	beq.n	80170ea <__sflush_r+0x1a>
 8017196:	0793      	lsls	r3, r2, #30
 8017198:	680e      	ldr	r6, [r1, #0]
 801719a:	bf08      	it	eq
 801719c:	694b      	ldreq	r3, [r1, #20]
 801719e:	600f      	str	r7, [r1, #0]
 80171a0:	bf18      	it	ne
 80171a2:	2300      	movne	r3, #0
 80171a4:	eba6 0807 	sub.w	r8, r6, r7
 80171a8:	608b      	str	r3, [r1, #8]
 80171aa:	f1b8 0f00 	cmp.w	r8, #0
 80171ae:	dd9c      	ble.n	80170ea <__sflush_r+0x1a>
 80171b0:	6a21      	ldr	r1, [r4, #32]
 80171b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80171b4:	4643      	mov	r3, r8
 80171b6:	463a      	mov	r2, r7
 80171b8:	4628      	mov	r0, r5
 80171ba:	47b0      	blx	r6
 80171bc:	2800      	cmp	r0, #0
 80171be:	dc06      	bgt.n	80171ce <__sflush_r+0xfe>
 80171c0:	89a3      	ldrh	r3, [r4, #12]
 80171c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171c6:	81a3      	strh	r3, [r4, #12]
 80171c8:	f04f 30ff 	mov.w	r0, #4294967295
 80171cc:	e78e      	b.n	80170ec <__sflush_r+0x1c>
 80171ce:	4407      	add	r7, r0
 80171d0:	eba8 0800 	sub.w	r8, r8, r0
 80171d4:	e7e9      	b.n	80171aa <__sflush_r+0xda>
 80171d6:	bf00      	nop
 80171d8:	20400001 	.word	0x20400001

080171dc <_fflush_r>:
 80171dc:	b538      	push	{r3, r4, r5, lr}
 80171de:	690b      	ldr	r3, [r1, #16]
 80171e0:	4605      	mov	r5, r0
 80171e2:	460c      	mov	r4, r1
 80171e4:	b913      	cbnz	r3, 80171ec <_fflush_r+0x10>
 80171e6:	2500      	movs	r5, #0
 80171e8:	4628      	mov	r0, r5
 80171ea:	bd38      	pop	{r3, r4, r5, pc}
 80171ec:	b118      	cbz	r0, 80171f6 <_fflush_r+0x1a>
 80171ee:	6983      	ldr	r3, [r0, #24]
 80171f0:	b90b      	cbnz	r3, 80171f6 <_fflush_r+0x1a>
 80171f2:	f000 f887 	bl	8017304 <__sinit>
 80171f6:	4b14      	ldr	r3, [pc, #80]	; (8017248 <_fflush_r+0x6c>)
 80171f8:	429c      	cmp	r4, r3
 80171fa:	d11b      	bne.n	8017234 <_fflush_r+0x58>
 80171fc:	686c      	ldr	r4, [r5, #4]
 80171fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d0ef      	beq.n	80171e6 <_fflush_r+0xa>
 8017206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017208:	07d0      	lsls	r0, r2, #31
 801720a:	d404      	bmi.n	8017216 <_fflush_r+0x3a>
 801720c:	0599      	lsls	r1, r3, #22
 801720e:	d402      	bmi.n	8017216 <_fflush_r+0x3a>
 8017210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017212:	f000 f915 	bl	8017440 <__retarget_lock_acquire_recursive>
 8017216:	4628      	mov	r0, r5
 8017218:	4621      	mov	r1, r4
 801721a:	f7ff ff59 	bl	80170d0 <__sflush_r>
 801721e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017220:	07da      	lsls	r2, r3, #31
 8017222:	4605      	mov	r5, r0
 8017224:	d4e0      	bmi.n	80171e8 <_fflush_r+0xc>
 8017226:	89a3      	ldrh	r3, [r4, #12]
 8017228:	059b      	lsls	r3, r3, #22
 801722a:	d4dd      	bmi.n	80171e8 <_fflush_r+0xc>
 801722c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801722e:	f000 f908 	bl	8017442 <__retarget_lock_release_recursive>
 8017232:	e7d9      	b.n	80171e8 <_fflush_r+0xc>
 8017234:	4b05      	ldr	r3, [pc, #20]	; (801724c <_fflush_r+0x70>)
 8017236:	429c      	cmp	r4, r3
 8017238:	d101      	bne.n	801723e <_fflush_r+0x62>
 801723a:	68ac      	ldr	r4, [r5, #8]
 801723c:	e7df      	b.n	80171fe <_fflush_r+0x22>
 801723e:	4b04      	ldr	r3, [pc, #16]	; (8017250 <_fflush_r+0x74>)
 8017240:	429c      	cmp	r4, r3
 8017242:	bf08      	it	eq
 8017244:	68ec      	ldreq	r4, [r5, #12]
 8017246:	e7da      	b.n	80171fe <_fflush_r+0x22>
 8017248:	080509c8 	.word	0x080509c8
 801724c:	080509e8 	.word	0x080509e8
 8017250:	080509a8 	.word	0x080509a8

08017254 <std>:
 8017254:	2300      	movs	r3, #0
 8017256:	b510      	push	{r4, lr}
 8017258:	4604      	mov	r4, r0
 801725a:	e9c0 3300 	strd	r3, r3, [r0]
 801725e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017262:	6083      	str	r3, [r0, #8]
 8017264:	8181      	strh	r1, [r0, #12]
 8017266:	6643      	str	r3, [r0, #100]	; 0x64
 8017268:	81c2      	strh	r2, [r0, #14]
 801726a:	6183      	str	r3, [r0, #24]
 801726c:	4619      	mov	r1, r3
 801726e:	2208      	movs	r2, #8
 8017270:	305c      	adds	r0, #92	; 0x5c
 8017272:	f7fb f8d7 	bl	8012424 <memset>
 8017276:	4b05      	ldr	r3, [pc, #20]	; (801728c <std+0x38>)
 8017278:	6263      	str	r3, [r4, #36]	; 0x24
 801727a:	4b05      	ldr	r3, [pc, #20]	; (8017290 <std+0x3c>)
 801727c:	62a3      	str	r3, [r4, #40]	; 0x28
 801727e:	4b05      	ldr	r3, [pc, #20]	; (8017294 <std+0x40>)
 8017280:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017282:	4b05      	ldr	r3, [pc, #20]	; (8017298 <std+0x44>)
 8017284:	6224      	str	r4, [r4, #32]
 8017286:	6323      	str	r3, [r4, #48]	; 0x30
 8017288:	bd10      	pop	{r4, pc}
 801728a:	bf00      	nop
 801728c:	080133ad 	.word	0x080133ad
 8017290:	080133d3 	.word	0x080133d3
 8017294:	0801340b 	.word	0x0801340b
 8017298:	0801342f 	.word	0x0801342f

0801729c <_cleanup_r>:
 801729c:	4901      	ldr	r1, [pc, #4]	; (80172a4 <_cleanup_r+0x8>)
 801729e:	f000 b8af 	b.w	8017400 <_fwalk_reent>
 80172a2:	bf00      	nop
 80172a4:	080171dd 	.word	0x080171dd

080172a8 <__sfmoreglue>:
 80172a8:	b570      	push	{r4, r5, r6, lr}
 80172aa:	2268      	movs	r2, #104	; 0x68
 80172ac:	1e4d      	subs	r5, r1, #1
 80172ae:	4355      	muls	r5, r2
 80172b0:	460e      	mov	r6, r1
 80172b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80172b6:	f7fb f929 	bl	801250c <_malloc_r>
 80172ba:	4604      	mov	r4, r0
 80172bc:	b140      	cbz	r0, 80172d0 <__sfmoreglue+0x28>
 80172be:	2100      	movs	r1, #0
 80172c0:	e9c0 1600 	strd	r1, r6, [r0]
 80172c4:	300c      	adds	r0, #12
 80172c6:	60a0      	str	r0, [r4, #8]
 80172c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80172cc:	f7fb f8aa 	bl	8012424 <memset>
 80172d0:	4620      	mov	r0, r4
 80172d2:	bd70      	pop	{r4, r5, r6, pc}

080172d4 <__sfp_lock_acquire>:
 80172d4:	4801      	ldr	r0, [pc, #4]	; (80172dc <__sfp_lock_acquire+0x8>)
 80172d6:	f000 b8b3 	b.w	8017440 <__retarget_lock_acquire_recursive>
 80172da:	bf00      	nop
 80172dc:	20009ab1 	.word	0x20009ab1

080172e0 <__sfp_lock_release>:
 80172e0:	4801      	ldr	r0, [pc, #4]	; (80172e8 <__sfp_lock_release+0x8>)
 80172e2:	f000 b8ae 	b.w	8017442 <__retarget_lock_release_recursive>
 80172e6:	bf00      	nop
 80172e8:	20009ab1 	.word	0x20009ab1

080172ec <__sinit_lock_acquire>:
 80172ec:	4801      	ldr	r0, [pc, #4]	; (80172f4 <__sinit_lock_acquire+0x8>)
 80172ee:	f000 b8a7 	b.w	8017440 <__retarget_lock_acquire_recursive>
 80172f2:	bf00      	nop
 80172f4:	20009ab2 	.word	0x20009ab2

080172f8 <__sinit_lock_release>:
 80172f8:	4801      	ldr	r0, [pc, #4]	; (8017300 <__sinit_lock_release+0x8>)
 80172fa:	f000 b8a2 	b.w	8017442 <__retarget_lock_release_recursive>
 80172fe:	bf00      	nop
 8017300:	20009ab2 	.word	0x20009ab2

08017304 <__sinit>:
 8017304:	b510      	push	{r4, lr}
 8017306:	4604      	mov	r4, r0
 8017308:	f7ff fff0 	bl	80172ec <__sinit_lock_acquire>
 801730c:	69a3      	ldr	r3, [r4, #24]
 801730e:	b11b      	cbz	r3, 8017318 <__sinit+0x14>
 8017310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017314:	f7ff bff0 	b.w	80172f8 <__sinit_lock_release>
 8017318:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801731c:	6523      	str	r3, [r4, #80]	; 0x50
 801731e:	4b13      	ldr	r3, [pc, #76]	; (801736c <__sinit+0x68>)
 8017320:	4a13      	ldr	r2, [pc, #76]	; (8017370 <__sinit+0x6c>)
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	62a2      	str	r2, [r4, #40]	; 0x28
 8017326:	42a3      	cmp	r3, r4
 8017328:	bf04      	itt	eq
 801732a:	2301      	moveq	r3, #1
 801732c:	61a3      	streq	r3, [r4, #24]
 801732e:	4620      	mov	r0, r4
 8017330:	f000 f820 	bl	8017374 <__sfp>
 8017334:	6060      	str	r0, [r4, #4]
 8017336:	4620      	mov	r0, r4
 8017338:	f000 f81c 	bl	8017374 <__sfp>
 801733c:	60a0      	str	r0, [r4, #8]
 801733e:	4620      	mov	r0, r4
 8017340:	f000 f818 	bl	8017374 <__sfp>
 8017344:	2200      	movs	r2, #0
 8017346:	60e0      	str	r0, [r4, #12]
 8017348:	2104      	movs	r1, #4
 801734a:	6860      	ldr	r0, [r4, #4]
 801734c:	f7ff ff82 	bl	8017254 <std>
 8017350:	68a0      	ldr	r0, [r4, #8]
 8017352:	2201      	movs	r2, #1
 8017354:	2109      	movs	r1, #9
 8017356:	f7ff ff7d 	bl	8017254 <std>
 801735a:	68e0      	ldr	r0, [r4, #12]
 801735c:	2202      	movs	r2, #2
 801735e:	2112      	movs	r1, #18
 8017360:	f7ff ff78 	bl	8017254 <std>
 8017364:	2301      	movs	r3, #1
 8017366:	61a3      	str	r3, [r4, #24]
 8017368:	e7d2      	b.n	8017310 <__sinit+0xc>
 801736a:	bf00      	nop
 801736c:	080504f0 	.word	0x080504f0
 8017370:	0801729d 	.word	0x0801729d

08017374 <__sfp>:
 8017374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017376:	4607      	mov	r7, r0
 8017378:	f7ff ffac 	bl	80172d4 <__sfp_lock_acquire>
 801737c:	4b1e      	ldr	r3, [pc, #120]	; (80173f8 <__sfp+0x84>)
 801737e:	681e      	ldr	r6, [r3, #0]
 8017380:	69b3      	ldr	r3, [r6, #24]
 8017382:	b913      	cbnz	r3, 801738a <__sfp+0x16>
 8017384:	4630      	mov	r0, r6
 8017386:	f7ff ffbd 	bl	8017304 <__sinit>
 801738a:	3648      	adds	r6, #72	; 0x48
 801738c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017390:	3b01      	subs	r3, #1
 8017392:	d503      	bpl.n	801739c <__sfp+0x28>
 8017394:	6833      	ldr	r3, [r6, #0]
 8017396:	b30b      	cbz	r3, 80173dc <__sfp+0x68>
 8017398:	6836      	ldr	r6, [r6, #0]
 801739a:	e7f7      	b.n	801738c <__sfp+0x18>
 801739c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80173a0:	b9d5      	cbnz	r5, 80173d8 <__sfp+0x64>
 80173a2:	4b16      	ldr	r3, [pc, #88]	; (80173fc <__sfp+0x88>)
 80173a4:	60e3      	str	r3, [r4, #12]
 80173a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80173aa:	6665      	str	r5, [r4, #100]	; 0x64
 80173ac:	f000 f847 	bl	801743e <__retarget_lock_init_recursive>
 80173b0:	f7ff ff96 	bl	80172e0 <__sfp_lock_release>
 80173b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80173b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80173bc:	6025      	str	r5, [r4, #0]
 80173be:	61a5      	str	r5, [r4, #24]
 80173c0:	2208      	movs	r2, #8
 80173c2:	4629      	mov	r1, r5
 80173c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80173c8:	f7fb f82c 	bl	8012424 <memset>
 80173cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80173d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80173d4:	4620      	mov	r0, r4
 80173d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173d8:	3468      	adds	r4, #104	; 0x68
 80173da:	e7d9      	b.n	8017390 <__sfp+0x1c>
 80173dc:	2104      	movs	r1, #4
 80173de:	4638      	mov	r0, r7
 80173e0:	f7ff ff62 	bl	80172a8 <__sfmoreglue>
 80173e4:	4604      	mov	r4, r0
 80173e6:	6030      	str	r0, [r6, #0]
 80173e8:	2800      	cmp	r0, #0
 80173ea:	d1d5      	bne.n	8017398 <__sfp+0x24>
 80173ec:	f7ff ff78 	bl	80172e0 <__sfp_lock_release>
 80173f0:	230c      	movs	r3, #12
 80173f2:	603b      	str	r3, [r7, #0]
 80173f4:	e7ee      	b.n	80173d4 <__sfp+0x60>
 80173f6:	bf00      	nop
 80173f8:	080504f0 	.word	0x080504f0
 80173fc:	ffff0001 	.word	0xffff0001

08017400 <_fwalk_reent>:
 8017400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017404:	4606      	mov	r6, r0
 8017406:	4688      	mov	r8, r1
 8017408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801740c:	2700      	movs	r7, #0
 801740e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017412:	f1b9 0901 	subs.w	r9, r9, #1
 8017416:	d505      	bpl.n	8017424 <_fwalk_reent+0x24>
 8017418:	6824      	ldr	r4, [r4, #0]
 801741a:	2c00      	cmp	r4, #0
 801741c:	d1f7      	bne.n	801740e <_fwalk_reent+0xe>
 801741e:	4638      	mov	r0, r7
 8017420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017424:	89ab      	ldrh	r3, [r5, #12]
 8017426:	2b01      	cmp	r3, #1
 8017428:	d907      	bls.n	801743a <_fwalk_reent+0x3a>
 801742a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801742e:	3301      	adds	r3, #1
 8017430:	d003      	beq.n	801743a <_fwalk_reent+0x3a>
 8017432:	4629      	mov	r1, r5
 8017434:	4630      	mov	r0, r6
 8017436:	47c0      	blx	r8
 8017438:	4307      	orrs	r7, r0
 801743a:	3568      	adds	r5, #104	; 0x68
 801743c:	e7e9      	b.n	8017412 <_fwalk_reent+0x12>

0801743e <__retarget_lock_init_recursive>:
 801743e:	4770      	bx	lr

08017440 <__retarget_lock_acquire_recursive>:
 8017440:	4770      	bx	lr

08017442 <__retarget_lock_release_recursive>:
 8017442:	4770      	bx	lr

08017444 <__swhatbuf_r>:
 8017444:	b570      	push	{r4, r5, r6, lr}
 8017446:	460e      	mov	r6, r1
 8017448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801744c:	2900      	cmp	r1, #0
 801744e:	b096      	sub	sp, #88	; 0x58
 8017450:	4614      	mov	r4, r2
 8017452:	461d      	mov	r5, r3
 8017454:	da08      	bge.n	8017468 <__swhatbuf_r+0x24>
 8017456:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801745a:	2200      	movs	r2, #0
 801745c:	602a      	str	r2, [r5, #0]
 801745e:	061a      	lsls	r2, r3, #24
 8017460:	d410      	bmi.n	8017484 <__swhatbuf_r+0x40>
 8017462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017466:	e00e      	b.n	8017486 <__swhatbuf_r+0x42>
 8017468:	466a      	mov	r2, sp
 801746a:	f000 f8b7 	bl	80175dc <_fstat_r>
 801746e:	2800      	cmp	r0, #0
 8017470:	dbf1      	blt.n	8017456 <__swhatbuf_r+0x12>
 8017472:	9a01      	ldr	r2, [sp, #4]
 8017474:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017478:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801747c:	425a      	negs	r2, r3
 801747e:	415a      	adcs	r2, r3
 8017480:	602a      	str	r2, [r5, #0]
 8017482:	e7ee      	b.n	8017462 <__swhatbuf_r+0x1e>
 8017484:	2340      	movs	r3, #64	; 0x40
 8017486:	2000      	movs	r0, #0
 8017488:	6023      	str	r3, [r4, #0]
 801748a:	b016      	add	sp, #88	; 0x58
 801748c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017490 <__smakebuf_r>:
 8017490:	898b      	ldrh	r3, [r1, #12]
 8017492:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017494:	079d      	lsls	r5, r3, #30
 8017496:	4606      	mov	r6, r0
 8017498:	460c      	mov	r4, r1
 801749a:	d507      	bpl.n	80174ac <__smakebuf_r+0x1c>
 801749c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80174a0:	6023      	str	r3, [r4, #0]
 80174a2:	6123      	str	r3, [r4, #16]
 80174a4:	2301      	movs	r3, #1
 80174a6:	6163      	str	r3, [r4, #20]
 80174a8:	b002      	add	sp, #8
 80174aa:	bd70      	pop	{r4, r5, r6, pc}
 80174ac:	ab01      	add	r3, sp, #4
 80174ae:	466a      	mov	r2, sp
 80174b0:	f7ff ffc8 	bl	8017444 <__swhatbuf_r>
 80174b4:	9900      	ldr	r1, [sp, #0]
 80174b6:	4605      	mov	r5, r0
 80174b8:	4630      	mov	r0, r6
 80174ba:	f7fb f827 	bl	801250c <_malloc_r>
 80174be:	b948      	cbnz	r0, 80174d4 <__smakebuf_r+0x44>
 80174c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174c4:	059a      	lsls	r2, r3, #22
 80174c6:	d4ef      	bmi.n	80174a8 <__smakebuf_r+0x18>
 80174c8:	f023 0303 	bic.w	r3, r3, #3
 80174cc:	f043 0302 	orr.w	r3, r3, #2
 80174d0:	81a3      	strh	r3, [r4, #12]
 80174d2:	e7e3      	b.n	801749c <__smakebuf_r+0xc>
 80174d4:	4b0d      	ldr	r3, [pc, #52]	; (801750c <__smakebuf_r+0x7c>)
 80174d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80174d8:	89a3      	ldrh	r3, [r4, #12]
 80174da:	6020      	str	r0, [r4, #0]
 80174dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174e0:	81a3      	strh	r3, [r4, #12]
 80174e2:	9b00      	ldr	r3, [sp, #0]
 80174e4:	6163      	str	r3, [r4, #20]
 80174e6:	9b01      	ldr	r3, [sp, #4]
 80174e8:	6120      	str	r0, [r4, #16]
 80174ea:	b15b      	cbz	r3, 8017504 <__smakebuf_r+0x74>
 80174ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174f0:	4630      	mov	r0, r6
 80174f2:	f000 f885 	bl	8017600 <_isatty_r>
 80174f6:	b128      	cbz	r0, 8017504 <__smakebuf_r+0x74>
 80174f8:	89a3      	ldrh	r3, [r4, #12]
 80174fa:	f023 0303 	bic.w	r3, r3, #3
 80174fe:	f043 0301 	orr.w	r3, r3, #1
 8017502:	81a3      	strh	r3, [r4, #12]
 8017504:	89a0      	ldrh	r0, [r4, #12]
 8017506:	4305      	orrs	r5, r0
 8017508:	81a5      	strh	r5, [r4, #12]
 801750a:	e7cd      	b.n	80174a8 <__smakebuf_r+0x18>
 801750c:	0801729d 	.word	0x0801729d

08017510 <memmove>:
 8017510:	4288      	cmp	r0, r1
 8017512:	b510      	push	{r4, lr}
 8017514:	eb01 0402 	add.w	r4, r1, r2
 8017518:	d902      	bls.n	8017520 <memmove+0x10>
 801751a:	4284      	cmp	r4, r0
 801751c:	4623      	mov	r3, r4
 801751e:	d807      	bhi.n	8017530 <memmove+0x20>
 8017520:	1e43      	subs	r3, r0, #1
 8017522:	42a1      	cmp	r1, r4
 8017524:	d008      	beq.n	8017538 <memmove+0x28>
 8017526:	f811 2b01 	ldrb.w	r2, [r1], #1
 801752a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801752e:	e7f8      	b.n	8017522 <memmove+0x12>
 8017530:	4402      	add	r2, r0
 8017532:	4601      	mov	r1, r0
 8017534:	428a      	cmp	r2, r1
 8017536:	d100      	bne.n	801753a <memmove+0x2a>
 8017538:	bd10      	pop	{r4, pc}
 801753a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801753e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017542:	e7f7      	b.n	8017534 <memmove+0x24>

08017544 <_malloc_usable_size_r>:
 8017544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017548:	1f18      	subs	r0, r3, #4
 801754a:	2b00      	cmp	r3, #0
 801754c:	bfbc      	itt	lt
 801754e:	580b      	ldrlt	r3, [r1, r0]
 8017550:	18c0      	addlt	r0, r0, r3
 8017552:	4770      	bx	lr

08017554 <_raise_r>:
 8017554:	291f      	cmp	r1, #31
 8017556:	b538      	push	{r3, r4, r5, lr}
 8017558:	4604      	mov	r4, r0
 801755a:	460d      	mov	r5, r1
 801755c:	d904      	bls.n	8017568 <_raise_r+0x14>
 801755e:	2316      	movs	r3, #22
 8017560:	6003      	str	r3, [r0, #0]
 8017562:	f04f 30ff 	mov.w	r0, #4294967295
 8017566:	bd38      	pop	{r3, r4, r5, pc}
 8017568:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801756a:	b112      	cbz	r2, 8017572 <_raise_r+0x1e>
 801756c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017570:	b94b      	cbnz	r3, 8017586 <_raise_r+0x32>
 8017572:	4620      	mov	r0, r4
 8017574:	f000 f830 	bl	80175d8 <_getpid_r>
 8017578:	462a      	mov	r2, r5
 801757a:	4601      	mov	r1, r0
 801757c:	4620      	mov	r0, r4
 801757e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017582:	f000 b817 	b.w	80175b4 <_kill_r>
 8017586:	2b01      	cmp	r3, #1
 8017588:	d00a      	beq.n	80175a0 <_raise_r+0x4c>
 801758a:	1c59      	adds	r1, r3, #1
 801758c:	d103      	bne.n	8017596 <_raise_r+0x42>
 801758e:	2316      	movs	r3, #22
 8017590:	6003      	str	r3, [r0, #0]
 8017592:	2001      	movs	r0, #1
 8017594:	e7e7      	b.n	8017566 <_raise_r+0x12>
 8017596:	2400      	movs	r4, #0
 8017598:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801759c:	4628      	mov	r0, r5
 801759e:	4798      	blx	r3
 80175a0:	2000      	movs	r0, #0
 80175a2:	e7e0      	b.n	8017566 <_raise_r+0x12>

080175a4 <raise>:
 80175a4:	4b02      	ldr	r3, [pc, #8]	; (80175b0 <raise+0xc>)
 80175a6:	4601      	mov	r1, r0
 80175a8:	6818      	ldr	r0, [r3, #0]
 80175aa:	f7ff bfd3 	b.w	8017554 <_raise_r>
 80175ae:	bf00      	nop
 80175b0:	200013a4 	.word	0x200013a4

080175b4 <_kill_r>:
 80175b4:	b538      	push	{r3, r4, r5, lr}
 80175b6:	4d07      	ldr	r5, [pc, #28]	; (80175d4 <_kill_r+0x20>)
 80175b8:	2300      	movs	r3, #0
 80175ba:	4604      	mov	r4, r0
 80175bc:	4608      	mov	r0, r1
 80175be:	4611      	mov	r1, r2
 80175c0:	602b      	str	r3, [r5, #0]
 80175c2:	f000 ff93 	bl	80184ec <_kill>
 80175c6:	1c43      	adds	r3, r0, #1
 80175c8:	d102      	bne.n	80175d0 <_kill_r+0x1c>
 80175ca:	682b      	ldr	r3, [r5, #0]
 80175cc:	b103      	cbz	r3, 80175d0 <_kill_r+0x1c>
 80175ce:	6023      	str	r3, [r4, #0]
 80175d0:	bd38      	pop	{r3, r4, r5, pc}
 80175d2:	bf00      	nop
 80175d4:	20009aac 	.word	0x20009aac

080175d8 <_getpid_r>:
 80175d8:	f000 bf78 	b.w	80184cc <_getpid>

080175dc <_fstat_r>:
 80175dc:	b538      	push	{r3, r4, r5, lr}
 80175de:	4d07      	ldr	r5, [pc, #28]	; (80175fc <_fstat_r+0x20>)
 80175e0:	2300      	movs	r3, #0
 80175e2:	4604      	mov	r4, r0
 80175e4:	4608      	mov	r0, r1
 80175e6:	4611      	mov	r1, r2
 80175e8:	602b      	str	r3, [r5, #0]
 80175ea:	f000 ff67 	bl	80184bc <_fstat>
 80175ee:	1c43      	adds	r3, r0, #1
 80175f0:	d102      	bne.n	80175f8 <_fstat_r+0x1c>
 80175f2:	682b      	ldr	r3, [r5, #0]
 80175f4:	b103      	cbz	r3, 80175f8 <_fstat_r+0x1c>
 80175f6:	6023      	str	r3, [r4, #0]
 80175f8:	bd38      	pop	{r3, r4, r5, pc}
 80175fa:	bf00      	nop
 80175fc:	20009aac 	.word	0x20009aac

08017600 <_isatty_r>:
 8017600:	b538      	push	{r3, r4, r5, lr}
 8017602:	4d06      	ldr	r5, [pc, #24]	; (801761c <_isatty_r+0x1c>)
 8017604:	2300      	movs	r3, #0
 8017606:	4604      	mov	r4, r0
 8017608:	4608      	mov	r0, r1
 801760a:	602b      	str	r3, [r5, #0]
 801760c:	f000 ff66 	bl	80184dc <_isatty>
 8017610:	1c43      	adds	r3, r0, #1
 8017612:	d102      	bne.n	801761a <_isatty_r+0x1a>
 8017614:	682b      	ldr	r3, [r5, #0]
 8017616:	b103      	cbz	r3, 801761a <_isatty_r+0x1a>
 8017618:	6023      	str	r3, [r4, #0]
 801761a:	bd38      	pop	{r3, r4, r5, pc}
 801761c:	20009aac 	.word	0x20009aac

08017620 <pow>:
 8017620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017622:	ed2d 8b02 	vpush	{d8}
 8017626:	eeb0 8a40 	vmov.f32	s16, s0
 801762a:	eef0 8a60 	vmov.f32	s17, s1
 801762e:	ec55 4b11 	vmov	r4, r5, d1
 8017632:	f000 f891 	bl	8017758 <__ieee754_pow>
 8017636:	4622      	mov	r2, r4
 8017638:	462b      	mov	r3, r5
 801763a:	4620      	mov	r0, r4
 801763c:	4629      	mov	r1, r5
 801763e:	ec57 6b10 	vmov	r6, r7, d0
 8017642:	f7e9 faa3 	bl	8000b8c <__aeabi_dcmpun>
 8017646:	2800      	cmp	r0, #0
 8017648:	d13b      	bne.n	80176c2 <pow+0xa2>
 801764a:	ec51 0b18 	vmov	r0, r1, d8
 801764e:	2200      	movs	r2, #0
 8017650:	2300      	movs	r3, #0
 8017652:	f7e9 fa69 	bl	8000b28 <__aeabi_dcmpeq>
 8017656:	b1b8      	cbz	r0, 8017688 <pow+0x68>
 8017658:	2200      	movs	r2, #0
 801765a:	2300      	movs	r3, #0
 801765c:	4620      	mov	r0, r4
 801765e:	4629      	mov	r1, r5
 8017660:	f7e9 fa62 	bl	8000b28 <__aeabi_dcmpeq>
 8017664:	2800      	cmp	r0, #0
 8017666:	d146      	bne.n	80176f6 <pow+0xd6>
 8017668:	ec45 4b10 	vmov	d0, r4, r5
 801766c:	f000 fe8d 	bl	801838a <finite>
 8017670:	b338      	cbz	r0, 80176c2 <pow+0xa2>
 8017672:	2200      	movs	r2, #0
 8017674:	2300      	movs	r3, #0
 8017676:	4620      	mov	r0, r4
 8017678:	4629      	mov	r1, r5
 801767a:	f7e9 fa5f 	bl	8000b3c <__aeabi_dcmplt>
 801767e:	b300      	cbz	r0, 80176c2 <pow+0xa2>
 8017680:	f7fa fe90 	bl	80123a4 <__errno>
 8017684:	2322      	movs	r3, #34	; 0x22
 8017686:	e01b      	b.n	80176c0 <pow+0xa0>
 8017688:	ec47 6b10 	vmov	d0, r6, r7
 801768c:	f000 fe7d 	bl	801838a <finite>
 8017690:	b9e0      	cbnz	r0, 80176cc <pow+0xac>
 8017692:	eeb0 0a48 	vmov.f32	s0, s16
 8017696:	eef0 0a68 	vmov.f32	s1, s17
 801769a:	f000 fe76 	bl	801838a <finite>
 801769e:	b1a8      	cbz	r0, 80176cc <pow+0xac>
 80176a0:	ec45 4b10 	vmov	d0, r4, r5
 80176a4:	f000 fe71 	bl	801838a <finite>
 80176a8:	b180      	cbz	r0, 80176cc <pow+0xac>
 80176aa:	4632      	mov	r2, r6
 80176ac:	463b      	mov	r3, r7
 80176ae:	4630      	mov	r0, r6
 80176b0:	4639      	mov	r1, r7
 80176b2:	f7e9 fa6b 	bl	8000b8c <__aeabi_dcmpun>
 80176b6:	2800      	cmp	r0, #0
 80176b8:	d0e2      	beq.n	8017680 <pow+0x60>
 80176ba:	f7fa fe73 	bl	80123a4 <__errno>
 80176be:	2321      	movs	r3, #33	; 0x21
 80176c0:	6003      	str	r3, [r0, #0]
 80176c2:	ecbd 8b02 	vpop	{d8}
 80176c6:	ec47 6b10 	vmov	d0, r6, r7
 80176ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176cc:	2200      	movs	r2, #0
 80176ce:	2300      	movs	r3, #0
 80176d0:	4630      	mov	r0, r6
 80176d2:	4639      	mov	r1, r7
 80176d4:	f7e9 fa28 	bl	8000b28 <__aeabi_dcmpeq>
 80176d8:	2800      	cmp	r0, #0
 80176da:	d0f2      	beq.n	80176c2 <pow+0xa2>
 80176dc:	eeb0 0a48 	vmov.f32	s0, s16
 80176e0:	eef0 0a68 	vmov.f32	s1, s17
 80176e4:	f000 fe51 	bl	801838a <finite>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d0ea      	beq.n	80176c2 <pow+0xa2>
 80176ec:	ec45 4b10 	vmov	d0, r4, r5
 80176f0:	f000 fe4b 	bl	801838a <finite>
 80176f4:	e7c3      	b.n	801767e <pow+0x5e>
 80176f6:	4f01      	ldr	r7, [pc, #4]	; (80176fc <pow+0xdc>)
 80176f8:	2600      	movs	r6, #0
 80176fa:	e7e2      	b.n	80176c2 <pow+0xa2>
 80176fc:	3ff00000 	.word	0x3ff00000

08017700 <sqrt>:
 8017700:	b538      	push	{r3, r4, r5, lr}
 8017702:	ed2d 8b02 	vpush	{d8}
 8017706:	ec55 4b10 	vmov	r4, r5, d0
 801770a:	f000 fd53 	bl	80181b4 <__ieee754_sqrt>
 801770e:	4622      	mov	r2, r4
 8017710:	462b      	mov	r3, r5
 8017712:	4620      	mov	r0, r4
 8017714:	4629      	mov	r1, r5
 8017716:	eeb0 8a40 	vmov.f32	s16, s0
 801771a:	eef0 8a60 	vmov.f32	s17, s1
 801771e:	f7e9 fa35 	bl	8000b8c <__aeabi_dcmpun>
 8017722:	b990      	cbnz	r0, 801774a <sqrt+0x4a>
 8017724:	2200      	movs	r2, #0
 8017726:	2300      	movs	r3, #0
 8017728:	4620      	mov	r0, r4
 801772a:	4629      	mov	r1, r5
 801772c:	f7e9 fa06 	bl	8000b3c <__aeabi_dcmplt>
 8017730:	b158      	cbz	r0, 801774a <sqrt+0x4a>
 8017732:	f7fa fe37 	bl	80123a4 <__errno>
 8017736:	2321      	movs	r3, #33	; 0x21
 8017738:	6003      	str	r3, [r0, #0]
 801773a:	2200      	movs	r2, #0
 801773c:	2300      	movs	r3, #0
 801773e:	4610      	mov	r0, r2
 8017740:	4619      	mov	r1, r3
 8017742:	f7e9 f8b3 	bl	80008ac <__aeabi_ddiv>
 8017746:	ec41 0b18 	vmov	d8, r0, r1
 801774a:	eeb0 0a48 	vmov.f32	s0, s16
 801774e:	eef0 0a68 	vmov.f32	s1, s17
 8017752:	ecbd 8b02 	vpop	{d8}
 8017756:	bd38      	pop	{r3, r4, r5, pc}

08017758 <__ieee754_pow>:
 8017758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801775c:	ed2d 8b06 	vpush	{d8-d10}
 8017760:	b089      	sub	sp, #36	; 0x24
 8017762:	ed8d 1b00 	vstr	d1, [sp]
 8017766:	e9dd 2900 	ldrd	r2, r9, [sp]
 801776a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801776e:	ea58 0102 	orrs.w	r1, r8, r2
 8017772:	ec57 6b10 	vmov	r6, r7, d0
 8017776:	d115      	bne.n	80177a4 <__ieee754_pow+0x4c>
 8017778:	19b3      	adds	r3, r6, r6
 801777a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801777e:	4152      	adcs	r2, r2
 8017780:	4299      	cmp	r1, r3
 8017782:	4b89      	ldr	r3, [pc, #548]	; (80179a8 <__ieee754_pow+0x250>)
 8017784:	4193      	sbcs	r3, r2
 8017786:	f080 84d2 	bcs.w	801812e <__ieee754_pow+0x9d6>
 801778a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801778e:	4630      	mov	r0, r6
 8017790:	4639      	mov	r1, r7
 8017792:	f7e8 fdab 	bl	80002ec <__adddf3>
 8017796:	ec41 0b10 	vmov	d0, r0, r1
 801779a:	b009      	add	sp, #36	; 0x24
 801779c:	ecbd 8b06 	vpop	{d8-d10}
 80177a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177a4:	4b81      	ldr	r3, [pc, #516]	; (80179ac <__ieee754_pow+0x254>)
 80177a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80177aa:	429c      	cmp	r4, r3
 80177ac:	ee10 aa10 	vmov	sl, s0
 80177b0:	463d      	mov	r5, r7
 80177b2:	dc06      	bgt.n	80177c2 <__ieee754_pow+0x6a>
 80177b4:	d101      	bne.n	80177ba <__ieee754_pow+0x62>
 80177b6:	2e00      	cmp	r6, #0
 80177b8:	d1e7      	bne.n	801778a <__ieee754_pow+0x32>
 80177ba:	4598      	cmp	r8, r3
 80177bc:	dc01      	bgt.n	80177c2 <__ieee754_pow+0x6a>
 80177be:	d10f      	bne.n	80177e0 <__ieee754_pow+0x88>
 80177c0:	b172      	cbz	r2, 80177e0 <__ieee754_pow+0x88>
 80177c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80177c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80177ca:	ea55 050a 	orrs.w	r5, r5, sl
 80177ce:	d1dc      	bne.n	801778a <__ieee754_pow+0x32>
 80177d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80177d4:	18db      	adds	r3, r3, r3
 80177d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80177da:	4152      	adcs	r2, r2
 80177dc:	429d      	cmp	r5, r3
 80177de:	e7d0      	b.n	8017782 <__ieee754_pow+0x2a>
 80177e0:	2d00      	cmp	r5, #0
 80177e2:	da3b      	bge.n	801785c <__ieee754_pow+0x104>
 80177e4:	4b72      	ldr	r3, [pc, #456]	; (80179b0 <__ieee754_pow+0x258>)
 80177e6:	4598      	cmp	r8, r3
 80177e8:	dc51      	bgt.n	801788e <__ieee754_pow+0x136>
 80177ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80177ee:	4598      	cmp	r8, r3
 80177f0:	f340 84ac 	ble.w	801814c <__ieee754_pow+0x9f4>
 80177f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80177f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80177fc:	2b14      	cmp	r3, #20
 80177fe:	dd0f      	ble.n	8017820 <__ieee754_pow+0xc8>
 8017800:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017804:	fa22 f103 	lsr.w	r1, r2, r3
 8017808:	fa01 f303 	lsl.w	r3, r1, r3
 801780c:	4293      	cmp	r3, r2
 801780e:	f040 849d 	bne.w	801814c <__ieee754_pow+0x9f4>
 8017812:	f001 0101 	and.w	r1, r1, #1
 8017816:	f1c1 0302 	rsb	r3, r1, #2
 801781a:	9304      	str	r3, [sp, #16]
 801781c:	b182      	cbz	r2, 8017840 <__ieee754_pow+0xe8>
 801781e:	e05f      	b.n	80178e0 <__ieee754_pow+0x188>
 8017820:	2a00      	cmp	r2, #0
 8017822:	d15b      	bne.n	80178dc <__ieee754_pow+0x184>
 8017824:	f1c3 0314 	rsb	r3, r3, #20
 8017828:	fa48 f103 	asr.w	r1, r8, r3
 801782c:	fa01 f303 	lsl.w	r3, r1, r3
 8017830:	4543      	cmp	r3, r8
 8017832:	f040 8488 	bne.w	8018146 <__ieee754_pow+0x9ee>
 8017836:	f001 0101 	and.w	r1, r1, #1
 801783a:	f1c1 0302 	rsb	r3, r1, #2
 801783e:	9304      	str	r3, [sp, #16]
 8017840:	4b5c      	ldr	r3, [pc, #368]	; (80179b4 <__ieee754_pow+0x25c>)
 8017842:	4598      	cmp	r8, r3
 8017844:	d132      	bne.n	80178ac <__ieee754_pow+0x154>
 8017846:	f1b9 0f00 	cmp.w	r9, #0
 801784a:	f280 8478 	bge.w	801813e <__ieee754_pow+0x9e6>
 801784e:	4959      	ldr	r1, [pc, #356]	; (80179b4 <__ieee754_pow+0x25c>)
 8017850:	4632      	mov	r2, r6
 8017852:	463b      	mov	r3, r7
 8017854:	2000      	movs	r0, #0
 8017856:	f7e9 f829 	bl	80008ac <__aeabi_ddiv>
 801785a:	e79c      	b.n	8017796 <__ieee754_pow+0x3e>
 801785c:	2300      	movs	r3, #0
 801785e:	9304      	str	r3, [sp, #16]
 8017860:	2a00      	cmp	r2, #0
 8017862:	d13d      	bne.n	80178e0 <__ieee754_pow+0x188>
 8017864:	4b51      	ldr	r3, [pc, #324]	; (80179ac <__ieee754_pow+0x254>)
 8017866:	4598      	cmp	r8, r3
 8017868:	d1ea      	bne.n	8017840 <__ieee754_pow+0xe8>
 801786a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801786e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017872:	ea53 030a 	orrs.w	r3, r3, sl
 8017876:	f000 845a 	beq.w	801812e <__ieee754_pow+0x9d6>
 801787a:	4b4f      	ldr	r3, [pc, #316]	; (80179b8 <__ieee754_pow+0x260>)
 801787c:	429c      	cmp	r4, r3
 801787e:	dd08      	ble.n	8017892 <__ieee754_pow+0x13a>
 8017880:	f1b9 0f00 	cmp.w	r9, #0
 8017884:	f2c0 8457 	blt.w	8018136 <__ieee754_pow+0x9de>
 8017888:	e9dd 0100 	ldrd	r0, r1, [sp]
 801788c:	e783      	b.n	8017796 <__ieee754_pow+0x3e>
 801788e:	2302      	movs	r3, #2
 8017890:	e7e5      	b.n	801785e <__ieee754_pow+0x106>
 8017892:	f1b9 0f00 	cmp.w	r9, #0
 8017896:	f04f 0000 	mov.w	r0, #0
 801789a:	f04f 0100 	mov.w	r1, #0
 801789e:	f6bf af7a 	bge.w	8017796 <__ieee754_pow+0x3e>
 80178a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80178a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80178aa:	e774      	b.n	8017796 <__ieee754_pow+0x3e>
 80178ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80178b0:	d106      	bne.n	80178c0 <__ieee754_pow+0x168>
 80178b2:	4632      	mov	r2, r6
 80178b4:	463b      	mov	r3, r7
 80178b6:	4630      	mov	r0, r6
 80178b8:	4639      	mov	r1, r7
 80178ba:	f7e8 fecd 	bl	8000658 <__aeabi_dmul>
 80178be:	e76a      	b.n	8017796 <__ieee754_pow+0x3e>
 80178c0:	4b3e      	ldr	r3, [pc, #248]	; (80179bc <__ieee754_pow+0x264>)
 80178c2:	4599      	cmp	r9, r3
 80178c4:	d10c      	bne.n	80178e0 <__ieee754_pow+0x188>
 80178c6:	2d00      	cmp	r5, #0
 80178c8:	db0a      	blt.n	80178e0 <__ieee754_pow+0x188>
 80178ca:	ec47 6b10 	vmov	d0, r6, r7
 80178ce:	b009      	add	sp, #36	; 0x24
 80178d0:	ecbd 8b06 	vpop	{d8-d10}
 80178d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178d8:	f000 bc6c 	b.w	80181b4 <__ieee754_sqrt>
 80178dc:	2300      	movs	r3, #0
 80178de:	9304      	str	r3, [sp, #16]
 80178e0:	ec47 6b10 	vmov	d0, r6, r7
 80178e4:	f000 fd48 	bl	8018378 <fabs>
 80178e8:	ec51 0b10 	vmov	r0, r1, d0
 80178ec:	f1ba 0f00 	cmp.w	sl, #0
 80178f0:	d129      	bne.n	8017946 <__ieee754_pow+0x1ee>
 80178f2:	b124      	cbz	r4, 80178fe <__ieee754_pow+0x1a6>
 80178f4:	4b2f      	ldr	r3, [pc, #188]	; (80179b4 <__ieee754_pow+0x25c>)
 80178f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80178fa:	429a      	cmp	r2, r3
 80178fc:	d123      	bne.n	8017946 <__ieee754_pow+0x1ee>
 80178fe:	f1b9 0f00 	cmp.w	r9, #0
 8017902:	da05      	bge.n	8017910 <__ieee754_pow+0x1b8>
 8017904:	4602      	mov	r2, r0
 8017906:	460b      	mov	r3, r1
 8017908:	2000      	movs	r0, #0
 801790a:	492a      	ldr	r1, [pc, #168]	; (80179b4 <__ieee754_pow+0x25c>)
 801790c:	f7e8 ffce 	bl	80008ac <__aeabi_ddiv>
 8017910:	2d00      	cmp	r5, #0
 8017912:	f6bf af40 	bge.w	8017796 <__ieee754_pow+0x3e>
 8017916:	9b04      	ldr	r3, [sp, #16]
 8017918:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801791c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017920:	4323      	orrs	r3, r4
 8017922:	d108      	bne.n	8017936 <__ieee754_pow+0x1de>
 8017924:	4602      	mov	r2, r0
 8017926:	460b      	mov	r3, r1
 8017928:	4610      	mov	r0, r2
 801792a:	4619      	mov	r1, r3
 801792c:	f7e8 fcdc 	bl	80002e8 <__aeabi_dsub>
 8017930:	4602      	mov	r2, r0
 8017932:	460b      	mov	r3, r1
 8017934:	e78f      	b.n	8017856 <__ieee754_pow+0xfe>
 8017936:	9b04      	ldr	r3, [sp, #16]
 8017938:	2b01      	cmp	r3, #1
 801793a:	f47f af2c 	bne.w	8017796 <__ieee754_pow+0x3e>
 801793e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017942:	4619      	mov	r1, r3
 8017944:	e727      	b.n	8017796 <__ieee754_pow+0x3e>
 8017946:	0feb      	lsrs	r3, r5, #31
 8017948:	3b01      	subs	r3, #1
 801794a:	9306      	str	r3, [sp, #24]
 801794c:	9a06      	ldr	r2, [sp, #24]
 801794e:	9b04      	ldr	r3, [sp, #16]
 8017950:	4313      	orrs	r3, r2
 8017952:	d102      	bne.n	801795a <__ieee754_pow+0x202>
 8017954:	4632      	mov	r2, r6
 8017956:	463b      	mov	r3, r7
 8017958:	e7e6      	b.n	8017928 <__ieee754_pow+0x1d0>
 801795a:	4b19      	ldr	r3, [pc, #100]	; (80179c0 <__ieee754_pow+0x268>)
 801795c:	4598      	cmp	r8, r3
 801795e:	f340 80fb 	ble.w	8017b58 <__ieee754_pow+0x400>
 8017962:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017966:	4598      	cmp	r8, r3
 8017968:	4b13      	ldr	r3, [pc, #76]	; (80179b8 <__ieee754_pow+0x260>)
 801796a:	dd0c      	ble.n	8017986 <__ieee754_pow+0x22e>
 801796c:	429c      	cmp	r4, r3
 801796e:	dc0f      	bgt.n	8017990 <__ieee754_pow+0x238>
 8017970:	f1b9 0f00 	cmp.w	r9, #0
 8017974:	da0f      	bge.n	8017996 <__ieee754_pow+0x23e>
 8017976:	2000      	movs	r0, #0
 8017978:	b009      	add	sp, #36	; 0x24
 801797a:	ecbd 8b06 	vpop	{d8-d10}
 801797e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017982:	f000 bcf0 	b.w	8018366 <__math_oflow>
 8017986:	429c      	cmp	r4, r3
 8017988:	dbf2      	blt.n	8017970 <__ieee754_pow+0x218>
 801798a:	4b0a      	ldr	r3, [pc, #40]	; (80179b4 <__ieee754_pow+0x25c>)
 801798c:	429c      	cmp	r4, r3
 801798e:	dd19      	ble.n	80179c4 <__ieee754_pow+0x26c>
 8017990:	f1b9 0f00 	cmp.w	r9, #0
 8017994:	dcef      	bgt.n	8017976 <__ieee754_pow+0x21e>
 8017996:	2000      	movs	r0, #0
 8017998:	b009      	add	sp, #36	; 0x24
 801799a:	ecbd 8b06 	vpop	{d8-d10}
 801799e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179a2:	f000 bcd7 	b.w	8018354 <__math_uflow>
 80179a6:	bf00      	nop
 80179a8:	fff00000 	.word	0xfff00000
 80179ac:	7ff00000 	.word	0x7ff00000
 80179b0:	433fffff 	.word	0x433fffff
 80179b4:	3ff00000 	.word	0x3ff00000
 80179b8:	3fefffff 	.word	0x3fefffff
 80179bc:	3fe00000 	.word	0x3fe00000
 80179c0:	41e00000 	.word	0x41e00000
 80179c4:	4b60      	ldr	r3, [pc, #384]	; (8017b48 <__ieee754_pow+0x3f0>)
 80179c6:	2200      	movs	r2, #0
 80179c8:	f7e8 fc8e 	bl	80002e8 <__aeabi_dsub>
 80179cc:	a354      	add	r3, pc, #336	; (adr r3, 8017b20 <__ieee754_pow+0x3c8>)
 80179ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179d2:	4604      	mov	r4, r0
 80179d4:	460d      	mov	r5, r1
 80179d6:	f7e8 fe3f 	bl	8000658 <__aeabi_dmul>
 80179da:	a353      	add	r3, pc, #332	; (adr r3, 8017b28 <__ieee754_pow+0x3d0>)
 80179dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179e0:	4606      	mov	r6, r0
 80179e2:	460f      	mov	r7, r1
 80179e4:	4620      	mov	r0, r4
 80179e6:	4629      	mov	r1, r5
 80179e8:	f7e8 fe36 	bl	8000658 <__aeabi_dmul>
 80179ec:	4b57      	ldr	r3, [pc, #348]	; (8017b4c <__ieee754_pow+0x3f4>)
 80179ee:	4682      	mov	sl, r0
 80179f0:	468b      	mov	fp, r1
 80179f2:	2200      	movs	r2, #0
 80179f4:	4620      	mov	r0, r4
 80179f6:	4629      	mov	r1, r5
 80179f8:	f7e8 fe2e 	bl	8000658 <__aeabi_dmul>
 80179fc:	4602      	mov	r2, r0
 80179fe:	460b      	mov	r3, r1
 8017a00:	a14b      	add	r1, pc, #300	; (adr r1, 8017b30 <__ieee754_pow+0x3d8>)
 8017a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017a06:	f7e8 fc6f 	bl	80002e8 <__aeabi_dsub>
 8017a0a:	4622      	mov	r2, r4
 8017a0c:	462b      	mov	r3, r5
 8017a0e:	f7e8 fe23 	bl	8000658 <__aeabi_dmul>
 8017a12:	4602      	mov	r2, r0
 8017a14:	460b      	mov	r3, r1
 8017a16:	2000      	movs	r0, #0
 8017a18:	494d      	ldr	r1, [pc, #308]	; (8017b50 <__ieee754_pow+0x3f8>)
 8017a1a:	f7e8 fc65 	bl	80002e8 <__aeabi_dsub>
 8017a1e:	4622      	mov	r2, r4
 8017a20:	4680      	mov	r8, r0
 8017a22:	4689      	mov	r9, r1
 8017a24:	462b      	mov	r3, r5
 8017a26:	4620      	mov	r0, r4
 8017a28:	4629      	mov	r1, r5
 8017a2a:	f7e8 fe15 	bl	8000658 <__aeabi_dmul>
 8017a2e:	4602      	mov	r2, r0
 8017a30:	460b      	mov	r3, r1
 8017a32:	4640      	mov	r0, r8
 8017a34:	4649      	mov	r1, r9
 8017a36:	f7e8 fe0f 	bl	8000658 <__aeabi_dmul>
 8017a3a:	a33f      	add	r3, pc, #252	; (adr r3, 8017b38 <__ieee754_pow+0x3e0>)
 8017a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a40:	f7e8 fe0a 	bl	8000658 <__aeabi_dmul>
 8017a44:	4602      	mov	r2, r0
 8017a46:	460b      	mov	r3, r1
 8017a48:	4650      	mov	r0, sl
 8017a4a:	4659      	mov	r1, fp
 8017a4c:	f7e8 fc4c 	bl	80002e8 <__aeabi_dsub>
 8017a50:	4602      	mov	r2, r0
 8017a52:	460b      	mov	r3, r1
 8017a54:	4680      	mov	r8, r0
 8017a56:	4689      	mov	r9, r1
 8017a58:	4630      	mov	r0, r6
 8017a5a:	4639      	mov	r1, r7
 8017a5c:	f7e8 fc46 	bl	80002ec <__adddf3>
 8017a60:	2000      	movs	r0, #0
 8017a62:	4632      	mov	r2, r6
 8017a64:	463b      	mov	r3, r7
 8017a66:	4604      	mov	r4, r0
 8017a68:	460d      	mov	r5, r1
 8017a6a:	f7e8 fc3d 	bl	80002e8 <__aeabi_dsub>
 8017a6e:	4602      	mov	r2, r0
 8017a70:	460b      	mov	r3, r1
 8017a72:	4640      	mov	r0, r8
 8017a74:	4649      	mov	r1, r9
 8017a76:	f7e8 fc37 	bl	80002e8 <__aeabi_dsub>
 8017a7a:	9b04      	ldr	r3, [sp, #16]
 8017a7c:	9a06      	ldr	r2, [sp, #24]
 8017a7e:	3b01      	subs	r3, #1
 8017a80:	4313      	orrs	r3, r2
 8017a82:	4682      	mov	sl, r0
 8017a84:	468b      	mov	fp, r1
 8017a86:	f040 81e7 	bne.w	8017e58 <__ieee754_pow+0x700>
 8017a8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017b40 <__ieee754_pow+0x3e8>
 8017a8e:	eeb0 8a47 	vmov.f32	s16, s14
 8017a92:	eef0 8a67 	vmov.f32	s17, s15
 8017a96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017a9a:	2600      	movs	r6, #0
 8017a9c:	4632      	mov	r2, r6
 8017a9e:	463b      	mov	r3, r7
 8017aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017aa4:	f7e8 fc20 	bl	80002e8 <__aeabi_dsub>
 8017aa8:	4622      	mov	r2, r4
 8017aaa:	462b      	mov	r3, r5
 8017aac:	f7e8 fdd4 	bl	8000658 <__aeabi_dmul>
 8017ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ab4:	4680      	mov	r8, r0
 8017ab6:	4689      	mov	r9, r1
 8017ab8:	4650      	mov	r0, sl
 8017aba:	4659      	mov	r1, fp
 8017abc:	f7e8 fdcc 	bl	8000658 <__aeabi_dmul>
 8017ac0:	4602      	mov	r2, r0
 8017ac2:	460b      	mov	r3, r1
 8017ac4:	4640      	mov	r0, r8
 8017ac6:	4649      	mov	r1, r9
 8017ac8:	f7e8 fc10 	bl	80002ec <__adddf3>
 8017acc:	4632      	mov	r2, r6
 8017ace:	463b      	mov	r3, r7
 8017ad0:	4680      	mov	r8, r0
 8017ad2:	4689      	mov	r9, r1
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	4629      	mov	r1, r5
 8017ad8:	f7e8 fdbe 	bl	8000658 <__aeabi_dmul>
 8017adc:	460b      	mov	r3, r1
 8017ade:	4604      	mov	r4, r0
 8017ae0:	460d      	mov	r5, r1
 8017ae2:	4602      	mov	r2, r0
 8017ae4:	4649      	mov	r1, r9
 8017ae6:	4640      	mov	r0, r8
 8017ae8:	f7e8 fc00 	bl	80002ec <__adddf3>
 8017aec:	4b19      	ldr	r3, [pc, #100]	; (8017b54 <__ieee754_pow+0x3fc>)
 8017aee:	4299      	cmp	r1, r3
 8017af0:	ec45 4b19 	vmov	d9, r4, r5
 8017af4:	4606      	mov	r6, r0
 8017af6:	460f      	mov	r7, r1
 8017af8:	468b      	mov	fp, r1
 8017afa:	f340 82f1 	ble.w	80180e0 <__ieee754_pow+0x988>
 8017afe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017b02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017b06:	4303      	orrs	r3, r0
 8017b08:	f000 81e4 	beq.w	8017ed4 <__ieee754_pow+0x77c>
 8017b0c:	ec51 0b18 	vmov	r0, r1, d8
 8017b10:	2200      	movs	r2, #0
 8017b12:	2300      	movs	r3, #0
 8017b14:	f7e9 f812 	bl	8000b3c <__aeabi_dcmplt>
 8017b18:	3800      	subs	r0, #0
 8017b1a:	bf18      	it	ne
 8017b1c:	2001      	movne	r0, #1
 8017b1e:	e72b      	b.n	8017978 <__ieee754_pow+0x220>
 8017b20:	60000000 	.word	0x60000000
 8017b24:	3ff71547 	.word	0x3ff71547
 8017b28:	f85ddf44 	.word	0xf85ddf44
 8017b2c:	3e54ae0b 	.word	0x3e54ae0b
 8017b30:	55555555 	.word	0x55555555
 8017b34:	3fd55555 	.word	0x3fd55555
 8017b38:	652b82fe 	.word	0x652b82fe
 8017b3c:	3ff71547 	.word	0x3ff71547
 8017b40:	00000000 	.word	0x00000000
 8017b44:	bff00000 	.word	0xbff00000
 8017b48:	3ff00000 	.word	0x3ff00000
 8017b4c:	3fd00000 	.word	0x3fd00000
 8017b50:	3fe00000 	.word	0x3fe00000
 8017b54:	408fffff 	.word	0x408fffff
 8017b58:	4bd5      	ldr	r3, [pc, #852]	; (8017eb0 <__ieee754_pow+0x758>)
 8017b5a:	402b      	ands	r3, r5
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	b92b      	cbnz	r3, 8017b6c <__ieee754_pow+0x414>
 8017b60:	4bd4      	ldr	r3, [pc, #848]	; (8017eb4 <__ieee754_pow+0x75c>)
 8017b62:	f7e8 fd79 	bl	8000658 <__aeabi_dmul>
 8017b66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017b6a:	460c      	mov	r4, r1
 8017b6c:	1523      	asrs	r3, r4, #20
 8017b6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017b72:	4413      	add	r3, r2
 8017b74:	9305      	str	r3, [sp, #20]
 8017b76:	4bd0      	ldr	r3, [pc, #832]	; (8017eb8 <__ieee754_pow+0x760>)
 8017b78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017b7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017b80:	429c      	cmp	r4, r3
 8017b82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017b86:	dd08      	ble.n	8017b9a <__ieee754_pow+0x442>
 8017b88:	4bcc      	ldr	r3, [pc, #816]	; (8017ebc <__ieee754_pow+0x764>)
 8017b8a:	429c      	cmp	r4, r3
 8017b8c:	f340 8162 	ble.w	8017e54 <__ieee754_pow+0x6fc>
 8017b90:	9b05      	ldr	r3, [sp, #20]
 8017b92:	3301      	adds	r3, #1
 8017b94:	9305      	str	r3, [sp, #20]
 8017b96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017b9a:	2400      	movs	r4, #0
 8017b9c:	00e3      	lsls	r3, r4, #3
 8017b9e:	9307      	str	r3, [sp, #28]
 8017ba0:	4bc7      	ldr	r3, [pc, #796]	; (8017ec0 <__ieee754_pow+0x768>)
 8017ba2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017ba6:	ed93 7b00 	vldr	d7, [r3]
 8017baa:	4629      	mov	r1, r5
 8017bac:	ec53 2b17 	vmov	r2, r3, d7
 8017bb0:	eeb0 9a47 	vmov.f32	s18, s14
 8017bb4:	eef0 9a67 	vmov.f32	s19, s15
 8017bb8:	4682      	mov	sl, r0
 8017bba:	f7e8 fb95 	bl	80002e8 <__aeabi_dsub>
 8017bbe:	4652      	mov	r2, sl
 8017bc0:	4606      	mov	r6, r0
 8017bc2:	460f      	mov	r7, r1
 8017bc4:	462b      	mov	r3, r5
 8017bc6:	ec51 0b19 	vmov	r0, r1, d9
 8017bca:	f7e8 fb8f 	bl	80002ec <__adddf3>
 8017bce:	4602      	mov	r2, r0
 8017bd0:	460b      	mov	r3, r1
 8017bd2:	2000      	movs	r0, #0
 8017bd4:	49bb      	ldr	r1, [pc, #748]	; (8017ec4 <__ieee754_pow+0x76c>)
 8017bd6:	f7e8 fe69 	bl	80008ac <__aeabi_ddiv>
 8017bda:	ec41 0b1a 	vmov	d10, r0, r1
 8017bde:	4602      	mov	r2, r0
 8017be0:	460b      	mov	r3, r1
 8017be2:	4630      	mov	r0, r6
 8017be4:	4639      	mov	r1, r7
 8017be6:	f7e8 fd37 	bl	8000658 <__aeabi_dmul>
 8017bea:	2300      	movs	r3, #0
 8017bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017bf0:	9302      	str	r3, [sp, #8]
 8017bf2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017bf6:	46ab      	mov	fp, r5
 8017bf8:	106d      	asrs	r5, r5, #1
 8017bfa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017bfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017c02:	ec41 0b18 	vmov	d8, r0, r1
 8017c06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	4640      	mov	r0, r8
 8017c0e:	4649      	mov	r1, r9
 8017c10:	4614      	mov	r4, r2
 8017c12:	461d      	mov	r5, r3
 8017c14:	f7e8 fd20 	bl	8000658 <__aeabi_dmul>
 8017c18:	4602      	mov	r2, r0
 8017c1a:	460b      	mov	r3, r1
 8017c1c:	4630      	mov	r0, r6
 8017c1e:	4639      	mov	r1, r7
 8017c20:	f7e8 fb62 	bl	80002e8 <__aeabi_dsub>
 8017c24:	ec53 2b19 	vmov	r2, r3, d9
 8017c28:	4606      	mov	r6, r0
 8017c2a:	460f      	mov	r7, r1
 8017c2c:	4620      	mov	r0, r4
 8017c2e:	4629      	mov	r1, r5
 8017c30:	f7e8 fb5a 	bl	80002e8 <__aeabi_dsub>
 8017c34:	4602      	mov	r2, r0
 8017c36:	460b      	mov	r3, r1
 8017c38:	4650      	mov	r0, sl
 8017c3a:	4659      	mov	r1, fp
 8017c3c:	f7e8 fb54 	bl	80002e8 <__aeabi_dsub>
 8017c40:	4642      	mov	r2, r8
 8017c42:	464b      	mov	r3, r9
 8017c44:	f7e8 fd08 	bl	8000658 <__aeabi_dmul>
 8017c48:	4602      	mov	r2, r0
 8017c4a:	460b      	mov	r3, r1
 8017c4c:	4630      	mov	r0, r6
 8017c4e:	4639      	mov	r1, r7
 8017c50:	f7e8 fb4a 	bl	80002e8 <__aeabi_dsub>
 8017c54:	ec53 2b1a 	vmov	r2, r3, d10
 8017c58:	f7e8 fcfe 	bl	8000658 <__aeabi_dmul>
 8017c5c:	ec53 2b18 	vmov	r2, r3, d8
 8017c60:	ec41 0b19 	vmov	d9, r0, r1
 8017c64:	ec51 0b18 	vmov	r0, r1, d8
 8017c68:	f7e8 fcf6 	bl	8000658 <__aeabi_dmul>
 8017c6c:	a37c      	add	r3, pc, #496	; (adr r3, 8017e60 <__ieee754_pow+0x708>)
 8017c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c72:	4604      	mov	r4, r0
 8017c74:	460d      	mov	r5, r1
 8017c76:	f7e8 fcef 	bl	8000658 <__aeabi_dmul>
 8017c7a:	a37b      	add	r3, pc, #492	; (adr r3, 8017e68 <__ieee754_pow+0x710>)
 8017c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c80:	f7e8 fb34 	bl	80002ec <__adddf3>
 8017c84:	4622      	mov	r2, r4
 8017c86:	462b      	mov	r3, r5
 8017c88:	f7e8 fce6 	bl	8000658 <__aeabi_dmul>
 8017c8c:	a378      	add	r3, pc, #480	; (adr r3, 8017e70 <__ieee754_pow+0x718>)
 8017c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c92:	f7e8 fb2b 	bl	80002ec <__adddf3>
 8017c96:	4622      	mov	r2, r4
 8017c98:	462b      	mov	r3, r5
 8017c9a:	f7e8 fcdd 	bl	8000658 <__aeabi_dmul>
 8017c9e:	a376      	add	r3, pc, #472	; (adr r3, 8017e78 <__ieee754_pow+0x720>)
 8017ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ca4:	f7e8 fb22 	bl	80002ec <__adddf3>
 8017ca8:	4622      	mov	r2, r4
 8017caa:	462b      	mov	r3, r5
 8017cac:	f7e8 fcd4 	bl	8000658 <__aeabi_dmul>
 8017cb0:	a373      	add	r3, pc, #460	; (adr r3, 8017e80 <__ieee754_pow+0x728>)
 8017cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cb6:	f7e8 fb19 	bl	80002ec <__adddf3>
 8017cba:	4622      	mov	r2, r4
 8017cbc:	462b      	mov	r3, r5
 8017cbe:	f7e8 fccb 	bl	8000658 <__aeabi_dmul>
 8017cc2:	a371      	add	r3, pc, #452	; (adr r3, 8017e88 <__ieee754_pow+0x730>)
 8017cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cc8:	f7e8 fb10 	bl	80002ec <__adddf3>
 8017ccc:	4622      	mov	r2, r4
 8017cce:	4606      	mov	r6, r0
 8017cd0:	460f      	mov	r7, r1
 8017cd2:	462b      	mov	r3, r5
 8017cd4:	4620      	mov	r0, r4
 8017cd6:	4629      	mov	r1, r5
 8017cd8:	f7e8 fcbe 	bl	8000658 <__aeabi_dmul>
 8017cdc:	4602      	mov	r2, r0
 8017cde:	460b      	mov	r3, r1
 8017ce0:	4630      	mov	r0, r6
 8017ce2:	4639      	mov	r1, r7
 8017ce4:	f7e8 fcb8 	bl	8000658 <__aeabi_dmul>
 8017ce8:	4642      	mov	r2, r8
 8017cea:	4604      	mov	r4, r0
 8017cec:	460d      	mov	r5, r1
 8017cee:	464b      	mov	r3, r9
 8017cf0:	ec51 0b18 	vmov	r0, r1, d8
 8017cf4:	f7e8 fafa 	bl	80002ec <__adddf3>
 8017cf8:	ec53 2b19 	vmov	r2, r3, d9
 8017cfc:	f7e8 fcac 	bl	8000658 <__aeabi_dmul>
 8017d00:	4622      	mov	r2, r4
 8017d02:	462b      	mov	r3, r5
 8017d04:	f7e8 faf2 	bl	80002ec <__adddf3>
 8017d08:	4642      	mov	r2, r8
 8017d0a:	4682      	mov	sl, r0
 8017d0c:	468b      	mov	fp, r1
 8017d0e:	464b      	mov	r3, r9
 8017d10:	4640      	mov	r0, r8
 8017d12:	4649      	mov	r1, r9
 8017d14:	f7e8 fca0 	bl	8000658 <__aeabi_dmul>
 8017d18:	4b6b      	ldr	r3, [pc, #428]	; (8017ec8 <__ieee754_pow+0x770>)
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	4606      	mov	r6, r0
 8017d1e:	460f      	mov	r7, r1
 8017d20:	f7e8 fae4 	bl	80002ec <__adddf3>
 8017d24:	4652      	mov	r2, sl
 8017d26:	465b      	mov	r3, fp
 8017d28:	f7e8 fae0 	bl	80002ec <__adddf3>
 8017d2c:	2000      	movs	r0, #0
 8017d2e:	4604      	mov	r4, r0
 8017d30:	460d      	mov	r5, r1
 8017d32:	4602      	mov	r2, r0
 8017d34:	460b      	mov	r3, r1
 8017d36:	4640      	mov	r0, r8
 8017d38:	4649      	mov	r1, r9
 8017d3a:	f7e8 fc8d 	bl	8000658 <__aeabi_dmul>
 8017d3e:	4b62      	ldr	r3, [pc, #392]	; (8017ec8 <__ieee754_pow+0x770>)
 8017d40:	4680      	mov	r8, r0
 8017d42:	4689      	mov	r9, r1
 8017d44:	2200      	movs	r2, #0
 8017d46:	4620      	mov	r0, r4
 8017d48:	4629      	mov	r1, r5
 8017d4a:	f7e8 facd 	bl	80002e8 <__aeabi_dsub>
 8017d4e:	4632      	mov	r2, r6
 8017d50:	463b      	mov	r3, r7
 8017d52:	f7e8 fac9 	bl	80002e8 <__aeabi_dsub>
 8017d56:	4602      	mov	r2, r0
 8017d58:	460b      	mov	r3, r1
 8017d5a:	4650      	mov	r0, sl
 8017d5c:	4659      	mov	r1, fp
 8017d5e:	f7e8 fac3 	bl	80002e8 <__aeabi_dsub>
 8017d62:	ec53 2b18 	vmov	r2, r3, d8
 8017d66:	f7e8 fc77 	bl	8000658 <__aeabi_dmul>
 8017d6a:	4622      	mov	r2, r4
 8017d6c:	4606      	mov	r6, r0
 8017d6e:	460f      	mov	r7, r1
 8017d70:	462b      	mov	r3, r5
 8017d72:	ec51 0b19 	vmov	r0, r1, d9
 8017d76:	f7e8 fc6f 	bl	8000658 <__aeabi_dmul>
 8017d7a:	4602      	mov	r2, r0
 8017d7c:	460b      	mov	r3, r1
 8017d7e:	4630      	mov	r0, r6
 8017d80:	4639      	mov	r1, r7
 8017d82:	f7e8 fab3 	bl	80002ec <__adddf3>
 8017d86:	4606      	mov	r6, r0
 8017d88:	460f      	mov	r7, r1
 8017d8a:	4602      	mov	r2, r0
 8017d8c:	460b      	mov	r3, r1
 8017d8e:	4640      	mov	r0, r8
 8017d90:	4649      	mov	r1, r9
 8017d92:	f7e8 faab 	bl	80002ec <__adddf3>
 8017d96:	a33e      	add	r3, pc, #248	; (adr r3, 8017e90 <__ieee754_pow+0x738>)
 8017d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d9c:	2000      	movs	r0, #0
 8017d9e:	4604      	mov	r4, r0
 8017da0:	460d      	mov	r5, r1
 8017da2:	f7e8 fc59 	bl	8000658 <__aeabi_dmul>
 8017da6:	4642      	mov	r2, r8
 8017da8:	ec41 0b18 	vmov	d8, r0, r1
 8017dac:	464b      	mov	r3, r9
 8017dae:	4620      	mov	r0, r4
 8017db0:	4629      	mov	r1, r5
 8017db2:	f7e8 fa99 	bl	80002e8 <__aeabi_dsub>
 8017db6:	4602      	mov	r2, r0
 8017db8:	460b      	mov	r3, r1
 8017dba:	4630      	mov	r0, r6
 8017dbc:	4639      	mov	r1, r7
 8017dbe:	f7e8 fa93 	bl	80002e8 <__aeabi_dsub>
 8017dc2:	a335      	add	r3, pc, #212	; (adr r3, 8017e98 <__ieee754_pow+0x740>)
 8017dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dc8:	f7e8 fc46 	bl	8000658 <__aeabi_dmul>
 8017dcc:	a334      	add	r3, pc, #208	; (adr r3, 8017ea0 <__ieee754_pow+0x748>)
 8017dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dd2:	4606      	mov	r6, r0
 8017dd4:	460f      	mov	r7, r1
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	4629      	mov	r1, r5
 8017dda:	f7e8 fc3d 	bl	8000658 <__aeabi_dmul>
 8017dde:	4602      	mov	r2, r0
 8017de0:	460b      	mov	r3, r1
 8017de2:	4630      	mov	r0, r6
 8017de4:	4639      	mov	r1, r7
 8017de6:	f7e8 fa81 	bl	80002ec <__adddf3>
 8017dea:	9a07      	ldr	r2, [sp, #28]
 8017dec:	4b37      	ldr	r3, [pc, #220]	; (8017ecc <__ieee754_pow+0x774>)
 8017dee:	4413      	add	r3, r2
 8017df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017df4:	f7e8 fa7a 	bl	80002ec <__adddf3>
 8017df8:	4682      	mov	sl, r0
 8017dfa:	9805      	ldr	r0, [sp, #20]
 8017dfc:	468b      	mov	fp, r1
 8017dfe:	f7e8 fbc1 	bl	8000584 <__aeabi_i2d>
 8017e02:	9a07      	ldr	r2, [sp, #28]
 8017e04:	4b32      	ldr	r3, [pc, #200]	; (8017ed0 <__ieee754_pow+0x778>)
 8017e06:	4413      	add	r3, r2
 8017e08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017e0c:	4606      	mov	r6, r0
 8017e0e:	460f      	mov	r7, r1
 8017e10:	4652      	mov	r2, sl
 8017e12:	465b      	mov	r3, fp
 8017e14:	ec51 0b18 	vmov	r0, r1, d8
 8017e18:	f7e8 fa68 	bl	80002ec <__adddf3>
 8017e1c:	4642      	mov	r2, r8
 8017e1e:	464b      	mov	r3, r9
 8017e20:	f7e8 fa64 	bl	80002ec <__adddf3>
 8017e24:	4632      	mov	r2, r6
 8017e26:	463b      	mov	r3, r7
 8017e28:	f7e8 fa60 	bl	80002ec <__adddf3>
 8017e2c:	2000      	movs	r0, #0
 8017e2e:	4632      	mov	r2, r6
 8017e30:	463b      	mov	r3, r7
 8017e32:	4604      	mov	r4, r0
 8017e34:	460d      	mov	r5, r1
 8017e36:	f7e8 fa57 	bl	80002e8 <__aeabi_dsub>
 8017e3a:	4642      	mov	r2, r8
 8017e3c:	464b      	mov	r3, r9
 8017e3e:	f7e8 fa53 	bl	80002e8 <__aeabi_dsub>
 8017e42:	ec53 2b18 	vmov	r2, r3, d8
 8017e46:	f7e8 fa4f 	bl	80002e8 <__aeabi_dsub>
 8017e4a:	4602      	mov	r2, r0
 8017e4c:	460b      	mov	r3, r1
 8017e4e:	4650      	mov	r0, sl
 8017e50:	4659      	mov	r1, fp
 8017e52:	e610      	b.n	8017a76 <__ieee754_pow+0x31e>
 8017e54:	2401      	movs	r4, #1
 8017e56:	e6a1      	b.n	8017b9c <__ieee754_pow+0x444>
 8017e58:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8017ea8 <__ieee754_pow+0x750>
 8017e5c:	e617      	b.n	8017a8e <__ieee754_pow+0x336>
 8017e5e:	bf00      	nop
 8017e60:	4a454eef 	.word	0x4a454eef
 8017e64:	3fca7e28 	.word	0x3fca7e28
 8017e68:	93c9db65 	.word	0x93c9db65
 8017e6c:	3fcd864a 	.word	0x3fcd864a
 8017e70:	a91d4101 	.word	0xa91d4101
 8017e74:	3fd17460 	.word	0x3fd17460
 8017e78:	518f264d 	.word	0x518f264d
 8017e7c:	3fd55555 	.word	0x3fd55555
 8017e80:	db6fabff 	.word	0xdb6fabff
 8017e84:	3fdb6db6 	.word	0x3fdb6db6
 8017e88:	33333303 	.word	0x33333303
 8017e8c:	3fe33333 	.word	0x3fe33333
 8017e90:	e0000000 	.word	0xe0000000
 8017e94:	3feec709 	.word	0x3feec709
 8017e98:	dc3a03fd 	.word	0xdc3a03fd
 8017e9c:	3feec709 	.word	0x3feec709
 8017ea0:	145b01f5 	.word	0x145b01f5
 8017ea4:	be3e2fe0 	.word	0xbe3e2fe0
 8017ea8:	00000000 	.word	0x00000000
 8017eac:	3ff00000 	.word	0x3ff00000
 8017eb0:	7ff00000 	.word	0x7ff00000
 8017eb4:	43400000 	.word	0x43400000
 8017eb8:	0003988e 	.word	0x0003988e
 8017ebc:	000bb679 	.word	0x000bb679
 8017ec0:	08050a08 	.word	0x08050a08
 8017ec4:	3ff00000 	.word	0x3ff00000
 8017ec8:	40080000 	.word	0x40080000
 8017ecc:	08050a28 	.word	0x08050a28
 8017ed0:	08050a18 	.word	0x08050a18
 8017ed4:	a3b5      	add	r3, pc, #724	; (adr r3, 80181ac <__ieee754_pow+0xa54>)
 8017ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eda:	4640      	mov	r0, r8
 8017edc:	4649      	mov	r1, r9
 8017ede:	f7e8 fa05 	bl	80002ec <__adddf3>
 8017ee2:	4622      	mov	r2, r4
 8017ee4:	ec41 0b1a 	vmov	d10, r0, r1
 8017ee8:	462b      	mov	r3, r5
 8017eea:	4630      	mov	r0, r6
 8017eec:	4639      	mov	r1, r7
 8017eee:	f7e8 f9fb 	bl	80002e8 <__aeabi_dsub>
 8017ef2:	4602      	mov	r2, r0
 8017ef4:	460b      	mov	r3, r1
 8017ef6:	ec51 0b1a 	vmov	r0, r1, d10
 8017efa:	f7e8 fe3d 	bl	8000b78 <__aeabi_dcmpgt>
 8017efe:	2800      	cmp	r0, #0
 8017f00:	f47f ae04 	bne.w	8017b0c <__ieee754_pow+0x3b4>
 8017f04:	4aa4      	ldr	r2, [pc, #656]	; (8018198 <__ieee754_pow+0xa40>)
 8017f06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017f0a:	4293      	cmp	r3, r2
 8017f0c:	f340 8108 	ble.w	8018120 <__ieee754_pow+0x9c8>
 8017f10:	151b      	asrs	r3, r3, #20
 8017f12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8017f16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017f1a:	fa4a f303 	asr.w	r3, sl, r3
 8017f1e:	445b      	add	r3, fp
 8017f20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017f24:	4e9d      	ldr	r6, [pc, #628]	; (801819c <__ieee754_pow+0xa44>)
 8017f26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017f2a:	4116      	asrs	r6, r2
 8017f2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017f30:	2000      	movs	r0, #0
 8017f32:	ea23 0106 	bic.w	r1, r3, r6
 8017f36:	f1c2 0214 	rsb	r2, r2, #20
 8017f3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017f3e:	fa4a fa02 	asr.w	sl, sl, r2
 8017f42:	f1bb 0f00 	cmp.w	fp, #0
 8017f46:	4602      	mov	r2, r0
 8017f48:	460b      	mov	r3, r1
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	4629      	mov	r1, r5
 8017f4e:	bfb8      	it	lt
 8017f50:	f1ca 0a00 	rsblt	sl, sl, #0
 8017f54:	f7e8 f9c8 	bl	80002e8 <__aeabi_dsub>
 8017f58:	ec41 0b19 	vmov	d9, r0, r1
 8017f5c:	4642      	mov	r2, r8
 8017f5e:	464b      	mov	r3, r9
 8017f60:	ec51 0b19 	vmov	r0, r1, d9
 8017f64:	f7e8 f9c2 	bl	80002ec <__adddf3>
 8017f68:	a37b      	add	r3, pc, #492	; (adr r3, 8018158 <__ieee754_pow+0xa00>)
 8017f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f6e:	2000      	movs	r0, #0
 8017f70:	4604      	mov	r4, r0
 8017f72:	460d      	mov	r5, r1
 8017f74:	f7e8 fb70 	bl	8000658 <__aeabi_dmul>
 8017f78:	ec53 2b19 	vmov	r2, r3, d9
 8017f7c:	4606      	mov	r6, r0
 8017f7e:	460f      	mov	r7, r1
 8017f80:	4620      	mov	r0, r4
 8017f82:	4629      	mov	r1, r5
 8017f84:	f7e8 f9b0 	bl	80002e8 <__aeabi_dsub>
 8017f88:	4602      	mov	r2, r0
 8017f8a:	460b      	mov	r3, r1
 8017f8c:	4640      	mov	r0, r8
 8017f8e:	4649      	mov	r1, r9
 8017f90:	f7e8 f9aa 	bl	80002e8 <__aeabi_dsub>
 8017f94:	a372      	add	r3, pc, #456	; (adr r3, 8018160 <__ieee754_pow+0xa08>)
 8017f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f9a:	f7e8 fb5d 	bl	8000658 <__aeabi_dmul>
 8017f9e:	a372      	add	r3, pc, #456	; (adr r3, 8018168 <__ieee754_pow+0xa10>)
 8017fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fa4:	4680      	mov	r8, r0
 8017fa6:	4689      	mov	r9, r1
 8017fa8:	4620      	mov	r0, r4
 8017faa:	4629      	mov	r1, r5
 8017fac:	f7e8 fb54 	bl	8000658 <__aeabi_dmul>
 8017fb0:	4602      	mov	r2, r0
 8017fb2:	460b      	mov	r3, r1
 8017fb4:	4640      	mov	r0, r8
 8017fb6:	4649      	mov	r1, r9
 8017fb8:	f7e8 f998 	bl	80002ec <__adddf3>
 8017fbc:	4604      	mov	r4, r0
 8017fbe:	460d      	mov	r5, r1
 8017fc0:	4602      	mov	r2, r0
 8017fc2:	460b      	mov	r3, r1
 8017fc4:	4630      	mov	r0, r6
 8017fc6:	4639      	mov	r1, r7
 8017fc8:	f7e8 f990 	bl	80002ec <__adddf3>
 8017fcc:	4632      	mov	r2, r6
 8017fce:	463b      	mov	r3, r7
 8017fd0:	4680      	mov	r8, r0
 8017fd2:	4689      	mov	r9, r1
 8017fd4:	f7e8 f988 	bl	80002e8 <__aeabi_dsub>
 8017fd8:	4602      	mov	r2, r0
 8017fda:	460b      	mov	r3, r1
 8017fdc:	4620      	mov	r0, r4
 8017fde:	4629      	mov	r1, r5
 8017fe0:	f7e8 f982 	bl	80002e8 <__aeabi_dsub>
 8017fe4:	4642      	mov	r2, r8
 8017fe6:	4606      	mov	r6, r0
 8017fe8:	460f      	mov	r7, r1
 8017fea:	464b      	mov	r3, r9
 8017fec:	4640      	mov	r0, r8
 8017fee:	4649      	mov	r1, r9
 8017ff0:	f7e8 fb32 	bl	8000658 <__aeabi_dmul>
 8017ff4:	a35e      	add	r3, pc, #376	; (adr r3, 8018170 <__ieee754_pow+0xa18>)
 8017ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ffa:	4604      	mov	r4, r0
 8017ffc:	460d      	mov	r5, r1
 8017ffe:	f7e8 fb2b 	bl	8000658 <__aeabi_dmul>
 8018002:	a35d      	add	r3, pc, #372	; (adr r3, 8018178 <__ieee754_pow+0xa20>)
 8018004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018008:	f7e8 f96e 	bl	80002e8 <__aeabi_dsub>
 801800c:	4622      	mov	r2, r4
 801800e:	462b      	mov	r3, r5
 8018010:	f7e8 fb22 	bl	8000658 <__aeabi_dmul>
 8018014:	a35a      	add	r3, pc, #360	; (adr r3, 8018180 <__ieee754_pow+0xa28>)
 8018016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801801a:	f7e8 f967 	bl	80002ec <__adddf3>
 801801e:	4622      	mov	r2, r4
 8018020:	462b      	mov	r3, r5
 8018022:	f7e8 fb19 	bl	8000658 <__aeabi_dmul>
 8018026:	a358      	add	r3, pc, #352	; (adr r3, 8018188 <__ieee754_pow+0xa30>)
 8018028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802c:	f7e8 f95c 	bl	80002e8 <__aeabi_dsub>
 8018030:	4622      	mov	r2, r4
 8018032:	462b      	mov	r3, r5
 8018034:	f7e8 fb10 	bl	8000658 <__aeabi_dmul>
 8018038:	a355      	add	r3, pc, #340	; (adr r3, 8018190 <__ieee754_pow+0xa38>)
 801803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803e:	f7e8 f955 	bl	80002ec <__adddf3>
 8018042:	4622      	mov	r2, r4
 8018044:	462b      	mov	r3, r5
 8018046:	f7e8 fb07 	bl	8000658 <__aeabi_dmul>
 801804a:	4602      	mov	r2, r0
 801804c:	460b      	mov	r3, r1
 801804e:	4640      	mov	r0, r8
 8018050:	4649      	mov	r1, r9
 8018052:	f7e8 f949 	bl	80002e8 <__aeabi_dsub>
 8018056:	4604      	mov	r4, r0
 8018058:	460d      	mov	r5, r1
 801805a:	4602      	mov	r2, r0
 801805c:	460b      	mov	r3, r1
 801805e:	4640      	mov	r0, r8
 8018060:	4649      	mov	r1, r9
 8018062:	f7e8 faf9 	bl	8000658 <__aeabi_dmul>
 8018066:	2200      	movs	r2, #0
 8018068:	ec41 0b19 	vmov	d9, r0, r1
 801806c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018070:	4620      	mov	r0, r4
 8018072:	4629      	mov	r1, r5
 8018074:	f7e8 f938 	bl	80002e8 <__aeabi_dsub>
 8018078:	4602      	mov	r2, r0
 801807a:	460b      	mov	r3, r1
 801807c:	ec51 0b19 	vmov	r0, r1, d9
 8018080:	f7e8 fc14 	bl	80008ac <__aeabi_ddiv>
 8018084:	4632      	mov	r2, r6
 8018086:	4604      	mov	r4, r0
 8018088:	460d      	mov	r5, r1
 801808a:	463b      	mov	r3, r7
 801808c:	4640      	mov	r0, r8
 801808e:	4649      	mov	r1, r9
 8018090:	f7e8 fae2 	bl	8000658 <__aeabi_dmul>
 8018094:	4632      	mov	r2, r6
 8018096:	463b      	mov	r3, r7
 8018098:	f7e8 f928 	bl	80002ec <__adddf3>
 801809c:	4602      	mov	r2, r0
 801809e:	460b      	mov	r3, r1
 80180a0:	4620      	mov	r0, r4
 80180a2:	4629      	mov	r1, r5
 80180a4:	f7e8 f920 	bl	80002e8 <__aeabi_dsub>
 80180a8:	4642      	mov	r2, r8
 80180aa:	464b      	mov	r3, r9
 80180ac:	f7e8 f91c 	bl	80002e8 <__aeabi_dsub>
 80180b0:	460b      	mov	r3, r1
 80180b2:	4602      	mov	r2, r0
 80180b4:	493a      	ldr	r1, [pc, #232]	; (80181a0 <__ieee754_pow+0xa48>)
 80180b6:	2000      	movs	r0, #0
 80180b8:	f7e8 f916 	bl	80002e8 <__aeabi_dsub>
 80180bc:	ec41 0b10 	vmov	d0, r0, r1
 80180c0:	ee10 3a90 	vmov	r3, s1
 80180c4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80180c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80180cc:	da2b      	bge.n	8018126 <__ieee754_pow+0x9ce>
 80180ce:	4650      	mov	r0, sl
 80180d0:	f000 f966 	bl	80183a0 <scalbn>
 80180d4:	ec51 0b10 	vmov	r0, r1, d0
 80180d8:	ec53 2b18 	vmov	r2, r3, d8
 80180dc:	f7ff bbed 	b.w	80178ba <__ieee754_pow+0x162>
 80180e0:	4b30      	ldr	r3, [pc, #192]	; (80181a4 <__ieee754_pow+0xa4c>)
 80180e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80180e6:	429e      	cmp	r6, r3
 80180e8:	f77f af0c 	ble.w	8017f04 <__ieee754_pow+0x7ac>
 80180ec:	4b2e      	ldr	r3, [pc, #184]	; (80181a8 <__ieee754_pow+0xa50>)
 80180ee:	440b      	add	r3, r1
 80180f0:	4303      	orrs	r3, r0
 80180f2:	d009      	beq.n	8018108 <__ieee754_pow+0x9b0>
 80180f4:	ec51 0b18 	vmov	r0, r1, d8
 80180f8:	2200      	movs	r2, #0
 80180fa:	2300      	movs	r3, #0
 80180fc:	f7e8 fd1e 	bl	8000b3c <__aeabi_dcmplt>
 8018100:	3800      	subs	r0, #0
 8018102:	bf18      	it	ne
 8018104:	2001      	movne	r0, #1
 8018106:	e447      	b.n	8017998 <__ieee754_pow+0x240>
 8018108:	4622      	mov	r2, r4
 801810a:	462b      	mov	r3, r5
 801810c:	f7e8 f8ec 	bl	80002e8 <__aeabi_dsub>
 8018110:	4642      	mov	r2, r8
 8018112:	464b      	mov	r3, r9
 8018114:	f7e8 fd26 	bl	8000b64 <__aeabi_dcmpge>
 8018118:	2800      	cmp	r0, #0
 801811a:	f43f aef3 	beq.w	8017f04 <__ieee754_pow+0x7ac>
 801811e:	e7e9      	b.n	80180f4 <__ieee754_pow+0x99c>
 8018120:	f04f 0a00 	mov.w	sl, #0
 8018124:	e71a      	b.n	8017f5c <__ieee754_pow+0x804>
 8018126:	ec51 0b10 	vmov	r0, r1, d0
 801812a:	4619      	mov	r1, r3
 801812c:	e7d4      	b.n	80180d8 <__ieee754_pow+0x980>
 801812e:	491c      	ldr	r1, [pc, #112]	; (80181a0 <__ieee754_pow+0xa48>)
 8018130:	2000      	movs	r0, #0
 8018132:	f7ff bb30 	b.w	8017796 <__ieee754_pow+0x3e>
 8018136:	2000      	movs	r0, #0
 8018138:	2100      	movs	r1, #0
 801813a:	f7ff bb2c 	b.w	8017796 <__ieee754_pow+0x3e>
 801813e:	4630      	mov	r0, r6
 8018140:	4639      	mov	r1, r7
 8018142:	f7ff bb28 	b.w	8017796 <__ieee754_pow+0x3e>
 8018146:	9204      	str	r2, [sp, #16]
 8018148:	f7ff bb7a 	b.w	8017840 <__ieee754_pow+0xe8>
 801814c:	2300      	movs	r3, #0
 801814e:	f7ff bb64 	b.w	801781a <__ieee754_pow+0xc2>
 8018152:	bf00      	nop
 8018154:	f3af 8000 	nop.w
 8018158:	00000000 	.word	0x00000000
 801815c:	3fe62e43 	.word	0x3fe62e43
 8018160:	fefa39ef 	.word	0xfefa39ef
 8018164:	3fe62e42 	.word	0x3fe62e42
 8018168:	0ca86c39 	.word	0x0ca86c39
 801816c:	be205c61 	.word	0xbe205c61
 8018170:	72bea4d0 	.word	0x72bea4d0
 8018174:	3e663769 	.word	0x3e663769
 8018178:	c5d26bf1 	.word	0xc5d26bf1
 801817c:	3ebbbd41 	.word	0x3ebbbd41
 8018180:	af25de2c 	.word	0xaf25de2c
 8018184:	3f11566a 	.word	0x3f11566a
 8018188:	16bebd93 	.word	0x16bebd93
 801818c:	3f66c16c 	.word	0x3f66c16c
 8018190:	5555553e 	.word	0x5555553e
 8018194:	3fc55555 	.word	0x3fc55555
 8018198:	3fe00000 	.word	0x3fe00000
 801819c:	000fffff 	.word	0x000fffff
 80181a0:	3ff00000 	.word	0x3ff00000
 80181a4:	4090cbff 	.word	0x4090cbff
 80181a8:	3f6f3400 	.word	0x3f6f3400
 80181ac:	652b82fe 	.word	0x652b82fe
 80181b0:	3c971547 	.word	0x3c971547

080181b4 <__ieee754_sqrt>:
 80181b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181b8:	ec55 4b10 	vmov	r4, r5, d0
 80181bc:	4e55      	ldr	r6, [pc, #340]	; (8018314 <__ieee754_sqrt+0x160>)
 80181be:	43ae      	bics	r6, r5
 80181c0:	ee10 0a10 	vmov	r0, s0
 80181c4:	ee10 3a10 	vmov	r3, s0
 80181c8:	462a      	mov	r2, r5
 80181ca:	4629      	mov	r1, r5
 80181cc:	d110      	bne.n	80181f0 <__ieee754_sqrt+0x3c>
 80181ce:	ee10 2a10 	vmov	r2, s0
 80181d2:	462b      	mov	r3, r5
 80181d4:	f7e8 fa40 	bl	8000658 <__aeabi_dmul>
 80181d8:	4602      	mov	r2, r0
 80181da:	460b      	mov	r3, r1
 80181dc:	4620      	mov	r0, r4
 80181de:	4629      	mov	r1, r5
 80181e0:	f7e8 f884 	bl	80002ec <__adddf3>
 80181e4:	4604      	mov	r4, r0
 80181e6:	460d      	mov	r5, r1
 80181e8:	ec45 4b10 	vmov	d0, r4, r5
 80181ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181f0:	2d00      	cmp	r5, #0
 80181f2:	dc10      	bgt.n	8018216 <__ieee754_sqrt+0x62>
 80181f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80181f8:	4330      	orrs	r0, r6
 80181fa:	d0f5      	beq.n	80181e8 <__ieee754_sqrt+0x34>
 80181fc:	b15d      	cbz	r5, 8018216 <__ieee754_sqrt+0x62>
 80181fe:	ee10 2a10 	vmov	r2, s0
 8018202:	462b      	mov	r3, r5
 8018204:	ee10 0a10 	vmov	r0, s0
 8018208:	f7e8 f86e 	bl	80002e8 <__aeabi_dsub>
 801820c:	4602      	mov	r2, r0
 801820e:	460b      	mov	r3, r1
 8018210:	f7e8 fb4c 	bl	80008ac <__aeabi_ddiv>
 8018214:	e7e6      	b.n	80181e4 <__ieee754_sqrt+0x30>
 8018216:	1512      	asrs	r2, r2, #20
 8018218:	d074      	beq.n	8018304 <__ieee754_sqrt+0x150>
 801821a:	07d4      	lsls	r4, r2, #31
 801821c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018220:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018228:	bf5e      	ittt	pl
 801822a:	0fda      	lsrpl	r2, r3, #31
 801822c:	005b      	lslpl	r3, r3, #1
 801822e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8018232:	2400      	movs	r4, #0
 8018234:	0fda      	lsrs	r2, r3, #31
 8018236:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801823a:	107f      	asrs	r7, r7, #1
 801823c:	005b      	lsls	r3, r3, #1
 801823e:	2516      	movs	r5, #22
 8018240:	4620      	mov	r0, r4
 8018242:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018246:	1886      	adds	r6, r0, r2
 8018248:	428e      	cmp	r6, r1
 801824a:	bfde      	ittt	le
 801824c:	1b89      	suble	r1, r1, r6
 801824e:	18b0      	addle	r0, r6, r2
 8018250:	18a4      	addle	r4, r4, r2
 8018252:	0049      	lsls	r1, r1, #1
 8018254:	3d01      	subs	r5, #1
 8018256:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801825a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801825e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018262:	d1f0      	bne.n	8018246 <__ieee754_sqrt+0x92>
 8018264:	462a      	mov	r2, r5
 8018266:	f04f 0e20 	mov.w	lr, #32
 801826a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801826e:	4281      	cmp	r1, r0
 8018270:	eb06 0c05 	add.w	ip, r6, r5
 8018274:	dc02      	bgt.n	801827c <__ieee754_sqrt+0xc8>
 8018276:	d113      	bne.n	80182a0 <__ieee754_sqrt+0xec>
 8018278:	459c      	cmp	ip, r3
 801827a:	d811      	bhi.n	80182a0 <__ieee754_sqrt+0xec>
 801827c:	f1bc 0f00 	cmp.w	ip, #0
 8018280:	eb0c 0506 	add.w	r5, ip, r6
 8018284:	da43      	bge.n	801830e <__ieee754_sqrt+0x15a>
 8018286:	2d00      	cmp	r5, #0
 8018288:	db41      	blt.n	801830e <__ieee754_sqrt+0x15a>
 801828a:	f100 0801 	add.w	r8, r0, #1
 801828e:	1a09      	subs	r1, r1, r0
 8018290:	459c      	cmp	ip, r3
 8018292:	bf88      	it	hi
 8018294:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018298:	eba3 030c 	sub.w	r3, r3, ip
 801829c:	4432      	add	r2, r6
 801829e:	4640      	mov	r0, r8
 80182a0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80182a4:	f1be 0e01 	subs.w	lr, lr, #1
 80182a8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80182ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80182b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80182b4:	d1db      	bne.n	801826e <__ieee754_sqrt+0xba>
 80182b6:	430b      	orrs	r3, r1
 80182b8:	d006      	beq.n	80182c8 <__ieee754_sqrt+0x114>
 80182ba:	1c50      	adds	r0, r2, #1
 80182bc:	bf13      	iteet	ne
 80182be:	3201      	addne	r2, #1
 80182c0:	3401      	addeq	r4, #1
 80182c2:	4672      	moveq	r2, lr
 80182c4:	f022 0201 	bicne.w	r2, r2, #1
 80182c8:	1063      	asrs	r3, r4, #1
 80182ca:	0852      	lsrs	r2, r2, #1
 80182cc:	07e1      	lsls	r1, r4, #31
 80182ce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80182d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80182d6:	bf48      	it	mi
 80182d8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80182dc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80182e0:	4614      	mov	r4, r2
 80182e2:	e781      	b.n	80181e8 <__ieee754_sqrt+0x34>
 80182e4:	0ad9      	lsrs	r1, r3, #11
 80182e6:	3815      	subs	r0, #21
 80182e8:	055b      	lsls	r3, r3, #21
 80182ea:	2900      	cmp	r1, #0
 80182ec:	d0fa      	beq.n	80182e4 <__ieee754_sqrt+0x130>
 80182ee:	02cd      	lsls	r5, r1, #11
 80182f0:	d50a      	bpl.n	8018308 <__ieee754_sqrt+0x154>
 80182f2:	f1c2 0420 	rsb	r4, r2, #32
 80182f6:	fa23 f404 	lsr.w	r4, r3, r4
 80182fa:	1e55      	subs	r5, r2, #1
 80182fc:	4093      	lsls	r3, r2
 80182fe:	4321      	orrs	r1, r4
 8018300:	1b42      	subs	r2, r0, r5
 8018302:	e78a      	b.n	801821a <__ieee754_sqrt+0x66>
 8018304:	4610      	mov	r0, r2
 8018306:	e7f0      	b.n	80182ea <__ieee754_sqrt+0x136>
 8018308:	0049      	lsls	r1, r1, #1
 801830a:	3201      	adds	r2, #1
 801830c:	e7ef      	b.n	80182ee <__ieee754_sqrt+0x13a>
 801830e:	4680      	mov	r8, r0
 8018310:	e7bd      	b.n	801828e <__ieee754_sqrt+0xda>
 8018312:	bf00      	nop
 8018314:	7ff00000 	.word	0x7ff00000

08018318 <with_errno>:
 8018318:	b570      	push	{r4, r5, r6, lr}
 801831a:	4604      	mov	r4, r0
 801831c:	460d      	mov	r5, r1
 801831e:	4616      	mov	r6, r2
 8018320:	f7fa f840 	bl	80123a4 <__errno>
 8018324:	4629      	mov	r1, r5
 8018326:	6006      	str	r6, [r0, #0]
 8018328:	4620      	mov	r0, r4
 801832a:	bd70      	pop	{r4, r5, r6, pc}

0801832c <xflow>:
 801832c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801832e:	4614      	mov	r4, r2
 8018330:	461d      	mov	r5, r3
 8018332:	b108      	cbz	r0, 8018338 <xflow+0xc>
 8018334:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018338:	e9cd 2300 	strd	r2, r3, [sp]
 801833c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018340:	4620      	mov	r0, r4
 8018342:	4629      	mov	r1, r5
 8018344:	f7e8 f988 	bl	8000658 <__aeabi_dmul>
 8018348:	2222      	movs	r2, #34	; 0x22
 801834a:	b003      	add	sp, #12
 801834c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018350:	f7ff bfe2 	b.w	8018318 <with_errno>

08018354 <__math_uflow>:
 8018354:	b508      	push	{r3, lr}
 8018356:	2200      	movs	r2, #0
 8018358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801835c:	f7ff ffe6 	bl	801832c <xflow>
 8018360:	ec41 0b10 	vmov	d0, r0, r1
 8018364:	bd08      	pop	{r3, pc}

08018366 <__math_oflow>:
 8018366:	b508      	push	{r3, lr}
 8018368:	2200      	movs	r2, #0
 801836a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801836e:	f7ff ffdd 	bl	801832c <xflow>
 8018372:	ec41 0b10 	vmov	d0, r0, r1
 8018376:	bd08      	pop	{r3, pc}

08018378 <fabs>:
 8018378:	ec51 0b10 	vmov	r0, r1, d0
 801837c:	ee10 2a10 	vmov	r2, s0
 8018380:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018384:	ec43 2b10 	vmov	d0, r2, r3
 8018388:	4770      	bx	lr

0801838a <finite>:
 801838a:	b082      	sub	sp, #8
 801838c:	ed8d 0b00 	vstr	d0, [sp]
 8018390:	9801      	ldr	r0, [sp, #4]
 8018392:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8018396:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801839a:	0fc0      	lsrs	r0, r0, #31
 801839c:	b002      	add	sp, #8
 801839e:	4770      	bx	lr

080183a0 <scalbn>:
 80183a0:	b570      	push	{r4, r5, r6, lr}
 80183a2:	ec55 4b10 	vmov	r4, r5, d0
 80183a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80183aa:	4606      	mov	r6, r0
 80183ac:	462b      	mov	r3, r5
 80183ae:	b99a      	cbnz	r2, 80183d8 <scalbn+0x38>
 80183b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80183b4:	4323      	orrs	r3, r4
 80183b6:	d036      	beq.n	8018426 <scalbn+0x86>
 80183b8:	4b39      	ldr	r3, [pc, #228]	; (80184a0 <scalbn+0x100>)
 80183ba:	4629      	mov	r1, r5
 80183bc:	ee10 0a10 	vmov	r0, s0
 80183c0:	2200      	movs	r2, #0
 80183c2:	f7e8 f949 	bl	8000658 <__aeabi_dmul>
 80183c6:	4b37      	ldr	r3, [pc, #220]	; (80184a4 <scalbn+0x104>)
 80183c8:	429e      	cmp	r6, r3
 80183ca:	4604      	mov	r4, r0
 80183cc:	460d      	mov	r5, r1
 80183ce:	da10      	bge.n	80183f2 <scalbn+0x52>
 80183d0:	a32b      	add	r3, pc, #172	; (adr r3, 8018480 <scalbn+0xe0>)
 80183d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d6:	e03a      	b.n	801844e <scalbn+0xae>
 80183d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80183dc:	428a      	cmp	r2, r1
 80183de:	d10c      	bne.n	80183fa <scalbn+0x5a>
 80183e0:	ee10 2a10 	vmov	r2, s0
 80183e4:	4620      	mov	r0, r4
 80183e6:	4629      	mov	r1, r5
 80183e8:	f7e7 ff80 	bl	80002ec <__adddf3>
 80183ec:	4604      	mov	r4, r0
 80183ee:	460d      	mov	r5, r1
 80183f0:	e019      	b.n	8018426 <scalbn+0x86>
 80183f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80183f6:	460b      	mov	r3, r1
 80183f8:	3a36      	subs	r2, #54	; 0x36
 80183fa:	4432      	add	r2, r6
 80183fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018400:	428a      	cmp	r2, r1
 8018402:	dd08      	ble.n	8018416 <scalbn+0x76>
 8018404:	2d00      	cmp	r5, #0
 8018406:	a120      	add	r1, pc, #128	; (adr r1, 8018488 <scalbn+0xe8>)
 8018408:	e9d1 0100 	ldrd	r0, r1, [r1]
 801840c:	da1c      	bge.n	8018448 <scalbn+0xa8>
 801840e:	a120      	add	r1, pc, #128	; (adr r1, 8018490 <scalbn+0xf0>)
 8018410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018414:	e018      	b.n	8018448 <scalbn+0xa8>
 8018416:	2a00      	cmp	r2, #0
 8018418:	dd08      	ble.n	801842c <scalbn+0x8c>
 801841a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801841e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018422:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018426:	ec45 4b10 	vmov	d0, r4, r5
 801842a:	bd70      	pop	{r4, r5, r6, pc}
 801842c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018430:	da19      	bge.n	8018466 <scalbn+0xc6>
 8018432:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018436:	429e      	cmp	r6, r3
 8018438:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801843c:	dd0a      	ble.n	8018454 <scalbn+0xb4>
 801843e:	a112      	add	r1, pc, #72	; (adr r1, 8018488 <scalbn+0xe8>)
 8018440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d1e2      	bne.n	801840e <scalbn+0x6e>
 8018448:	a30f      	add	r3, pc, #60	; (adr r3, 8018488 <scalbn+0xe8>)
 801844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801844e:	f7e8 f903 	bl	8000658 <__aeabi_dmul>
 8018452:	e7cb      	b.n	80183ec <scalbn+0x4c>
 8018454:	a10a      	add	r1, pc, #40	; (adr r1, 8018480 <scalbn+0xe0>)
 8018456:	e9d1 0100 	ldrd	r0, r1, [r1]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d0b8      	beq.n	80183d0 <scalbn+0x30>
 801845e:	a10e      	add	r1, pc, #56	; (adr r1, 8018498 <scalbn+0xf8>)
 8018460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018464:	e7b4      	b.n	80183d0 <scalbn+0x30>
 8018466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801846a:	3236      	adds	r2, #54	; 0x36
 801846c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018470:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018474:	4620      	mov	r0, r4
 8018476:	4b0c      	ldr	r3, [pc, #48]	; (80184a8 <scalbn+0x108>)
 8018478:	2200      	movs	r2, #0
 801847a:	e7e8      	b.n	801844e <scalbn+0xae>
 801847c:	f3af 8000 	nop.w
 8018480:	c2f8f359 	.word	0xc2f8f359
 8018484:	01a56e1f 	.word	0x01a56e1f
 8018488:	8800759c 	.word	0x8800759c
 801848c:	7e37e43c 	.word	0x7e37e43c
 8018490:	8800759c 	.word	0x8800759c
 8018494:	fe37e43c 	.word	0xfe37e43c
 8018498:	c2f8f359 	.word	0xc2f8f359
 801849c:	81a56e1f 	.word	0x81a56e1f
 80184a0:	43500000 	.word	0x43500000
 80184a4:	ffff3cb0 	.word	0xffff3cb0
 80184a8:	3c900000 	.word	0x3c900000

080184ac <_close>:
 80184ac:	4b02      	ldr	r3, [pc, #8]	; (80184b8 <_close+0xc>)
 80184ae:	2258      	movs	r2, #88	; 0x58
 80184b0:	601a      	str	r2, [r3, #0]
 80184b2:	f04f 30ff 	mov.w	r0, #4294967295
 80184b6:	4770      	bx	lr
 80184b8:	20009aac 	.word	0x20009aac

080184bc <_fstat>:
 80184bc:	4b02      	ldr	r3, [pc, #8]	; (80184c8 <_fstat+0xc>)
 80184be:	2258      	movs	r2, #88	; 0x58
 80184c0:	601a      	str	r2, [r3, #0]
 80184c2:	f04f 30ff 	mov.w	r0, #4294967295
 80184c6:	4770      	bx	lr
 80184c8:	20009aac 	.word	0x20009aac

080184cc <_getpid>:
 80184cc:	4b02      	ldr	r3, [pc, #8]	; (80184d8 <_getpid+0xc>)
 80184ce:	2258      	movs	r2, #88	; 0x58
 80184d0:	601a      	str	r2, [r3, #0]
 80184d2:	f04f 30ff 	mov.w	r0, #4294967295
 80184d6:	4770      	bx	lr
 80184d8:	20009aac 	.word	0x20009aac

080184dc <_isatty>:
 80184dc:	4b02      	ldr	r3, [pc, #8]	; (80184e8 <_isatty+0xc>)
 80184de:	2258      	movs	r2, #88	; 0x58
 80184e0:	601a      	str	r2, [r3, #0]
 80184e2:	2000      	movs	r0, #0
 80184e4:	4770      	bx	lr
 80184e6:	bf00      	nop
 80184e8:	20009aac 	.word	0x20009aac

080184ec <_kill>:
 80184ec:	4b02      	ldr	r3, [pc, #8]	; (80184f8 <_kill+0xc>)
 80184ee:	2258      	movs	r2, #88	; 0x58
 80184f0:	601a      	str	r2, [r3, #0]
 80184f2:	f04f 30ff 	mov.w	r0, #4294967295
 80184f6:	4770      	bx	lr
 80184f8:	20009aac 	.word	0x20009aac

080184fc <_lseek>:
 80184fc:	4b02      	ldr	r3, [pc, #8]	; (8018508 <_lseek+0xc>)
 80184fe:	2258      	movs	r2, #88	; 0x58
 8018500:	601a      	str	r2, [r3, #0]
 8018502:	f04f 30ff 	mov.w	r0, #4294967295
 8018506:	4770      	bx	lr
 8018508:	20009aac 	.word	0x20009aac

0801850c <_read>:
 801850c:	4b02      	ldr	r3, [pc, #8]	; (8018518 <_read+0xc>)
 801850e:	2258      	movs	r2, #88	; 0x58
 8018510:	601a      	str	r2, [r3, #0]
 8018512:	f04f 30ff 	mov.w	r0, #4294967295
 8018516:	4770      	bx	lr
 8018518:	20009aac 	.word	0x20009aac

0801851c <_write>:
 801851c:	4b02      	ldr	r3, [pc, #8]	; (8018528 <_write+0xc>)
 801851e:	2258      	movs	r2, #88	; 0x58
 8018520:	601a      	str	r2, [r3, #0]
 8018522:	f04f 30ff 	mov.w	r0, #4294967295
 8018526:	4770      	bx	lr
 8018528:	20009aac 	.word	0x20009aac

0801852c <_exit>:
 801852c:	e7fe      	b.n	801852c <_exit>
	...

08018530 <_init>:
 8018530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018532:	bf00      	nop
 8018534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018536:	bc08      	pop	{r3}
 8018538:	469e      	mov	lr, r3
 801853a:	4770      	bx	lr

0801853c <_fini>:
 801853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801853e:	bf00      	nop
 8018540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018542:	bc08      	pop	{r3}
 8018544:	469e      	mov	lr, r3
 8018546:	4770      	bx	lr
